ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C A7 13        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               veral1vscrolllo	= verareg+$19
000810  2               veral1vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               
000839  1               .include "layers.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Layers code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .scope Layers
000839  2               HSCROLL = 0
000839  2               VSCROLL = 2
000839  2               
000839  2               ; define size of tiles for layer
000839  2               .macro VTILEMODE layer, mode
000839  2               	lda veral0tilebase + layer * 7
000839  2               	and #VERA_CLEAR_TILE_SIZE
000839  2               	ora #mode
000839  2               	sta veral0tilebase + layer * 7
000839  2               .endmacro
000839  2               
000839  2               ; define number of tiles in the map
000839  2               .macro VCONFIG_TILES layer,mode
000839  2               	lda veral0config + layer * 7
000839  2               	and #VERA_CONFIG_CLEAR_TILES
000839  2               	ora #mode
000839  2               	sta veral0config + layer * 7
000839  2               .endmacro
000839  2               
000839  2               ; define number of colors for the map
000839  2               .macro VCONFIG_DEPTH layer,mode
000839  2               	lda veral0config + layer * 7
000839  2               	and #VERA_CONFIG_CLEAR_DEPTH
000839  2               	ora #mode
000839  2               	sta veral0config + layer * 7
000839  2               .endmacro
000839  2               
000839  2               ; set the tilebase for the layer
000839  2               .macro VTILEBASE layer,addr
000839  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000839  2               	and #VERA_TILEBASE_CLEAR_ADR
000839  2               	ora #(addr >> 9)
000839  2               	sta veral0tilebase + layer * 7
000839  2               .endmacro
000839  2               
000839  2               ; set the mapbase for the layer
000839  2               .macro VMAPBASE layer,addr
000839  2                   lda #(addr >> 9)         ; store 2 last bits
000839  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000839  2               .endmacro
000839  2               
000839  2               ;
000839  2               ; increase layer scrolling with a 8bits limit
000839  2               ;	X: : 0 = horizontal
000839  2               ;	   : 2 = vertical
000839  2               ;	Y: limit
000839  2               ;
000839  2               scroll_inc_8:
000839  2  84 02        	sty r0L
00083B  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00083E  2  C5 02        	cmp r0L
000840  2  F0 0C        	beq @noscroll
000842  2               @scrollinc:
000842  2  1A           	inc
000843  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000846  2  D0 03        	bne @scrolled
000848  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00084B  2               @scrolled:
00084B  2  A9 01        	lda #01		; clear ZERO => scrolled
00084D  2  60           	rts
00084E  2               @noscroll:
00084E  2  A9 00        	lda #00		; set ZERO => noscroll
000850  2  60           	rts
000851  2               
000851  2               ;
000851  2               ; increase layer scrolling with a 16bits limit
000851  2               ;	X: : 0 = horizontal
000851  2               ;	   : 2 = vertical
000851  2               ;	r0L: limit
000851  2               ;
000851  2               scroll_inc_16:
000851  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000854  2  C5 02        	cmp r0L
000856  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
000858  2  A8           	tay
000859  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
00085C  2  C5 03        	cmp r0H
00085E  2  F0 0D        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
000860  2  98           	tya
000861  2               @scrollinc:
000861  2  1A           	inc
000862  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000865  2  D0 03        	bne @scrolled
000867  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00086A  2               @scrolled:
00086A  2  A9 01        	lda #01	; clear ZERO => scrolled
00086C  2  60           	rts
00086D  2               @noscroll:
00086D  2  A9 00        	lda #00	; set ZERO => noscroll
00086F  2  60           	rts
000870  2               
000870  2               ; increase a layer scroll offset but do NOT overlap
000870  2               .macro VSCROLL_INC direction,limit
000870  2               .if limit > 255
000870  2               	LOAD_r0 limit
000870  2               	ldx #direction
000870  2               	jsr Layers::scroll_inc_16
000870  2               .else
000870  2               	ldy #limit
000870  2               	ldx #direction
000870  2               	jsr Layers::scroll_inc_8
000870  2               .endif
000870  2               .endmacro
000870  2               
000870  2               ;
000870  2               ;
000870  2               ; decrease a layer scroll offset
000870  2               ;	X : 0 = horizontal
000870  2               ;	  : 2 = vertical
000870  2               ;
000870  2               scroll_dec:
000870  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000873  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
000875  2  3A           	dec
000876  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000879  2  80 0E        	bra @scrolled
00087B  2               @scrollHI:
00087B  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
00087E  2  F0 0C        	beq @noscroll		; 0000 => no scrolling
000880  2  3A           	dec
000881  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000884  2  88           	dey
000885  2  98           	tya
000886  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
000889  2               
000889  2               @scrolled:
000889  2  A9 01        	lda #01		; clear ZERO => scrolled
00088B  2  60           	rts
00088C  2               
00088C  2               @noscroll:
00088C  2  A9 00        	lda #00		; set ZERO => noscroll
00088E  2  60           	rts
00088F  2               
00088F  2               ;
00088F  2               ; force layer0 scrolling to be half of the layer1 scrolling
00088F  2               ;
00088F  2               scroll_l0:
00088F  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
000892  2  4A           	lsr
000893  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
000896  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000899  2  6A           	ror
00089A  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
00089D  2  60           	rts
00089E  2               .endscope
00089E  2               
00089E  1               .include "sprites.asm"
00089E  2               ;-----------------------------------------------------------------------------
00089E  2               ;/////////////////////////////////////////////////////////////////////////////
00089E  2               ; START Sprite code
00089E  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00089E  2               ;-----------------------------------------------------------------------------
00089E  2               
00089E  2               .struct VSPRITE
00089E  2               	address125 .byte
00089E  2               	mode_xxx_address1613 .byte
00089E  2               	x70 .byte
00089E  2               	x98 .byte
00089E  2               	y70 .byte
00089E  2               	y98 .byte
00089E  2               	collision_zdepth_vflip_hflip .byte
00089E  2               	height_width_offset .byte
00089E  2               .endstruct
00089E  2               
00089E  2               .scope Sprite
00089E  2               
00089E  2  xx xx xx xx  sprites: .res 256
0008A2  2  xx xx xx xx  
0008A6  2  xx xx xx xx  
00099E  2               
00099E  2               ;
00099E  2               ; create a table with the VERA @addr for each sprite
00099E  2               ;
00099E  2               init_addr_table:
00099E  2               	; all sprites are availble but ZERO (reserved player)
00099E  2  A2 FF        	ldx #$ff
0009A0  2               :
0009A0  2  9E 9E 08     	stz sprites,X
0009A3  2  CA           	dex
0009A4  2  D0 FA        	bne :-
0009A6  2  A9 01        	lda #01
0009A8  2  8D 9E 08     	sta sprites
0009AB  2               
0009AB  2               	; start of the sprites in VERA memory
0009AB  2  A9 00        	lda #<vram_sprd
0009AD  2  85 02        	sta r0L
0009AF  2  A9 FC        	lda #>vram_sprd
0009B1  2  85 03        	sta r0H
0009B3  2               
0009B3  2  A2 80        	ldx #128
0009B5  2  A0 00        	ldy #0
0009B7  2                @loop:
0009B7  2  A5 03        	lda r0H
0009B9  2  99 82 15     	sta sprites_table,y
0009BC  2  C8           	iny
0009BD  2  A5 02        	lda r0L
0009BF  2  99 82 15     	sta sprites_table,y
0009C2  2  C8           	iny
0009C3  2               
0009C3  2  18           	clc
0009C4  2  A5 02        	lda r0L
0009C6  2  69 08        	adc #8
0009C8  2  85 02        	sta r0L
0009CA  2  A5 03        	lda r0H
0009CC  2  69 00        	adc #0
0009CE  2  85 03        	sta r0H	; move to next sprite
0009D0  2               
0009D0  2  CA           	dex
0009D1  2  D0 E4        	bne @loop
0009D3  2               
0009D3  2  60           	rts
0009D4  2               
0009D4  2               ;************************************************
0009D4  2               ; get a new available vera sprite
0009D4  2               ;	output: X = index of the vera sprite
0009D4  2               ;			0 = no sprite available
0009D4  2               ;
0009D4  2               new:
0009D4  2  A2 01        	ldx #$01
0009D6  2               :
0009D6  2  BD 9E 08     	lda sprites,x
0009D9  2  F0 03        	beq @return
0009DB  2  E8           	inx
0009DC  2  D0 F8        	bne :-
0009DE  2               @return:
0009DE  2  A9 01        	lda #01
0009E0  2  9D 9E 08     	sta sprites,x
0009E3  2  60           	rts
0009E4  2               
0009E4  2               ;
0009E4  2               ; the the VERA memory pointer to sprite Y + attribute X
0009E4  2               ;	Y = sprite index
0009E4  2               ;	X = attribute offset
0009E4  2               ;
0009E4  2               vram:
0009E4  2  DA           	phx			; save X on the stack
0009E5  2               
0009E5  2  98           	tya			; index of the sprite
0009E6  2  0A           	asl
0009E7  2  A8           	tay			; index of the address of the sprite (y*2)
0009E8  2               
0009E8  2  A9 00        	lda #0
0009EA  2  8D 25 9F     	sta veractl
0009ED  2  A9 11        	lda #<(vram_sprd >> 16) | $10
0009EF  2  8D 22 9F     	sta verahi
0009F2  2  B9 82 15     	lda sprites_table, y
0009F5  2  8D 21 9F     	sta veramid
0009F8  2  C8           	iny
0009F9  2  BA           	tsx
0009FA  2  BD 01 01     	lda $0101,x	; reload X from the stack
0009FD  2  79 82 15     	adc sprites_table, y
000A00  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000A03  2  FA           	plx
000A04  2  60           	rts
000A05  2               
000A05  2               ;************************************************
000A05  2               ; configure the sprite
000A05  2               ;	input: Y = sprite index
000A05  2               ;		   X = sprite size :
000A05  2               ;			r0 = vram @ of the sprite data
000A05  2               ;
000A05  2               load:
000A05  2  86 30        	stx $30
000A07  2  20 3D 0A     	jsr set_bitmap
000A0A  2               
000A0A  2  9C 23 9F     	stz veradat					; x = 0
000A0D  2  9C 23 9F     	stz veradat
000A10  2  9C 23 9F     	stz veradat					; y = 0
000A13  2  9C 23 9F     	stz veradat
000A16  2  A9 00        	lda #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000A18  2  8D 23 9F     	sta veradat
000A1B  2  A5 30        	lda $30						; 32x32 sprite
000A1D  2  8D 23 9F     	sta veradat
000A20  2  60           	rts
000A21  2               
000A21  2               ;************************************************
000A21  2               ; configure full veram memory (16:0) into optimized one (12:5)
000A21  2               ;	input: r0 = vram @ of the sprite data
000A21  2               ;	output: r1
000A21  2               ;
000A21  2               vram_to_16_5:
000A21  2               	; load full VERA memory (12:0) into R0
000A21  2  A5 02        	lda r0L
000A23  2  85 04        	sta r1L
000A25  2  A5 03        	lda r0H
000A27  2  85 05        	sta r1H
000A29  2               
000A29  2               	; convert full addr to vera mode (bit shiting >> 5)
000A29  2  A5 05        	lda r1H
000A2B  2  4A           	lsr
000A2C  2  66 04        	ror r1L
000A2E  2  4A           	lsr
000A2F  2  66 04        	ror r1L
000A31  2  4A           	lsr
000A32  2  66 04        	ror r1L
000A34  2  4A           	lsr
000A35  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000A37  2  4A           	lsr
000A38  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000A3A  2  85 05        	sta r1H
000A3C  2  60           	rts
000A3D  2               
000A3D  2               ;
000A3D  2               ; change the address of the bitmap for the sprite
000A3D  2               ;	Y = sprite index
000A3D  2               ;	r0 = vera memory (12:5)
000A3D  2               ;
000A3D  2               set_bitmap:
000A3D  2  A2 00        	ldx #VSPRITE::address125
000A3F  2  20 E4 09     	jsr vram			; set very pointer to the address of the bitmap
000A42  2               
000A42  2  A5 02        	lda r0L
000A44  2  8D 23 9F     	sta veradat
000A47  2  A5 03        	lda r0H
000A49  2  09 80        	ora #$80						; M = 8 bits
000A4B  2  8D 23 9F     	sta veradat
000A4E  2               
000A4E  2  60           	rts
000A4F  2               ;
000A4F  2               ; change the display byte for a sprite
000A4F  2               ;	Y = sprite index
000A4F  2               ;	X = display value to set
000A4F  2               ;
000A4F  2               display:
000A4F  2  86 02        	stx r0L		; save X for later
000A51  2               
000A51  2               	; set vram memory on the X sprite
000A51  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000A53  2  20 E4 09     	jsr vram
000A56  2               
000A56  2  A5 02        	lda r0L
000A58  2  8D 23 9F     	sta veradat
000A5B  2  60           	rts
000A5C  2               
000A5C  2               ;
000A5C  2               ; define position of sprite
000A5C  2               ;	Y = sprite index
000A5C  2               ;	r0 = addr of word X & word Y
000A5C  2               ;
000A5C  2               position:
000A5C  2               	; set vram memory on the X sprite
000A5C  2  A2 02        	ldx #VSPRITE::x70
000A5E  2  20 E4 09     	jsr vram
000A61  2               
000A61  2  A0 01        	ldy #1
000A63  2  B2 02        	lda (r0L)
000A65  2  8D 23 9F     	sta veradat
000A68  2  B1 02        	lda (r0L),y
000A6A  2  8D 23 9F     	sta veradat
000A6D  2  C8           	iny
000A6E  2  B1 02        	lda (r0L),y
000A70  2  8D 23 9F     	sta veradat
000A73  2  C8           	iny
000A74  2  B1 02        	lda (r0L),y
000A76  2  8D 23 9F     	sta veradat
000A79  2  60           	rts
000A7A  2               
000A7A  2               ;
000A7A  2               ; Change the flipping of a sprite
000A7A  2               ;	Y = sprite index
000A7A  2               ;	A = value to set
000A7A  2               ;
000A7A  2               set_flip:
000A7A  2  85 30        	sta $30
000A7C  2  84 31        	sty $31
000A7E  2               
000A7E  2               	; set vram memory on the X sprite
000A7E  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000A80  2  20 E4 09     	jsr vram
000A83  2               
000A83  2  AD 23 9F     	lda veradat				;get current value
000A86  2  29 FC        	and #SPRITE_FLIP_CLEAR
000A88  2  05 30        	ora $30					; change only the flip value
000A8A  2  85 30        	sta $30
000A8C  2               
000A8C  2  A4 31        	ldy $31
000A8E  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000A90  2  20 E4 09     	jsr vram
000A93  2  A5 30        	lda $30
000A95  2  8D 23 9F     	sta veradat
000A98  2  60           	rts
000A99  2               .endscope
000A99  2               
000A99  1               .include "player.asm"
000A99  2               ;-----------------------------------------------------------------------------
000A99  2               ;/////////////////////////////////////////////////////////////////////////////
000A99  2               ; START player code
000A99  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000A99  2               ;-----------------------------------------------------------------------------
000A99  2               
000A99  2               PLAYER_SPRITE_ANIMATION = 3
000A99  2               
000A99  2               JUMP_LO_TICKS = 10
000A99  2               JUMP_HI_TICKS = 2
000A99  2               FALL_LO_TICKS = 8
000A99  2               FALL_HI_TICKS = 2
000A99  2               
000A99  2               .enum
000A99  2               	STATUS_WALKING_IDLE
000A99  2               	STATUS_WALKING
000A99  2               	STATUS_CLIMBING
000A99  2               	STATUS_CLIMBING_IDLE
000A99  2               	STATUS_FALLING
000A99  2               	STATUS_JUMPING
000A99  2               	STATUS_JUMPING_IDLE
000A99  2               .endenum
000A99  2               
000A99  2               .enum
000A99  2               	SITTING_NO_SLOP
000A99  2               	SITTING_ON_SLOPE
000A99  2               	SITTING_ABOVE_SLOPE
000A99  2               .endenum
000A99  2               
000A99  2               .enum TILE_ATTR
000A99  2               	SOLID_GROUND = 1
000A99  2               	SOLID_WALL = 2
000A99  2               	SOLID_CEILING = 4
000A99  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000A99  2               .endenum
000A99  2               
000A99  2               .struct PLAYER
000A99  2               	sprite			.byte	; sprite index
000A99  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
000A99  2               	falling_ticks	.word	; ticks since the player is fllaing (thing t in gravity)
000A99  2               	delta_x			.byte	; when driving by phisics, original delta_x value
000A99  2               	animation_tick	.byte
000A99  2               	spriteID 		.byte	; current animation loop start
000A99  2               	spriteAnim 		.byte	; current frame
000A99  2               	spriteAnimDirection .byte ; direction of the animation
000A99  2               	px 				.word	; relative X & Y on screen
000A99  2               	py 				.word
000A99  2               	levelx			.word	; absolute X & Y in the level
000A99  2               	levely			.word
000A99  2               	flip 			.byte
000A99  2               	tilemap			.word	; cached @ of the tilemap equivalent of the center of the player
000A99  2               	vera_bitmaps    .res 	2*12	; 9 words to store vera bitmaps address
000A99  2               .endstruct
000A99  2               
000A99  2               .macro m_status value
000A99  2               	lda #(value)
000A99  2               	sta player0 + PLAYER::status
000A99  2               .endmacro
000A99  2               
000A99  2               .scope Player
000A99  2               
000A99  2               .macro SET_SPRITE id, frame
000A99  2               	lda #id
000A99  2               	sta player0 + PLAYER::spriteID
000A99  2               	lda #frame
000A99  2               	sta player0 + PLAYER::spriteAnim
000A99  2               	jsr set_bitmap
000A99  2               .endmacro
000A99  2               
000A99  2               ;************************************************
000A99  2               ; player sprites status
000A99  2               ;
000A99  2               .enum Sprites
000A99  2               	FRONT = 0
000A99  2               	LEFT = 3
000A99  2               	CLIMB = 6
000A99  2               	HANG = 9
000A99  2               .endenum
000A99  2               
000A99  2               ;************************************************
000A99  2               ; local variables
000A99  2               ;
000A99  2               
000A99  2  00           player_on_slop: .byte 0
000A9A  2  00           ladders: .byte 0
000A9B  2  00           test_right_left: .byte 0
000A9C  2               
000A9C  2               ;************************************************
000A9C  2               ; init the player data
000A9C  2               ;
000A9C  2               init:
000A9C  2  9C 82 16     	stz player0 + PLAYER::sprite
000A9F  2  A9 0A        	lda #10
000AA1  2  8D 87 16     	sta player0 + PLAYER::animation_tick
000AA4  2  A9 00        	lda #STATUS_WALKING_IDLE
000AA6  2  8D 83 16     	sta player0 + PLAYER::status
000AA9  2  9C 84 16     	stz player0 + PLAYER::falling_ticks
000AAC  2  9C 85 16     	stz player0 + PLAYER::falling_ticks + 1
000AAF  2  A9 03        	lda #Player::Sprites::LEFT
000AB1  2  8D 88 16     	sta player0 + PLAYER::spriteID
000AB4  2  9C 89 16     	stz player0 + PLAYER::spriteAnim
000AB7  2  A9 01        	lda #1
000AB9  2  8D 8A 16     	sta player0 + PLAYER::spriteAnimDirection
000ABC  2  9C 8B 16     	stz player0 + PLAYER::px
000ABF  2  9C 8C 16     	stz player0 + PLAYER::px+1
000AC2  2  9C 8D 16     	stz player0 + PLAYER::py
000AC5  2  9C 8E 16     	stz player0 + PLAYER::py+1
000AC8  2  9C 8F 16     	stz player0 + PLAYER::levelx
000ACB  2  9C 90 16     	stz player0 + PLAYER::levelx+1
000ACE  2  9C 91 16     	stz player0 + PLAYER::levely
000AD1  2  9C 92 16     	stz player0 + PLAYER::levely+1
000AD4  2  9C 93 16     	stz player0 + PLAYER::flip
000AD7  2               
000AD7  2               	; load sprites data at the end of the tiles
000AD7  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (VRAM_tiles + tiles * tile_size)
000ADB  2  A0 00 20 BA  
000ADF  2  FF A9 0B A2  
000AF8  2               
000AF8  2  AD 96 16     	lda player0 + PLAYER::vera_bitmaps
000AFB  2  85 02        	sta r0L
000AFD  2  AD 97 16     	lda player0 + PLAYER::vera_bitmaps+1
000B00  2  85 03        	sta r0H
000B02  2               
000B02  2  AC 82 16     	ldy player0 + PLAYER::sprite
000B05  2  A2 A0        	ldx #%10100000					; 32x32 sprite
000B07  2  20 05 0A     	jsr Sprite::load
000B0A  2               
000B0A  2               	; turn sprite 0 on
000B0A  2  AC 82 16     	ldy player0 + PLAYER::sprite
000B0D  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
000B0F  2  20 4F 0A     	jsr Sprite::display
000B12  2               
000B12  2               	; register the vera simplified memory 12:5
000B12  2  A2 00        	ldx #0
000B14  2  A0 0C        	ldy #(3*4)
000B16  2  A9 00 85 04  	LOAD_r1 (VRAM_tiles + tiles * tile_size)
000B1A  2  A9 3B 85 05  
000B1E  2               
000B1E  2               @loop:
000B1E  2               	; load full VERA memory (12:0) into R0
000B1E  2  A5 04        	lda r1L
000B20  2  85 02        	sta r0L
000B22  2  A5 05        	lda r1H
000B24  2  85 03        	sta r0H
000B26  2               
000B26  2               	; convert full addr to vera mode (bit shiting >> 5)
000B26  2  A5 03        	lda r0H
000B28  2  4A           	lsr
000B29  2  66 02        	ror r0L
000B2B  2  4A           	lsr
000B2C  2  66 02        	ror r0L
000B2E  2  4A           	lsr
000B2F  2  66 02        	ror r0L
000B31  2  4A           	lsr
000B32  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000B34  2  4A           	lsr
000B35  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000B37  2               
000B37  2               	; store 12:5 into our cache
000B37  2  9D 96 16     	sta player0 + PLAYER::vera_bitmaps, x
000B3A  2  E8           	inx
000B3B  2  A5 02        	lda r0L
000B3D  2  9D 96 16     	sta player0 + PLAYER::vera_bitmaps, x
000B40  2  E8           	inx
000B41  2               
000B41  2               	; increase the vram (+4 r1H = +1024 r1)
000B41  2  18           	clc
000B42  2  A5 05        	lda r1H
000B44  2  69 04        	adc #4
000B46  2  85 05        	sta r1H
000B48  2               
000B48  2  88           	dey
000B49  2  D0 D3        	bne @loop
000B4B  2               
000B4B  2               	; set first bitmap
000B4B  2  20 5E 0B     	jsr set_bitmap
000B4E  2  60           	rts
000B4F  2               
000B4F  2               ;************************************************
000B4F  2               ; force the current player sprite at its position
000B4F  2               ;
000B4F  2               position_set:
000B4F  2  AC 82 16     	ldy player0 + PLAYER::sprite
000B52  2  A9 8B 85 02  	LOAD_r0 (player0 + PLAYER::px)
000B56  2  A9 16 85 03  
000B5A  2  20 5C 0A     	jsr Sprite::position			; set position of the sprite
000B5D  2  60           	rts
000B5E  2               
000B5E  2               ;************************************************
000B5E  2               ; change the player bitmap
000B5E  2               ;
000B5E  2               set_bitmap:
000B5E  2  18           	clc
000B5F  2  AD 89 16     	lda player0 + PLAYER::spriteAnim
000B62  2  6D 88 16     	adc player0 + PLAYER::spriteID
000B65  2  0A           	asl						; convert sprite index to work position
000B66  2  AA           	tax
000B67  2               
000B67  2               	; extract the vera bitmap address in vera format (12:5 bits)
000B67  2  BD 96 16     	lda player0 + PLAYER::vera_bitmaps, x
000B6A  2  85 03        	sta r0H
000B6C  2  BD 97 16     	lda player0 + PLAYER::vera_bitmaps + 1, x
000B6F  2  85 02        	sta r0L
000B71  2               
000B71  2  AC 82 16     	ldy player0 + PLAYER::sprite
000B74  2  20 3D 0A     	jsr Sprite::set_bitmap
000B77  2  60           	rts
000B78  2               
000B78  2               ;************************************************
000B78  2               ; increase player X position
000B78  2               ;	modify r0
000B78  2               ;
000B78  2               position_x_inc:
000B78  2               	; move the absolute position levelx + 1
000B78  2  AD 8F 16     	lda player0 + PLAYER::levelx
000B7B  2  AE 90 16     	ldx player0 + PLAYER::levelx + 1
000B7E  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
000B80  2  D0 04        	bne @incLOW1
000B82  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
000B84  2  F0 48        	beq @no_move						; we are at the level limit
000B86  2               @incLOW1:
000B86  2  1A           	inc
000B87  2  8D 8F 16     	sta player0 + PLAYER::levelx
000B8A  2  D0 04        	bne @inc_screen_x
000B8C  2               @incHi:
000B8C  2  E8           	inx
000B8D  2  8E 90 16     	stx player0 + PLAYER::levelx + 1
000B90  2               
000B90  2               @inc_screen_x:
000B90  2               	; distance from layer border to sprite absolute position
000B90  2  38           	sec
000B91  2  AD 8F 16     	lda player0 + PLAYER::levelx
000B94  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000B97  2  85 02        	sta r0L
000B99  2  AD 90 16     	lda player0 + PLAYER::levelx + 1
000B9C  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000B9F  2  85 03        	sta r0H
000BA1  2               
000BA1  2  D0 17        	bne @move_sprite_upper
000BA3  2  A6 03        	ldx r0H
000BA5  2  A5 02        	lda r0L
000BA7  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
000BA9  2  90 19        	bcc @move_sprite
000BAB  2               
000BAB  2               @move_layers:
000BAB  2               	; keep the sprite onscreen 224, for level 224->416
000BAB  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
000BAF  2  20 39 08     
000BB2  2  F0 06        	beq @move_sprite_upper
000BB4  2  A2 00        	ldx #Layers::HSCROLL
000BB6  2  20 8F 08     	jsr Layers::scroll_l0
000BB9  2  60           	rts
000BBA  2               
000BBA  2               @move_sprite_upper:
000BBA  2  AD 8B 16     	lda player0 + PLAYER::px
000BBD  2  AE 8C 16     	ldx player0 + PLAYER::px + 1
000BC0  2  1A           	inc
000BC1  2  D0 01        	bne @move_sprite
000BC3  2  E8           	inx
000BC4  2               
000BC4  2               @move_sprite:
000BC4  2  8D 8B 16     	sta player0 + PLAYER::px
000BC7  2  8E 8C 16     	stx player0 + PLAYER::px + 1
000BCA  2  20 4F 0B     	jsr Player::position_set
000BCD  2  60           	rts
000BCE  2               
000BCE  2               @no_move:
000BCE  2  60           	rts
000BCF  2               
000BCF  2               ;************************************************
000BCF  2               ; decrease player position X unless at 0
000BCF  2               ;
000BCF  2               position_x_dec:
000BCF  2               	; move the absolute position levelx + 1
000BCF  2  AD 8F 16     	lda player0 + PLAYER::levelx
000BD2  2  D0 05        	bne @decLOW
000BD4  2  AE 90 16     	ldx player0 + PLAYER::levelx + 1
000BD7  2  F0 49        	beq @no_move						; we are at Y == 0
000BD9  2               @decLOW:
000BD9  2  3A           	dec
000BDA  2  8D 8F 16     	sta player0 + PLAYER::levelx
000BDD  2  C9 FF        	cmp #$ff
000BDF  2  D0 04        	bne @dec_screen_x
000BE1  2               @decHi:
000BE1  2  CA           	dex
000BE2  2  8E 90 16     	stx player0 + PLAYER::levelx + 1
000BE5  2               
000BE5  2               @dec_screen_x:
000BE5  2               	; distance from layer border to sprite absolute position
000BE5  2  38           	sec
000BE6  2  AD 8F 16     	lda player0 + PLAYER::levelx
000BE9  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000BEC  2  85 02        	sta r0L
000BEE  2  AD 90 16     	lda player0 + PLAYER::levelx + 1
000BF1  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000BF4  2  85 03        	sta r0H
000BF6  2               
000BF6  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000BF8  2               
000BF8  2  A5 02        	lda r0L
000BFA  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000BFC  2  C9 40        	cmp #64
000BFE  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
000C00  2               
000C00  2               @move_layers:
000C00  2               	; keep the sprite onscreen 224, for level 224->416
000C00  2  A2 00        	ldx #Layers::HSCROLL
000C02  2  20 70 08     	jsr Layers::scroll_dec
000C05  2  F0 06        	beq @move_sprite_lower
000C07  2  A2 00        	ldx #Layers::HSCROLL
000C09  2  20 8F 08     	jsr Layers::scroll_l0
000C0C  2  60           	rts
000C0D  2               
000C0D  2               @move_sprite_lower:
000C0D  2  AD 8B 16     	lda player0 + PLAYER::px
000C10  2  AE 8C 16     	ldx player0 + PLAYER::px + 1
000C13  2  3A           	dec
000C14  2  C9 FF        	cmp #$ff
000C16  2  D0 01        	bne @move_sprite
000C18  2  CA           	dex
000C19  2               
000C19  2               @move_sprite:
000C19  2  8D 8B 16     	sta player0 + PLAYER::px
000C1C  2  8E 8C 16     	stx player0 + PLAYER::px + 1
000C1F  2  20 4F 0B     	jsr Player::position_set
000C22  2               
000C22  2               @no_move:
000C22  2  60           	rts
000C23  2               
000C23  2               ;************************************************
000C23  2               ; increase player Y position
000C23  2               ;
000C23  2               position_y_inc:
000C23  2               	; move the absolute position levelx + 1
000C23  2  AD 91 16     	lda player0 + PLAYER::levely
000C26  2  AE 92 16     	ldx player0 + PLAYER::levely + 1
000C29  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
000C2B  2  D0 04        	bne @incLOW1
000C2D  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
000C2F  2  F0 4E        	beq @no_move						; we are at the level limit
000C31  2               @incLOW1:
000C31  2  1A           	inc
000C32  2  8D 91 16     	sta player0 + PLAYER::levely
000C35  2  D0 04        	bne @inc_screen_y
000C37  2               @incHi:
000C37  2  E8           	inx
000C38  2  8E 92 16     	stx player0 + PLAYER::levely + 1
000C3B  2               
000C3B  2               @inc_screen_y:
000C3B  2               	; distance from layer border to sprite absolute position
000C3B  2  38           	sec
000C3C  2  AD 91 16     	lda player0 + PLAYER::levely
000C3F  2  ED 39 9F     	sbc veral1vscrolllo
000C42  2  85 02        	sta r0L
000C44  2  AD 92 16     	lda player0 + PLAYER::levely + 1
000C47  2  ED 3A 9F     	sbc veral1vscrollhi
000C4A  2  85 03        	sta r0H
000C4C  2               
000C4C  2  D0 1D        	bne @move_sprite_upper
000C4E  2  A6 03        	ldx r0H
000C50  2  A5 02        	lda r0L
000C52  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
000C54  2  90 1F        	bcc @move_sprite
000C56  2               
000C56  2               @move_layers:
000C56  2               	; keep the sprite onscreen 224, for level 224->416
000C56  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
000C5A  2  A9 01 85 03  
000C5E  2  A2 02 20 51  
000C63  2  F0 06        	beq @move_sprite_upper
000C65  2  A2 02        	ldx #Layers::VSCROLL
000C67  2  20 8F 08     	jsr Layers::scroll_l0
000C6A  2  60           	rts
000C6B  2               
000C6B  2               @move_sprite_upper:
000C6B  2  AD 8D 16     	lda player0 + PLAYER::py
000C6E  2  AE 8E 16     	ldx player0 + PLAYER::py + 1
000C71  2  1A           	inc
000C72  2  D0 01        	bne @move_sprite
000C74  2  E8           	inx
000C75  2               
000C75  2               @move_sprite:
000C75  2  8D 8D 16     	sta player0 + PLAYER::py
000C78  2  8E 8E 16     	stx player0 + PLAYER::py + 1
000C7B  2  20 4F 0B     	jsr Player::position_set
000C7E  2  60           	rts
000C7F  2               
000C7F  2               @no_move:
000C7F  2  60           	rts
000C80  2               
000C80  2               ;;
000C80  2  AD 8D 16     	lda player0 + PLAYER::py
000C83  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
000C85  2  F0 09        	beq @moveleftP0
000C87  2  1A           	inc
000C88  2  8D 8D 16     	sta player0 + PLAYER::py
000C8B  2  D0 03        	bne @moveleftP0
000C8D  2  EE 8E 16     	inc player0 + PLAYER::py + 1
000C90  2               @moveleftP0:
000C90  2  20 4F 0B     	jsr Player::position_set
000C93  2  60           	rts
000C94  2               
000C94  2               ;************************************************
000C94  2               ; decrease player position X unless at 0
000C94  2               ;
000C94  2               position_y_dec:
000C94  2               	; move the absolute position levelx + 1
000C94  2  AD 91 16     	lda player0 + PLAYER::levely
000C97  2  D0 05        	bne @decLOW
000C99  2  AE 92 16     	ldx player0 + PLAYER::levely + 1
000C9C  2  F0 49        	beq @no_move						; we are at Y == 0
000C9E  2               @decLOW:
000C9E  2  3A           	dec
000C9F  2  8D 91 16     	sta player0 + PLAYER::levely
000CA2  2  C9 FF        	cmp #$ff
000CA4  2  D0 04        	bne @dec_screen_y
000CA6  2               @decHi:
000CA6  2  CA           	dex
000CA7  2  8E 92 16     	stx player0 + PLAYER::levely + 1
000CAA  2               
000CAA  2               @dec_screen_y:
000CAA  2               	; distance from layer border to sprite absolute position
000CAA  2  38           	sec
000CAB  2  AD 91 16     	lda player0 + PLAYER::levely
000CAE  2  ED 39 9F     	sbc veral1vscrolllo
000CB1  2  85 02        	sta r0L
000CB3  2  AD 92 16     	lda player0 + PLAYER::levely + 1
000CB6  2  ED 3A 9F     	sbc veral1vscrollhi
000CB9  2  85 03        	sta r0H
000CBB  2               
000CBB  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000CBD  2               
000CBD  2  A5 02        	lda r0L
000CBF  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000CC1  2  C9 20        	cmp #32
000CC3  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
000CC5  2               
000CC5  2               @move_layers:
000CC5  2               	; keep the sprite onscreen 224, for level 224->416
000CC5  2  A2 02        	ldx #Layers::VSCROLL
000CC7  2  20 70 08     	jsr Layers::scroll_dec
000CCA  2  F0 06        	beq @move_sprite_lower
000CCC  2  A2 02        	ldx #Layers::VSCROLL
000CCE  2  20 8F 08     	jsr Layers::scroll_l0
000CD1  2  60           	rts
000CD2  2               
000CD2  2               @move_sprite_lower:
000CD2  2  AD 8D 16     	lda player0 + PLAYER::py
000CD5  2  AE 8E 16     	ldx player0 + PLAYER::py + 1
000CD8  2  3A           	dec
000CD9  2  C9 FF        	cmp #$ff
000CDB  2  D0 01        	bne @move_sprite
000CDD  2  CA           	dex
000CDE  2               
000CDE  2               @move_sprite:
000CDE  2  8D 8D 16     	sta player0 + PLAYER::py
000CE1  2  8E 8E 16     	stx player0 + PLAYER::py + 1
000CE4  2  20 4F 0B     	jsr Player::position_set
000CE7  2               
000CE7  2               @no_move:
000CE7  2  60           	rts
000CE8  2               
000CE8  2               ;************************************************
000CE8  2               ; hide the current sprite
000CE8  2               ;
000CE8  2               hide1:
000CE8  2  DB           	stp
000CE9  2  18           	clc
000CEA  2  AD 89 16     	lda player0 + PLAYER::spriteAnim
000CED  2  6D 88 16     	adc player0 + PLAYER::spriteID
000CF0  2  A8           	tay		; sprite index
000CF1  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
000CF3  2  20 4F 0A     	jsr Sprite::display			; turn current sprite off
000CF6  2  60           	rts
000CF7  2               
000CF7  2               ;************************************************
000CF7  2               ; Animate the player if needed
000CF7  2               ;
000CF7  2               animate:
000CF7  2  AD 83 16     	lda player0 + PLAYER::status
000CFA  2  C9 00        	cmp #STATUS_WALKING_IDLE
000CFC  2  F0 3A        	beq @end
000CFE  2  C9 04        	cmp #STATUS_FALLING
000D00  2  F0 36        	beq @end
000D02  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000D04  2  F0 32        	beq @end
000D06  2               
000D06  2  CE 87 16     	dec player0 + PLAYER::animation_tick
000D09  2  D0 2D        	bne @end
000D0B  2               
000D0B  2  A9 0A        	lda #10
000D0D  2  8D 87 16     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
000D10  2               
000D10  2  18           	clc
000D11  2  AD 89 16     	lda player0 + PLAYER::spriteAnim
000D14  2  6D 8A 16     	adc player0 + PLAYER::spriteAnimDirection
000D17  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
000D19  2  C9 03        	cmp #3
000D1B  2  F0 0B        	beq @set_sprite_anim_decrease
000D1D  2  80 10        	bra @set_sprite_on
000D1F  2               @set_sprite_anim_increase:
000D1F  2  A9 01        	lda #01
000D21  2  8D 8A 16     	sta player0 + PLAYER::spriteAnimDirection
000D24  2  A9 00        	lda #0
000D26  2  80 07        	bra @set_sprite_on
000D28  2               @set_sprite_anim_decrease:
000D28  2  A9 FF        	lda #$ff
000D2A  2  8D 8A 16     	sta player0 + PLAYER::spriteAnimDirection
000D2D  2  A9 02        	lda #2
000D2F  2               @set_sprite_on:
000D2F  2  8D 89 16     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
000D32  2  20 5E 0B     	jsr Player::set_bitmap
000D35  2  20 4F 0B     	jsr Player::position_set
000D38  2               @end:
000D38  2  60           	rts
000D39  2               
000D39  2               ;************************************************
000D39  2               ; position of the player on the layer1 tilemap
000D39  2               ;	modified : r1
000D39  2               ;	output : r0
000D39  2               ;
000D39  2               get_tilemap_position:
000D39  2  18           	clc
000D3A  2  AD 91 16     	lda player0 + PLAYER::levely		; sprite screen position
000D3D  2  85 02        	sta r0L
000D3F  2  AD 92 16     	lda player0 + PLAYER::levely + 1
000D42  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
000D44  2               
000D44  2  A5 02        	lda r0L
000D46  2  29 F0        	and #%11110000
000D48  2  85 02        	sta r0L
000D4A  2  A5 03        	lda r0H
000D4C  2  85 03        	sta r0H
000D4E  2  A5 02        	lda r0L
000D50  2  0A           	asl
000D51  2  26 03        	rol r0H
000D53  2  85 02        	sta r0L 						; r0 = first tile of the tilemap in the row
000D55  2               									; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
000D55  2               
000D55  2  AD 8F 16     	lda player0 + PLAYER::levelx		; sprite screen position
000D58  2  85 04        	sta r1L
000D5A  2  AD 90 16     	lda player0 + PLAYER::levelx + 1
000D5D  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
000D5F  2               
000D5F  2  4A           	lsr
000D60  2  66 04        	ror r1L
000D62  2  4A           	lsr
000D63  2  66 04        	ror r1L
000D65  2  4A           	lsr
000D66  2  66 04        	ror r1L
000D68  2  4A           	lsr
000D69  2  66 04        	ror r1L
000D6B  2  85 05        	sta r1H 					; r1 = tile X in the row
000D6D  2               								; sprite X /16 (convert to tile X)
000D6D  2               
000D6D  2  18           	clc
000D6E  2  A5 02        	lda r0L
000D70  2  65 04        	adc r1L
000D72  2  85 02        	sta r0L
000D74  2  A5 03        	lda r0H
000D76  2  65 05        	adc r1H
000D78  2  85 03        	sta r0H						; r0 = tile position in the tilemap
000D7A  2               
000D7A  2  18           	clc
000D7B  2  A5 03        	lda r0H
000D7D  2  69 A0        	adc #>HIMEM
000D7F  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
000D81  2  60           	rts
000D82  2               
000D82  2               ;************************************************
000D82  2               ; force player status to be idle
000D82  2               ;
000D82  2               set_idle:
000D82  2  AD 83 16     	lda player0 + PLAYER::status
000D85  2  C9 01        	cmp #STATUS_WALKING
000D87  2  F0 06        	beq @set_idle_walking
000D89  2  C9 02        	cmp #STATUS_CLIMBING
000D8B  2  F0 08        	beq @set_idle_climbing
000D8D  2  60           	rts							; keep the current value
000D8E  2               @set_idle_jump:
000D8E  2  60           	rts
000D8F  2               @set_idle_walking:
000D8F  2  A9 00 8D 83  	m_status STATUS_WALKING_IDLE
000D93  2  16           
000D94  2  60           	rts
000D95  2               @set_idle_climbing:
000D95  2  A9 03 8D 83  	m_status STATUS_CLIMBING_IDLE
000D99  2  16           
000D9A  2  60           	rts
000D9B  2               
000D9B  2               ;************************************************
000D9B  2               ; check if the player sits on a solid tile
000D9B  2               ;
000D9B  2               physics:
000D9B  2  20 39 0D     	jsr get_tilemap_position
000D9E  2  A5 02 8D 94  	SAVE_r0 player0 + PLAYER::tilemap	; cache the tilemap @
000DA2  2  16 A5 03 8D  
000DA6  2  95 16        
000DA8  2               
000DA8  2  AD 83 16     	lda player0 + PLAYER::status
000DAB  2  C9 02        	cmp #STATUS_CLIMBING
000DAD  2  F0 0B        	beq @return1
000DAF  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000DB1  2  F0 07        	beq @return1
000DB3  2  C9 05        	cmp #STATUS_JUMPING
000DB5  2  D0 04        	bne @fall
000DB7  2  4C 5F 0E     	jmp @jump
000DBA  2               @return1:
000DBA  2  60           	rts
000DBB  2               
000DBB  2               	;
000DBB  2               	; deal with gravity driven falling
000DBB  2               	;
000DBB  2               @fall:
000DBB  2               .ifdef DEBUG
000DBB  2               	CHECK_DEBUG
000DBB  2               .endif
000DBB  2  20 40 0F     	jsr check_collision_down
000DBE  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
000DC0  2  4C 52 0E     	jmp @sit_on_solid				; solid tile below the player that is not a slope
000DC3  2               
000DC3  2               @check_on_slope:
000DC3  2  20 C1 0F     	jsr check_player_on_slop
000DC6  2  F0 23        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
000DC8  2               
000DC8  2               @on_slope:
000DC8  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
000DCA  2  F0 0B        	beq @slope_left
000DCC  2               @slope_right:
000DCC  2  AD 8F 16     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
000DCF  2  29 0F        	and #%00001111
000DD1  2  49 0F        	eor #%00001111					; X = 0 => Y can go up to 15
000DD3  2  85 30        	sta $30
000DD5  2  80 09        	bra @slope_y
000DD7  2               @slope_left:
000DD7  2  AD 8F 16     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
000DDA  2  29 0F        	and #%00001111
000DDC  2  85 30        	sta $30
000DDE  2  80 00        	bra @slope_y
000DE0  2               @slope_y:
000DE0  2  AD 91 16     	lda player0 + PLAYER::levely
000DE3  2  29 0F        	and #%00001111
000DE5  2  C5 30        	cmp $30
000DE7  2  30 02        	bmi @no_collision_down
000DE9  2  80 67        	bra @sit_on_solid
000DEB  2               
000DEB  2               @no_collision_down:
000DEB  2               	; if the player is already falling, increase t
000DEB  2  AD 83 16     	lda player0 + PLAYER::status
000DEE  2  C9 04        	cmp #STATUS_FALLING
000DF0  2  F0 0D        	beq @increase_ticks
000DF2  2               
000DF2  2               	; let the player fall
000DF2  2  A9 04        	lda #STATUS_FALLING
000DF4  2  8D 83 16     	sta player0 + PLAYER::status
000DF7  2  A9 08        	lda #FALL_LO_TICKS
000DF9  2  8D 84 16     	sta player0 + PLAYER::falling_ticks	; reset t
000DFC  2  9C 85 16     	stz player0 + PLAYER::falling_ticks + 1
000DFF  2               @increase_ticks:
000DFF  2  CE 84 16     	dec player0 + PLAYER::falling_ticks	; increase HI every 10 refresh
000E02  2  D0 08        	bne @drive_fall
000E04  2  A9 08        	lda #FALL_LO_TICKS
000E06  2  8D 84 16     	sta player0 + PLAYER::falling_ticks	; reset t
000E09  2  EE 85 16     	inc player0 + PLAYER::falling_ticks + 1
000E0C  2               
000E0C  2               @drive_fall:
000E0C  2  AD 85 16     	lda player0 + PLAYER::falling_ticks + 1
000E0F  2  F0 3C        	beq @fall_once
000E11  2  85 14        	sta r9L
000E13  2               @loop_fall:
000E13  2  20 23 0C     	jsr position_y_inc
000E16  2  20 39 0D     	jsr get_tilemap_position
000E19  2  A5 02 8D 94  	SAVE_r0 player0 + PLAYER::tilemap
000E1D  2  16 A5 03 8D  
000E21  2  95 16        
000E23  2               
000E23  2               	; test reached solid ground
000E23  2  20 40 0F     	jsr check_collision_down
000E26  2  D0 2A        	bne @sit_on_solid
000E28  2               
000E28  2               @loop_fall_no_collision:
000E28  2  C6 14        	dec r9L
000E2A  2  D0 E7        	bne @loop_fall						; take t in count for gravity
000E2C  2               
000E2C  2               @apply_delta_x:
000E2C  2  AD 86 16     	lda player0 + PLAYER::delta_x		; apply delatx
000E2F  2  F0 2D        	beq @return
000E31  2  30 0D        	bmi @fall_left
000E33  2               @fall_right:
000E33  2  20 2E 0F     	jsr check_collision_right
000E36  2  F0 04        	beq @no_fcollision_right
000E38  2               @fcollision_right:
000E38  2  9C 86 16     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000E3B  2  60           	rts
000E3C  2               @no_fcollision_right:
000E3C  2  20 78 0B     	jsr position_x_inc
000E3F  2  60           	rts
000E40  2               @fall_left:
000E40  2  20 37 0F     	jsr check_collision_left
000E43  2  F0 04        	beq @no_fcollision_left
000E45  2               @fcollision_left:
000E45  2  9C 86 16     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000E48  2  60           	rts
000E49  2               @no_fcollision_left:
000E49  2  20 CF 0B     	jsr position_x_dec
000E4C  2  60           	rts
000E4D  2               
000E4D  2               @fall_once:
000E4D  2  20 23 0C     	jsr position_y_inc
000E50  2  80 DA        	bra @apply_delta_x
000E52  2               
000E52  2               @sit_on_solid:
000E52  2               	; change the status if falling
000E52  2  AD 83 16     	lda player0 + PLAYER::status
000E55  2  C9 04        	cmp #STATUS_FALLING
000E57  2  D0 05        	bne @return
000E59  2  A9 00        	lda #STATUS_WALKING_IDLE
000E5B  2  8D 83 16     	sta player0 + PLAYER::status
000E5E  2               @return:
000E5E  2  60           	rts
000E5F  2               
000E5F  2               	;
000E5F  2               	; deal with gravity driven jumping
000E5F  2               	;
000E5F  2               @jump:
000E5F  2               @decrease_ticks:
000E5F  2  CE 84 16     	dec player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
000E62  2  D0 0A        	bne @drive_jump
000E64  2  CE 85 16     	dec player0 + PLAYER::falling_ticks	+ 1
000E67  2  F0 4B        	beq @apex							; reached the apex of the jump
000E69  2               
000E69  2  A9 0A        	lda #JUMP_LO_TICKS
000E6B  2  8D 84 16     	sta player0 + PLAYER::falling_ticks	; reset t
000E6E  2               
000E6E  2               @drive_jump:
000E6E  2  AD 85 16     	lda player0 + PLAYER::falling_ticks + 1
000E71  2  85 14        	sta r9L
000E73  2               @loop_jump:
000E73  2  20 94 0C     	jsr position_y_dec
000E76  2  20 39 0D     	jsr get_tilemap_position
000E79  2  A5 02 8D 94  	SAVE_r0 player0 + PLAYER::tilemap
000E7D  2  16 A5 03 8D  
000E81  2  95 16        
000E83  2               
000E83  2  AD 91 16     	lda player0 + PLAYER::levely
000E86  2  29 0F        	and #%00001111
000E88  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
000E8A  2               
000E8A  2               	; test hit a ceiling
000E8A  2  20 75 0F     	jsr check_collision_up
000E8D  2  D0 04        	bne @collision_up
000E8F  2               @no_collision_up:
000E8F  2  C6 14        	dec r9L
000E91  2  D0 E0        	bne @loop_jump						; loop to take t in count for gravity
000E93  2               
000E93  2               @collision_up:
000E93  2  AD 86 16     	lda player0 + PLAYER::delta_x		; deal with deltax
000E96  2  F0 C6        	beq @return
000E98  2  30 0D        	bmi @jump_left
000E9A  2               @jump_right:
000E9A  2  20 2E 0F     	jsr check_collision_right
000E9D  2  F0 04        	beq @no_collision_right
000E9F  2               @collision_right:
000E9F  2  9C 86 16     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000EA2  2  60           	rts
000EA3  2               @no_collision_right:
000EA3  2  20 78 0B     	jsr position_x_inc
000EA6  2  60           	rts
000EA7  2               @jump_left:
000EA7  2  20 37 0F     	jsr check_collision_left
000EAA  2  F0 04        	beq @no_collision_left
000EAC  2               @collision_left:
000EAC  2  9C 86 16     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000EAF  2  60           	rts
000EB0  2               @no_collision_left:
000EB0  2  20 CF 0B     	jsr position_x_dec
000EB3  2  60           	rts
000EB4  2               
000EB4  2               @apex:
000EB4  2  A9 06 8D 83  	m_status STATUS_JUMPING_IDLE
000EB8  2  16           
000EB9  2  60           	rts
000EBA  2               
000EBA  2               ;************************************************
000EBA  2               ;	compute the number of tiles covered by the boundingbox
000EBA  2               ;	return: r1L : number of tiles height
000EBA  2               ;			X = r1H : number of tiles width
000EBA  2               ;			Y = r2L : index of the first tile to test
000EBA  2               ;
000EBA  2               bbox_coverage:
000EBA  2               	; X = how many column of tiles to test
000EBA  2  AD 8F 16     	lda player0 + PLAYER::levelx
000EBD  2  29 0F        	and #%00001111
000EBF  2  C9 08        	cmp #8
000EC1  2  F0 08        	beq @one_tile
000EC3  2  30 0C        	bmi @two_tiles_straight				; if X < 8, test as if int
000EC5  2               @two_tiles_right:
000EC5  2  A2 02        	ldx #02								; test 2 column ( y % 16 <> 0)
000EC7  2  A0 01        	ldy #01								; starting on row +1
000EC9  2  80 0A        	bra @test_lines
000ECB  2               @one_tile:
000ECB  2  A2 01        	ldx #01								; test 1 column ( y % 16  == 8)
000ECD  2  A0 01        	ldy #01								; starting on row +1
000ECF  2  80 04        	bra @test_lines
000ED1  2               @two_tiles_straight:
000ED1  2  A2 02        	ldx #02								; test 2 columns ( y % 16 == 0)
000ED3  2  A0 00        	ldy #00								; test on row  0 ( x % 16 != 0)
000ED5  2               
000ED5  2               @test_lines:
000ED5  2               	; X = how many lines of tiles to test
000ED5  2  AD 91 16     	lda player0 + PLAYER::levely
000ED8  2  29 0F        	and #%00001111
000EDA  2  D0 09        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
000EDC  2               @yint:
000EDC  2  A9 02        	lda #02					; test 2 lines ( y % 16 == 0)
000EDE  2  85 04        	sta r1L
000EE0  2  86 05        	stx r1H
000EE2  2  84 06        	sty r2L
000EE4  2  60           	rts
000EE5  2               @yfloat:
000EE5  2  A9 03        	lda #03					; test 3 rows ( y % 16 <> 0)
000EE7  2  85 04        	sta r1L
000EE9  2  86 05        	stx r1H
000EEB  2  84 06        	sty r2L
000EED  2  60           	rts
000EEE  2               
000EEE  2               ;************************************************
000EEE  2               ; check collision on the height
000EEE  2               ;	A = vaule of the collision
000EEE  2               ;	ZERO = no collision
000EEE  2               ;
000EEE  2               check_collision_height:
000EEE  2               	; only test if we are 'centered'
000EEE  2  AD 8F 16     	lda player0 + PLAYER::levelx
000EF1  2  29 0F        	and #%00001111
000EF3  2  C9 08        	cmp #08
000EF5  2  D0 34        	bne @no_collision
000EF7  2               
000EF7  2  AD 94 16     	lda player0 + PLAYER::tilemap
000EFA  2  85 02        	sta r0L
000EFC  2  AD 95 16     	lda player0 + PLAYER::tilemap + 1
000EFF  2  85 03        	sta r0H
000F01  2               
000F01  2  20 BA 0E     	jsr bbox_coverage
000F04  2  A6 04        	ldx r1L				; tiles height
000F06  2  98           	tya
000F07  2  18           	clc
000F08  2  6D 9B 0A     	adc test_right_left
000F0B  2  A8           	tay
000F0C  2               
000F0C  2               @test_line:
000F0C  2  B1 02        	lda (r0L),y
000F0E  2  F0 11        	beq @test_next_line
000F10  2               
000F10  2               	; some tiles are not real collision
000F10  2  84 30        	sty $30
000F12  2  A8           	tay
000F13  2  B9 7B 15     	lda tiles_attributes,y
000F16  2  29 02        	and #TILE_ATTR::SOLID_WALL
000F18  2  F0 05        	beq @test_next_line1
000F1A  2  A4 30        	ldy $30
000F1C  2  B1 02        	lda (r0L),y
000F1E  2  60           	rts
000F1F  2               
000F1F  2               @test_next_line1:
000F1F  2  A4 30        	ldy $30
000F21  2               
000F21  2               @test_next_line:
000F21  2  CA           	dex
000F22  2  F0 07        	beq @no_collision
000F24  2  98           	tya
000F25  2  18           	clc
000F26  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
000F28  2  A8           	tay
000F29  2  80 E1        	bra @test_line					; LADDERS can be traversed
000F2B  2               
000F2B  2               @no_collision:						; force a no collision
000F2B  2  A9 00        	lda #00
000F2D  2               @return:
000F2D  2  60           	rts
000F2E  2               
000F2E  2               ;************************************************
000F2E  2               ; check collision on the right
000F2E  2               ;	return: A = value of the collision
000F2E  2               ;			ZERO = no collision
000F2E  2               ;
000F2E  2               check_collision_right:
000F2E  2  A9 01        	lda #$01
000F30  2  8D 9B 0A     	sta test_right_left
000F33  2  20 EE 0E     	jsr check_collision_height
000F36  2  60           	rts
000F37  2               
000F37  2               ;************************************************
000F37  2               ; check collision on the left
000F37  2               ;
000F37  2               check_collision_left:
000F37  2  A9 FF        	lda #$ff
000F39  2  8D 9B 0A     	sta test_right_left
000F3C  2  20 EE 0E     	jsr check_collision_height
000F3F  2  60           	rts
000F40  2               
000F40  2               ;************************************************
000F40  2               ; check collision down
000F40  2               ;	collision surface to test is 16 pixels around the mid X
000F40  2               ; 	output : Z = no collision
000F40  2               ;
000F40  2               check_collision_down:
000F40  2  AD 91 16     	lda player0 + PLAYER::levely	; if the player is inbetween 2 tiles there can be no collision
000F43  2  29 0F        	and #%00001111
000F45  2  F0 03        	beq @real_test
000F47  2  A9 00        	lda #00
000F49  2  60           	rts
000F4A  2               @real_test:
000F4A  2  AD 94 16     	lda player0 + PLAYER::tilemap
000F4D  2  85 02        	sta r0L
000F4F  2  AD 95 16     	lda player0 + PLAYER::tilemap + 1
000F52  2  85 03        	sta r0H
000F54  2               
000F54  2  20 BA 0E     	jsr bbox_coverage
000F57  2  98           	tya
000F58  2  18           	clc
000F59  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
000F5B  2  A8           	tay
000F5C  2               
000F5C  2               @test_colum:
000F5C  2  B1 02        	lda (r0L),y
000F5E  2  F0 0C        	beq @next_colum							; empty tile, test the next one
000F60  2               
000F60  2  84 30        	sty $30
000F62  2  A8           	tay
000F63  2  B9 7B 15     	lda tiles_attributes,y
000F66  2  29 01        	and #TILE_ATTR::SOLID_GROUND
000F68  2  D0 08        	bne @return1							; considere slopes as empty
000F6A  2  A4 30        	ldy $30
000F6C  2               
000F6C  2               @next_colum:
000F6C  2  CA           	dex
000F6D  2  F0 05        	beq @return
000F6F  2  C8           	iny
000F70  2  80 EA        	bra @test_colum
000F72  2               @return1:
000F72  2  A9 01        	lda #01
000F74  2               @return:
000F74  2  60           	rts
000F75  2               
000F75  2               ;************************************************
000F75  2               ; check collision up
000F75  2               ;	collision surface to test is 16 pixels around the mid X
000F75  2               ;	input :
000F75  2               ;		r0 : @ of current tile the top-left corner of the player sprite
000F75  2               ; 	output : Z = no collision
000F75  2               ;
000F75  2               check_collision_up:
000F75  2  38           	sec
000F76  2  AD 94 16     	lda player0 + PLAYER::tilemap
000F79  2  E9 20        	sbc #LEVEL_TILES_WIDTH
000F7B  2  85 02        	sta r0L
000F7D  2  AD 95 16     	lda player0 + PLAYER::tilemap + 1
000F80  2  E9 00        	sbc #0
000F82  2  85 03        	sta r0H
000F84  2               
000F84  2               	; X = how many column of tiles to test
000F84  2  AD 8F 16     	lda player0 + PLAYER::levelx
000F87  2  29 0F        	and #%00001111
000F89  2  F0 0A        	beq @xint				; if player is not on a multiple of 16 (tile size)
000F8B  2               @xfloat:
000F8B  2  C9 08        	cmp #8
000F8D  2  30 06        	bmi @xint
000F8F  2  A2 01        	ldx #1					; test 1 column ( y % 16 <> 0)
000F91  2  A0 01        	ldy #1					; starting at colum + 1
000F93  2  80 13        	bra @test_colum
000F95  2               @xint:
000F95  2  A2 02        	ldx #2					; test 2 columns ( y % 16 == 0)
000F97  2  A0 00        	ldy #0					; starting at colum
000F99  2  80 00        	bra @test_y
000F9B  2               
000F9B  2               @test_y:
000F9B  2               	; Y = how tile rows to test
000F9B  2  AD 91 16     	lda player0 + PLAYER::levely
000F9E  2  29 0F        	and #%00001111
000FA0  2  F0 06        	beq @yint				; if player is not on a multiple of 16 (tile size)
000FA2  2               @yfloat:
000FA2  2  98           	tya
000FA3  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; test on (row -1) +1 ( x % 16 != 0) + column
000FA5  2  A8           	tay
000FA6  2  80 00        	bra @test_colum
000FA8  2               @yint:
000FA8  2               
000FA8  2               @test_colum:
000FA8  2  B1 02        	lda (r0L),y							; left side
000FAA  2  F0 0C        	beq @next_column
000FAC  2               
000FAC  2  84 30        	sty $30
000FAE  2  A8           	tay
000FAF  2  B9 7B 15     	lda tiles_attributes,y
000FB2  2  29 04        	and #TILE_ATTR::SOLID_CEILING
000FB4  2  D0 08        	bne @return1
000FB6  2  A4 30        	ldy $30
000FB8  2               
000FB8  2               @next_column:
000FB8  2  CA           	dex
000FB9  2  F0 05        	beq @return
000FBB  2  C8           	iny
000FBC  2  80 EA        	bra @test_colum
000FBE  2               @return1:
000FBE  2  A9 01        	lda #01
000FC0  2               @return:
000FC0  2  60           	rts
000FC1  2               
000FC1  2               ;************************************************
000FC1  2               ; check if the player feet is exactly on a slope tile
000FC1  2               ;	modify: player_on_slop
000FC1  2               ;	return: Z = slop
000FC1  2               ;			Y = feet position tested (vs r0)
000FC1  2               ;
000FC1  2               check_player_on_slop:
000FC1  2  9C 99 0A     	stz player_on_slop				; no slope
000FC4  2               
000FC4  2  20 BA 0E     	jsr bbox_coverage
000FC7  2               
000FC7  2  18           	clc
000FC8  2  98           	tya
000FC9  2  A6 04        	ldx r1L
000FCB  2  CA           	dex
000FCC  2               :
000FCC  2  69 20        	adc #LEVEL_TILES_WIDTH
000FCE  2  CA           	dex
000FCF  2  D0 FB        	bne :-
000FD1  2  A8           	tay								; position of the feet tiles
000FD2  2               
000FD2  2  AD 8F 16     	lda player0 + PLAYER::levelx
000FD5  2  29 0F        	and #%00001111
000FD7  2  C9 08        	cmp #08
000FD9  2  10 01        	bpl :+
000FDB  2  C8           	iny
000FDC  2               :
000FDC  2               
000FDC  2               	; check if player feet is ON a slop
000FDC  2  B1 02        	lda (r0),y						; test ON feet level
000FDE  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
000FE0  2  F0 04        	beq @on_slope
000FE2  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
000FE4  2  D0 06        	bne @no_slope
000FE6  2               @on_slope:
000FE6  2  B1 02        	lda (r0),y						; test ON feet level
000FE8  2  8D 99 0A     	sta player_on_slop
000FEB  2  60           	rts
000FEC  2               
000FEC  2               @no_slope:
000FEC  2  A9 00        	lda #0
000FEE  2  8D 99 0A     	sta player_on_slop
000FF1  2  60           	rts
000FF2  2               
000FF2  2               ;************************************************
000FF2  2               ; check if the player feet is ABOVE a slope tile
000FF2  2               ;	input: 	Y = feet position tested (vs r0)
000FF2  2               ;	modify: player_on_slop
000FF2  2               ;	return: Z = slop
000FF2  2               ;
000FF2  2               is_player_above_slop:
000FF2  2  9C 99 0A     	stz player_on_slop				; no slope
000FF5  2               
000FF5  2  98           	tya
000FF6  2  18           	clc
000FF7  2  69 20        	adc #LEVEL_TILES_WIDTH
000FF9  2  A8           	tay								; test BELOW feet level
000FFA  2  B1 02        	lda (r0),y
000FFC  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
000FFE  2  F0 0A        	beq @above_slope
001000  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001002  2  F0 06        	beq @above_slope
001004  2               @no_slope:
001004  2  A9 00        	lda #0
001006  2  8D 99 0A     	sta player_on_slop
001009  2  60           	rts
00100A  2               @above_slope:
00100A  2  8D 99 0A     	sta player_on_slop
00100D  2  60           	rts
00100E  2               
00100E  2               ;************************************************
00100E  2               ; status to ignore while moving
00100E  2               ;
00100E  2               ignore_move_request:
00100E  2  00           	.byte	00	;	STATUS_WALKING_IDLE
00100F  2  00           	.byte	00	;	STATUS_WALKING
001010  2  02           	.byte	02	;	STATUS_CLIMBING
001011  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
001012  2  01           	.byte	01	;	STATUS_FALLING
001013  2  01           	.byte	01	;	STATUS_JUMPING
001014  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
001015  2               
001015  2               ;************************************************
001015  2               ; Try to move player to the right, walk up if facing a slope
001015  2               ;
001015  2               move_right:
001015  2  AC 83 16     	ldy player0 + PLAYER::status
001018  2  B9 0E 10     	lda ignore_move_request, y
00101B  2  F0 06        	beq @walk_right					; if 0 => can move
00101D  2  C9 02        	cmp #02
00101F  2  F0 6E        	beq @climb_right				; if 2 => has to climb
001021  2  80 6B        	bra @return1					; else block the move
001023  2               
001023  2               @walk_right:
001023  2  20 C1 0F     	jsr check_player_on_slop
001026  2  D0 0A        	bne @no_collision
001028  2               
001028  2  20 F2 0F     	jsr is_player_above_slop
00102B  2  D0 05        	bne @no_collision
00102D  2               
00102D  2  20 2E 0F     	jsr Player::check_collision_right
001030  2  D0 5C        	bne @return1					; block is collision on the right  and there is no slope on the right
001032  2               
001032  2               @no_collision:
001032  2  A9 01        	lda #01
001034  2  8D 86 16     	sta player0 + PLAYER::delta_x
001037  2               
001037  2               @set_walking_sprite:
001037  2  A9 01        	lda #SPRITE_FLIP_H
001039  2  8D 93 16     	sta player0 + PLAYER::flip
00103C  2  AC 82 16     	ldy player0 + PLAYER::sprite
00103F  2  20 7A 0A     	jsr Sprite::set_flip				; force sprite to look right
001042  2               
001042  2  A9 01 8D 83  	m_status STATUS_WALKING
001046  2  16           
001047  2               
001047  2               	;change player sprite
001047  2  A9 03        	lda #Player::Sprites::LEFT
001049  2  CD 88 16     	cmp player0 + PLAYER::spriteID
00104C  2  F0 08        	beq @move_x
00104E  2               
00104E  2  A9 03        	lda #Player::Sprites::LEFT
001050  2  8D 88 16     	sta player0 + PLAYER::spriteID
001053  2  20 5E 0B     	jsr set_bitmap
001056  2               
001056  2               @move_x:
001056  2  20 78 0B     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
001059  2               
001059  2               	; if sitting on a slop
001059  2  AD 99 0A     	lda player_on_slop
00105C  2  F0 2D        	beq @set_position
00105E  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001060  2  F0 26        	beq @move_y_up
001062  2               @try_move_y_dow:
001062  2  AD 91 16     	lda player0 + PLAYER::levely
001065  2  29 0F        	and #%00001111
001067  2  D0 1A        	bne @move_y_down
001069  2  AD 94 16     	lda player0 + PLAYER::tilemap
00106C  2  85 02        	sta r0L
00106E  2  AD 95 16     	lda player0 + PLAYER::tilemap+1
001071  2  85 03        	sta r0H
001073  2  A5 06        	lda r2L
001075  2  18           	clc
001076  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
001078  2  A8           	tay
001079  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
00107B  2  A8           	tay
00107C  2  B9 7B 15     	lda tiles_attributes,y
00107F  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001081  2  D0 61        	bne @return							; do not change Y if the tile below the player is a solid one
001083  2               @move_y_down:
001083  2  20 23 0C     	jsr position_y_inc
001086  2  80 03        	bra @set_position
001088  2               @move_y_up:
001088  2  20 94 0C     	jsr position_y_dec
00108B  2               
00108B  2               @set_position:
00108B  2  20 4F 0B     	jsr position_set
00108E  2               @return1:
00108E  2  60           	rts
00108F  2               
00108F  2               @climb_right:
00108F  2  20 2E 0F     	jsr Player::check_collision_right
001092  2  F0 05        	beq @climb_right_1
001094  2  C9 04        	cmp #TILE_SOLID_LADER
001096  2  F0 01        	beq @climb_right_1
001098  2  60           	rts
001099  2               @climb_right_1:
001099  2  20 BA 0E     	jsr bbox_coverage
00109C  2               @get_tile:
00109C  2  B1 02        	lda (r0),y
00109E  2  F0 0E        	beq @no_grab					; no tile on right
0010A0  2  85 31        	sta $31
0010A2  2  84 30        	sty $30
0010A4  2  A8           	tay
0010A5  2  B9 7B 15     	lda tiles_attributes,y
0010A8  2  29 08        	and #TILE_ATTR::GRABBING
0010AA  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
0010AC  2  A4 30        	ldy $30
0010AE  2               @no_grab:							; test the tile on the right on next line
0010AE  2  C8           	iny
0010AF  2  CA           	dex
0010B0  2  D0 EA        	bne @get_tile
0010B2  2  80 1E        	bra @climb_right_drop			; no grab tile on the right of the player
0010B4  2               @climb_right_2:
0010B4  2  A5 31        	lda $31							; tile index with grab attribute
0010B6  2  C9 05        	cmp #TILE_LEDGE
0010B8  2  D0 04        	bne @set_climb_sprite
0010BA  2               @set_hang_sprite:
0010BA  2  A9 09        	lda #Player::Sprites::HANG
0010BC  2  80 02        	bra @next
0010BE  2               @set_climb_sprite:
0010BE  2  A9 06        	lda #Player::Sprites::CLIMB
0010C0  2               @next:
0010C0  2  8D 88 16     	sta player0 + PLAYER::spriteID
0010C3  2  20 5E 0B     	jsr set_bitmap
0010C6  2  A9 02 8D 83  	m_status STATUS_CLIMBING
0010CA  2  16           
0010CB  2  20 78 0B     	jsr Player::position_x_inc		; move the player sprite, if the
0010CE  2  20 4F 0B     	jsr position_set
0010D1  2  60           	rts
0010D2  2               @climb_right_drop:
0010D2  2  A9 01 8D 83  	m_status STATUS_WALKING
0010D6  2  16           
0010D7  2  A9 03 8D 88  	SET_SPRITE Player::Sprites::LEFT, 1
0010DB  2  16 A9 01 8D  
0010DF  2  89 16 20 5E  
0010E4  2               
0010E4  2               @return:
0010E4  2  60           	rts
0010E5  2               
0010E5  2               ;************************************************
0010E5  2               ; try to move the player to the left
0010E5  2               ;
0010E5  2               move_left:
0010E5  2  AC 83 16     	ldy player0 + PLAYER::status
0010E8  2  B9 0E 10     	lda ignore_move_request, y
0010EB  2  F0 06        	beq @walk_left					; if 0 => can move
0010ED  2  C9 02        	cmp #02
0010EF  2  F0 6E        	beq @climb_left				; if 2 => has to climb
0010F1  2  80 6B        	bra @return					; else block the move
0010F3  2               
0010F3  2               @walk_left:
0010F3  2  20 C1 0F     	jsr check_player_on_slop
0010F6  2  D0 0A        	bne @no_collision				; ignore right collision left if on a slope
0010F8  2               
0010F8  2  20 F2 0F     	jsr is_player_above_slop
0010FB  2  D0 05        	bne @no_collision
0010FD  2               
0010FD  2  20 37 0F     	jsr Player::check_collision_left
001100  2  D0 5C        	bne @return						; block is collision on the right  and there is no slope on the right
001102  2               
001102  2               @no_collision:
001102  2  A9 FF        	lda #$ff
001104  2  8D 86 16     	sta player0 + PLAYER::delta_x
001107  2               
001107  2               @set_walking_sprite:
001107  2  A9 00        	lda #SPRITE_FLIP_NONE
001109  2  8D 93 16     	sta player0 + PLAYER::flip
00110C  2  AC 82 16     	ldy player0 + PLAYER::sprite
00110F  2  20 7A 0A     	jsr Sprite::set_flip				; force sprite to loop right
001112  2               
001112  2  A9 01 8D 83  	m_status STATUS_WALKING
001116  2  16           
001117  2               
001117  2  A9 03        	lda #Player::Sprites::LEFT
001119  2  CD 88 16     	cmp player0 + PLAYER::spriteID
00111C  2  F0 08        	beq @move_x
00111E  2               
00111E  2               	;change player sprite
00111E  2  A9 03        	lda #Player::Sprites::LEFT
001120  2  8D 88 16     	sta player0 + PLAYER::spriteID
001123  2  20 5E 0B     	jsr set_bitmap
001126  2               
001126  2               @move_x:
001126  2  20 CF 0B     	jsr Player::position_x_dec
001129  2               
001129  2  AD 99 0A     	lda player_on_slop				; if walking a slop also increase Y
00112C  2  F0 2D        	beq @set_position
00112E  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001130  2  F0 26        	beq @move_y_up
001132  2               @try_move_y_dow:
001132  2  AD 91 16     	lda player0 + PLAYER::levely
001135  2  29 0F        	and #%00001111
001137  2  D0 1A        	bne @move_y_down
001139  2  AD 94 16     	lda player0 + PLAYER::tilemap
00113C  2  85 02        	sta r0L
00113E  2  AD 95 16     	lda player0 + PLAYER::tilemap+1
001141  2  85 03        	sta r0H
001143  2  A5 06        	lda r2L
001145  2  18           	clc
001146  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
001148  2  A8           	tay
001149  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
00114B  2  A8           	tay
00114C  2  B9 7B 15     	lda tiles_attributes,y
00114F  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001151  2  D0 0B        	bne @return							; do not change Y if the tile below the player is a solid one
001153  2               @move_y_down:
001153  2  20 23 0C     	jsr position_y_inc
001156  2  80 03        	bra @set_position
001158  2               @move_y_up:
001158  2  20 94 0C     	jsr position_y_dec
00115B  2               
00115B  2               @set_position:
00115B  2  20 4F 0B     	jsr position_set
00115E  2               
00115E  2               @return:
00115E  2  60           	rts
00115F  2               
00115F  2               @climb_left:
00115F  2  20 37 0F     	jsr Player::check_collision_left
001162  2  F0 01        	beq @climb_left_1
001164  2  60           	rts								; collision on left, block the move
001165  2               @climb_left_1:
001165  2  20 BA 0E     	jsr bbox_coverage				; what tiles is the player covering
001168  2               @get_tile:
001168  2  B1 02        	lda (r0),y
00116A  2  F0 0E        	beq @no_grab					; no tile on right
00116C  2  85 31        	sta $31
00116E  2  84 30        	sty $30
001170  2  A8           	tay
001171  2  B9 7B 15     	lda tiles_attributes,y
001174  2  29 08        	and #TILE_ATTR::GRABBING
001176  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
001178  2  A4 30        	ldy $30
00117A  2               @no_grab:							; test the tile on the left on next line
00117A  2  C8           	iny
00117B  2  CA           	dex
00117C  2  D0 EA        	bne @get_tile
00117E  2  80 1E        	bra @climb_left_drop			; no grab tile on the right of the player
001180  2               @climb_left_2:
001180  2  A5 31        	lda $31							; tile index with grab attribute
001182  2  C9 05        	cmp #TILE_LEDGE
001184  2  D0 04        	bne @set_climb_sprite
001186  2               @set_hang_sprite:
001186  2  A9 09        	lda #Player::Sprites::HANG
001188  2  80 02        	bra @next
00118A  2               @set_climb_sprite:
00118A  2  A9 06        	lda #Player::Sprites::CLIMB
00118C  2               @next:
00118C  2  8D 88 16     	sta player0 + PLAYER::spriteID
00118F  2  20 5E 0B     	jsr set_bitmap
001192  2  A9 02 8D 83  	m_status STATUS_CLIMBING
001196  2  16           
001197  2  20 CF 0B     	jsr Player::position_x_dec		; move the player sprite, if the
00119A  2  20 4F 0B     	jsr position_set
00119D  2  60           	rts
00119E  2               @climb_left_drop:					; no ladder to stick to
00119E  2  A9 01 8D 83  	m_status STATUS_WALKING
0011A2  2  16           
0011A3  2  A9 03 8D 88  	SET_SPRITE Player::Sprites::LEFT, 1
0011A7  2  16 A9 01 8D  
0011AB  2  89 16 20 5E  
0011B0  2  60           	rts
0011B1  2               
0011B1  2               ;************************************************
0011B1  2               ; try to move the player down (crouch, hide, move down a ladder)
0011B1  2               ;
0011B1  2               move_down:
0011B1  2  AD 83 16     	lda player0 + PLAYER::status
0011B4  2  C9 04        	cmp #STATUS_FALLING
0011B6  2  D0 01        	bne @try_move_down						; cannot move when falling
0011B8  2  60           	rts
0011B9  2               
0011B9  2               @try_move_down:
0011B9  2               	; custom collision down
0011B9  2  AD 94 16     	lda player0 + PLAYER::tilemap
0011BC  2  85 02        	sta r0L
0011BE  2  AD 95 16     	lda player0 + PLAYER::tilemap + 1
0011C1  2  85 03        	sta r0H
0011C3  2               
0011C3  2  20 BA 0E     	jsr bbox_coverage
0011C6  2  8E 9A 0A     	stx ladders						; width of the player in tiles = number of ladders to find below
0011C9  2  98           	tya
0011CA  2  18           	clc
0011CB  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
0011CD  2  A8           	tay
0011CE  2               
0011CE  2               @test_colum:
0011CE  2  B1 02        	lda (r0L),y
0011D0  2  C9 04        	cmp #TILE_SOLID_LADER
0011D2  2  D0 05        	bne @check_solid_ground
0011D4  2               @ladder_down:
0011D4  2  CE 9A 0A     	dec ladders
0011D7  2  80 0C        	bra @next_column
0011D9  2               @check_solid_ground:
0011D9  2  84 30        	sty $30
0011DB  2  A8           	tay
0011DC  2  B9 7B 15     	lda tiles_attributes,y
0011DF  2  29 01        	and #TILE_ATTR::SOLID_GROUND
0011E1  2  D0 45        	bne @cannot_move_down
0011E3  2  A4 30        	ldy $30
0011E5  2               @next_column:
0011E5  2  CA           	dex
0011E6  2  F0 03        	beq @end
0011E8  2  C8           	iny
0011E9  2  80 E3        	bra @test_colum
0011EB  2               @end:
0011EB  2               
0011EB  2  AD 9A 0A     	lda ladders
0011EE  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
0011F0  2               
0011F0  2               	; if there player is covering ANY ladders (accros the boundingbox)
0011F0  2  A4 06        	ldy r2L
0011F2  2               @check_line:							; already climbing down is player grabbing no ladder
0011F2  2  A6 05        	ldx r1H
0011F4  2               @check_row:
0011F4  2  B1 02        	lda (r0L),y
0011F6  2  C9 04        	cmp #TILE_SOLID_LADER
0011F8  2  F0 12        	beq @move_down
0011FA  2  C8           	iny
0011FB  2  CA           	dex
0011FC  2  D0 F6        	bne @check_row
0011FE  2  C6 04        	dec r1L
001200  2  F0 26        	beq @cannot_move_down
001202  2               
001202  2  98           	tya
001203  2  18           	clc
001204  2  69 20        	adc #LEVEL_TILES_WIDTH
001206  2  38           	sec
001207  2  E5 05        	sbc r1H
001209  2  A8           	tay
00120A  2  80 E6        	bra @check_line
00120C  2               
00120C  2               @move_down:
00120C  2  20 23 0C     	jsr Player::position_y_inc		; move down the ladder
00120F  2  20 4F 0B     	jsr position_set
001212  2               
001212  2  A9 02 8D 83  	m_status STATUS_CLIMBING
001216  2  16           
001217  2               
001217  2  A9 06        	lda #Player::Sprites::CLIMB
001219  2  CD 88 16     	cmp player0 + PLAYER::spriteID
00121C  2  D0 01        	bne @change_sprite
00121E  2  60           	rts
00121F  2               
00121F  2               @change_sprite:
00121F  2               	;change player sprite
00121F  2  A9 06        	lda #Player::Sprites::CLIMB
001221  2  8D 88 16     	sta player0 + PLAYER::spriteID
001224  2  20 5E 0B     	jsr set_bitmap
001227  2  60           	rts
001228  2               
001228  2               @cannot_move_down:
001228  2  A9 00        	lda #STATUS_WALKING_IDLE
00122A  2  8D 83 16     	sta player0 + PLAYER::status
00122D  2  A9 01        	lda #01
00122F  2  8D 89 16     	sta player0 + PLAYER::spriteAnim
001232  2  20 5E 0B     	jsr set_bitmap
001235  2  9C 86 16     	stz player0 + PLAYER::delta_x
001238  2  60           	rts
001239  2               
001239  2               ;************************************************
001239  2               ; try to move the player up (move up a ladder)
001239  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
001239  2               ;	modify: r0, r1, r2
001239  2               ;
001239  2               move_up:
001239  2  AD 83 16     	lda player0 + PLAYER::status
00123C  2  C9 04        	cmp #STATUS_FALLING
00123E  2  D0 01        	bne @try_move_up				; cannot move when falling
001240  2  60           	rts
001241  2               @try_move_up:
001241  2               	; custom collision up
001241  2  20 BA 0E     	jsr bbox_coverage
001244  2  8E 9A 0A     	stx ladders						; width of the player in tiles = number of ladders to find below
001247  2               
001247  2               	; check the situation ABOVE the player
001247  2  38           	sec
001248  2  AD 94 16     	lda player0 + PLAYER::tilemap
00124B  2  E9 20        	sbc #LEVEL_TILES_WIDTH
00124D  2  85 02        	sta r0L
00124F  2  AD 95 16     	lda player0 + PLAYER::tilemap+1
001252  2  E9 00        	sbc #0
001254  2  85 03        	sta r0H
001256  2               
001256  2               	; if there the right numbers of ladder tiles above the player
001256  2               @test_colum:
001256  2  B1 02        	lda (r0L),y
001258  2  C9 04        	cmp #TILE_SOLID_LADER
00125A  2  D0 05        	bne @check_solid_ceiling
00125C  2  CE 9A 0A     	dec ladders
00125F  2  80 0C        	bra @next_column
001261  2               @check_solid_ceiling:
001261  2  84 30        	sty $30
001263  2  A8           	tay
001264  2  B9 7B 15     	lda tiles_attributes,y
001267  2  29 04        	and #TILE_ATTR::SOLID_CEILING
001269  2  D0 4F        	bne @cannot_move_up
00126B  2  A4 30        	ldy $30
00126D  2               @next_column:
00126D  2  CA           	dex
00126E  2  F0 03        	beq @end
001270  2  C8           	iny
001271  2  80 E3        	bra @test_colum
001273  2               @end:
001273  2               
001273  2  AD 9A 0A     	lda ladders
001276  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001278  2               
001278  2               	; if there player is covering ANY LADER (accros the boundingbox)
001278  2  AD 94 16     	lda player0 + PLAYER::tilemap
00127B  2  85 02        	sta r0L
00127D  2  AD 95 16     	lda player0 + PLAYER::tilemap+1
001280  2  85 03        	sta r0H
001282  2               
001282  2  A4 06        	ldy r2L
001284  2               @check_line:							; already climbing up is player grabbing no ladder
001284  2  A6 05        	ldx r1H
001286  2               @check_row:
001286  2  B1 02        	lda (r0L),y
001288  2  C9 04        	cmp #TILE_SOLID_LADER
00128A  2  F0 12        	beq @climb_down
00128C  2  C8           	iny
00128D  2  CA           	dex
00128E  2  D0 F6        	bne @check_row
001290  2  C6 04        	dec r1L
001292  2  F0 26        	beq @cannot_move_up
001294  2               
001294  2  98           	tya
001295  2  18           	clc
001296  2  69 20        	adc #LEVEL_TILES_WIDTH
001298  2  38           	sec
001299  2  E5 05        	sbc r1H
00129B  2  A8           	tay
00129C  2  80 E6        	bra @check_line
00129E  2               
00129E  2               @climb_down:
00129E  2  20 94 0C     	jsr Player::position_y_dec		; move up the ladder
0012A1  2  20 4F 0B     	jsr position_set
0012A4  2               
0012A4  2  A9 02 8D 83  	m_status STATUS_CLIMBING
0012A8  2  16           
0012A9  2               
0012A9  2  A9 06        	lda #Player::Sprites::CLIMB
0012AB  2  CD 88 16     	cmp player0 + PLAYER::spriteID
0012AE  2  D0 01        	bne @set_sprite
0012B0  2  60           	rts
0012B1  2               @set_sprite:						;change player sprite
0012B1  2  A9 06        	lda #Player::Sprites::CLIMB
0012B3  2  8D 88 16     	sta player0 + PLAYER::spriteID
0012B6  2  20 5E 0B     	jsr set_bitmap
0012B9  2  60           	rts
0012BA  2               
0012BA  2               @cannot_move_up:
0012BA  2  A9 00        	lda #STATUS_WALKING_IDLE
0012BC  2  8D 83 16     	sta player0 + PLAYER::status
0012BF  2  60           	rts
0012C0  2               
0012C0  2               ;************************************************
0012C0  2               ; jump
0012C0  2               ;	A = delta X value
0012C0  2               ;
0012C0  2               jump:
0012C0  2  AA           	tax
0012C1  2  AC 83 16         ldy player0 + PLAYER::status
0012C4  2  B9 0E 10     	lda ignore_move_request,y
0012C7  2  D0 17        	bne @return
0012C9  2  8E 86 16     	stx player0 + PLAYER::delta_x
0012CC  2               
0012CC  2               	; ensure there is no ceiling over the player
0012CC  2  20 75 0F     	jsr check_collision_up
0012CF  2  D0 0F        	bne @return
0012D1  2               
0012D1  2  A9 0A        	lda #JUMP_LO_TICKS
0012D3  2  8D 84 16     	sta player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
0012D6  2  A9 02        	lda #JUMP_HI_TICKS
0012D8  2  8D 85 16     	sta player0 + PLAYER::falling_ticks	+ 1
0012DB  2               
0012DB  2  A9 05 8D 83  	m_status STATUS_JUMPING
0012DF  2  16           
0012E0  2               @return:
0012E0  2  60           	rts
0012E1  2               
0012E1  2               .endscope
0012E1  2               
0012E1  1               .include "objects.asm"
0012E1  2               ;-----------------------------------------------------------------------------
0012E1  2               ;/////////////////////////////////////////////////////////////////////////////
0012E1  2               ;           start OBJECT code
0012E1  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0012E1  2               ;-----------------------------------------------------------------------------
0012E1  2               
0012E1  2               .scope Objects
0012E1  2               
0012E1  2  00 00        objects_map: .word 0
0012E3  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
0012E5  2               
0012E5  2               .struct Object
0012E5  2                   spriteID    .byte   ; ID of the vera sprite
0012E5  2                   imageID     .byte   ; ID of the image in the spritesheet
0012E5  2                   levelx      .word   ; level position
0012E5  2                   levely      .word
0012E5  2                   px          .word   ; screen position
0012E5  2                   py          .word
0012E5  2               .endstruct
0012E5  2               
0012E5  2               ;************************************************
0012E5  2               ; init the object data of the level
0012E5  2               ;
0012E5  2               init:
0012E5  2                   ; load the list of objects at the end of the previous load
0012E5  2  AD 10 08         lda current_load
0012E8  2  8D E1 12         sta objects_map
0012EB  2  AD 11 08         lda current_load + 1
0012EE  2  8D E2 12         sta objects_map + 1
0012F1  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
0012F5  2  A0 00 20 BA  
0012F9  2  FF A9 0B A2  
001314  2               
001314  2                   ; load the sprites  of objects at the end of the previous vload
001314  2  AD 12 08         lda Vera::vram_load
001317  2  8D E3 12         sta objects_sprites
00131A  2  AD 13 08         lda Vera::vram_load + 1
00131D  2  8D E4 12         sta objects_sprites + 1
001320  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
001324  2  A0 00 20 BA  
001328  2  FF A9 0C A2  
001343  2               
001343  2                   ; add each available sprites on screen
001343  2  AD E1 12         lda objects_map
001346  2  85 06            sta r2L
001348  2  AD E2 12         lda objects_map + 1
00134B  2  85 07            sta r2H
00134D  2               
00134D  2  B2 06            lda (r2)
00134F  2  85 31            sta $31     ; number of objects
001351  2               
001351  2  E6 06            inc r2L
001353  2               
001353  2               @loop:
001353  2                   ; get a free sprite
001353  2  20 D4 09         jsr Sprite::new
001356  2  8A               txa
001357  2  92 06            sta (r2)
001359  2               
001359  2                   ; load the first object
001359  2  AD E3 12     	lda objects_sprites
00135C  2  85 02        	sta r0L
00135E  2  AD E4 12     	lda objects_sprites + 1
001361  2  85 03        	sta r0H
001363  2  20 21 0A         jsr Sprite::vram_to_16_5
001366  2  A5 04            lda r1L
001368  2  85 02            sta r0L
00136A  2  A5 05            lda r1H
00136C  2  85 03            sta r0H
00136E  2               
00136E  2  B2 06        	lda (r2)                        ; sprite id
001370  2  A8               tay
001371  2  A2 50           	ldx #%01010000					; 16x16 sprite
001373  2  20 05 0A     	jsr Sprite::load
001376  2               
001376  2                   ; display the object
001376  2  B2 06        	lda (r2)                        ; sprite id
001378  2  A8               tay
001379  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
00137B  2  20 4F 0A     	jsr Sprite::display
00137E  2               
00137E  2                   ; position the first object
00137E  2  B2 06        	lda (r2)                        ; sprite id
001380  2  A8               tay
001381  2               
001381  2                   ; adresse of thepx, py attributes
001381  2  18               clc
001382  2  A5 06            lda r2L
001384  2  69 02            adc #Object::levelx
001386  2  85 02            sta r0L
001388  2  A5 07            lda r2H
00138A  2  69 00            adc #00
00138C  2  85 03            sta r0H
00138E  2  20 5C 0A     	jsr Sprite::position			; set position of the sprite
001391  2               
001391  2  C6 31            dec $31
001393  2  F0 0F            beq @return
001395  2               
001395  2                   ; move to the next object
001395  2  18               clc
001396  2  A5 06            lda r2L
001398  2  69 0A            adc #.sizeof(Object)
00139A  2  85 06            sta r2L
00139C  2  A5 07            lda r2H
00139E  2  69 00            adc #00
0013A0  2  85 07            sta r2H
0013A2  2               
0013A2  2  80 AF            bra @loop
0013A4  2               
0013A4  2               @return:
0013A4  2  60               rts
0013A5  2               .endscope
0013A5  2               
0013A5  1               
0013A5  1               ;-----------------------------------------------------------------------------
0013A5  1               ;/////////////////////////////////////////////////////////////////////////////
0013A5  1               ; main code
0013A5  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0013A5  1               ;-----------------------------------------------------------------------------
0013A5  1               
0013A5  1  00 00        objects: .word 0
0013A7  1               
0013A7  1               start:
0013A7  1               	; 320x240
0013A7  1  A9 40        	lda #64
0013A9  1  8D 2A 9F     	sta veradchscale
0013AC  1  8D 2B 9F     	sta veradcvscale
0013AF  1               
0013AF  1               	; activate layer0
0013AF  1  A9 71        	lda #%01110001
0013B1  1               ;	and #(255-VERA_LAYER0)
0013B1  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
0013B1  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
0013B4  1               
0013B4  1               	;---------------------------------
0013B4  1               	; load tiles file into vram
0013B4  1               	;---------------------------------
0013B4  1  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), VRAM_tiles
0013B8  1  A0 00 20 BA  
0013BC  1  FF A9 09 A2  
0013D5  1               
0013D5  1               	;---------------------------------
0013D5  1               	; load tilemaps into vram
0013D5  1               	;---------------------------------
0013D5  1               setlayer0:
0013D5  1  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
0013D9  1  0F 09 00 8D  
0013DD  1  2D 9F        
0013DF  1  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
0013E3  1  0F 09 03 8D  
0013E7  1  2D 9F        
0013E9  1  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
0013ED  1  9F           
0013EE  1  AD 2F 9F 29  	VTILEBASE 0, VRAM_tiles
0013F2  1  03 09 08 8D  
0013F6  1  2F 9F        
0013F8  1  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
0013FC  1  FC 09 03 8D  
001400  1  2F 9F        
001402  1  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
001406  1  A0 00 20 BA  
00140A  1  FF A9 0B A2  
001423  1               
001423  1               setlayer1:
001423  1  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
001427  1  0F 09 00 8D  
00142B  1  34 9F        
00142D  1  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
001431  1  0F 09 03 8D  
001435  1  34 9F        
001437  1  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
00143B  1  9F           
00143C  1  AD 36 9F 29  	VTILEBASE 1, VRAM_tiles
001440  1  03 09 08 8D  
001444  1  36 9F        
001446  1  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
00144A  1  FC 09 03 8D  
00144E  1  36 9F        
001450  1  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
001454  1  A0 00 20 BA  
001458  1  FF A9 09 A2  
001471  1               
001471  1               	;---------------------------------
001471  1               	; load collisionmap into ram
001471  1               	;---------------------------------
001471  1  A9 00        	lda #0
001473  1  85 00        	sta $00
001475  1  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), HIMEM
001479  1  A0 00 20 BA  
00147D  1  FF A9 0D A2  
001496  1               
001496  1               	;---------------------------------
001496  1               	; load sprite 0,1,2 into vram
001496  1               	;---------------------------------
001496  1               load_sprites:
001496  1               	; prepare VERA sprites
001496  1  20 9E 09     	jsr Sprite::init_addr_table
001499  1               
001499  1  A9 00 85 02  	LOAD_r0 (VRAM_tiles + tiles * tile_size)	; base for the sprites
00149D  1  A9 3B 85 03  
0014A1  1  20 9C 0A     	jsr Player::init
0014A4  1               
0014A4  1               	;---------------------------------
0014A4  1               	; load objects list into ram
0014A4  1               	;---------------------------------
0014A4  1  20 E5 12     	jsr Objects::init
0014A7  1               
0014A7  1               setirq:
0014A7  1                  ; backup default RAM IRQ vector
0014A7  1  AD 14 03        lda IRQVec
0014AA  1  8D 78 15        sta default_irq_vector
0014AD  1  AD 15 03        lda IRQVec+1
0014B0  1  8D 79 15        sta default_irq_vector+1
0014B3  1               
0014B3  1                  ; overwrite RAM IRQ vector with custom handler address
0014B3  1  78              sei ; disable IRQ while vector is changing
0014B4  1  A9 C8           lda #<custom_irq_handler
0014B6  1  8D 14 03        sta IRQVec
0014B9  1  A9 14           lda #>custom_irq_handler
0014BB  1  8D 15 03        sta IRQVec+1
0014BE  1  A9 01           lda #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
0014C0  1  8D 26 9F        sta veraien
0014C3  1  58              cli ; enable IRQ now that vector is properly set
0014C4  1               
0014C4  1               mainloop:
0014C4  1  CB           	wai
0014C5  1               	; do nothing in main loop, just let ISR do everything
0014C5  1  80 FD        	bra mainloop
0014C7  1               
0014C7  1  60           	rts
0014C8  1               
0014C8  1               ;-----------------------------------------------------------------------------
0014C8  1               ;/////////////////////////////////////////////////////////////////////////////
0014C8  1               ; deal with IRQ"s
0014C8  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0014C8  1               ;-----------------------------------------------------------------------------
0014C8  1               custom_irq_handler:
0014C8  1  AD 27 9F        lda veraisr
0014CB  1  29 01           and #VERA_VSYNC_BIT
0014CD  1  F0 2D           beq @continue 	; non-VSYNC IRQ, no tick update
0014CF  1               
0014CF  1               	;---------------------------------
0014CF  1               	; animate sprite
0014CF  1               	;---------------------------------
0014CF  1  20 F7 0C     	jsr Player::animate
0014D2  1               
0014D2  1               	;---------------------------------
0014D2  1               	; player physics
0014D2  1               	;---------------------------------
0014D2  1  20 9B 0D     	jsr Player::physics
0014D5  1               
0014D5  1               	;---------------------------------
0014D5  1               	; check keyboard
0014D5  1               	;---------------------------------
0014D5  1               @check_keyboard:
0014D5  1  A9 00        	lda #0
0014D7  1  20 56 FF     	jsr joystick_get
0014DA  1  8D 81 15     	sta joystick
0014DD  1               
0014DD  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
0014DD  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
0014DD  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
0014DD  1               ;
0014DD  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
0014DD  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
0014DD  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
0014DD  1               ;  .Y, byte 2:
0014DD  1               ;              $00 = joystick present
0014DD  1               ;              $FF = joystick not present
0014DD  1  89 81        	bit #(JOY_RIGHT|JOY_B)
0014DF  1  F0 1E        	beq @jump_right
0014E1  1  89 82        	bit #(JOY_LEFT|JOY_B)
0014E3  1  F0 21        	beq @jump_left
0014E5  1  89 01        	bit #JOY_RIGHT
0014E7  1  F0 29        	beq @joystick_right
0014E9  1  89 02        	bit #JOY_LEFT
0014EB  1  F0 20        	beq @joystick_left
0014ED  1  89 04        	bit #JOY_DOWN
0014EF  1  F0 2B        	beq @movedown
0014F1  1  89 08        	bit #JOY_UP
0014F3  1  F0 22        	beq @moveup
0014F5  1  89 80        	bit #JOY_B
0014F7  1  F0 28        	beq @jump
0014F9  1               
0014F9  1  20 82 0D     	jsr Player::set_idle
0014FC  1               
0014FC  1               @continue:
0014FC  1                  ; continue to default IRQ handler
0014FC  1  6C 78 15        jmp (default_irq_vector)
0014FF  1                  ; RTI will happen after jump
0014FF  1               
0014FF  1               @jump_right:
0014FF  1  A9 01        	lda #$01					; jump right
001501  1  20 C0 12     	jsr Player::jump
001504  1  80 F6        	bra @continue
001506  1               
001506  1               @jump_left:
001506  1  A9 FF        	lda #$ff					; jump left
001508  1  20 C0 12     	jsr Player::jump
00150B  1  80 EF        	bra @continue
00150D  1               
00150D  1               @joystick_left:
00150D  1  20 E5 10     	jsr Player::move_left
001510  1  80 EA        	bra @continue
001512  1               
001512  1               @joystick_right:
001512  1  20 15 10     	jsr Player::move_right
001515  1  80 E5        	bra @continue
001517  1               
001517  1               @moveup:
001517  1  20 39 12     	jsr Player::move_up
00151A  1  80 E0        	bra @continue
00151C  1               
00151C  1               @movedown:
00151C  1  20 B1 11     	jsr Player::move_down
00151F  1  80 DB        	bra @continue
001521  1               
001521  1               @jump:
001521  1  A9 00        	lda #0				; jump up
001523  1  20 C0 12     	jsr Player::jump
001526  1  80 D4        	bra @continue
001528  1               
001528  1               .segment "DATA"
001528  1               .include "tilemap.inc"
001528  2               map:
001528  2  20 20        	.byte 32,32
00152A  2  6C 65 76 65  fslevel: .literal "level.bin"
00152E  2  6C 2E 62 69  
001532  2  6E           
001533  2               fslevel_end:
001533  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001537  2  65 72 79 2E  
00153B  2  62 69 6E     
00153E  2               fsbackground_end:
00153E  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001542  2  69 73 69 6F  
001546  2  6E 2E 62 69  
00154B  2               fscollision_end:
00154B  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
00154F  2  63 74 73 2E  
001553  2  62 69 6E     
001556  2               fsobjects_end:
001556  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
00155A  2  74 65 73 31  
00155E  2  2E 62 69 6E  
001562  2               fssprites1_end:
001562  2               tileset:
001562  2  10 10        	.byte 16,16
001564  2               tiles = 43
001564  2               tile_size = 256
001564  2  74 69 6C 65  fstile: .literal "tiles.bin"
001568  2  73 2E 62 69  
00156C  2  6E           
00156D  2               fstileend:
00156D  2               
00156D  1               .include "sprite.inc"
00156D  2  73 70 72 69  fssprite:	.literal "sprites.bin"
001571  2  74 65 73 2E  
001575  2  62 69 6E     
001578  2               fsspriteend:
001578  2               sprites = 12
001578  2               sprite_size = 1024
001578  2               
001578  1               
001578  1  00 00        default_irq_vector: .addr 0
00157A  1  00           trigger_debug: .byte 0
00157B  1               tiles_attributes:
00157B  1  00           	.byte %00000000	;	TILE_NO_COLLISION
00157C  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
00157D  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
00157E  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
00157F  1  09           	.byte %00001001	;	TILE_SOLID_LADER
001580  1  09           	.byte %00001001	;	TILE_LEDGE
001581  1               
001581  1               .segment "BSS"
001581  1  xx           	joystick: .res 1
001582  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
001586  1  xx xx xx xx  
00158A  1  xx xx xx xx  
001682  1  xx xx xx xx  	player0: .tag PLAYER
001686  1  xx xx xx xx  
00168A  1  xx xx xx xx  
001682  1               
