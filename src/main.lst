ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C CB 19        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               
000839  1               .include "sprites.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Sprite code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .struct VSPRITE
000839  2               	address125 .byte
000839  2               	mode_xxx_address1613 .byte
000839  2               	x70 .byte
000839  2               	x98 .byte
000839  2               	y70 .byte
000839  2               	y98 .byte
000839  2               	collision_zdepth_vflip_hflip .byte
000839  2               	height_width_offset .byte
000839  2               .endstruct
000839  2               
000839  2               .scope Sprite
000839  2               
000839  2               SPRITES_ZP = $0070	; memory reserved for Sprites
000839  2               
000839  2               ;-----------------------------------------
000839  2               ; sprites components collections
000839  2               MAX_SPRITES = 32
000839  2               
000839  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
00083D  2  xx xx xx xx  
000841  2  xx xx xx xx  
000859  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
00085D  2  xx xx xx xx  
000861  2  xx xx xx xx  
000879  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
00087D  2  xx xx xx xx  
000881  2  xx xx xx xx  
000899  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
00089D  2  xx xx xx xx  
0008A1  2  xx xx xx xx  
0008B9  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
0008BD  2  xx xx xx xx  
0008C1  2  xx xx xx xx  
0008D9  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
0008DD  2  xx xx xx xx  
0008E1  2  xx xx xx xx  
0008F9  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
0008FD  2  xx xx xx xx  
000901  2  xx xx xx xx  
000919  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
00091D  2  xx xx xx xx  
000921  2  xx xx xx xx  
000939  2  xx xx xx xx  sprites_aabb_x: .res MAX_SPRITES	; collision box INSIDE the sprite top-left corner
00093D  2  xx xx xx xx  
000941  2  xx xx xx xx  
000959  2  xx xx xx xx  sprites_aabb_y: .res MAX_SPRITES
00095D  2  xx xx xx xx  
000961  2  xx xx xx xx  
000979  2  xx xx xx xx  sprites_aabb_w: .res MAX_SPRITES	; collision box INSIDE the sprite height/width
00097D  2  xx xx xx xx  
000981  2  xx xx xx xx  
000999  2  xx xx xx xx  sprites_aabb_h: .res MAX_SPRITES
00099D  2  xx xx xx xx  
0009A1  2  xx xx xx xx  
0009B9  2  xx xx xx xx  sprites_collision_callback: .res (MAX_SPRITES * 2)
0009BD  2  xx xx xx xx  
0009C1  2  xx xx xx xx  
0009F9  2               
0009F9  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
0009FD  2  xx xx xx xx  
000A01  2  xx xx xx xx  
000AF9  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000AFA  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000AFC  2               
000AFC  2               ;************************************************
000AFC  2               ;  init sprites manager
000AFC  2               ; create a table with the VERA @addr for each sprite
000AFC  2               ;
000AFC  2               init_addr_table:
000AFC  2               	; clear the sprites components
000AFC  2  A6 20        	ldx MAX_SPRITES
000AFE  2  CA           	dex
000AFF  2               :
000AFF  2  9E 39 08     	stz sprites_xL,x
000B02  2  9E 59 08     	stz sprites_xH,x
000B05  2  9E 79 08     	stz sprites_yL,x
000B08  2  9E 99 08     	stz sprites_yH,x
000B0B  2  9E 79 09     	stz sprites_aabb_w,x
000B0E  2  9E 99 09     	stz sprites_aabb_h,x
000B11  2  9E 39 09     	stz sprites_aabb_x,x
000B14  2  9E 59 09     	stz sprites_aabb_y,x
000B17  2  CA           	dex
000B18  2  10 E5        	bpl :-
000B1A  2               
000B1A  2               	; activate sprite colisions
000B1A  2               	;lda veraien
000B1A  2               	;ora #VERA_SPRCOL_BIT
000B1A  2               	;sta veraien
000B1A  2               
000B1A  2               	; all sprites are availble but ZERO (reserved player)
000B1A  2  A2 FF        	ldx #$ff
000B1C  2               :
000B1C  2  9E F9 09     	stz sprites,X
000B1F  2  CA           	dex
000B20  2  D0 FA        	bne :-
000B22  2  A9 01        	lda #01
000B24  2  8D F9 09     	sta sprites
000B27  2               
000B27  2               	; start of the sprites in VERA memory
000B27  2  A9 00        	lda #<vram_sprd
000B29  2  85 02        	sta r0L
000B2B  2  A9 FC        	lda #>vram_sprd
000B2D  2  85 03        	sta r0H
000B2F  2               
000B2F  2  A2 80        	ldx #128
000B31  2  A0 00        	ldy #0
000B33  2                @loop:
000B33  2  A5 03        	lda r0H
000B35  2  99 D5 1B     	sta sprites_table,y
000B38  2  C8           	iny
000B39  2  A5 02        	lda r0L
000B3B  2  99 D5 1B     	sta sprites_table,y
000B3E  2  C8           	iny
000B3F  2               
000B3F  2  18           	clc
000B40  2  A5 02        	lda r0L
000B42  2  69 08        	adc #8
000B44  2  85 02        	sta r0L
000B46  2  A5 03        	lda r0H
000B48  2  69 00        	adc #0
000B4A  2  85 03        	sta r0H	; move to next sprite
000B4C  2               
000B4C  2  CA           	dex
000B4D  2  D0 E4        	bne @loop
000B4F  2               
000B4F  2  60           	rts
000B50  2               
000B50  2               ;************************************************
000B50  2               ; get a new available vera sprite
000B50  2               ;	output: X = index of the vera sprite
000B50  2               ;			0 = no sprite available
000B50  2               ;
000B50  2               new:
000B50  2  A2 01        	ldx #$01
000B52  2               :
000B52  2  BD F9 09     	lda sprites,x
000B55  2  F0 03        	beq @return
000B57  2  E8           	inx
000B58  2  D0 F8        	bne :-
000B5A  2               @return:
000B5A  2  A9 01        	lda #01
000B5C  2  9D F9 09     	sta sprites,x
000B5F  2               
000B5F  2               	; count activated sprites
000B5F  2  EC F9 0A     	cpx nb_sprites
000B62  2  90 03        	bcc :+
000B64  2               
000B64  2  EE F9 0A     	inc nb_sprites
000B67  2               :
000B67  2  60           	rts
000B68  2               
000B68  2               ;
000B68  2               ; the the VERA memory pointer to sprite Y + attribute X
000B68  2               ;	Y = sprite index
000B68  2               ;	X = attribute offset
000B68  2               ;
000B68  2               vram:
000B68  2  DA           	phx			; save X on the stack
000B69  2               
000B69  2  98           	tya			; index of the sprite
000B6A  2  0A           	asl
000B6B  2  A8           	tay			; index of the address of the sprite (y*2)
000B6C  2               
000B6C  2  A9 00        	lda #0
000B6E  2  8D 25 9F     	sta veractl
000B71  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000B73  2  8D 22 9F     	sta verahi
000B76  2  B9 D5 1B     	lda sprites_table, y
000B79  2  8D 21 9F     	sta veramid
000B7C  2  C8           	iny
000B7D  2  BA           	tsx
000B7E  2  BD 01 01     	lda $0101,x	; reload X from the stack
000B81  2  79 D5 1B     	adc sprites_table, y
000B84  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000B87  2  FA           	plx
000B88  2  60           	rts
000B89  2               
000B89  2               ;************************************************
000B89  2               ; configure the sprite
000B89  2               ;	input: 	A = sprite collision mask
000B89  2               ;			Y = sprite index
000B89  2               ;		   	X = sprite size :
000B89  2               ;		   	r0 = vram @ of the sprite data
000B89  2               ;
000B89  2  07 0F 1F 3F  sprites_size: .byte 7, 15, 31, 63	; count byte 0 as a byte, so width is not "8" pixel nut "0" + "7" pixels
000B8D  2               
000B8D  2               load:
000B8D  2  86 70        	stx SPRITES_ZP
000B8F  2  85 72        	sta SPRITES_ZP + 2
000B91  2  84 73        	sty SPRITES_ZP + 3
000B93  2  20 06 0C     	jsr set_bitmap
000B96  2               
000B96  2  9C 23 9F     	stz veradat					; x = 0
000B99  2  9C 23 9F     	stz veradat
000B9C  2  9C 23 9F     	stz veradat					; y = 0
000B9F  2  9C 23 9F     	stz veradat
000BA2  2  A5 72        	lda SPRITES_ZP + 2			; load collision mask
000BA4  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000BA6  2  8D 23 9F     	sta veradat
000BA9  2  A5 70        	lda SPRITES_ZP				; 32x32 sprite
000BAB  2  8D 23 9F     	sta veradat
000BAE  2               
000BAE  2  4A           	lsr
000BAF  2  4A           	lsr
000BB0  2  4A           	lsr
000BB1  2  4A           	lsr
000BB2  2  85 70        	sta SPRITES_ZP				; focus on sprite_height, sprite_width
000BB4  2               
000BB4  2  A4 73        	ldy SPRITES_ZP + 3			; sprite index
000BB6  2               
000BB6  2  29 03        	and #%00000011				; sprite_width
000BB8  2  AA           	tax
000BB9  2  BD 89 0B     	lda sprites_size,x
000BBC  2  99 79 09     	sta sprites_aabb_w, y		; store width in pixels in the sprite attribute
000BBF  2  A9 00        	lda #00
000BC1  2  99 39 09     	sta sprites_aabb_x, y		; default collision box starts (0,0)
000BC4  2               
000BC4  2  A5 70        	lda SPRITES_ZP
000BC6  2  4A           	lsr
000BC7  2  4A           	lsr							; sprite_height
000BC8  2  AA           	tax
000BC9  2  BD 89 0B     	lda sprites_size,x
000BCC  2  99 99 09     	sta sprites_aabb_h, y		; store height in pixels in the sprite attribute
000BCF  2  A9 00        	lda #00
000BD1  2  99 59 09     	sta sprites_aabb_y, y		; default collision box starts (0,0)
000BD4  2               
000BD4  2  60           	rts
000BD5  2               
000BD5  2               ;************************************************
000BD5  2               ; set the collision box of the sprite
000BD5  2               ;	input y = sprite index
000BD5  2               ;		r0L = top-left corner X
000BD5  2               ;		r0H = top-left corner Y
000BD5  2               ;		r1L = width
000BD5  2               ;		r1H = height
000BD5  2               ;
000BD5  2               set_aabb:
000BD5  2  A5 02        	lda r0L
000BD7  2  99 39 09     	sta sprites_aabb_x,y
000BDA  2  A5 03        	lda r0H
000BDC  2  99 59 09     	sta sprites_aabb_y,y
000BDF  2  A5 04        	lda r1L
000BE1  2  99 79 09     	sta sprites_aabb_w,y
000BE4  2  A5 05        	lda r1H
000BE6  2  99 99 09     	sta sprites_aabb_h,y
000BE9  2  60           	rts
000BEA  2               
000BEA  2               ;************************************************
000BEA  2               ; configure full veram memory (16:0) into optimized one (12:5)
000BEA  2               ;	input: r0 = vram @ of the sprite data
000BEA  2               ;	output: r1
000BEA  2               ;
000BEA  2               vram_to_16_5:
000BEA  2               	; load full VERA memory (12:0) into R0
000BEA  2  A5 02        	lda r0L
000BEC  2  85 04        	sta r1L
000BEE  2  A5 03        	lda r0H
000BF0  2  85 05        	sta r1H
000BF2  2               
000BF2  2               	; convert full addr to vera mode (bit shiting >> 5)
000BF2  2  A5 05        	lda r1H
000BF4  2  4A           	lsr
000BF5  2  66 04        	ror r1L
000BF7  2  4A           	lsr
000BF8  2  66 04        	ror r1L
000BFA  2  4A           	lsr
000BFB  2  66 04        	ror r1L
000BFD  2  4A           	lsr
000BFE  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000C00  2  4A           	lsr
000C01  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000C03  2  85 05        	sta r1H
000C05  2  60           	rts
000C06  2               
000C06  2               ;************************************************
000C06  2               ; change the address of the bitmap for the sprite
000C06  2               ;	Y = sprite index
000C06  2               ;	r0 = vera memory (12:5)
000C06  2               ;
000C06  2               set_bitmap:
000C06  2  A2 00        	ldx #VSPRITE::address125
000C08  2  20 68 0B     	jsr vram			; set very pointer to the address of the bitmap
000C0B  2               
000C0B  2  A5 02        	lda r0L
000C0D  2  8D 23 9F     	sta veradat
000C10  2  A5 03        	lda r0H
000C12  2  09 80        	ora #$80						; M = 8 bits
000C14  2  8D 23 9F     	sta veradat
000C17  2               
000C17  2  60           	rts
000C18  2               
000C18  2               ;************************************************
000C18  2               ; change the display byte for a sprite
000C18  2               ;	Y = sprite index
000C18  2               ;	X = display value to set
000C18  2               ;
000C18  2               display:
000C18  2  86 02        	stx r0L		; save X for later
000C1A  2  84 03        	sty r0H
000C1C  2               
000C1C  2               	; set vram memory on the X sprite
000C1C  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000C1E  2  20 68 0B     	jsr vram
000C21  2  AD 23 9F     	lda veradat
000C24  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000C26  2  05 02        	ora r0L
000C28  2  85 02        	sta r0L
000C2A  2               
000C2A  2  A4 03        	ldy r0H
000C2C  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000C2E  2  20 68 0B     	jsr vram
000C31  2               
000C31  2  A5 02        	lda r0L
000C33  2  8D 23 9F     	sta veradat
000C36  2  60           	rts
000C37  2               
000C37  2               ;************************************************
000C37  2               ; define position of sprite
000C37  2               ;	Y = sprite index
000C37  2               ;	r0 = addr of word X & word Y
000C37  2               ;
000C37  2               position:
000C37  2               	; set vram memory on the X sprite
000C37  2  5A           	phy
000C38  2  A2 02        	ldx #VSPRITE::x70
000C3A  2  20 68 0B     	jsr vram
000C3D  2  FA           	plx
000C3E  2               
000C3E  2  A0 01        	ldy #1
000C40  2  18           	clc
000C41  2  B2 02        	lda (r0L)				; X low => vera X
000C43  2  8D 23 9F     	sta veradat
000C46  2  7D 39 09     	adc sprites_aabb_x, x	; X + aabb.x => collision box.x
000C49  2  9D 39 08     	sta sprites_xL, x
000C4C  2  B1 02        	lda (r0L),y				; X high => vera X hight
000C4E  2  8D 23 9F     	sta veradat
000C51  2  69 00        	adc #00
000C53  2  9D 59 08     	sta sprites_xH, x		; X + aabbx.x => collision box.x
000C56  2               
000C56  2  18           	clc
000C57  2  BD 39 08     	lda sprites_xL, x
000C5A  2  7D 79 09     	adc sprites_aabb_w, x
000C5D  2  9D B9 08     	sta sprites_x1L, x
000C60  2  BD 59 08     	lda sprites_xH, x
000C63  2  69 00        	adc #0
000C65  2  9D D9 08     	sta sprites_x1H, x		;X1 = x + aabb.x + aabb.w
000C68  2               
000C68  2  18           	clc
000C69  2  C8           	iny
000C6A  2  B1 02        	lda (r0L),y
000C6C  2  8D 23 9F     	sta veradat				; Y low => vera
000C6F  2  7D 59 09     	adc sprites_aabb_y, x
000C72  2  9D 79 08     	sta sprites_yL, x		; Y + aabb.y => collision box.y
000C75  2  C8           	iny
000C76  2  B1 02        	lda (r0L),y
000C78  2  8D 23 9F     	sta veradat				; Y heigh  => vera Y high
000C7B  2  69 00        	adc #0
000C7D  2  9D 99 08     	sta sprites_yH, x		; Y + aabb.y => collision box.y
000C80  2               
000C80  2  18           	clc
000C81  2  BD 79 08     	lda sprites_yL, x
000C84  2  7D 99 09     	adc sprites_aabb_h, x
000C87  2  9D F9 08     	sta sprites_y1L, x
000C8A  2  BD 99 08     	lda sprites_yH, x
000C8D  2  69 00        	adc #00
000C8F  2  9D 19 09     	sta sprites_y1H, x		; Y1 = y + aabb.y + aabb.h
000C92  2               
000C92  2  60           	rts
000C93  2               
000C93  2               ;************************************************
000C93  2               ; Change the flipping of a sprite
000C93  2               ;	Y = sprite index
000C93  2               ;	A = value to set
000C93  2               ;
000C93  2               set_flip:
000C93  2  85 70        	sta SPRITES_ZP
000C95  2  84 71        	sty SPRITES_ZP + 1
000C97  2               
000C97  2               	; set vram memory on the X sprite
000C97  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000C99  2  20 68 0B     	jsr vram
000C9C  2               
000C9C  2  AD 23 9F     	lda veradat				;get current value
000C9F  2  29 FC        	and #SPRITE_FLIP_CLEAR
000CA1  2  05 70        	ora SPRITES_ZP			; change only the flip value
000CA3  2  85 70        	sta SPRITES_ZP
000CA5  2               
000CA5  2  A4 71        	ldy SPRITES_ZP + 1
000CA7  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000CA9  2  20 68 0B     	jsr vram
000CAC  2  A5 70        	lda SPRITES_ZP
000CAE  2  8D 23 9F     	sta veradat
000CB1  2  60           	rts
000CB2  2               
000CB2  2               ;************************************************
000CB2  2               ; register sprites collision
000CB2  2               ; input: A = collision mask
000CB2  2               ;
000CB2  2               register_collision:
000CB2  2  EE FA 0A     	inc collisions
000CB5  2  8D FB 0A     	sta collisions + 1
000CB8  2  60           	rts
000CB9  2               
000CB9  2               ;************************************************
000CB9  2               ; Axis Aligned Bounding Box collision between 2 sprites
000CB9  2               ; input: X = index of sprite 1
000CB9  2               ;		 Y = index of sprite 2
000CB9  2               ; return: Z = no collision
000CB9  2               ;
000CB9  2               aabb_collision:
000CB9  2  BD 59 08     	lda sprites_xH, x
000CBC  2  D9 D9 08     	cmp sprites_x1H, y
000CBF  2  90 02        	bcc :+
000CC1  2  D0 49        	bne @false
000CC3  2               :
000CC3  2  BD 39 08     	lda sprites_xL, x
000CC6  2  D9 B9 08     	cmp sprites_x1L, y
000CC9  2  90 02        	bcc :+
000CCB  2  D0 3F        	bne @false
000CCD  2               :						; s(x).left_x <= s(y).right_x
000CCD  2               
000CCD  2  B9 59 08     	lda sprites_xH, y
000CD0  2  DD D9 08     	cmp sprites_x1H, x
000CD3  2  90 02        	bcc :+
000CD5  2  D0 35        	bne @false
000CD7  2               :
000CD7  2  B9 39 08     	lda sprites_xL, y
000CDA  2  DD B9 08     	cmp sprites_x1L, x
000CDD  2  90 02        	bcc :+
000CDF  2  D0 2B        	bne @false
000CE1  2               :						; AND s(y).left_x <= s(x).right_x
000CE1  2               
000CE1  2  BD 99 08     	lda sprites_yH, x
000CE4  2  D9 19 09     	cmp sprites_y1H, y
000CE7  2  90 02        	bcc :+
000CE9  2  D0 21        	bne @false
000CEB  2               :
000CEB  2  BD 79 08     	lda sprites_yL, x
000CEE  2  D9 F9 08     	cmp sprites_y1L, y
000CF1  2  90 02        	bcc :+
000CF3  2  D0 17        	bne @false
000CF5  2               :						; AND s(x).bottom_y <= s(y).top_y
000CF5  2               
000CF5  2  B9 99 08     	lda sprites_yH, y
000CF8  2  DD 19 09     	cmp sprites_y1H, x
000CFB  2  90 02        	bcc :+
000CFD  2  D0 0D        	bne @false
000CFF  2               :
000CFF  2  B9 79 08     	lda sprites_yL, y
000D02  2  DD F9 08     	cmp sprites_y1L, x
000D05  2  90 02        	bcc :+
000D07  2  D0 03        	bne @false
000D09  2               :						; AND s(y).bottom_y <= s(x).top_y
000D09  2               
000D09  2               @true:
000D09  2  A9 01        	lda #01
000D0B  2  60           	rts
000D0C  2               @false:
000D0C  2  A9 00        	lda #00
000D0E  2  60           	rts
000D0F  2               
000D0F  2               ;************************************************
000D0F  2               ; after a collision IRQ, test all sprites to find colliding ones
000D0F  2               ; return: a = no collision
000D0F  2               ;
000D0F  2               find_colliding:
000D0F  2  AD F9 0A     	lda nb_sprites
000D12  2  3A           	dec
000D13  2  85 70        	sta SPRITES_ZP
000D15  2  3A           	dec
000D16  2  85 71        	sta SPRITES_ZP + 1
000D18  2               
000D18  2               @inner_loop:
000D18  2  A6 70        	ldx SPRITES_ZP
000D1A  2  A4 71        	ldy SPRITES_ZP + 1
000D1C  2  20 B9 0C     	jsr aabb_collision
000D1F  2  D0 15        	bne @found
000D21  2               
000D21  2  C6 71        	dec SPRITES_ZP + 1
000D23  2  30 02        	bmi @try_next
000D25  2  80 F1        	bra @inner_loop
000D27  2               
000D27  2               @try_next:
000D27  2  A5 70        	lda SPRITES_ZP
000D29  2  3A           	dec
000D2A  2  F0 07        	beq @not_found
000D2C  2  85 70        	sta SPRITES_ZP			; start comparison end - 1
000D2E  2  3A           	dec						; compare with start - 1 unless < 0
000D2F  2  85 71        	sta SPRITES_ZP + 1
000D31  2  80 E5        	bra @inner_loop
000D33  2               
000D33  2               @not_found:
000D33  2  A9 00        	lda #00
000D35  2  60           	rts
000D36  2               @found:
000D36  2  A9 01        	lda #01
000D38  2  60           	rts
000D39  2               
000D39  2               ;************************************************
000D39  2               ; manage collisions after a collision IRQ
000D39  2               ;
000D39  2               check_irq_collision:
000D39  2  AD FA 0A     	lda collisions
000D3C  2  F0 06        	beq @return
000D3E  2               
000D3E  2  9C FA 0A     	stz collisions		; clear the collision flag
000D41  2               
000D41  2  20 0F 0D     	jsr find_colliding
000D44  2               
000D44  2               @return:
000D44  2  60           	rts
000D45  2               
000D45  2               ;************************************************
000D45  2               ; check if sprite X collides with any of the others
000D45  2               ; input : X = sprite index to test
000D45  2               ; return: a = index of sprite in collision
000D45  2               ;
000D45  2               check_collision:
000D45  2  86 70        	stx SPRITES_ZP
000D47  2  AD F9 0A     	lda nb_sprites
000D4A  2  3A           	dec
000D4B  2  F0 10        	beq @no_collision		; if there is only 1 sprite, no_collision
000D4D  2  A8           	tay						; start with the last sprite
000D4E  2               @loop:
000D4E  2  C4 70        	cpy SPRITES_ZP
000D50  2  F0 05        	beq @next				; ignore the input sprite
000D52  2  20 B9 0C     	jsr aabb_collision
000D55  2  D0 05        	bne @collision
000D57  2               @next:
000D57  2  88           	dey
000D58  2  30 03        	bmi @no_collision		; 0 has to be taked care off
000D5A  2  80 F2        	bra @loop
000D5C  2               
000D5C  2               @collision:
000D5C  2  60           	rts
000D5D  2               
000D5D  2               @no_collision:
000D5D  2  A9 00        	lda #00
000D5F  2  60           	rts
000D60  2               
000D60  2               ;************************************************
000D60  2               ; simulate a sprite movement and check collision
000D60  2               ;	input A = vertical (1) / horizontal (2)
000D60  2               ;			  plus (4) / minus (8)
000D60  2               ;		  X = sprite index
000D60  2               ;
000D60  2               precheck_collision:
000D60  2  85 72        	sta SPRITES_ZP + 2
000D62  2  86 73        	stx SPRITES_ZP + 3
000D64  2               
000D64  2  89 01        	bit #01
000D66  2  D0 5D        	bne @vertical
000D68  2  89 08        	bit #08
000D6A  2  D0 2D        	bne @horizontal_minus
000D6C  2               
000D6C  2               @horizontal_plus:
000D6C  2               	; save current X, X1 and add the delta
000D6C  2  18           	clc
000D6D  2  BD 39 08     	lda sprites_xL, x
000D70  2  85 75        	sta SPRITES_ZP + 5
000D72  2  69 01        	adc #01
000D74  2  9D 39 08     	sta sprites_xL, x
000D77  2               
000D77  2  BD 59 08     	lda sprites_xH, x
000D7A  2  85 76        	sta SPRITES_ZP + 6
000D7C  2  69 00        	adc #00
000D7E  2  9D 59 08     	sta sprites_xH, x
000D81  2               @horizontal_plus_width:
000D81  2  18           	clc
000D82  2  BD B9 08     	lda sprites_x1L, x
000D85  2  85 77        	sta SPRITES_ZP + 7
000D87  2  65 74        	adc SPRITES_ZP + 4
000D89  2  9D B9 08     	sta sprites_x1L, x
000D8C  2               
000D8C  2  BD D9 08     	lda sprites_x1H, x
000D8F  2  85 78        	sta SPRITES_ZP + 8
000D91  2  69 00        	adc #00
000D93  2  9D D9 08     	sta sprites_x1H, x
000D96  2  4C 1F 0E     	jmp @test
000D99  2               
000D99  2               @horizontal_minus:
000D99  2  38           	sec
000D9A  2  BD 39 08     	lda sprites_xL, x
000D9D  2  85 75        	sta SPRITES_ZP + 5
000D9F  2  E9 01        	sbc #01
000DA1  2  9D 39 08     	sta sprites_xL, x
000DA4  2               
000DA4  2  BD 59 08     	lda sprites_xH, x
000DA7  2  85 76        	sta SPRITES_ZP + 6
000DA9  2  E9 00        	sbc #00
000DAB  2  9D 59 08     	sta sprites_xH, x
000DAE  2               @horizontal_minus_width:
000DAE  2  38           	sec
000DAF  2  BD B9 08     	lda sprites_x1L, x
000DB2  2  85 77        	sta SPRITES_ZP + 7
000DB4  2  E9 01        	sbc #01
000DB6  2  9D B9 08     	sta sprites_x1L, x
000DB9  2               
000DB9  2  BD D9 08     	lda sprites_x1H, x
000DBC  2  85 78        	sta SPRITES_ZP + 8
000DBE  2  E9 00        	sbc #00
000DC0  2  9D D9 08     	sta sprites_x1H, x
000DC3  2  80 5A        	bra @test
000DC5  2               
000DC5  2               @vertical:
000DC5  2  89 08        	bit #08
000DC7  2  D0 2C        	bne @vertical_minus
000DC9  2               @vertical_plus:
000DC9  2               	; save current Y, Y1 and add delta
000DC9  2  18           	clc
000DCA  2  BD 79 08     	lda sprites_yL, x
000DCD  2  85 75        	sta SPRITES_ZP + 5
000DCF  2  69 01        	adc #01
000DD1  2  9D 79 08     	sta sprites_yL, x
000DD4  2               
000DD4  2  BD 99 08     	lda sprites_yH, x
000DD7  2  85 76        	sta SPRITES_ZP + 6
000DD9  2  69 00        	adc #00
000DDB  2  9D 99 08     	sta sprites_yH, x
000DDE  2               
000DDE  2  18           	clc
000DDF  2  BD F9 08     	lda sprites_y1L, x
000DE2  2  85 77        	sta SPRITES_ZP + 7
000DE4  2  69 01        	adc #01
000DE6  2  9D F9 08     	sta sprites_y1L, x
000DE9  2               
000DE9  2  BD 19 09     	lda sprites_y1H, x
000DEC  2  85 78        	sta SPRITES_ZP + 8
000DEE  2  69 00        	adc #00
000DF0  2  9D 19 09     	sta sprites_y1H, x
000DF3  2  80 2A        	bra @test
000DF5  2               @vertical_minus:
000DF5  2               	; save current Y, Y1 and add delta
000DF5  2  38           	sec
000DF6  2  BD 79 08     	lda sprites_yL, x
000DF9  2  85 75        	sta SPRITES_ZP + 5
000DFB  2  E9 01        	sbc #01
000DFD  2  9D 79 08     	sta sprites_yL, x
000E00  2               
000E00  2  BD 99 08     	lda sprites_yH, x
000E03  2  85 76        	sta SPRITES_ZP + 6
000E05  2  E9 00        	sbc #00
000E07  2  9D 99 08     	sta sprites_yH, x
000E0A  2               
000E0A  2  38           	sec
000E0B  2  BD F9 08     	lda sprites_y1L, x
000E0E  2  85 77        	sta SPRITES_ZP + 7
000E10  2  69 01        	adc #01
000E12  2  9D F9 08     	sta sprites_y1L, x
000E15  2               
000E15  2  BD 19 09     	lda sprites_y1H, x
000E18  2  85 78        	sta SPRITES_ZP + 8
000E1A  2  E9 00        	sbc #00
000E1C  2  9D 19 09     	sta sprites_y1H, x
000E1F  2               
000E1F  2               @test:
000E1F  2  20 45 0D     	jsr check_collision
000E22  2  85 74        	sta SPRITES_ZP + 4		; save the result
000E24  2               
000E24  2               @restore:
000E24  2               	; and restore the data
000E24  2  A6 73        	ldx SPRITES_ZP + 3
000E26  2  A5 72        	lda SPRITES_ZP + 2
000E28  2  89 02        	bit #02
000E2A  2  F0 16        	beq @vertical_restore
000E2C  2               @horizontal_restore:
000E2C  2  A5 75        	lda SPRITES_ZP + 5
000E2E  2  9D 39 08     	sta sprites_xL, x
000E31  2  A5 76        	lda SPRITES_ZP + 6
000E33  2  9D 59 08     	sta sprites_xH, x
000E36  2  A5 77        	lda SPRITES_ZP + 7
000E38  2  9D B9 08     	sta sprites_x1L, x
000E3B  2  A5 78        	lda SPRITES_ZP + 8
000E3D  2  9D 59 08     	sta sprites_xH, x
000E40  2  80 14        	bra @return
000E42  2               
000E42  2               @vertical_restore:
000E42  2  A5 75        	lda SPRITES_ZP + 5
000E44  2  9D 79 08     	sta sprites_yL, x
000E47  2  A5 76        	lda SPRITES_ZP + 6
000E49  2  9D 99 08     	sta sprites_yH, x
000E4C  2  A5 77        	lda SPRITES_ZP + 7
000E4E  2  9D F9 08     	sta sprites_y1L, x
000E51  2  A5 78        	lda SPRITES_ZP + 8
000E53  2  9D 99 08     	sta sprites_yH, x
000E56  2               
000E56  2               @return:
000E56  2  A5 74        	lda SPRITES_ZP + 4	; result of the collision
000E58  2  60           	rts
000E59  2               
000E59  2               .endscope
000E59  2               
000E59  1               .include "objects.asm"
000E59  2               ;-----------------------------------------------------------------------------
000E59  2               ;/////////////////////////////////////////////////////////////////////////////
000E59  2               ;           start OBJECT code
000E59  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000E59  2               ;-----------------------------------------------------------------------------
000E59  2               
000E59  2               .scope Objects
000E59  2               
000E59  2  00 00        objects_map: .word 0
000E5B  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
000E5D  2               
000E5D  2               .struct Object
000E5D  2                   spriteID    .byte   ; ID of the vera sprite
000E5D  2                   imageID     .byte   ; ID of the image in the spritesheet
000E5D  2                   levelx      .word   ; level position
000E5D  2                   levely      .word
000E5D  2                   px          .word   ; screen position
000E5D  2                   py          .word
000E5D  2               .endstruct
000E5D  2               
000E5D  2               ;************************************************
000E5D  2               ; init the object data of the level
000E5D  2               ;
000E5D  2               init:
000E5D  2                   ; load the list of objects at the end of the previous load
000E5D  2  AD 10 08         lda current_load
000E60  2  8D 59 0E         sta objects_map
000E63  2  AD 11 08         lda current_load + 1
000E66  2  8D 5A 0E         sta objects_map + 1
000E69  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
000E6D  2  A0 00 20 BA  
000E71  2  FF A9 0B A2  
000E8C  2               
000E8C  2                   ; load the sprites  of objects at the end of the previous vload
000E8C  2  AD 12 08         lda Vera::vram_load
000E8F  2  8D 5B 0E         sta objects_sprites
000E92  2  AD 13 08         lda Vera::vram_load + 1
000E95  2  8D 5C 0E         sta objects_sprites + 1
000E98  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
000E9C  2  A0 00 20 BA  
000EA0  2  FF A9 0C A2  
000EBB  2               
000EBB  2                   ; add each available sprites on screen
000EBB  2  AD 59 0E         lda objects_map
000EBE  2  85 08            sta r3L
000EC0  2  AD 5A 0E         lda objects_map + 1
000EC3  2  85 09            sta r3H
000EC5  2               
000EC5  2  B2 08            lda (r3)
000EC7  2  85 31            sta $31     ; number of objects
000EC9  2  64 32            stz $32     ; object #0
000ECB  2               
000ECB  2  E6 08            inc r3L
000ECD  2               
000ECD  2               @loop:
000ECD  2                   ; get a free sprite
000ECD  2  20 50 0B         jsr Sprite::new
000ED0  2  8A               txa
000ED1  2  92 08            sta (r3)
000ED3  2               
000ED3  2                   ; load the first object
000ED3  2  AD 5B 0E     	lda objects_sprites
000ED6  2  85 02        	sta r0L
000ED8  2  AD 5C 0E     	lda objects_sprites + 1
000EDB  2  85 03        	sta r0H
000EDD  2  20 EA 0B         jsr Sprite::vram_to_16_5
000EE0  2  A5 04            lda r1L
000EE2  2  85 02            sta r0L
000EE4  2  A5 05            lda r1H
000EE6  2  85 03            sta r0H
000EE8  2               
000EE8  2  B2 08        	lda (r3)                        ; sprite id
000EEA  2  A8               tay
000EEB  2  A9 10           	lda #%00010000					; collision mask 1
000EED  2  A2 50           	ldx #%01010000					; 16x16 sprite
000EEF  2  20 8D 0B     	jsr Sprite::load
000EF2  2               
000EF2  2                   ; display the object
000EF2  2  B2 08        	lda (r3)                        ; sprite id
000EF4  2  A8               tay
000EF5  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
000EF7  2  20 18 0C     	jsr Sprite::display
000EFA  2               
000EFA  2                   ; position the first object
000EFA  2  20 33 0F         jsr set_position_r3
000EFD  2               
000EFD  2                   ; last object ?
000EFD  2  C6 31            dec $31
000EFF  2  F0 11            beq @return
000F01  2               
000F01  2                   ; move to the next object
000F01  2  18               clc
000F02  2  A5 08            lda r3L
000F04  2  69 0A            adc #.sizeof(Object)
000F06  2  85 08            sta r3L
000F08  2  A5 09            lda r3H
000F0A  2  69 00            adc #00
000F0C  2  85 09            sta r3H
000F0E  2               
000F0E  2  E6 32            inc $32                     ; object #next
000F10  2  80 BB            bra @loop
000F12  2               
000F12  2               @return:
000F12  2  60               rts
000F13  2               
000F13  2               ;************************************************
000F13  2               ; change  position of the sprite (level view) => (screen view)
000F13  2               ;   input: X = index of the object
000F13  2               ;
000F13  2               set_position_index:
000F13  2  AD 59 0E         lda objects_map
000F16  2  85 08            sta r3L
000F18  2  AD 5A 0E         lda objects_map + 1
000F1B  2  85 09            sta r3H
000F1D  2  E6 08            inc r3L
000F1F  2               
000F1F  2  E0 00            cpx #00                 ; ignore object 0
000F21  2  F0 10            beq @next
000F23  2               
000F23  2               @mult:
000F23  2  18               clc
000F24  2  A5 08            lda r3L
000F26  2  69 0A            adc #.sizeof(Object)
000F28  2  85 08            sta r3L
000F2A  2  A5 09            lda r3H
000F2C  2  69 00            adc #00
000F2E  2  85 09            sta r3H
000F30  2  CA               dex
000F31  2  D0 F0            bne @mult               ; r2 = objects_map + X*sizeof(Object)
000F33  2               
000F33  2               @next:
000F33  2               
000F33  2               ;************************************************
000F33  2               ; change  position of the sprite (level view) => (screen view)
000F33  2               ;   input: R3 = start of the object
000F33  2               ;
000F33  2               set_position_r3:
000F33  2                   ; screenX = levelX - layer1_scroll_x
000F33  2  A0 02            ldy #Object::levelx
000F35  2  38               sec
000F36  2  B1 08            lda (r3), y
000F38  2  ED 37 9F         sbc VERA_L1_hscrolllo
000F3B  2  85 02            sta r0L
000F3D  2  C8               iny
000F3E  2  B1 08            lda (r3), y
000F40  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
000F43  2  85 03            sta r0H
000F45  2               
000F45  2                   ; screenY = levelY - layer1_scroll_y
000F45  2  A0 04            ldy #Object::levely
000F47  2  38               sec
000F48  2  B1 08            lda (r3), y
000F4A  2  ED 39 9F         sbc VERA_L1_vscrolllo
000F4D  2  85 04            sta r1L
000F4F  2  C8               iny
000F50  2  B1 08            lda (r3), y
000F52  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
000F55  2  85 05            sta r1H
000F57  2               
000F57  2                   ; save the screen positions in the object
000F57  2  A0 06            ldy #Object::px
000F59  2  A5 02            lda r0L
000F5B  2  91 08            sta (r3), Y
000F5D  2  C8               iny
000F5E  2  A5 03            lda r0H
000F60  2  91 08            sta (r3), Y
000F62  2               
000F62  2  A0 08            ldy #Object::py
000F64  2  A5 04            lda r1L
000F66  2  91 08            sta (r3), Y
000F68  2  C8               iny
000F69  2  A5 05            lda r1H
000F6B  2  91 08            sta (r3), Y
000F6D  2               
000F6D  2                   ; set the player position
000F6D  2  B2 08        	lda (r3)                        ; sprite id
000F6F  2  A8               tay
000F70  2               
000F70  2                   ; adresse of thepx, py attributes
000F70  2  18               clc
000F71  2  A5 08            lda r3L
000F73  2  69 06            adc #Object::px
000F75  2  85 02            sta r0L
000F77  2  A5 09            lda r3H
000F79  2  69 00            adc #00
000F7B  2  85 03            sta r0H
000F7D  2  20 37 0C     	jsr Sprite::position			; set position of the sprite
000F80  2               
000F80  2  60               rts
000F81  2               
000F81  2               ;************************************************
000F81  2               ; change position of all sprites when the layer moves (level view) => (screen view)
000F81  2               ;
000F81  2               fix_positions:
000F81  2  AD 59 0E         lda objects_map
000F84  2  85 08            sta r3L
000F86  2  AD 5A 0E         lda objects_map + 1
000F89  2  85 09            sta r3H
000F8B  2               
000F8B  2  B2 08            lda (r3)
000F8D  2  85 31            sta $31     ; number of objects
000F8F  2  64 32            stz $32
000F91  2  E6 08            inc r3L
000F93  2               
000F93  2               @loop:
000F93  2                   ; position the first object
000F93  2  20 33 0F         jsr set_position_r3
000F96  2               
000F96  2                   ; last object ?
000F96  2  E6 32            inc $32
000F98  2  C6 31            dec $31
000F9A  2  F0 0F            beq @return
000F9C  2               
000F9C  2                   ; move to the next object
000F9C  2  18               clc
000F9D  2  A5 08            lda r3L
000F9F  2  69 0A            adc #.sizeof(Object)
000FA1  2  85 08            sta r3L
000FA3  2  A5 09            lda r3H
000FA5  2  69 00            adc #00
000FA7  2  85 09            sta r3H
000FA9  2               
000FA9  2  80 E8            bra @loop
000FAB  2               
000FAB  2               @return:
000FAB  2  60               rts
000FAC  2               
000FAC  2               .endscope
000FAC  2               
000FAC  1               .include "layers.asm"
000FAC  2               ;-----------------------------------------------------------------------------
000FAC  2               ;/////////////////////////////////////////////////////////////////////////////
000FAC  2               ; START Layers code
000FAC  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000FAC  2               ;-----------------------------------------------------------------------------
000FAC  2               
000FAC  2               .scope Layers
000FAC  2               
000FAC  2               HSCROLL = 0
000FAC  2               VSCROLL = 2
000FAC  2               
000FAC  2               ; define size of tiles for layer
000FAC  2               .macro VTILEMODE layer, mode
000FAC  2               	lda veral0tilebase + layer * 7
000FAC  2               	and #VERA_CLEAR_TILE_SIZE
000FAC  2               	ora #mode
000FAC  2               	sta veral0tilebase + layer * 7
000FAC  2               .endmacro
000FAC  2               
000FAC  2               ; define number of tiles in the map
000FAC  2               .macro VCONFIG_TILES layer,mode
000FAC  2               	lda veral0config + layer * 7
000FAC  2               	and #VERA_CONFIG_CLEAR_TILES
000FAC  2               	ora #mode
000FAC  2               	sta veral0config + layer * 7
000FAC  2               .endmacro
000FAC  2               
000FAC  2               ; define number of colors for the map
000FAC  2               .macro VCONFIG_DEPTH layer,mode
000FAC  2               	lda veral0config + layer * 7
000FAC  2               	and #VERA_CONFIG_CLEAR_DEPTH
000FAC  2               	ora #mode
000FAC  2               	sta veral0config + layer * 7
000FAC  2               .endmacro
000FAC  2               
000FAC  2               ; set the tilebase for the layer
000FAC  2               .macro VTILEBASE layer,addr
000FAC  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000FAC  2               	and #VERA_TILEBASE_CLEAR_ADR
000FAC  2               	ora #(addr >> 9)
000FAC  2               	sta veral0tilebase + layer * 7
000FAC  2               .endmacro
000FAC  2               
000FAC  2               ; set the mapbase for the layer
000FAC  2               .macro VMAPBASE layer,addr
000FAC  2                   lda #(addr >> 9)         ; store 2 last bits
000FAC  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000FAC  2               .endmacro
000FAC  2               
000FAC  2               ;************************************************
000FAC  2               ; increase layer scrolling with a 8bits limit
000FAC  2               ;	X: : 0 = horizontal
000FAC  2               ;	   : 2 = vertical
000FAC  2               ;	Y: limit
000FAC  2               ;
000FAC  2               scroll_inc_8:
000FAC  2  84 02        	sty r0L
000FAE  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000FB1  2  C5 02        	cmp r0L
000FB3  2  F0 0F        	beq @noscroll
000FB5  2               @scrollinc:
000FB5  2  1A           	inc
000FB6  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000FB9  2  D0 03        	bne @scrolled
000FBB  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000FBE  2               @scrolled:
000FBE  2               	; fix the objects position now that the layers scrolled
000FBE  2  20 81 0F     	jsr Objects::fix_positions
000FC1  2  A9 01        	lda #01		; clear ZERO => scrolled
000FC3  2  60           	rts
000FC4  2               @noscroll:
000FC4  2  A9 00        	lda #00		; set ZERO => noscroll
000FC6  2  60           	rts
000FC7  2               
000FC7  2               ;************************************************
000FC7  2               ; increase layer scrolling with a 16bits limit
000FC7  2               ;	X: : 0 = horizontal
000FC7  2               ;	   : 2 = vertical
000FC7  2               ;	r0L: limit
000FC7  2               ;
000FC7  2               scroll_inc_16:
000FC7  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000FCA  2  C5 02        	cmp r0L
000FCC  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
000FCE  2  A8           	tay
000FCF  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
000FD2  2  C5 03        	cmp r0H
000FD4  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
000FD6  2  98           	tya
000FD7  2               @scrollinc:
000FD7  2  1A           	inc
000FD8  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000FDB  2  D0 03        	bne @scrolled
000FDD  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000FE0  2               @scrolled:
000FE0  2               	; fix the objects position now that the layers scrolled
000FE0  2  20 81 0F     	jsr Objects::fix_positions
000FE3  2  A9 01        	lda #01	; clear ZERO => scrolled
000FE5  2  60           	rts
000FE6  2               @noscroll:
000FE6  2  A9 00        	lda #00	; set ZERO => noscroll
000FE8  2  60           	rts
000FE9  2               
000FE9  2               ; increase a layer scroll offset but do NOT overlap
000FE9  2               .macro VSCROLL_INC direction,limit
000FE9  2               .if limit > 255
000FE9  2               	LOAD_r0 limit
000FE9  2               	ldx #direction
000FE9  2               	jsr Layers::scroll_inc_16
000FE9  2               .else
000FE9  2               	ldy #limit
000FE9  2               	ldx #direction
000FE9  2               	jsr Layers::scroll_inc_8
000FE9  2               .endif
000FE9  2               .endmacro
000FE9  2               
000FE9  2               ;
000FE9  2               ;
000FE9  2               ; decrease a layer scroll offset
000FE9  2               ;	X : 0 = horizontal
000FE9  2               ;	  : 2 = vertical
000FE9  2               ;
000FE9  2               scroll_dec:
000FE9  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000FEC  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
000FEE  2  3A           	dec
000FEF  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000FF2  2  80 0E        	bra @scrolled
000FF4  2               @scrollHI:
000FF4  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
000FF7  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
000FF9  2  3A           	dec
000FFA  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000FFD  2  88           	dey
000FFE  2  98           	tya
000FFF  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
001002  2               
001002  2               @scrolled:
001002  2               	; fix the objects position now that the layers scrolled
001002  2  20 81 0F     	jsr Objects::fix_positions
001005  2  A9 01        	lda #01		; clear ZERO => scrolled
001007  2  60           	rts
001008  2               
001008  2               @noscroll:
001008  2  A9 00        	lda #00		; set ZERO => noscroll
00100A  2  60           	rts
00100B  2               
00100B  2               ;
00100B  2               ; force layer0 scrolling to be half of the layer1 scrolling
00100B  2               ;
00100B  2               scroll_l0:
00100B  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
00100E  2  4A           	lsr
00100F  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
001012  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001015  2  6A           	ror
001016  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
001019  2  60           	rts
00101A  2               .endscope
00101A  2               
00101A  1               .include "player.asm"
00101A  2               ;-----------------------------------------------------------------------------
00101A  2               ;/////////////////////////////////////////////////////////////////////////////
00101A  2               ; START player code
00101A  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00101A  2               ;-----------------------------------------------------------------------------
00101A  2               
00101A  2               PLAYER_SPRITE_ANIMATION = 3
00101A  2               
00101A  2               JUMP_LO_TICKS = 10
00101A  2               JUMP_HI_TICKS = 2
00101A  2               FALL_LO_TICKS = 8
00101A  2               FALL_HI_TICKS = 2
00101A  2               
00101A  2               .enum
00101A  2               	STATUS_WALKING_IDLE
00101A  2               	STATUS_WALKING
00101A  2               	STATUS_CLIMBING
00101A  2               	STATUS_CLIMBING_IDLE
00101A  2               	STATUS_FALLING
00101A  2               	STATUS_JUMPING
00101A  2               	STATUS_JUMPING_IDLE
00101A  2               .endenum
00101A  2               
00101A  2               .enum
00101A  2               	SITTING_NO_SLOP
00101A  2               	SITTING_ON_SLOPE
00101A  2               	SITTING_ABOVE_SLOPE
00101A  2               .endenum
00101A  2               
00101A  2               .enum TILE_ATTR
00101A  2               	SOLID_GROUND = 1
00101A  2               	SOLID_WALL = 2
00101A  2               	SOLID_CEILING = 4
00101A  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
00101A  2               .endenum
00101A  2               
00101A  2               .struct PLAYER
00101A  2               	sprite			.byte	; sprite index
00101A  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
00101A  2               	falling_ticks	.word	; ticks since the player is fllaing (thing t in gravity)
00101A  2               	delta_x			.byte	; when driving by phisics, original delta_x value
00101A  2               	animation_tick	.byte
00101A  2               	spriteID 		.byte	; current animation loop start
00101A  2               	spriteAnim 		.byte	; current frame
00101A  2               	spriteAnimDirection .byte ; direction of the animation
00101A  2               	px 				.word	; relative X & Y on screen
00101A  2               	py 				.word
00101A  2               	levelx			.word	; absolute X & Y in the level
00101A  2               	levely			.word
00101A  2               	flip 			.byte
00101A  2               	tilemap			.word	; cached @ of the tilemap equivalent of the center of the player
00101A  2               	vera_bitmaps    .res 	2*12	; 9 words to store vera bitmaps address
00101A  2               .endstruct
00101A  2               
00101A  2               .macro m_status value
00101A  2               	lda #(value)
00101A  2               	sta player0 + PLAYER::status
00101A  2               .endmacro
00101A  2               
00101A  2               .scope Player
00101A  2               
00101A  2               .macro SET_SPRITE id, frame
00101A  2               	lda #id
00101A  2               	sta player0 + PLAYER::spriteID
00101A  2               	lda #frame
00101A  2               	sta player0 + PLAYER::spriteAnim
00101A  2               	jsr set_bitmap
00101A  2               .endmacro
00101A  2               
00101A  2               ;************************************************
00101A  2               ; player sprites status
00101A  2               ;
00101A  2               .enum Sprites
00101A  2               	FRONT = 0
00101A  2               	LEFT = 3
00101A  2               	CLIMB = 6
00101A  2               	HANG = 9
00101A  2               .endenum
00101A  2               
00101A  2               ;************************************************
00101A  2               ; local variables
00101A  2               ;
00101A  2               
00101A  2  00           player_on_slop: .byte 0
00101B  2  00           ladders: .byte 0
00101C  2  00           test_right_left: .byte 0
00101D  2               
00101D  2               ;************************************************
00101D  2               ; init the player data
00101D  2               ;
00101D  2               init:
00101D  2  9C D5 1C     	stz player0 + PLAYER::sprite
001020  2  A9 0A        	lda #10
001022  2  8D DA 1C     	sta player0 + PLAYER::animation_tick
001025  2  A9 00        	lda #STATUS_WALKING_IDLE
001027  2  8D D6 1C     	sta player0 + PLAYER::status
00102A  2  9C D7 1C     	stz player0 + PLAYER::falling_ticks
00102D  2  9C D8 1C     	stz player0 + PLAYER::falling_ticks + 1
001030  2  A9 03        	lda #Player::Sprites::LEFT
001032  2  8D DB 1C     	sta player0 + PLAYER::spriteID
001035  2  9C DC 1C     	stz player0 + PLAYER::spriteAnim
001038  2  A9 01        	lda #1
00103A  2  8D DD 1C     	sta player0 + PLAYER::spriteAnimDirection
00103D  2  9C DE 1C     	stz player0 + PLAYER::px
001040  2  9C DF 1C     	stz player0 + PLAYER::px+1
001043  2  9C E0 1C     	stz player0 + PLAYER::py
001046  2  9C E1 1C     	stz player0 + PLAYER::py+1
001049  2  9C E2 1C     	stz player0 + PLAYER::levelx
00104C  2  9C E3 1C     	stz player0 + PLAYER::levelx+1
00104F  2  9C E4 1C     	stz player0 + PLAYER::levely
001052  2  9C E5 1C     	stz player0 + PLAYER::levely+1
001055  2  9C E6 1C     	stz player0 + PLAYER::flip
001058  2               
001058  2               	; load sprites data at the end of the tiles
001058  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (VRAM_tiles + tiles * tile_size)
00105C  2  A0 00 20 BA  
001060  2  FF A9 0B A2  
001079  2               
001079  2  AD E9 1C     	lda player0 + PLAYER::vera_bitmaps
00107C  2  85 02        	sta r0L
00107E  2  AD EA 1C     	lda player0 + PLAYER::vera_bitmaps+1
001081  2  85 03        	sta r0H
001083  2               
001083  2  AC D5 1C     	ldy player0 + PLAYER::sprite
001086  2  A9 10        	lda #%00010000					; collision mask 1
001088  2  A2 A0        	ldx #%10100000					; 32x32 sprite
00108A  2  20 8D 0B     	jsr Sprite::load
00108D  2               
00108D  2  A9 08        	lda #08
00108F  2  85 02        	sta r0L
001091  2  A9 00        	lda #00
001093  2  85 03        	sta r0H
001095  2  A9 0F        	lda #15
001097  2  85 04        	sta r1L
001099  2  A9 1F        	lda #31
00109B  2  85 05        	sta r1H
00109D  2  AC D5 1C     	ldy player0 + PLAYER::sprite
0010A0  2  20 D5 0B     	jsr Sprite::set_aabb			; collision box (8,0) -> (24, 32)
0010A3  2               
0010A3  2               	; turn sprite 0 on
0010A3  2  AC D5 1C     	ldy player0 + PLAYER::sprite
0010A6  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0010A8  2  20 18 0C     	jsr Sprite::display
0010AB  2               
0010AB  2               	; register the vera simplified memory 12:5
0010AB  2  A2 00        	ldx #0
0010AD  2  A0 0C        	ldy #(3*4)
0010AF  2  A9 00 85 04  	LOAD_r1 (VRAM_tiles + tiles * tile_size)
0010B3  2  A9 41 85 05  
0010B7  2               
0010B7  2               @loop:
0010B7  2               	; load full VERA memory (12:0) into R0
0010B7  2  A5 04        	lda r1L
0010B9  2  85 02        	sta r0L
0010BB  2  A5 05        	lda r1H
0010BD  2  85 03        	sta r0H
0010BF  2               
0010BF  2               	; convert full addr to vera mode (bit shiting >> 5)
0010BF  2  A5 03        	lda r0H
0010C1  2  4A           	lsr
0010C2  2  66 02        	ror r0L
0010C4  2  4A           	lsr
0010C5  2  66 02        	ror r0L
0010C7  2  4A           	lsr
0010C8  2  66 02        	ror r0L
0010CA  2  4A           	lsr
0010CB  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0010CD  2  4A           	lsr
0010CE  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0010D0  2               
0010D0  2               	; store 12:5 into our cache
0010D0  2  9D E9 1C     	sta player0 + PLAYER::vera_bitmaps, x
0010D3  2  E8           	inx
0010D4  2  A5 02        	lda r0L
0010D6  2  9D E9 1C     	sta player0 + PLAYER::vera_bitmaps, x
0010D9  2  E8           	inx
0010DA  2               
0010DA  2               	; increase the vram (+4 r1H = +1024 r1)
0010DA  2  18           	clc
0010DB  2  A5 05        	lda r1H
0010DD  2  69 04        	adc #4
0010DF  2  85 05        	sta r1H
0010E1  2               
0010E1  2  88           	dey
0010E2  2  D0 D3        	bne @loop
0010E4  2               
0010E4  2               	; set first bitmap
0010E4  2  20 F7 10     	jsr set_bitmap
0010E7  2  60           	rts
0010E8  2               
0010E8  2               ;************************************************
0010E8  2               ; force the current player sprite at its position
0010E8  2               ;
0010E8  2               position_set:
0010E8  2  AC D5 1C     	ldy player0 + PLAYER::sprite
0010EB  2  A9 DE 85 02  	LOAD_r0 (player0 + PLAYER::px)
0010EF  2  A9 1C 85 03  
0010F3  2  20 37 0C     	jsr Sprite::position			; set position of the sprite
0010F6  2  60           	rts
0010F7  2               
0010F7  2               ;************************************************
0010F7  2               ; change the player bitmap
0010F7  2               ;
0010F7  2               set_bitmap:
0010F7  2  18           	clc
0010F8  2  AD DC 1C     	lda player0 + PLAYER::spriteAnim
0010FB  2  6D DB 1C     	adc player0 + PLAYER::spriteID
0010FE  2  0A           	asl						; convert sprite index to work position
0010FF  2  AA           	tax
001100  2               
001100  2               	; extract the vera bitmap address in vera format (12:5 bits)
001100  2  BD E9 1C     	lda player0 + PLAYER::vera_bitmaps, x
001103  2  85 03        	sta r0H
001105  2  BD EA 1C     	lda player0 + PLAYER::vera_bitmaps + 1, x
001108  2  85 02        	sta r0L
00110A  2               
00110A  2  AC D5 1C     	ldy player0 + PLAYER::sprite
00110D  2  20 06 0C     	jsr Sprite::set_bitmap
001110  2  60           	rts
001111  2               
001111  2               ;************************************************
001111  2               ; increase player X position
001111  2               ;	modify r0
001111  2               ;
001111  2               position_x_inc:
001111  2               	; move the absolute position levelx + 1
001111  2  AD E2 1C     	lda player0 + PLAYER::levelx
001114  2  AE E3 1C     	ldx player0 + PLAYER::levelx + 1
001117  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
001119  2  D0 04        	bne @incLOW1
00111B  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
00111D  2  F0 48        	beq @no_move						; we are at the level limit
00111F  2               @incLOW1:
00111F  2  1A           	inc
001120  2  8D E2 1C     	sta player0 + PLAYER::levelx
001123  2  D0 04        	bne @inc_screen_x
001125  2               @incHi:
001125  2  E8           	inx
001126  2  8E E3 1C     	stx player0 + PLAYER::levelx + 1
001129  2               
001129  2               @inc_screen_x:
001129  2               	; distance from layer border to sprite absolute position
001129  2  38           	sec
00112A  2  AD E2 1C     	lda player0 + PLAYER::levelx
00112D  2  ED 37 9F     	sbc VERA_L1_hscrolllo
001130  2  85 02        	sta r0L
001132  2  AD E3 1C     	lda player0 + PLAYER::levelx + 1
001135  2  ED 38 9F     	sbc VERA_L1_hscrollhi
001138  2  85 03        	sta r0H
00113A  2               
00113A  2  D0 17        	bne @move_sprite_upper
00113C  2  A6 03        	ldx r0H
00113E  2  A5 02        	lda r0L
001140  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
001142  2  90 19        	bcc @move_sprite
001144  2               
001144  2               @move_layers:
001144  2               	; keep the sprite onscreen 224, for level 224->416
001144  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
001148  2  20 AC 0F     
00114B  2  F0 06        	beq @move_sprite_upper
00114D  2  A2 00        	ldx #Layers::HSCROLL
00114F  2  20 0B 10     	jsr Layers::scroll_l0
001152  2  60           	rts
001153  2               
001153  2               @move_sprite_upper:
001153  2  AD DE 1C     	lda player0 + PLAYER::px
001156  2  AE DF 1C     	ldx player0 + PLAYER::px + 1
001159  2  1A           	inc
00115A  2  D0 01        	bne @move_sprite
00115C  2  E8           	inx
00115D  2               
00115D  2               @move_sprite:
00115D  2  8D DE 1C     	sta player0 + PLAYER::px
001160  2  8E DF 1C     	stx player0 + PLAYER::px + 1
001163  2  20 E8 10     	jsr Player::position_set
001166  2  60           	rts
001167  2               
001167  2               @no_move:
001167  2  60           	rts
001168  2               
001168  2               ;************************************************
001168  2               ; decrease player position X unless at 0
001168  2               ;
001168  2               position_x_dec:
001168  2               	; move the absolute position levelx + 1
001168  2  AD E2 1C     	lda player0 + PLAYER::levelx
00116B  2  D0 05        	bne @decLOW
00116D  2  AE E3 1C     	ldx player0 + PLAYER::levelx + 1
001170  2  F0 49        	beq @no_move						; we are at Y == 0
001172  2               @decLOW:
001172  2  3A           	dec
001173  2  8D E2 1C     	sta player0 + PLAYER::levelx
001176  2  C9 FF        	cmp #$ff
001178  2  D0 04        	bne @dec_screen_x
00117A  2               @decHi:
00117A  2  CA           	dex
00117B  2  8E E3 1C     	stx player0 + PLAYER::levelx + 1
00117E  2               
00117E  2               @dec_screen_x:
00117E  2               	; distance from layer border to sprite absolute position
00117E  2  38           	sec
00117F  2  AD E2 1C     	lda player0 + PLAYER::levelx
001182  2  ED 37 9F     	sbc VERA_L1_hscrolllo
001185  2  85 02        	sta r0L
001187  2  AD E3 1C     	lda player0 + PLAYER::levelx + 1
00118A  2  ED 38 9F     	sbc VERA_L1_hscrollhi
00118D  2  85 03        	sta r0H
00118F  2               
00118F  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
001191  2               
001191  2  A5 02        	lda r0L
001193  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
001195  2  C9 40        	cmp #64
001197  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
001199  2               
001199  2               @move_layers:
001199  2               	; keep the sprite onscreen 224, for level 224->416
001199  2  A2 00        	ldx #Layers::HSCROLL
00119B  2  20 E9 0F     	jsr Layers::scroll_dec
00119E  2  F0 06        	beq @move_sprite_lower
0011A0  2  A2 00        	ldx #Layers::HSCROLL
0011A2  2  20 0B 10     	jsr Layers::scroll_l0
0011A5  2  60           	rts
0011A6  2               
0011A6  2               @move_sprite_lower:
0011A6  2  AD DE 1C     	lda player0 + PLAYER::px
0011A9  2  AE DF 1C     	ldx player0 + PLAYER::px + 1
0011AC  2  3A           	dec
0011AD  2  C9 FF        	cmp #$ff
0011AF  2  D0 01        	bne @move_sprite
0011B1  2  CA           	dex
0011B2  2               
0011B2  2               @move_sprite:
0011B2  2  8D DE 1C     	sta player0 + PLAYER::px
0011B5  2  8E DF 1C     	stx player0 + PLAYER::px + 1
0011B8  2  20 E8 10     	jsr Player::position_set
0011BB  2               
0011BB  2               @no_move:
0011BB  2  60           	rts
0011BC  2               
0011BC  2               ;************************************************
0011BC  2               ; increase player Y position
0011BC  2               ;
0011BC  2               position_y_inc:
0011BC  2               	; move the absolute position levelx + 1
0011BC  2  AD E4 1C     	lda player0 + PLAYER::levely
0011BF  2  AE E5 1C     	ldx player0 + PLAYER::levely + 1
0011C2  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
0011C4  2  D0 04        	bne @incLOW1
0011C6  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
0011C8  2  F0 4E        	beq @no_move						; we are at the level limit
0011CA  2               @incLOW1:
0011CA  2  1A           	inc
0011CB  2  8D E4 1C     	sta player0 + PLAYER::levely
0011CE  2  D0 04        	bne @inc_screen_y
0011D0  2               @incHi:
0011D0  2  E8           	inx
0011D1  2  8E E5 1C     	stx player0 + PLAYER::levely + 1
0011D4  2               
0011D4  2               @inc_screen_y:
0011D4  2               	; distance from layer border to sprite absolute position
0011D4  2  38           	sec
0011D5  2  AD E4 1C     	lda player0 + PLAYER::levely
0011D8  2  ED 39 9F     	sbc VERA_L1_vscrolllo
0011DB  2  85 02        	sta r0L
0011DD  2  AD E5 1C     	lda player0 + PLAYER::levely + 1
0011E0  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
0011E3  2  85 03        	sta r0H
0011E5  2               
0011E5  2  D0 1D        	bne @move_sprite_upper
0011E7  2  A6 03        	ldx r0H
0011E9  2  A5 02        	lda r0L
0011EB  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
0011ED  2  90 1F        	bcc @move_sprite
0011EF  2               
0011EF  2               @move_layers:
0011EF  2               	; keep the sprite onscreen 224, for level 224->416
0011EF  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
0011F3  2  A9 01 85 03  
0011F7  2  A2 02 20 C7  
0011FC  2  F0 06        	beq @move_sprite_upper
0011FE  2  A2 02        	ldx #Layers::VSCROLL
001200  2  20 0B 10     	jsr Layers::scroll_l0
001203  2  60           	rts
001204  2               
001204  2               @move_sprite_upper:
001204  2  AD E0 1C     	lda player0 + PLAYER::py
001207  2  AE E1 1C     	ldx player0 + PLAYER::py + 1
00120A  2  1A           	inc
00120B  2  D0 01        	bne @move_sprite
00120D  2  E8           	inx
00120E  2               
00120E  2               @move_sprite:
00120E  2  8D E0 1C     	sta player0 + PLAYER::py
001211  2  8E E1 1C     	stx player0 + PLAYER::py + 1
001214  2  20 E8 10     	jsr Player::position_set
001217  2  60           	rts
001218  2               
001218  2               @no_move:
001218  2  60           	rts
001219  2               
001219  2               ;;
001219  2  AD E0 1C     	lda player0 + PLAYER::py
00121C  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
00121E  2  F0 09        	beq @moveleftP0
001220  2  1A           	inc
001221  2  8D E0 1C     	sta player0 + PLAYER::py
001224  2  D0 03        	bne @moveleftP0
001226  2  EE E1 1C     	inc player0 + PLAYER::py + 1
001229  2               @moveleftP0:
001229  2  20 E8 10     	jsr Player::position_set
00122C  2  60           	rts
00122D  2               
00122D  2               ;************************************************
00122D  2               ; decrease player position X unless at 0
00122D  2               ;
00122D  2               position_y_dec:
00122D  2               	; move the absolute position levelx + 1
00122D  2  AD E4 1C     	lda player0 + PLAYER::levely
001230  2  D0 05        	bne @decLOW
001232  2  AE E5 1C     	ldx player0 + PLAYER::levely + 1
001235  2  F0 49        	beq @no_move						; we are at Y == 0
001237  2               @decLOW:
001237  2  3A           	dec
001238  2  8D E4 1C     	sta player0 + PLAYER::levely
00123B  2  C9 FF        	cmp #$ff
00123D  2  D0 04        	bne @dec_screen_y
00123F  2               @decHi:
00123F  2  CA           	dex
001240  2  8E E5 1C     	stx player0 + PLAYER::levely + 1
001243  2               
001243  2               @dec_screen_y:
001243  2               	; distance from layer border to sprite absolute position
001243  2  38           	sec
001244  2  AD E4 1C     	lda player0 + PLAYER::levely
001247  2  ED 39 9F     	sbc VERA_L1_vscrolllo
00124A  2  85 02        	sta r0L
00124C  2  AD E5 1C     	lda player0 + PLAYER::levely + 1
00124F  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
001252  2  85 03        	sta r0H
001254  2               
001254  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
001256  2               
001256  2  A5 02        	lda r0L
001258  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
00125A  2  C9 20        	cmp #32
00125C  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
00125E  2               
00125E  2               @move_layers:
00125E  2               	; keep the sprite onscreen 224, for level 224->416
00125E  2  A2 02        	ldx #Layers::VSCROLL
001260  2  20 E9 0F     	jsr Layers::scroll_dec
001263  2  F0 06        	beq @move_sprite_lower
001265  2  A2 02        	ldx #Layers::VSCROLL
001267  2  20 0B 10     	jsr Layers::scroll_l0
00126A  2  60           	rts
00126B  2               
00126B  2               @move_sprite_lower:
00126B  2  AD E0 1C     	lda player0 + PLAYER::py
00126E  2  AE E1 1C     	ldx player0 + PLAYER::py + 1
001271  2  3A           	dec
001272  2  C9 FF        	cmp #$ff
001274  2  D0 01        	bne @move_sprite
001276  2  CA           	dex
001277  2               
001277  2               @move_sprite:
001277  2  8D E0 1C     	sta player0 + PLAYER::py
00127A  2  8E E1 1C     	stx player0 + PLAYER::py + 1
00127D  2  20 E8 10     	jsr Player::position_set
001280  2               
001280  2               @no_move:
001280  2  60           	rts
001281  2               
001281  2               ;************************************************
001281  2               ; hide the current sprite
001281  2               ;
001281  2               hide1:
001281  2  DB           	stp
001282  2  18           	clc
001283  2  AD DC 1C     	lda player0 + PLAYER::spriteAnim
001286  2  6D DB 1C     	adc player0 + PLAYER::spriteID
001289  2  A8           	tay		; sprite index
00128A  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
00128C  2  20 18 0C     	jsr Sprite::display			; turn current sprite off
00128F  2  60           	rts
001290  2               
001290  2               ;************************************************
001290  2               ; Animate the player if needed
001290  2               ;
001290  2               animate:
001290  2  AD D6 1C     	lda player0 + PLAYER::status
001293  2  C9 00        	cmp #STATUS_WALKING_IDLE
001295  2  F0 3A        	beq @end
001297  2  C9 04        	cmp #STATUS_FALLING
001299  2  F0 36        	beq @end
00129B  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
00129D  2  F0 32        	beq @end
00129F  2               
00129F  2  CE DA 1C     	dec player0 + PLAYER::animation_tick
0012A2  2  D0 2D        	bne @end
0012A4  2               
0012A4  2  A9 0A        	lda #10
0012A6  2  8D DA 1C     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
0012A9  2               
0012A9  2  18           	clc
0012AA  2  AD DC 1C     	lda player0 + PLAYER::spriteAnim
0012AD  2  6D DD 1C     	adc player0 + PLAYER::spriteAnimDirection
0012B0  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
0012B2  2  C9 03        	cmp #3
0012B4  2  F0 0B        	beq @set_sprite_anim_decrease
0012B6  2  80 10        	bra @set_sprite_on
0012B8  2               @set_sprite_anim_increase:
0012B8  2  A9 01        	lda #01
0012BA  2  8D DD 1C     	sta player0 + PLAYER::spriteAnimDirection
0012BD  2  A9 00        	lda #0
0012BF  2  80 07        	bra @set_sprite_on
0012C1  2               @set_sprite_anim_decrease:
0012C1  2  A9 FF        	lda #$ff
0012C3  2  8D DD 1C     	sta player0 + PLAYER::spriteAnimDirection
0012C6  2  A9 02        	lda #2
0012C8  2               @set_sprite_on:
0012C8  2  8D DC 1C     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
0012CB  2  20 F7 10     	jsr Player::set_bitmap
0012CE  2  20 E8 10     	jsr Player::position_set
0012D1  2               @end:
0012D1  2  60           	rts
0012D2  2               
0012D2  2               ;************************************************
0012D2  2               ; position of the player on the layer1 tilemap
0012D2  2               ;	modified : r1
0012D2  2               ;	output : r0
0012D2  2               ;
0012D2  2               get_tilemap_position:
0012D2  2  18           	clc
0012D3  2  AD E4 1C     	lda player0 + PLAYER::levely		; sprite screen position
0012D6  2  85 02        	sta r0L
0012D8  2  AD E5 1C     	lda player0 + PLAYER::levely + 1
0012DB  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
0012DD  2               
0012DD  2  A5 02        	lda r0L
0012DF  2  29 F0        	and #%11110000
0012E1  2  85 02        	sta r0L
0012E3  2  A5 03        	lda r0H
0012E5  2  85 03        	sta r0H
0012E7  2  A5 02        	lda r0L
0012E9  2  0A           	asl
0012EA  2  26 03        	rol r0H
0012EC  2  85 02        	sta r0L 						; r0 = first tile of the tilemap in the row
0012EE  2               									; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
0012EE  2               
0012EE  2  AD E2 1C     	lda player0 + PLAYER::levelx		; sprite screen position
0012F1  2  85 04        	sta r1L
0012F3  2  AD E3 1C     	lda player0 + PLAYER::levelx + 1
0012F6  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
0012F8  2               
0012F8  2  4A           	lsr
0012F9  2  66 04        	ror r1L
0012FB  2  4A           	lsr
0012FC  2  66 04        	ror r1L
0012FE  2  4A           	lsr
0012FF  2  66 04        	ror r1L
001301  2  4A           	lsr
001302  2  66 04        	ror r1L
001304  2  85 05        	sta r1H 					; r1 = tile X in the row
001306  2               								; sprite X /16 (convert to tile X)
001306  2               
001306  2  18           	clc
001307  2  A5 02        	lda r0L
001309  2  65 04        	adc r1L
00130B  2  85 02        	sta r0L
00130D  2  A5 03        	lda r0H
00130F  2  65 05        	adc r1H
001311  2  85 03        	sta r0H						; r0 = tile position in the tilemap
001313  2               
001313  2  18           	clc
001314  2  A5 03        	lda r0H
001316  2  69 A0        	adc #>HIMEM
001318  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
00131A  2  60           	rts
00131B  2               
00131B  2               ;************************************************
00131B  2               ; force player status to be idle
00131B  2               ;
00131B  2               set_idle:
00131B  2  AD D6 1C     	lda player0 + PLAYER::status
00131E  2  C9 01        	cmp #STATUS_WALKING
001320  2  F0 06        	beq @set_idle_walking
001322  2  C9 02        	cmp #STATUS_CLIMBING
001324  2  F0 08        	beq @set_idle_climbing
001326  2  60           	rts							; keep the current value
001327  2               @set_idle_jump:
001327  2  60           	rts
001328  2               @set_idle_walking:
001328  2  A9 00 8D D6  	m_status STATUS_WALKING_IDLE
00132C  2  1C           
00132D  2  60           	rts
00132E  2               @set_idle_climbing:
00132E  2  A9 03 8D D6  	m_status STATUS_CLIMBING_IDLE
001332  2  1C           
001333  2  60           	rts
001334  2               
001334  2               ;************************************************
001334  2               ; check if the player sits on a solid tile
001334  2               ;
001334  2               physics:
001334  2  20 D2 12     	jsr get_tilemap_position
001337  2  A5 02 8D E7  	SAVE_r0 player0 + PLAYER::tilemap	; cache the tilemap @
00133B  2  1C A5 03 8D  
00133F  2  E8 1C        
001341  2               
001341  2  AD D6 1C     	lda player0 + PLAYER::status
001344  2  C9 02        	cmp #STATUS_CLIMBING
001346  2  F0 0B        	beq @return1
001348  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
00134A  2  F0 07        	beq @return1
00134C  2  C9 05        	cmp #STATUS_JUMPING
00134E  2  D0 04        	bne @fall
001350  2  4C F8 13     	jmp @jump
001353  2               @return1:
001353  2  60           	rts
001354  2               
001354  2               	;
001354  2               	; deal with gravity driven falling
001354  2               	;
001354  2               @fall:
001354  2               .ifdef DEBUG
001354  2               	CHECK_DEBUG
001354  2               .endif
001354  2  20 F1 14     	jsr check_collision_down
001357  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
001359  2  4C EB 13     	jmp @sit_on_solid				; solid tile below the player that is not a slope
00135C  2               
00135C  2               @check_on_slope:
00135C  2  20 85 15     	jsr check_player_on_slop
00135F  2  F0 23        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
001361  2               
001361  2               @on_slope:
001361  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001363  2  F0 0B        	beq @slope_left
001365  2               @slope_right:
001365  2  AD E2 1C     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
001368  2  29 0F        	and #%00001111
00136A  2  49 0F        	eor #%00001111					; X = 0 => Y can go up to 15
00136C  2  85 30        	sta $30
00136E  2  80 09        	bra @slope_y
001370  2               @slope_left:
001370  2  AD E2 1C     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
001373  2  29 0F        	and #%00001111
001375  2  85 30        	sta $30
001377  2  80 00        	bra @slope_y
001379  2               @slope_y:
001379  2  AD E4 1C     	lda player0 + PLAYER::levely
00137C  2  29 0F        	and #%00001111
00137E  2  C5 30        	cmp $30
001380  2  30 02        	bmi @no_collision_down
001382  2  80 67        	bra @sit_on_solid
001384  2               
001384  2               @no_collision_down:
001384  2               	; if the player is already falling, increase t
001384  2  AD D6 1C     	lda player0 + PLAYER::status
001387  2  C9 04        	cmp #STATUS_FALLING
001389  2  F0 0D        	beq @increase_ticks
00138B  2               
00138B  2               	; let the player fall
00138B  2  A9 04        	lda #STATUS_FALLING
00138D  2  8D D6 1C     	sta player0 + PLAYER::status
001390  2  A9 08        	lda #FALL_LO_TICKS
001392  2  8D D7 1C     	sta player0 + PLAYER::falling_ticks	; reset t
001395  2  9C D8 1C     	stz player0 + PLAYER::falling_ticks + 1
001398  2               @increase_ticks:
001398  2  CE D7 1C     	dec player0 + PLAYER::falling_ticks	; increase HI every 10 refresh
00139B  2  D0 08        	bne @drive_fall
00139D  2  A9 08        	lda #FALL_LO_TICKS
00139F  2  8D D7 1C     	sta player0 + PLAYER::falling_ticks	; reset t
0013A2  2  EE D8 1C     	inc player0 + PLAYER::falling_ticks + 1
0013A5  2               
0013A5  2               @drive_fall:
0013A5  2  AD D8 1C     	lda player0 + PLAYER::falling_ticks + 1
0013A8  2  F0 3C        	beq @fall_once
0013AA  2  85 14        	sta r9L
0013AC  2               @loop_fall:
0013AC  2  20 BC 11     	jsr position_y_inc
0013AF  2  20 D2 12     	jsr get_tilemap_position
0013B2  2  A5 02 8D E7  	SAVE_r0 player0 + PLAYER::tilemap
0013B6  2  1C A5 03 8D  
0013BA  2  E8 1C        
0013BC  2               
0013BC  2               	; test reached solid ground
0013BC  2  20 F1 14     	jsr check_collision_down
0013BF  2  D0 2A        	bne @sit_on_solid
0013C1  2               
0013C1  2               @loop_fall_no_collision:
0013C1  2  C6 14        	dec r9L
0013C3  2  D0 E7        	bne @loop_fall						; take t in count for gravity
0013C5  2               
0013C5  2               @apply_delta_x:
0013C5  2  AD D9 1C     	lda player0 + PLAYER::delta_x		; apply delatx
0013C8  2  F0 2D        	beq @return
0013CA  2  30 0D        	bmi @fall_left
0013CC  2               @fall_right:
0013CC  2  20 C7 14     	jsr check_collision_right
0013CF  2  F0 04        	beq @no_fcollision_right
0013D1  2               @fcollision_right:
0013D1  2  9C D9 1C     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
0013D4  2  60           	rts
0013D5  2               @no_fcollision_right:
0013D5  2  20 11 11     	jsr position_x_inc
0013D8  2  60           	rts
0013D9  2               @fall_left:
0013D9  2  20 DC 14     	jsr check_collision_left
0013DC  2  F0 04        	beq @no_fcollision_left
0013DE  2               @fcollision_left:
0013DE  2  9C D9 1C     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
0013E1  2  60           	rts
0013E2  2               @no_fcollision_left:
0013E2  2  20 68 11     	jsr position_x_dec
0013E5  2  60           	rts
0013E6  2               
0013E6  2               @fall_once:
0013E6  2  20 BC 11     	jsr position_y_inc
0013E9  2  80 DA        	bra @apply_delta_x
0013EB  2               
0013EB  2               @sit_on_solid:
0013EB  2               	; change the status if falling
0013EB  2  AD D6 1C     	lda player0 + PLAYER::status
0013EE  2  C9 04        	cmp #STATUS_FALLING
0013F0  2  D0 05        	bne @return
0013F2  2  A9 00        	lda #STATUS_WALKING_IDLE
0013F4  2  8D D6 1C     	sta player0 + PLAYER::status
0013F7  2               @return:
0013F7  2  60           	rts
0013F8  2               
0013F8  2               	;
0013F8  2               	; deal with gravity driven jumping
0013F8  2               	;
0013F8  2               @jump:
0013F8  2               @decrease_ticks:
0013F8  2  CE D7 1C     	dec player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
0013FB  2  D0 0A        	bne @drive_jump
0013FD  2  CE D8 1C     	dec player0 + PLAYER::falling_ticks	+ 1
001400  2  F0 4B        	beq @apex							; reached the apex of the jump
001402  2               
001402  2  A9 0A        	lda #JUMP_LO_TICKS
001404  2  8D D7 1C     	sta player0 + PLAYER::falling_ticks	; reset t
001407  2               
001407  2               @drive_jump:
001407  2  AD D8 1C     	lda player0 + PLAYER::falling_ticks + 1
00140A  2  85 14        	sta r9L
00140C  2               @loop_jump:
00140C  2  20 2D 12     	jsr position_y_dec
00140F  2  20 D2 12     	jsr get_tilemap_position
001412  2  A5 02 8D E7  	SAVE_r0 player0 + PLAYER::tilemap
001416  2  1C A5 03 8D  
00141A  2  E8 1C        
00141C  2               
00141C  2  AD E4 1C     	lda player0 + PLAYER::levely
00141F  2  29 0F        	and #%00001111
001421  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
001423  2               
001423  2               	; test hit a ceiling
001423  2  20 39 15     	jsr check_collision_up
001426  2  D0 04        	bne @collision_up
001428  2               @no_collision_up:
001428  2  C6 14        	dec r9L
00142A  2  D0 E0        	bne @loop_jump						; loop to take t in count for gravity
00142C  2               
00142C  2               @collision_up:
00142C  2  AD D9 1C     	lda player0 + PLAYER::delta_x		; deal with deltax
00142F  2  F0 C6        	beq @return
001431  2  30 0D        	bmi @jump_left
001433  2               @jump_right:
001433  2  20 C7 14     	jsr check_collision_right
001436  2  F0 04        	beq @no_collision_right
001438  2               @collision_right:
001438  2  9C D9 1C     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
00143B  2  60           	rts
00143C  2               @no_collision_right:
00143C  2  20 11 11     	jsr position_x_inc
00143F  2  60           	rts
001440  2               @jump_left:
001440  2  20 DC 14     	jsr check_collision_left
001443  2  F0 04        	beq @no_collision_left
001445  2               @collision_left:
001445  2  9C D9 1C     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
001448  2  60           	rts
001449  2               @no_collision_left:
001449  2  20 68 11     	jsr position_x_dec
00144C  2  60           	rts
00144D  2               
00144D  2               @apex:
00144D  2  A9 06 8D D6  	m_status STATUS_JUMPING_IDLE
001451  2  1C           
001452  2  60           	rts
001453  2               
001453  2               ;************************************************
001453  2               ;	compute the number of tiles covered by the boundingbox
001453  2               ;	return: r1L : number of tiles height
001453  2               ;			X = r1H : number of tiles width
001453  2               ;			Y = r2L : index of the first tile to test
001453  2               ;
001453  2               bbox_coverage:
001453  2               	; X = how many column of tiles to test
001453  2  AD E2 1C     	lda player0 + PLAYER::levelx
001456  2  29 0F        	and #%00001111
001458  2  C9 08        	cmp #8
00145A  2  F0 08        	beq @one_tile
00145C  2  30 0C        	bmi @two_tiles_straight				; if X < 8, test as if int
00145E  2               @two_tiles_right:
00145E  2  A2 02        	ldx #02								; test 2 column ( y % 16 <> 0)
001460  2  A0 01        	ldy #01								; starting on row +1
001462  2  80 0A        	bra @test_lines
001464  2               @one_tile:
001464  2  A2 01        	ldx #01								; test 1 column ( y % 16  == 8)
001466  2  A0 01        	ldy #01								; starting on row +1
001468  2  80 04        	bra @test_lines
00146A  2               @two_tiles_straight:
00146A  2  A2 02        	ldx #02								; test 2 columns ( y % 16 == 0)
00146C  2  A0 00        	ldy #00								; test on row  0 ( x % 16 != 0)
00146E  2               
00146E  2               @test_lines:
00146E  2               	; X = how many lines of tiles to test
00146E  2  AD E4 1C     	lda player0 + PLAYER::levely
001471  2  29 0F        	and #%00001111
001473  2  D0 09        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
001475  2               @yint:
001475  2  A9 02        	lda #02					; test 2 lines ( y % 16 == 0)
001477  2  85 04        	sta r1L
001479  2  86 05        	stx r1H
00147B  2  84 06        	sty r2L
00147D  2  60           	rts
00147E  2               @yfloat:
00147E  2  A9 03        	lda #03					; test 3 rows ( y % 16 <> 0)
001480  2  85 04        	sta r1L
001482  2  86 05        	stx r1H
001484  2  84 06        	sty r2L
001486  2  60           	rts
001487  2               
001487  2               ;************************************************
001487  2               ; check collision on the height
001487  2               ;	A = vaule of the collision
001487  2               ;	ZERO = no collision
001487  2               ;
001487  2               check_collision_height:
001487  2               	; only test if we are 'centered'
001487  2  AD E2 1C     	lda player0 + PLAYER::levelx
00148A  2  29 0F        	and #%00001111
00148C  2  C9 08        	cmp #08
00148E  2  D0 34        	bne @no_collision
001490  2               
001490  2  AD E7 1C     	lda player0 + PLAYER::tilemap
001493  2  85 02        	sta r0L
001495  2  AD E8 1C     	lda player0 + PLAYER::tilemap + 1
001498  2  85 03        	sta r0H
00149A  2               
00149A  2  20 53 14     	jsr bbox_coverage
00149D  2  A6 04        	ldx r1L				; tiles height
00149F  2  98           	tya
0014A0  2  18           	clc
0014A1  2  6D 1C 10     	adc test_right_left
0014A4  2  A8           	tay
0014A5  2               
0014A5  2               @test_line:
0014A5  2  B1 02        	lda (r0L),y
0014A7  2  F0 11        	beq @test_next_line
0014A9  2               
0014A9  2               	; some tiles are not real collision
0014A9  2  84 30        	sty $30
0014AB  2  A8           	tay
0014AC  2  B9 CE 1B     	lda tiles_attributes,y
0014AF  2  89 02        	bit #TILE_ATTR::SOLID_WALL
0014B1  2  F0 05        	beq @test_next_line1
0014B3  2  A4 30        	ldy $30
0014B5  2  B1 02        	lda (r0L),y
0014B7  2  60           	rts
0014B8  2               
0014B8  2               @test_next_line1:
0014B8  2  A4 30        	ldy $30
0014BA  2               
0014BA  2               @test_next_line:
0014BA  2  CA           	dex
0014BB  2  F0 07        	beq @no_collision
0014BD  2  98           	tya
0014BE  2  18           	clc
0014BF  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
0014C1  2  A8           	tay
0014C2  2  80 E1        	bra @test_line					; LADDERS can be traversed
0014C4  2               
0014C4  2               @no_collision:						; force a no collision
0014C4  2  A9 00        	lda #00
0014C6  2               @return:
0014C6  2  60           	rts
0014C7  2               
0014C7  2               ;************************************************
0014C7  2               ; check collision on the right
0014C7  2               ;	return: A = value of the collision
0014C7  2               ;			ZERO = no collision
0014C7  2               ;
0014C7  2               check_collision_right:
0014C7  2  A9 01        	lda #$01
0014C9  2  8D 1C 10     	sta test_right_left
0014CC  2  20 87 14     	jsr check_collision_height
0014CF  2  D0 0A        	bne @return					; no tile collision
0014D1  2               
0014D1  2  A9 06        	lda #(02 | 04)
0014D3  2  AE D5 1C     	ldx player0 + PLAYER::sprite
0014D6  2  A0 01        	ldy #01
0014D8  2  20 60 0D     	jsr Sprite::precheck_collision	; precheck 1 pixel right
0014DB  2               
0014DB  2               @return:
0014DB  2  60           	rts
0014DC  2               
0014DC  2               ;************************************************
0014DC  2               ; check collision on the left
0014DC  2               ;
0014DC  2               check_collision_left:
0014DC  2  A9 FF        	lda #$ff
0014DE  2  8D 1C 10     	sta test_right_left
0014E1  2  20 87 14     	jsr check_collision_height
0014E4  2  D0 0A        	bne @return
0014E6  2               
0014E6  2  A9 0A        	lda #(02 | 08)
0014E8  2  AE D5 1C     	ldx player0 + PLAYER::sprite
0014EB  2  A0 01        	ldy #01
0014ED  2  20 60 0D     	jsr Sprite::precheck_collision	; precheck 1 pixel right
0014F0  2               
0014F0  2               @return:
0014F0  2  60           	rts
0014F1  2               
0014F1  2               ;************************************************
0014F1  2               ; check collision down
0014F1  2               ;	collision surface to test is 16 pixels around the mid X
0014F1  2               ; 	output : Z = no collision
0014F1  2               ;
0014F1  2               check_collision_down:
0014F1  2  AD E4 1C     	lda player0 + PLAYER::levely	; if the player is inbetween 2 tiles there can be no collision
0014F4  2  29 0F        	and #%00001111
0014F6  2  F0 0B        	beq @real_test
0014F8  2               
0014F8  2  A9 05        	lda #(01 | 04)
0014FA  2  AE D5 1C     	ldx player0 + PLAYER::sprite
0014FD  2  A0 01        	ldy #01
0014FF  2  20 60 0D     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001502  2  60           	rts
001503  2               @real_test:
001503  2  AD E7 1C     	lda player0 + PLAYER::tilemap
001506  2  85 02        	sta r0L
001508  2  AD E8 1C     	lda player0 + PLAYER::tilemap + 1
00150B  2  85 03        	sta r0H
00150D  2               
00150D  2  20 53 14     	jsr bbox_coverage
001510  2  98           	tya
001511  2  18           	clc
001512  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001514  2  A8           	tay
001515  2               
001515  2               @test_colum:
001515  2  B1 02        	lda (r0L),y
001517  2  F0 0C        	beq @next_colum							; empty tile, test the next one
001519  2               
001519  2  84 30        	sty $30
00151B  2  A8           	tay
00151C  2  B9 CE 1B     	lda tiles_attributes,y
00151F  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001521  2  D0 08        	bne @collision							; considere slopes as empty
001523  2  A4 30        	ldy $30
001525  2               
001525  2               @next_colum:
001525  2  CA           	dex
001526  2  F0 06        	beq @return
001528  2  C8           	iny
001529  2  80 EA        	bra @test_colum
00152B  2               @collision:
00152B  2  A9 01        	lda #01
00152D  2  60           	rts
00152E  2               @return:
00152E  2  A9 05        	lda #(01 | 04)
001530  2  AE D5 1C     	ldx player0 + PLAYER::sprite
001533  2  A0 01        	ldy #01
001535  2  20 60 0D     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001538  2               
001538  2  60           	rts
001539  2               
001539  2               ;************************************************
001539  2               ; check collision up
001539  2               ;	collision surface to test is 16 pixels around the mid X
001539  2               ;	input :
001539  2               ;		r0 : @ of current tile the top-left corner of the player sprite
001539  2               ; 	output : Z = no collision
001539  2               ;
001539  2               check_collision_up:
001539  2  38           	sec
00153A  2  AD E7 1C     	lda player0 + PLAYER::tilemap
00153D  2  E9 20        	sbc #LEVEL_TILES_WIDTH
00153F  2  85 02        	sta r0L
001541  2  AD E8 1C     	lda player0 + PLAYER::tilemap + 1
001544  2  E9 00        	sbc #0
001546  2  85 03        	sta r0H
001548  2               
001548  2               	; X = how many column of tiles to test
001548  2  AD E2 1C     	lda player0 + PLAYER::levelx
00154B  2  29 0F        	and #%00001111
00154D  2  F0 0A        	beq @xint				; if player is not on a multiple of 16 (tile size)
00154F  2               @xfloat:
00154F  2  C9 08        	cmp #8
001551  2  30 06        	bmi @xint
001553  2  A2 01        	ldx #1					; test 1 column ( y % 16 <> 0)
001555  2  A0 01        	ldy #1					; starting at colum + 1
001557  2  80 13        	bra @test_colum
001559  2               @xint:
001559  2  A2 02        	ldx #2					; test 2 columns ( y % 16 == 0)
00155B  2  A0 00        	ldy #0					; starting at colum
00155D  2  80 00        	bra @test_y
00155F  2               
00155F  2               @test_y:
00155F  2               	; Y = how tile rows to test
00155F  2  AD E4 1C     	lda player0 + PLAYER::levely
001562  2  29 0F        	and #%00001111
001564  2  F0 06        	beq @yint				; if player is not on a multiple of 16 (tile size)
001566  2               @yfloat:
001566  2  98           	tya
001567  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; test on (row -1) +1 ( x % 16 != 0) + column
001569  2  A8           	tay
00156A  2  80 00        	bra @test_colum
00156C  2               @yint:
00156C  2               
00156C  2               @test_colum:
00156C  2  B1 02        	lda (r0L),y							; left side
00156E  2  F0 0C        	beq @next_column
001570  2               
001570  2  84 30        	sty $30
001572  2  A8           	tay
001573  2  B9 CE 1B     	lda tiles_attributes,y
001576  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001578  2  D0 08        	bne @return1
00157A  2  A4 30        	ldy $30
00157C  2               
00157C  2               @next_column:
00157C  2  CA           	dex
00157D  2  F0 05        	beq @return
00157F  2  C8           	iny
001580  2  80 EA        	bra @test_colum
001582  2               @return1:
001582  2  A9 01        	lda #01
001584  2               @return:
001584  2  60           	rts
001585  2               
001585  2               ;************************************************
001585  2               ; check if the player feet is exactly on a slope tile
001585  2               ;	modify: player_on_slop
001585  2               ;	return: Z = slop
001585  2               ;			Y = feet position tested (vs r0)
001585  2               ;
001585  2               check_player_on_slop:
001585  2  9C 1A 10     	stz player_on_slop				; no slope
001588  2               
001588  2  20 53 14     	jsr bbox_coverage
00158B  2               
00158B  2  18           	clc
00158C  2  98           	tya
00158D  2  A6 04        	ldx r1L
00158F  2  CA           	dex
001590  2               :
001590  2  69 20        	adc #LEVEL_TILES_WIDTH
001592  2  CA           	dex
001593  2  D0 FB        	bne :-
001595  2  A8           	tay								; position of the feet tiles
001596  2               
001596  2  AD E2 1C     	lda player0 + PLAYER::levelx
001599  2  29 0F        	and #%00001111
00159B  2  C9 08        	cmp #08
00159D  2  10 01        	bpl :+
00159F  2  C8           	iny
0015A0  2               :
0015A0  2               
0015A0  2               	; check if player feet is ON a slop
0015A0  2  B1 02        	lda (r0),y						; test ON feet level
0015A2  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0015A4  2  F0 04        	beq @on_slope
0015A6  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0015A8  2  D0 06        	bne @no_slope
0015AA  2               @on_slope:
0015AA  2  B1 02        	lda (r0),y						; test ON feet level
0015AC  2  8D 1A 10     	sta player_on_slop
0015AF  2  60           	rts
0015B0  2               
0015B0  2               @no_slope:
0015B0  2  A9 00        	lda #0
0015B2  2  8D 1A 10     	sta player_on_slop
0015B5  2  60           	rts
0015B6  2               
0015B6  2               ;************************************************
0015B6  2               ; check if the player feet is ABOVE a slope tile
0015B6  2               ;	input: 	Y = feet position tested (vs r0)
0015B6  2               ;	modify: player_on_slop
0015B6  2               ;	return: Z = slop
0015B6  2               ;
0015B6  2               is_player_above_slop:
0015B6  2  9C 1A 10     	stz player_on_slop				; no slope
0015B9  2               
0015B9  2  98           	tya
0015BA  2  18           	clc
0015BB  2  69 20        	adc #LEVEL_TILES_WIDTH
0015BD  2  A8           	tay								; test BELOW feet level
0015BE  2  B1 02        	lda (r0),y
0015C0  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0015C2  2  F0 0A        	beq @above_slope
0015C4  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0015C6  2  F0 06        	beq @above_slope
0015C8  2               @no_slope:
0015C8  2  A9 00        	lda #0
0015CA  2  8D 1A 10     	sta player_on_slop
0015CD  2  60           	rts
0015CE  2               @above_slope:
0015CE  2  8D 1A 10     	sta player_on_slop
0015D1  2  60           	rts
0015D2  2               
0015D2  2               ;************************************************
0015D2  2               ; status to ignore while moving
0015D2  2               ;
0015D2  2               ignore_move_request:
0015D2  2  00           	.byte	00	;	STATUS_WALKING_IDLE
0015D3  2  00           	.byte	00	;	STATUS_WALKING
0015D4  2  02           	.byte	02	;	STATUS_CLIMBING
0015D5  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
0015D6  2  01           	.byte	01	;	STATUS_FALLING
0015D7  2  01           	.byte	01	;	STATUS_JUMPING
0015D8  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
0015D9  2               
0015D9  2               ;************************************************
0015D9  2               ; Try to move player to the right, walk up if facing a slope
0015D9  2               ;
0015D9  2               move_right:
0015D9  2  AC D6 1C     	ldy player0 + PLAYER::status
0015DC  2  B9 D2 15     	lda ignore_move_request, y
0015DF  2  F0 06        	beq @walk_right					; if 0 => can move
0015E1  2  C9 02        	cmp #02
0015E3  2  F0 6E        	beq @climb_right				; if 2 => has to climb
0015E5  2  80 6B        	bra @return1					; else block the move
0015E7  2               
0015E7  2               @walk_right:
0015E7  2  20 85 15     	jsr check_player_on_slop
0015EA  2  D0 0A        	bne @no_collision
0015EC  2               
0015EC  2  20 B6 15     	jsr is_player_above_slop
0015EF  2  D0 05        	bne @no_collision
0015F1  2               
0015F1  2  20 C7 14     	jsr Player::check_collision_right
0015F4  2  D0 5C        	bne @return1					; block is collision on the right  and there is no slope on the right
0015F6  2               
0015F6  2               @no_collision:
0015F6  2  A9 01        	lda #01
0015F8  2  8D D9 1C     	sta player0 + PLAYER::delta_x
0015FB  2               
0015FB  2               @set_walking_sprite:
0015FB  2  A9 01        	lda #SPRITE_FLIP_H
0015FD  2  8D E6 1C     	sta player0 + PLAYER::flip
001600  2  AC D5 1C     	ldy player0 + PLAYER::sprite
001603  2  20 93 0C     	jsr Sprite::set_flip				; force sprite to look right
001606  2               
001606  2  A9 01 8D D6  	m_status STATUS_WALKING
00160A  2  1C           
00160B  2               
00160B  2               	;change player sprite
00160B  2  A9 03        	lda #Player::Sprites::LEFT
00160D  2  CD DB 1C     	cmp player0 + PLAYER::spriteID
001610  2  F0 08        	beq @move_x
001612  2               
001612  2  A9 03        	lda #Player::Sprites::LEFT
001614  2  8D DB 1C     	sta player0 + PLAYER::spriteID
001617  2  20 F7 10     	jsr set_bitmap
00161A  2               
00161A  2               @move_x:
00161A  2  20 11 11     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
00161D  2               
00161D  2               	; if sitting on a slop
00161D  2  AD 1A 10     	lda player_on_slop
001620  2  F0 2D        	beq @set_position
001622  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001624  2  F0 26        	beq @move_y_up
001626  2               @try_move_y_dow:
001626  2  AD E4 1C     	lda player0 + PLAYER::levely
001629  2  29 0F        	and #%00001111
00162B  2  D0 1A        	bne @move_y_down
00162D  2  AD E7 1C     	lda player0 + PLAYER::tilemap
001630  2  85 02        	sta r0L
001632  2  AD E8 1C     	lda player0 + PLAYER::tilemap+1
001635  2  85 03        	sta r0H
001637  2  A5 06        	lda r2L
001639  2  18           	clc
00163A  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
00163C  2  A8           	tay
00163D  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
00163F  2  A8           	tay
001640  2  B9 CE 1B     	lda tiles_attributes,y
001643  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001645  2  D0 61        	bne @return							; do not change Y if the tile below the player is a solid one
001647  2               @move_y_down:
001647  2  20 BC 11     	jsr position_y_inc
00164A  2  80 03        	bra @set_position
00164C  2               @move_y_up:
00164C  2  20 2D 12     	jsr position_y_dec
00164F  2               
00164F  2               @set_position:
00164F  2  20 E8 10     	jsr position_set
001652  2               @return1:
001652  2  60           	rts
001653  2               
001653  2               @climb_right:
001653  2  20 C7 14     	jsr Player::check_collision_right
001656  2  F0 05        	beq @climb_right_1
001658  2  C9 04        	cmp #TILE_SOLID_LADER
00165A  2  F0 01        	beq @climb_right_1
00165C  2  60           	rts
00165D  2               @climb_right_1:
00165D  2  20 53 14     	jsr bbox_coverage
001660  2               @get_tile:
001660  2  B1 02        	lda (r0),y
001662  2  F0 0E        	beq @no_grab					; no tile on right
001664  2  85 31        	sta $31
001666  2  84 30        	sty $30
001668  2  A8           	tay
001669  2  B9 CE 1B     	lda tiles_attributes,y
00166C  2  89 08        	bit #TILE_ATTR::GRABBING
00166E  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
001670  2  A4 30        	ldy $30
001672  2               @no_grab:							; test the tile on the right on next line
001672  2  C8           	iny
001673  2  CA           	dex
001674  2  D0 EA        	bne @get_tile
001676  2  80 1E        	bra @climb_right_drop			; no grab tile on the right of the player
001678  2               @climb_right_2:
001678  2  A5 31        	lda $31							; tile index with grab attribute
00167A  2  C9 05        	cmp #TILE_LEDGE
00167C  2  D0 04        	bne @set_climb_sprite
00167E  2               @set_hang_sprite:
00167E  2  A9 09        	lda #Player::Sprites::HANG
001680  2  80 02        	bra @next
001682  2               @set_climb_sprite:
001682  2  A9 06        	lda #Player::Sprites::CLIMB
001684  2               @next:
001684  2  8D DB 1C     	sta player0 + PLAYER::spriteID
001687  2  20 F7 10     	jsr set_bitmap
00168A  2  A9 02 8D D6  	m_status STATUS_CLIMBING
00168E  2  1C           
00168F  2  20 11 11     	jsr Player::position_x_inc		; move the player sprite, if the
001692  2  20 E8 10     	jsr position_set
001695  2  60           	rts
001696  2               @climb_right_drop:
001696  2  A9 01 8D D6  	m_status STATUS_WALKING
00169A  2  1C           
00169B  2  A9 03 8D DB  	SET_SPRITE Player::Sprites::LEFT, 1
00169F  2  1C A9 01 8D  
0016A3  2  DC 1C 20 F7  
0016A8  2               
0016A8  2               @return:
0016A8  2  60           	rts
0016A9  2               
0016A9  2               ;************************************************
0016A9  2               ; try to move the player to the left
0016A9  2               ;
0016A9  2               move_left:
0016A9  2  AC D6 1C     	ldy player0 + PLAYER::status
0016AC  2  B9 D2 15     	lda ignore_move_request, y
0016AF  2  F0 06        	beq @walk_left					; if 0 => can move
0016B1  2  C9 02        	cmp #02
0016B3  2  F0 6E        	beq @climb_left				; if 2 => has to climb
0016B5  2  80 6B        	bra @return					; else block the move
0016B7  2               
0016B7  2               @walk_left:
0016B7  2  20 85 15     	jsr check_player_on_slop
0016BA  2  D0 0A        	bne @no_collision				; ignore right collision left if on a slope
0016BC  2               
0016BC  2  20 B6 15     	jsr is_player_above_slop
0016BF  2  D0 05        	bne @no_collision
0016C1  2               
0016C1  2  20 DC 14     	jsr Player::check_collision_left
0016C4  2  D0 5C        	bne @return						; block is collision on the right  and there is no slope on the right
0016C6  2               
0016C6  2               @no_collision:
0016C6  2  A9 FF        	lda #$ff
0016C8  2  8D D9 1C     	sta player0 + PLAYER::delta_x
0016CB  2               
0016CB  2               @set_walking_sprite:
0016CB  2  A9 00        	lda #SPRITE_FLIP_NONE
0016CD  2  8D E6 1C     	sta player0 + PLAYER::flip
0016D0  2  AC D5 1C     	ldy player0 + PLAYER::sprite
0016D3  2  20 93 0C     	jsr Sprite::set_flip				; force sprite to loop right
0016D6  2               
0016D6  2  A9 01 8D D6  	m_status STATUS_WALKING
0016DA  2  1C           
0016DB  2               
0016DB  2  A9 03        	lda #Player::Sprites::LEFT
0016DD  2  CD DB 1C     	cmp player0 + PLAYER::spriteID
0016E0  2  F0 08        	beq @move_x
0016E2  2               
0016E2  2               	;change player sprite
0016E2  2  A9 03        	lda #Player::Sprites::LEFT
0016E4  2  8D DB 1C     	sta player0 + PLAYER::spriteID
0016E7  2  20 F7 10     	jsr set_bitmap
0016EA  2               
0016EA  2               @move_x:
0016EA  2  20 68 11     	jsr Player::position_x_dec
0016ED  2               
0016ED  2  AD 1A 10     	lda player_on_slop				; if walking a slop also increase Y
0016F0  2  F0 2D        	beq @set_position
0016F2  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0016F4  2  F0 26        	beq @move_y_up
0016F6  2               @try_move_y_dow:
0016F6  2  AD E4 1C     	lda player0 + PLAYER::levely
0016F9  2  29 0F        	and #%00001111
0016FB  2  D0 1A        	bne @move_y_down
0016FD  2  AD E7 1C     	lda player0 + PLAYER::tilemap
001700  2  85 02        	sta r0L
001702  2  AD E8 1C     	lda player0 + PLAYER::tilemap+1
001705  2  85 03        	sta r0H
001707  2  A5 06        	lda r2L
001709  2  18           	clc
00170A  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
00170C  2  A8           	tay
00170D  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
00170F  2  A8           	tay
001710  2  B9 CE 1B     	lda tiles_attributes,y
001713  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001715  2  D0 0B        	bne @return							; do not change Y if the tile below the player is a solid one
001717  2               @move_y_down:
001717  2  20 BC 11     	jsr position_y_inc
00171A  2  80 03        	bra @set_position
00171C  2               @move_y_up:
00171C  2  20 2D 12     	jsr position_y_dec
00171F  2               
00171F  2               @set_position:
00171F  2  20 E8 10     	jsr position_set
001722  2               
001722  2               @return:
001722  2  60           	rts
001723  2               
001723  2               @climb_left:
001723  2  20 DC 14     	jsr Player::check_collision_left
001726  2  F0 01        	beq @climb_left_1
001728  2  60           	rts								; collision on left, block the move
001729  2               @climb_left_1:
001729  2  20 53 14     	jsr bbox_coverage				; what tiles is the player covering
00172C  2               @get_tile:
00172C  2  B1 02        	lda (r0),y
00172E  2  F0 0E        	beq @no_grab					; no tile on right
001730  2  85 31        	sta $31
001732  2  84 30        	sty $30
001734  2  A8           	tay
001735  2  B9 CE 1B     	lda tiles_attributes,y
001738  2  89 08        	bit #TILE_ATTR::GRABBING
00173A  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
00173C  2  A4 30        	ldy $30
00173E  2               @no_grab:							; test the tile on the left on next line
00173E  2  C8           	iny
00173F  2  CA           	dex
001740  2  D0 EA        	bne @get_tile
001742  2  80 1E        	bra @climb_left_drop			; no grab tile on the right of the player
001744  2               @climb_left_2:
001744  2  A5 31        	lda $31							; tile index with grab attribute
001746  2  C9 05        	cmp #TILE_LEDGE
001748  2  D0 04        	bne @set_climb_sprite
00174A  2               @set_hang_sprite:
00174A  2  A9 09        	lda #Player::Sprites::HANG
00174C  2  80 02        	bra @next
00174E  2               @set_climb_sprite:
00174E  2  A9 06        	lda #Player::Sprites::CLIMB
001750  2               @next:
001750  2  8D DB 1C     	sta player0 + PLAYER::spriteID
001753  2  20 F7 10     	jsr set_bitmap
001756  2  A9 02 8D D6  	m_status STATUS_CLIMBING
00175A  2  1C           
00175B  2  20 68 11     	jsr Player::position_x_dec		; move the player sprite, if the
00175E  2  20 E8 10     	jsr position_set
001761  2  60           	rts
001762  2               @climb_left_drop:					; no ladder to stick to
001762  2  A9 01 8D D6  	m_status STATUS_WALKING
001766  2  1C           
001767  2  A9 03 8D DB  	SET_SPRITE Player::Sprites::LEFT, 1
00176B  2  1C A9 01 8D  
00176F  2  DC 1C 20 F7  
001774  2  60           	rts
001775  2               
001775  2               ;************************************************
001775  2               ; try to move the player down (crouch, hide, move down a ladder)
001775  2               ;
001775  2               move_down:
001775  2  AD D6 1C     	lda player0 + PLAYER::status
001778  2  C9 04        	cmp #STATUS_FALLING
00177A  2  D0 01        	bne @try_move_down						; cannot move when falling
00177C  2  60           	rts
00177D  2               
00177D  2               @try_move_down:
00177D  2               	; custom collision down
00177D  2  AD E7 1C     	lda player0 + PLAYER::tilemap
001780  2  85 02        	sta r0L
001782  2  AD E8 1C     	lda player0 + PLAYER::tilemap + 1
001785  2  85 03        	sta r0H
001787  2               
001787  2  20 53 14     	jsr bbox_coverage
00178A  2  8E 1B 10     	stx ladders						; width of the player in tiles = number of ladders to find below
00178D  2  98           	tya
00178E  2  18           	clc
00178F  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001791  2  A8           	tay
001792  2               
001792  2               @test_colum:
001792  2  B1 02        	lda (r0L),y
001794  2  C9 04        	cmp #TILE_SOLID_LADER
001796  2  D0 05        	bne @check_solid_ground
001798  2               @ladder_down:
001798  2  CE 1B 10     	dec ladders
00179B  2  80 0C        	bra @next_column
00179D  2               @check_solid_ground:
00179D  2  84 30        	sty $30
00179F  2  A8           	tay
0017A0  2  B9 CE 1B     	lda tiles_attributes,y
0017A3  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
0017A5  2  D0 45        	bne @cannot_move_down
0017A7  2  A4 30        	ldy $30
0017A9  2               @next_column:
0017A9  2  CA           	dex
0017AA  2  F0 03        	beq @end
0017AC  2  C8           	iny
0017AD  2  80 E3        	bra @test_colum
0017AF  2               @end:
0017AF  2               
0017AF  2  AD 1B 10     	lda ladders
0017B2  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
0017B4  2               
0017B4  2               	; if there player is covering ANY ladders (accros the boundingbox)
0017B4  2  A4 06        	ldy r2L
0017B6  2               @check_line:							; already climbing down is player grabbing no ladder
0017B6  2  A6 05        	ldx r1H
0017B8  2               @check_row:
0017B8  2  B1 02        	lda (r0L),y
0017BA  2  C9 04        	cmp #TILE_SOLID_LADER
0017BC  2  F0 12        	beq @move_down
0017BE  2  C8           	iny
0017BF  2  CA           	dex
0017C0  2  D0 F6        	bne @check_row
0017C2  2  C6 04        	dec r1L
0017C4  2  F0 26        	beq @cannot_move_down
0017C6  2               
0017C6  2  98           	tya
0017C7  2  18           	clc
0017C8  2  69 20        	adc #LEVEL_TILES_WIDTH
0017CA  2  38           	sec
0017CB  2  E5 05        	sbc r1H
0017CD  2  A8           	tay
0017CE  2  80 E6        	bra @check_line
0017D0  2               
0017D0  2               @move_down:
0017D0  2  20 BC 11     	jsr Player::position_y_inc		; move down the ladder
0017D3  2  20 E8 10     	jsr position_set
0017D6  2               
0017D6  2  A9 02 8D D6  	m_status STATUS_CLIMBING
0017DA  2  1C           
0017DB  2               
0017DB  2  A9 06        	lda #Player::Sprites::CLIMB
0017DD  2  CD DB 1C     	cmp player0 + PLAYER::spriteID
0017E0  2  D0 01        	bne @change_sprite
0017E2  2  60           	rts
0017E3  2               
0017E3  2               @change_sprite:
0017E3  2               	;change player sprite
0017E3  2  A9 06        	lda #Player::Sprites::CLIMB
0017E5  2  8D DB 1C     	sta player0 + PLAYER::spriteID
0017E8  2  20 F7 10     	jsr set_bitmap
0017EB  2  60           	rts
0017EC  2               
0017EC  2               @cannot_move_down:
0017EC  2  A9 00        	lda #STATUS_WALKING_IDLE
0017EE  2  8D D6 1C     	sta player0 + PLAYER::status
0017F1  2  A9 01        	lda #01
0017F3  2  8D DC 1C     	sta player0 + PLAYER::spriteAnim
0017F6  2  20 F7 10     	jsr set_bitmap
0017F9  2  9C D9 1C     	stz player0 + PLAYER::delta_x
0017FC  2  60           	rts
0017FD  2               
0017FD  2               ;************************************************
0017FD  2               ; try to move the player up (move up a ladder)
0017FD  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
0017FD  2               ;	modify: r0, r1, r2
0017FD  2               ;
0017FD  2               move_up:
0017FD  2  AD D6 1C     	lda player0 + PLAYER::status
001800  2  C9 04        	cmp #STATUS_FALLING
001802  2  D0 01        	bne @try_move_up				; cannot move when falling
001804  2  60           	rts
001805  2               @try_move_up:
001805  2               	; custom collision up
001805  2  20 53 14     	jsr bbox_coverage
001808  2  8E 1B 10     	stx ladders						; width of the player in tiles = number of ladders to find below
00180B  2               
00180B  2               	; check the situation ABOVE the player
00180B  2  38           	sec
00180C  2  AD E7 1C     	lda player0 + PLAYER::tilemap
00180F  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001811  2  85 02        	sta r0L
001813  2  AD E8 1C     	lda player0 + PLAYER::tilemap+1
001816  2  E9 00        	sbc #0
001818  2  85 03        	sta r0H
00181A  2               
00181A  2               	; if there the right numbers of ladder tiles above the player
00181A  2               @test_colum:
00181A  2  B1 02        	lda (r0L),y
00181C  2  C9 04        	cmp #TILE_SOLID_LADER
00181E  2  D0 05        	bne @check_solid_ceiling
001820  2  CE 1B 10     	dec ladders
001823  2  80 0C        	bra @next_column
001825  2               @check_solid_ceiling:
001825  2  84 30        	sty $30
001827  2  A8           	tay
001828  2  B9 CE 1B     	lda tiles_attributes,y
00182B  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
00182D  2  D0 4F        	bne @cannot_move_up
00182F  2  A4 30        	ldy $30
001831  2               @next_column:
001831  2  CA           	dex
001832  2  F0 03        	beq @end
001834  2  C8           	iny
001835  2  80 E3        	bra @test_colum
001837  2               @end:
001837  2               
001837  2  AD 1B 10     	lda ladders
00183A  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
00183C  2               
00183C  2               	; if there player is covering ANY LADER (accros the boundingbox)
00183C  2  AD E7 1C     	lda player0 + PLAYER::tilemap
00183F  2  85 02        	sta r0L
001841  2  AD E8 1C     	lda player0 + PLAYER::tilemap+1
001844  2  85 03        	sta r0H
001846  2               
001846  2  A4 06        	ldy r2L
001848  2               @check_line:							; already climbing up is player grabbing no ladder
001848  2  A6 05        	ldx r1H
00184A  2               @check_row:
00184A  2  B1 02        	lda (r0L),y
00184C  2  C9 04        	cmp #TILE_SOLID_LADER
00184E  2  F0 12        	beq @climb_down
001850  2  C8           	iny
001851  2  CA           	dex
001852  2  D0 F6        	bne @check_row
001854  2  C6 04        	dec r1L
001856  2  F0 26        	beq @cannot_move_up
001858  2               
001858  2  98           	tya
001859  2  18           	clc
00185A  2  69 20        	adc #LEVEL_TILES_WIDTH
00185C  2  38           	sec
00185D  2  E5 05        	sbc r1H
00185F  2  A8           	tay
001860  2  80 E6        	bra @check_line
001862  2               
001862  2               @climb_down:
001862  2  20 2D 12     	jsr Player::position_y_dec		; move up the ladder
001865  2  20 E8 10     	jsr position_set
001868  2               
001868  2  A9 02 8D D6  	m_status STATUS_CLIMBING
00186C  2  1C           
00186D  2               
00186D  2  A9 06        	lda #Player::Sprites::CLIMB
00186F  2  CD DB 1C     	cmp player0 + PLAYER::spriteID
001872  2  D0 01        	bne @set_sprite
001874  2  60           	rts
001875  2               @set_sprite:						;change player sprite
001875  2  A9 06        	lda #Player::Sprites::CLIMB
001877  2  8D DB 1C     	sta player0 + PLAYER::spriteID
00187A  2  20 F7 10     	jsr set_bitmap
00187D  2  60           	rts
00187E  2               
00187E  2               @cannot_move_up:
00187E  2  A9 00        	lda #STATUS_WALKING_IDLE
001880  2  8D D6 1C     	sta player0 + PLAYER::status
001883  2  60           	rts
001884  2               
001884  2               ;************************************************
001884  2               ; jump
001884  2               ;	A = delta X value
001884  2               ;
001884  2               jump:
001884  2  AA           	tax
001885  2  AC D6 1C         ldy player0 + PLAYER::status
001888  2  B9 D2 15     	lda ignore_move_request,y
00188B  2  D0 17        	bne @return
00188D  2  8E D9 1C     	stx player0 + PLAYER::delta_x
001890  2               
001890  2               	; ensure there is no ceiling over the player
001890  2  20 39 15     	jsr check_collision_up
001893  2  D0 0F        	bne @return
001895  2               
001895  2  A9 0A        	lda #JUMP_LO_TICKS
001897  2  8D D7 1C     	sta player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
00189A  2  A9 02        	lda #JUMP_HI_TICKS
00189C  2  8D D8 1C     	sta player0 + PLAYER::falling_ticks	+ 1
00189F  2               
00189F  2  A9 05 8D D6  	m_status STATUS_JUMPING
0018A3  2  1C           
0018A4  2               @return:
0018A4  2  60           	rts
0018A5  2               
0018A5  2               .endscope
0018A5  2               
0018A5  1               .include "tiles.asm"
0018A5  2               ;-----------------------------------------------------------------------------
0018A5  2               ;/////////////////////////////////////////////////////////////////////////////
0018A5  2               ; START Tiles code
0018A5  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0018A5  2               ;-----------------------------------------------------------------------------
0018A5  2               
0018A5  2               .scope Tiles
0018A5  2               
0018A5  2               ;animated_tiles_map
0018A5  2               ;   nb_animated_tiles
0018A5  2               ;   tile[0]
0018A5  2               ;        tick,
0018A5  2               ;        nb_frames
0018A5  2               ;        current_frame
0018A5  2               ;        @frame[0][0]
0018A5  2               ;        nb_tiles
0018A5  2               ;        @addr_tiles_list[0]
0018A5  2               ;   tile[1]
0018A5  2               ;   ....
0018A5  2               ;   tile[nb_animated_tiles-1]
0018A5  2               ;   frame[t0][0]: duration, tile_index
0018A5  2               ;   frame[t0][1]
0018A5  2               ;   .....
0018A5  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
0018A5  2               ;   frame[t1][0]: duration, tile_index
0018A5  2               ;   frame[t1][1]
0018A5  2               ;   .....
0018A5  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
0018A5  2               ;   .....
0018A5  2               ;   frame[tnb_animated_tiles-1][0]
0018A5  2               ;   .....
0018A5  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
0018A5  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
0018A5  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
0018A5  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
0018A5  2               
0018A5  2               .struct ANIMATED_TILES
0018A5  2                   nb_animated_tiles   .byte
0018A5  2               
0018A5  2                   .struct ANIMATED_TILE
0018A5  2                       tick            .byte   ; number of 18ms frames until next animation
0018A5  2                       nb_frames       .byte
0018A5  2                       current_frame   .byte
0018A5  2                       addr_frames  .addr   ; offset of the list of animation
0018A5  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
0018A5  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
0018A5  2                   .endstruct
0018A5  2               .endstruct
0018A5  2               
0018A5  2               .struct FRAME
0018A5  2                   duration    .byte
0018A5  2                   tile_index  .byte
0018A5  2               .endstruct
0018A5  2               
0018A5  2               animated_tiles_map = HIMEM + $400
0018A5  2               animated_tiles = HIMEM + $400 + 1
0018A5  2               
0018A5  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
0018A9  2  73 61 6E 69  
0018AD  2  2E 62 69 6E  
0018B1  2               fsanimated_tiles_end:
0018B1  2               
0018B1  2               ;-----------------------------------------
0018B1  2               ; load and fix the animated tiles data
0018B1  2               ;
0018B1  2               load:
0018B1  2  A9 00        	lda #0
0018B3  2  85 00        	sta $00
0018B5  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
0018B9  2  A0 00 20 BA  
0018BD  2  FF A9 0C A2  
0018D6  2               
0018D6  2                   ; convert offsets in the data structure to memory addr
0018D6  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0018D9  2  A2 00            ldx #0
0018DB  2               
0018DB  2               @next_tile:
0018DB  2  18               clc
0018DC  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0018DF  2  69 00            adc #<animated_tiles_map
0018E1  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0018E4  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0018E7  2  69 A4            adc #>animated_tiles_map
0018E9  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0018EC  2               
0018EC  2  18               clc
0018ED  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0018F0  2  69 00            adc #<animated_tiles_map
0018F2  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0018F5  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0018F8  2  69 A4            adc #>animated_tiles_map
0018FA  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0018FD  2               
0018FD  2  88               dey
0018FE  2  F0 07            beq @convert_tileslist_addr
001900  2               
001900  2  8A               txa
001901  2  18               clc
001902  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
001904  2  AA               tax
001905  2  80 D4            bra @next_tile
001907  2               
001907  2               @convert_tileslist_addr:
001907  2                   ; convert tilemap offset into vera offset
001907  2                   ; convert offsets in the data structure to memory addr
001907  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00190A  2  A2 00            ldx #0
00190C  2               @next_tile1:
00190C  2                   ; setup the listf of memory offset in vera memory
00190C  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00190F  2  85 02            sta r0L
001911  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
001914  2  85 03            sta r0H
001916  2               
001916  2  5A               phy
001917  2  DA               phx
001918  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
00191B  2  AA               tax
00191C  2  A0 00            ldy #00
00191E  2               
00191E  2               @loop_tiles:
00191E  2  18               clc
00191F  2  B1 02            lda (r0),y
001921  2  69 00            adc #<VRAM_layer1_map
001923  2  91 02            sta (r0),y
001925  2  C8               iny
001926  2               
001926  2  B1 02            lda (r0),y
001928  2  69 08            adc #>VRAM_layer1_map
00192A  2  91 02            sta (r0),y
00192C  2  C8               iny
00192D  2               
00192D  2  CA               dex
00192E  2  D0 EE            bne @loop_tiles
001930  2  FA               plx
001931  2  7A               ply
001932  2               
001932  2  88               dey
001933  2  F0 07            beq @init
001935  2               
001935  2  8A               txa
001936  2  18               clc
001937  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
001939  2  AA               tax
00193A  2  80 D0            bra @next_tile1
00193C  2               
00193C  2               @init:
00193C  2                   ; init the timers
00193C  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00193F  2  A2 00            ldx #0
001941  2               
001941  2               @next_tile2:
001941  2                   ; setup the list of frames
001941  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
001944  2  85 02            sta r0L
001946  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
001949  2  85 03            sta r0H
00194B  2               
00194B  2                   ; save new frame duration in the timer
00194B  2  B2 02            lda (r0)
00194D  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001950  2               
001950  2  88               dey
001951  2  F0 07            beq @return
001953  2               
001953  2  8A               txa
001954  2  18               clc
001955  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
001957  2  AA               tax
001958  2  80 E7            bra @next_tile2
00195A  2               
00195A  2               @return:
00195A  2  60               rts
00195B  2               
00195B  2               ;-----------------------------------------
00195B  2               ; parse the animated tiles to update
00195B  2               ;
00195B  2               animate:
00195B  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00195E  2  A2 00            ldx #0
001960  2               
001960  2               @next_tile:
001960  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001963  2  D0 03            bne :+
001965  2  20 73 19         jsr next_frame
001968  2               :
001968  2  88               dey
001969  2  F0 07            beq @return
00196B  2               
00196B  2  8A               txa
00196C  2  18               clc
00196D  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00196F  2  AA               tax
001970  2  80 EE            bra @next_tile
001972  2               
001972  2               @return:
001972  2  60               rts
001973  2               
001973  2               ;-----------------------------------------
001973  2               ; move to the next frame of an animated tile
001973  2               ; update tiles on the tilemap
001973  2               ; input X : offset of the anim_tile structure
001973  2               ;
001973  2               next_frame:
001973  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
001976  2  1A               inc
001977  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
00197A  2  D0 02            bne :+
00197C  2  A9 00            lda #00         ; roll back to 0
00197E  2               :
00197E  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
001981  2  DA               phx
001982  2  5A               phy
001983  2               
001983  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
001984  2  A8               tay         ; Y = current animation frame
001985  2               
001985  2                   ; setup the list of frames
001985  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
001988  2  85 02            sta r0L
00198A  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00198D  2  85 03            sta r0H
00198F  2               
00198F  2  B1 02            lda (r0), y         ; save new frame duration in the timer
001991  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001994  2  C8               iny
001995  2  B1 02            lda (r0), y
001997  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
001999  2               
001999  2                   ; setup the listf of memory offset in vera memory
001999  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00199C  2  85 02            sta r0L
00199E  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0019A1  2  85 03            sta r0H
0019A3  2               
0019A3  2                   ; push all tiles in vera memory
0019A3  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
0019A6  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
0019A7  2  3A               dec         ; start at the end
0019A8  2  A8               tay
0019A9  2               
0019A9  2  A6 30            ldx $30
0019AB  2               
0019AB  2               @next_tile_index:
0019AB  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
0019AB  2               
0019AB  2  A9 00        	lda #0
0019AD  2  8D 25 9F     	sta veractl
0019B0  2  A9 02          	lda #(^VRAM_layer1_map + 2)
0019B2  2  8D 22 9F     	sta verahi
0019B5  2  B1 02            lda (r0), y
0019B7  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
0019BA  2  88               dey
0019BB  2  B1 02            lda (r0), y
0019BD  2  8D 20 9F     	sta veralo
0019C0  2  88               dey
0019C1  2  8E 23 9F         stx veradat
0019C4  2               
0019C4  2  10 E5            bpl @next_tile_index
0019C6  2               
0019C6  2  7A               ply
0019C7  2  FA               plx
0019C8  2  60               rts
0019C9  2               .endscope
0019C9  2               
0019C9  1               
0019C9  1               ;-----------------------------------------------------------------------------
0019C9  1               ;/////////////////////////////////////////////////////////////////////////////
0019C9  1               ; main code
0019C9  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0019C9  1               ;-----------------------------------------------------------------------------
0019C9  1               
0019C9  1  00 00        objects: .word 0
0019CB  1               
0019CB  1               start:
0019CB  1               	; 320x240
0019CB  1  A9 40        	lda #64
0019CD  1  8D 2A 9F     	sta veradchscale
0019D0  1  8D 2B 9F     	sta veradcvscale
0019D3  1               
0019D3  1               	; activate layer0
0019D3  1  A9 71        	lda #%01110001
0019D5  1               ;	and #(255-VERA_LAYER0)
0019D5  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
0019D5  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
0019D8  1               
0019D8  1               	;---------------------------------
0019D8  1               	; load tiles file into vram
0019D8  1               	;---------------------------------
0019D8  1  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), VRAM_tiles
0019DC  1  A0 00 20 BA  
0019E0  1  FF A9 09 A2  
0019F9  1               
0019F9  1               	;---------------------------------
0019F9  1               	; load tilemaps into vram
0019F9  1               	;---------------------------------
0019F9  1               setlayer0:
0019F9  1  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
0019FD  1  0F 09 00 8D  
001A01  1  2D 9F        
001A03  1  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
001A07  1  0F 09 03 8D  
001A0B  1  2D 9F        
001A0D  1  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
001A11  1  9F           
001A12  1  AD 2F 9F 29  	VTILEBASE 0, VRAM_tiles
001A16  1  03 09 08 8D  
001A1A  1  2F 9F        
001A1C  1  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
001A20  1  FC 09 03 8D  
001A24  1  2F 9F        
001A26  1  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
001A2A  1  A0 00 20 BA  
001A2E  1  FF A9 0B A2  
001A47  1               
001A47  1               setlayer1:
001A47  1  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
001A4B  1  0F 09 00 8D  
001A4F  1  34 9F        
001A51  1  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
001A55  1  0F 09 03 8D  
001A59  1  34 9F        
001A5B  1  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
001A5F  1  9F           
001A60  1  AD 36 9F 29  	VTILEBASE 1, VRAM_tiles
001A64  1  03 09 08 8D  
001A68  1  36 9F        
001A6A  1  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
001A6E  1  FC 09 03 8D  
001A72  1  36 9F        
001A74  1  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
001A78  1  A0 00 20 BA  
001A7C  1  FF A9 09 A2  
001A95  1               
001A95  1               	;---------------------------------
001A95  1               	; load collisionmap into ram
001A95  1               	;---------------------------------
001A95  1  A9 00        	lda #0
001A97  1  85 00        	sta $00
001A99  1  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), HIMEM
001A9D  1  A0 00 20 BA  
001AA1  1  FF A9 0D A2  
001ABA  1               
001ABA  1               	;---------------------------------
001ABA  1               	; load animated tiles into ram
001ABA  1               	;---------------------------------
001ABA  1  20 B1 18     	jsr Tiles::load
001ABD  1               
001ABD  1               	;---------------------------------
001ABD  1               	; load sprite 0,1,2 into vram
001ABD  1               	;---------------------------------
001ABD  1               load_sprites:
001ABD  1               	; prepare VERA sprites
001ABD  1  20 FC 0A     	jsr Sprite::init_addr_table
001AC0  1               
001AC0  1  A9 00 85 02  	LOAD_r0 (VRAM_tiles + tiles * tile_size)	; base for the sprites
001AC4  1  A9 41 85 03  
001AC8  1  20 1D 10     	jsr Player::init
001ACB  1               
001ACB  1               	;---------------------------------
001ACB  1               	; load objects list into ram
001ACB  1               	;---------------------------------
001ACB  1  20 5D 0E     	jsr Objects::init
001ACE  1               
001ACE  1               setirq:
001ACE  1                  ; backup default RAM IRQ vector
001ACE  1  AD 14 03        lda IRQVec
001AD1  1  8D CB 1B        sta default_irq_vector
001AD4  1  AD 15 03        lda IRQVec+1
001AD7  1  8D CC 1B        sta default_irq_vector+1
001ADA  1               
001ADA  1                  ; overwrite RAM IRQ vector with custom handler address
001ADA  1  78              sei ; disable IRQ while vector is changing
001ADB  1  A9 F2           lda #<custom_irq_handler
001ADD  1  8D 14 03        sta IRQVec
001AE0  1  A9 1A           lda #>custom_irq_handler
001AE2  1  8D 15 03        sta IRQVec+1
001AE5  1  AD 26 9F        lda veraien
001AE8  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001AEA  1  8D 26 9F        sta veraien
001AED  1  58              cli ; enable IRQ now that vector is properly set
001AEE  1               
001AEE  1               mainloop:
001AEE  1  CB           	wai
001AEF  1  80 FD        	bra mainloop
001AF1  1               
001AF1  1  60           	rts
001AF2  1               
001AF2  1               ;-----------------------------------------------------------------------------
001AF2  1               ;/////////////////////////////////////////////////////////////////////////////
001AF2  1               ; deal with IRQ"s
001AF2  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001AF2  1               ;-----------------------------------------------------------------------------
001AF2  1               custom_irq_handler:
001AF2  1  AD 27 9F     	lda veraisr
001AF5  1  AA           	tax
001AF6  1  29 04        	and #VERA_SPRCOL_BIT
001AF8  1  F0 0B        	beq @check_vsync
001AFA  1               
001AFA  1               @sprite_collision:
001AFA  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
001AFD  1  8A           	txa
001AFE  1  4A           	lsr
001AFF  1  4A           	lsr
001B00  1  4A           	lsr
001B01  1  4A           	lsr								; extract the collision mask (4:7)
001B02  1  20 B2 0C     	jsr Sprite::register_collision
001B05  1               
001B05  1               @check_vsync:
001B05  1  8A           	txa
001B06  1  29 01        	and #VERA_VSYNC_BIT
001B08  1  F0 45        	beq @continue
001B0A  1               
001B0A  1               @frame_update:
001B0A  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001B0D  1               
001B0D  1               	;---------------------------------
001B0D  1               	; animate sprite
001B0D  1               	;---------------------------------
001B0D  1  20 90 12     	jsr Player::animate
001B10  1               
001B10  1               	;---------------------------------
001B10  1               	; swap animated tiles
001B10  1               	;---------------------------------
001B10  1  20 5B 19     	jsr Tiles::animate
001B13  1               
001B13  1               	;---------------------------------
001B13  1               	; sprite collisions management
001B13  1               	;---------------------------------
001B13  1  20 39 0D     	jsr Sprite::check_irq_collision
001B16  1               
001B16  1               	;---------------------------------
001B16  1               	; player physics
001B16  1               	;---------------------------------
001B16  1  20 34 13     	jsr Player::physics
001B19  1               
001B19  1               	;---------------------------------
001B19  1               	; check keyboard
001B19  1               	;---------------------------------
001B19  1               @check_keyboard:
001B19  1               	; get fake-joystick data from keyboard
001B19  1  A9 00        	lda #0
001B1B  1  20 56 FF     	jsr joystick_get
001B1E  1  8D D4 1B     	sta joystick
001B21  1               
001B21  1               	; get real joystick data
001B21  1  A9 01        	lda #1
001B23  1  20 56 FF     	jsr joystick_get
001B26  1  C0 00        	cpy #0
001B28  1  F0 06        	beq :+
001B2A  1  2D D4 1B     	and joystick
001B2D  1  8D D4 1B     	sta joystick
001B30  1               :
001B30  1               
001B30  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001B30  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001B30  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001B30  1               ;
001B30  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001B30  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001B30  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001B30  1               ;  .Y, byte 2:
001B30  1               ;              $00 = joystick present
001B30  1               ;              $FF = joystick not present
001B30  1  89 81        	bit #(JOY_RIGHT|JOY_B)
001B32  1  F0 1E        	beq @jump_right
001B34  1  89 82        	bit #(JOY_LEFT|JOY_B)
001B36  1  F0 21        	beq @jump_left
001B38  1  89 01        	bit #JOY_RIGHT
001B3A  1  F0 29        	beq @joystick_right
001B3C  1  89 02        	bit #JOY_LEFT
001B3E  1  F0 20        	beq @joystick_left
001B40  1  89 04        	bit #JOY_DOWN
001B42  1  F0 2B        	beq @movedown
001B44  1  89 08        	bit #JOY_UP
001B46  1  F0 22        	beq @moveup
001B48  1  89 80        	bit #JOY_B
001B4A  1  F0 28        	beq @jump
001B4C  1               
001B4C  1  20 1B 13     	jsr Player::set_idle
001B4F  1               
001B4F  1               @continue:
001B4F  1                  ; continue to default IRQ handler
001B4F  1  6C CB 1B        jmp (default_irq_vector)
001B52  1                  ; RTI will happen after jump
001B52  1               
001B52  1               @jump_right:
001B52  1  A9 01        	lda #$01					; jump right
001B54  1  20 84 18     	jsr Player::jump
001B57  1  80 F6        	bra @continue
001B59  1               
001B59  1               @jump_left:
001B59  1  A9 FF        	lda #$ff					; jump left
001B5B  1  20 84 18     	jsr Player::jump
001B5E  1  80 EF        	bra @continue
001B60  1               
001B60  1               @joystick_left:
001B60  1  20 A9 16     	jsr Player::move_left
001B63  1  80 EA        	bra @continue
001B65  1               
001B65  1               @joystick_right:
001B65  1  20 D9 15     	jsr Player::move_right
001B68  1  80 E5        	bra @continue
001B6A  1               
001B6A  1               @moveup:
001B6A  1  20 FD 17     	jsr Player::move_up
001B6D  1  80 E0        	bra @continue
001B6F  1               
001B6F  1               @movedown:
001B6F  1  20 75 17     	jsr Player::move_down
001B72  1  80 DB        	bra @continue
001B74  1               
001B74  1               @jump:
001B74  1  A9 00        	lda #0				; jump up
001B76  1  20 84 18     	jsr Player::jump
001B79  1  80 D4        	bra @continue
001B7B  1               
001B7B  1               .segment "DATA"
001B7B  1               .include "tilemap.inc"
001B7B  2               map:
001B7B  2  20 20        	.byte 32,32
001B7D  2  6C 65 76 65  fslevel: .literal "level.bin"
001B81  2  6C 2E 62 69  
001B85  2  6E           
001B86  2               fslevel_end:
001B86  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001B8A  2  65 72 79 2E  
001B8E  2  62 69 6E     
001B91  2               fsbackground_end:
001B91  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001B95  2  69 73 69 6F  
001B99  2  6E 2E 62 69  
001B9E  2               fscollision_end:
001B9E  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
001BA2  2  63 74 73 2E  
001BA6  2  62 69 6E     
001BA9  2               fsobjects_end:
001BA9  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
001BAD  2  74 65 73 31  
001BB1  2  2E 62 69 6E  
001BB5  2               fssprites1_end:
001BB5  2               tileset:
001BB5  2  10 10        	.byte 16,16
001BB7  2               tiles = 49
001BB7  2               tile_size = 256
001BB7  2  74 69 6C 65  fstile: .literal "tiles.bin"
001BBB  2  73 2E 62 69  
001BBF  2  6E           
001BC0  2               fstileend:
001BC0  2               
001BC0  1               .include "sprite.inc"
001BC0  2  73 70 72 69  fssprite:	.literal "sprites.bin"
001BC4  2  74 65 73 2E  
001BC8  2  62 69 6E     
001BCB  2               fsspriteend:
001BCB  2               sprites = 12
001BCB  2               sprite_size = 1024
001BCB  2               
001BCB  1               
001BCB  1  00 00        default_irq_vector: .addr 0
001BCD  1  00           trigger_debug: .byte 0
001BCE  1               tiles_attributes:
001BCE  1  00           	.byte %00000000	;	TILE_NO_COLLISION
001BCF  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
001BD0  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
001BD1  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
001BD2  1  09           	.byte %00001001	;	TILE_SOLID_LADER
001BD3  1  09           	.byte %00001001	;	TILE_LEDGE
001BD4  1               
001BD4  1               .segment "BSS"
001BD4  1  00           	joystick: .byte 0
001BD5  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
001BD9  1  xx xx xx xx  
001BDD  1  xx xx xx xx  
001CD5  1  xx xx xx xx  	player0: .tag PLAYER
001CD9  1  xx xx xx xx  
001CDD  1  xx xx xx xx  
001CD5  1               
