ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 20 1E        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               VERA_L0_vscrolllo	= verareg+$12
000810  2               VERA_L0_vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               ; set the tilebase for the layer
000810  2               .macro VTILEBASE layer,addr
000810  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000810  2               	and #VERA_TILEBASE_CLEAR_ADR
000810  2               	ora #(addr >> 9)
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define size of tiles for layer
000810  2               .macro VTILEMODE layer, mode
000810  2               	lda veral0tilebase + layer * 7
000810  2               	and #VERA_CLEAR_TILE_SIZE
000810  2               	ora #mode
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               
000810  2               ; define number of tiles in the map
000810  2               .macro VCONFIG_TILES layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_TILES
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define number of colors for the map
000810  2               .macro VCONFIG_DEPTH layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_DEPTH
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; set the mapbase for the layer
000810  2               .macro VMAPBASE layer,addr
000810  2                   lda #(addr >> 9)         ; store 2 last bits
000810  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               JOY_A		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               .include "tiles.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Tiles code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .enum TILE_ATTR
000839  2               	SOLID_GROUND = 1
000839  2               	SOLID_WALL = 2
000839  2               	SOLID_CEILING = 4
000839  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000839  2               .endenum
000839  2               
000839  2               
000839  2               .scope Tiles
000839  2               
000839  2               ;animated_tiles_map
000839  2               ;   nb_animated_tiles
000839  2               ;   tile[0]
000839  2               ;        tick,
000839  2               ;        nb_frames
000839  2               ;        current_frame
000839  2               ;        @frame[0][0]
000839  2               ;        nb_tiles
000839  2               ;        @addr_tiles_list[0]
000839  2               ;   tile[1]
000839  2               ;   ....
000839  2               ;   tile[nb_animated_tiles-1]
000839  2               ;   frame[t0][0]: duration, tile_index
000839  2               ;   frame[t0][1]
000839  2               ;   .....
000839  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
000839  2               ;   frame[t1][0]: duration, tile_index
000839  2               ;   frame[t1][1]
000839  2               ;   .....
000839  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][0]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
000839  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
000839  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
000839  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
000839  2               
000839  2               .struct ANIMATED_TILES
000839  2                   nb_animated_tiles   .byte
000839  2               
000839  2                   .struct ANIMATED_TILE
000839  2                       tick            .byte   ; number of 18ms frames until next animation
000839  2                       nb_frames       .byte
000839  2                       current_frame   .byte
000839  2                       addr_frames  .addr   ; offset of the list of animation
000839  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
000839  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
000839  2                   .endstruct
000839  2               .endstruct
000839  2               
000839  2               .struct FRAME
000839  2                   duration    .byte
000839  2                   tile_index  .byte
000839  2               .endstruct
000839  2               
000839  2               animated_tiles_map = HIMEM + $400
000839  2               animated_tiles = HIMEM + $400 + 1
000839  2               
000839  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
00083D  2  73 61 6E 69  
000841  2  2E 62 69 6E  
000845  2               fsanimated_tiles_end:
000845  2               
000845  2               ;-----------------------------------------
000845  2               ; load static tiles
000845  2               ;
000845  2               load_static:
000845  2  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), ::VRAM_tiles
000849  2  A0 00 20 BA  
00084D  2  FF A9 09 A2  
000866  2  AD 2F 9F 29  	VTILEBASE 0, ::VRAM_tiles
00086A  2  03 09 08 8D  
00086E  2  2F 9F        
000870  2  AD 36 9F 29  	VTILEBASE 1, ::VRAM_tiles
000874  2  03 09 08 8D  
000878  2  36 9F        
00087A  2  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
00087E  2  FC 09 03 8D  
000882  2  2F 9F        
000884  2  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000888  2  FC 09 03 8D  
00088C  2  36 9F        
00088E  2  60               rts
00088F  2               
00088F  2               ;-----------------------------------------
00088F  2               ; load and fix the animated tiles data
00088F  2               ;
00088F  2               load_anim:
00088F  2  A9 00        	lda #0
000891  2  85 00        	sta $00
000893  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
000897  2  A0 00 20 BA  
00089B  2  FF A9 0C A2  
0008B4  2               
0008B4  2                   ; convert offsets in the data structure to memory addr
0008B4  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008B7  2  A2 00            ldx #0
0008B9  2               
0008B9  2               @next_tile:
0008B9  2  18               clc
0008BA  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008BD  2  69 00            adc #<animated_tiles_map
0008BF  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008C2  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008C5  2  69 A4            adc #>animated_tiles_map
0008C7  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008CA  2               
0008CA  2  18               clc
0008CB  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008CE  2  69 00            adc #<animated_tiles_map
0008D0  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008D3  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008D6  2  69 A4            adc #>animated_tiles_map
0008D8  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008DB  2               
0008DB  2  88               dey
0008DC  2  F0 07            beq @convert_tileslist_addr
0008DE  2               
0008DE  2  8A               txa
0008DF  2  18               clc
0008E0  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
0008E2  2  AA               tax
0008E3  2  80 D4            bra @next_tile
0008E5  2               
0008E5  2               @convert_tileslist_addr:
0008E5  2                   ; convert tilemap offset into vera offset
0008E5  2                   ; convert offsets in the data structure to memory addr
0008E5  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008E8  2  A2 00            ldx #0
0008EA  2               @next_tile1:
0008EA  2                   ; setup the listf of memory offset in vera memory
0008EA  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008ED  2  85 02            sta r0L
0008EF  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008F2  2  85 03            sta r0H
0008F4  2               
0008F4  2  5A               phy
0008F5  2  DA               phx
0008F6  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
0008F9  2  AA               tax
0008FA  2  A0 00            ldy #00
0008FC  2               
0008FC  2               @loop_tiles:
0008FC  2  18               clc
0008FD  2  B1 02            lda (r0),y
0008FF  2  69 00            adc #<VRAM_layer1_map
000901  2  91 02            sta (r0),y
000903  2  C8               iny
000904  2               
000904  2  B1 02            lda (r0),y
000906  2  69 08            adc #>VRAM_layer1_map
000908  2  91 02            sta (r0),y
00090A  2  C8               iny
00090B  2               
00090B  2  CA               dex
00090C  2  D0 EE            bne @loop_tiles
00090E  2  FA               plx
00090F  2  7A               ply
000910  2               
000910  2  88               dey
000911  2  F0 07            beq @init
000913  2               
000913  2  8A               txa
000914  2  18               clc
000915  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000917  2  AA               tax
000918  2  80 D0            bra @next_tile1
00091A  2               
00091A  2               @init:
00091A  2                   ; init the timers
00091A  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00091D  2  A2 00            ldx #0
00091F  2               
00091F  2               @next_tile2:
00091F  2                   ; setup the list of frames
00091F  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000922  2  85 02            sta r0L
000924  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
000927  2  85 03            sta r0H
000929  2               
000929  2                   ; save new frame duration in the timer
000929  2  B2 02            lda (r0)
00092B  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
00092E  2               
00092E  2  88               dey
00092F  2  F0 07            beq @return
000931  2               
000931  2  8A               txa
000932  2  18               clc
000933  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000935  2  AA               tax
000936  2  80 E7            bra @next_tile2
000938  2               
000938  2               @return:
000938  2  60               rts
000939  2               
000939  2               ;-----------------------------------------
000939  2               ; parse the animated tiles to update
000939  2               ;
000939  2               animate:
000939  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00093C  2  A2 00            ldx #0
00093E  2               
00093E  2               @next_tile:
00093E  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000941  2  D0 03            bne :+
000943  2  20 51 09         jsr next_frame
000946  2               :
000946  2  88               dey
000947  2  F0 07            beq @return
000949  2               
000949  2  8A               txa
00094A  2  18               clc
00094B  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00094D  2  AA               tax
00094E  2  80 EE            bra @next_tile
000950  2               
000950  2               @return:
000950  2  60               rts
000951  2               
000951  2               ;-----------------------------------------
000951  2               ; move to the next frame of an animated tile
000951  2               ; update tiles on the tilemap
000951  2               ; input X : offset of the anim_tile structure
000951  2               ;
000951  2               next_frame:
000951  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
000954  2  1A               inc
000955  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
000958  2  D0 02            bne :+
00095A  2  A9 00            lda #00         ; roll back to 0
00095C  2               :
00095C  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
00095F  2  DA               phx
000960  2  5A               phy
000961  2               
000961  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
000962  2  A8               tay         ; Y = current animation frame
000963  2               
000963  2                   ; setup the list of frames
000963  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000966  2  85 02            sta r0L
000968  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00096B  2  85 03            sta r0H
00096D  2               
00096D  2  B1 02            lda (r0), y         ; save new frame duration in the timer
00096F  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000972  2  C8               iny
000973  2  B1 02            lda (r0), y
000975  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
000977  2               
000977  2                   ; setup the listf of memory offset in vera memory
000977  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00097A  2  85 02            sta r0L
00097C  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
00097F  2  85 03            sta r0H
000981  2               
000981  2                   ; push all tiles in vera memory
000981  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
000984  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
000985  2  3A               dec         ; start at the end
000986  2  A8               tay
000987  2               
000987  2  A6 30            ldx $30
000989  2               
000989  2               @next_tile_index:
000989  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
000989  2               
000989  2  A9 00        	lda #0
00098B  2  8D 25 9F     	sta veractl
00098E  2  A9 02          	lda #(^VRAM_layer1_map + 2)
000990  2  8D 22 9F     	sta verahi
000993  2  B1 02            lda (r0), y
000995  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
000998  2  88               dey
000999  2  B1 02            lda (r0), y
00099B  2  8D 20 9F     	sta veralo
00099E  2  88               dey
00099F  2  8E 23 9F         stx veradat
0009A2  2               
0009A2  2  10 E5            bpl @next_tile_index
0009A4  2               
0009A4  2  7A               ply
0009A5  2  FA               plx
0009A6  2  60               rts
0009A7  2               .endscope
0009A7  2               
0009A7  1               .include "sprites.asm"
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               ;/////////////////////////////////////////////////////////////////////////////
0009A7  2               ; START Sprite code
0009A7  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               
0009A7  2               .struct VSPRITE
0009A7  2               	address125 .byte
0009A7  2               	mode_xxx_address1613 .byte
0009A7  2               	x70 .byte
0009A7  2               	x98 .byte
0009A7  2               	y70 .byte
0009A7  2               	y98 .byte
0009A7  2               	collision_zdepth_vflip_hflip .byte
0009A7  2               	height_width_offset .byte
0009A7  2               .endstruct
0009A7  2               
0009A7  2               .scope Sprite
0009A7  2               
0009A7  2               SPRITES_ZP = $0070	; memory reserved for Sprites
0009A7  2               
0009A7  2               ;-----------------------------------------
0009A7  2               ; sprites components collections
0009A7  2               MAX_SPRITES = 32
0009A7  2               
0009A7  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
0009AB  2  xx xx xx xx  
0009AF  2  xx xx xx xx  
0009C7  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
0009CB  2  xx xx xx xx  
0009CF  2  xx xx xx xx  
0009E7  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
0009EB  2  xx xx xx xx  
0009EF  2  xx xx xx xx  
000A07  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
000A0B  2  xx xx xx xx  
000A0F  2  xx xx xx xx  
000A27  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
000A2B  2  xx xx xx xx  
000A2F  2  xx xx xx xx  
000A47  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
000A4B  2  xx xx xx xx  
000A4F  2  xx xx xx xx  
000A67  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
000A6B  2  xx xx xx xx  
000A6F  2  xx xx xx xx  
000A87  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
000A8B  2  xx xx xx xx  
000A8F  2  xx xx xx xx  
000AA7  2  xx xx xx xx  sprites_aabb_x: .res MAX_SPRITES	; collision box INSIDE the sprite top-left corner
000AAB  2  xx xx xx xx  
000AAF  2  xx xx xx xx  
000AC7  2  xx xx xx xx  sprites_aabb_y: .res MAX_SPRITES
000ACB  2  xx xx xx xx  
000ACF  2  xx xx xx xx  
000AE7  2  xx xx xx xx  sprites_aabb_w: .res MAX_SPRITES	; collision box INSIDE the sprite height/width
000AEB  2  xx xx xx xx  
000AEF  2  xx xx xx xx  
000B07  2  xx xx xx xx  sprites_aabb_h: .res MAX_SPRITES
000B0B  2  xx xx xx xx  
000B0F  2  xx xx xx xx  
000B27  2  xx xx xx xx  sprites_collision_callback: .res (MAX_SPRITES * 2)
000B2B  2  xx xx xx xx  
000B2F  2  xx xx xx xx  
000B67  2               
000B67  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
000B6B  2  xx xx xx xx  
000B6F  2  xx xx xx xx  
000C67  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000C68  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000C6A  2               
000C6A  2               ;************************************************
000C6A  2               ;  init sprites manager
000C6A  2               ; create a table with the VERA @addr for each sprite
000C6A  2               ;
000C6A  2               init_addr_table:
000C6A  2               	; clear the sprites components
000C6A  2  A6 20        	ldx MAX_SPRITES
000C6C  2  CA           	dex
000C6D  2               :
000C6D  2  9E A7 09     	stz sprites_xL,x
000C70  2  9E C7 09     	stz sprites_xH,x
000C73  2  9E E7 09     	stz sprites_yL,x
000C76  2  9E 07 0A     	stz sprites_yH,x
000C79  2  9E E7 0A     	stz sprites_aabb_w,x
000C7C  2  9E 07 0B     	stz sprites_aabb_h,x
000C7F  2  9E A7 0A     	stz sprites_aabb_x,x
000C82  2  9E C7 0A     	stz sprites_aabb_y,x
000C85  2  CA           	dex
000C86  2  10 E5        	bpl :-
000C88  2               
000C88  2               	; activate sprite colisions
000C88  2               	;lda veraien
000C88  2               	;ora #VERA_SPRCOL_BIT
000C88  2               	;sta veraien
000C88  2               
000C88  2               	; all sprites are availble but ZERO (reserved player)
000C88  2  A2 FF        	ldx #$ff
000C8A  2               :
000C8A  2  9E 67 0B     	stz sprites,X
000C8D  2  CA           	dex
000C8E  2  D0 FA        	bne :-
000C90  2  A9 01        	lda #01
000C92  2  8D 67 0B     	sta sprites
000C95  2               
000C95  2               	; start of the sprites in VERA memory
000C95  2  A9 00        	lda #<vram_sprd
000C97  2  85 02        	sta r0L
000C99  2  A9 FC        	lda #>vram_sprd
000C9B  2  85 03        	sta r0H
000C9D  2               
000C9D  2  A2 80        	ldx #128
000C9F  2  A0 00        	ldy #0
000CA1  2                @loop:
000CA1  2  A5 03        	lda r0H
000CA3  2  99 86 1F     	sta sprites_table,y
000CA6  2  C8           	iny
000CA7  2  A5 02        	lda r0L
000CA9  2  99 86 1F     	sta sprites_table,y
000CAC  2  C8           	iny
000CAD  2               
000CAD  2  18           	clc
000CAE  2  A5 02        	lda r0L
000CB0  2  69 08        	adc #8
000CB2  2  85 02        	sta r0L
000CB4  2  A5 03        	lda r0H
000CB6  2  69 00        	adc #0
000CB8  2  85 03        	sta r0H	; move to next sprite
000CBA  2               
000CBA  2  CA           	dex
000CBB  2  D0 E4        	bne @loop
000CBD  2               
000CBD  2  60           	rts
000CBE  2               
000CBE  2               ;************************************************
000CBE  2               ; get a new available vera sprite
000CBE  2               ;	output: X = index of the vera sprite
000CBE  2               ;			0 = no sprite available
000CBE  2               ;
000CBE  2               new:
000CBE  2  A2 01        	ldx #$01
000CC0  2               :
000CC0  2  BD 67 0B     	lda sprites,x
000CC3  2  F0 03        	beq @return
000CC5  2  E8           	inx
000CC6  2  D0 F8        	bne :-
000CC8  2               @return:
000CC8  2  A9 01        	lda #01
000CCA  2  9D 67 0B     	sta sprites,x
000CCD  2               
000CCD  2               	; count activated sprites
000CCD  2  EC 67 0C     	cpx nb_sprites
000CD0  2  90 03        	bcc :+
000CD2  2               
000CD2  2  EE 67 0C     	inc nb_sprites
000CD5  2               :
000CD5  2  60           	rts
000CD6  2               
000CD6  2               ;
000CD6  2               ; the the VERA memory pointer to sprite Y + attribute X
000CD6  2               ;	Y = sprite index
000CD6  2               ;	X = attribute offset
000CD6  2               ;
000CD6  2               vram:
000CD6  2  DA           	phx			; save X on the stack
000CD7  2               
000CD7  2  98           	tya			; index of the sprite
000CD8  2  0A           	asl
000CD9  2  A8           	tay			; index of the address of the sprite (y*2)
000CDA  2               
000CDA  2  A9 00        	lda #0
000CDC  2  8D 25 9F     	sta veractl
000CDF  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000CE1  2  8D 22 9F     	sta verahi
000CE4  2  B9 86 1F     	lda sprites_table, y
000CE7  2  8D 21 9F     	sta veramid
000CEA  2  C8           	iny
000CEB  2  BA           	tsx
000CEC  2  BD 01 01     	lda $0101,x	; reload X from the stack
000CEF  2  79 86 1F     	adc sprites_table, y
000CF2  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000CF5  2  FA           	plx
000CF6  2  60           	rts
000CF7  2               
000CF7  2               ;************************************************
000CF7  2               ; configure the sprite
000CF7  2               ;	input: 	A = sprite collision mask
000CF7  2               ;			Y = sprite index
000CF7  2               ;		   	X = sprite size :
000CF7  2               ;		   	r0 = vram @ of the sprite data
000CF7  2               ;
000CF7  2  07 0F 1F 3F  sprites_size: .byte 7, 15, 31, 63	; count byte 0 as a byte, so width is not "8" pixel nut "0" + "7" pixels
000CFB  2               
000CFB  2               load:
000CFB  2  86 70        	stx SPRITES_ZP
000CFD  2  85 72        	sta SPRITES_ZP + 2
000CFF  2  84 73        	sty SPRITES_ZP + 3
000D01  2  20 74 0D     	jsr set_bitmap
000D04  2               
000D04  2  9C 23 9F     	stz veradat					; x = 0
000D07  2  9C 23 9F     	stz veradat
000D0A  2  9C 23 9F     	stz veradat					; y = 0
000D0D  2  9C 23 9F     	stz veradat
000D10  2  A5 72        	lda SPRITES_ZP + 2			; load collision mask
000D12  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000D14  2  8D 23 9F     	sta veradat
000D17  2  A5 70        	lda SPRITES_ZP				; 32x32 sprite
000D19  2  8D 23 9F     	sta veradat
000D1C  2               
000D1C  2  4A           	lsr
000D1D  2  4A           	lsr
000D1E  2  4A           	lsr
000D1F  2  4A           	lsr
000D20  2  85 70        	sta SPRITES_ZP				; focus on sprite_height, sprite_width
000D22  2               
000D22  2  A4 73        	ldy SPRITES_ZP + 3			; sprite index
000D24  2               
000D24  2  29 03        	and #%00000011				; sprite_width
000D26  2  AA           	tax
000D27  2  BD F7 0C     	lda sprites_size,x
000D2A  2  99 E7 0A     	sta sprites_aabb_w, y		; store width in pixels in the sprite attribute
000D2D  2  A9 00        	lda #00
000D2F  2  99 A7 0A     	sta sprites_aabb_x, y		; default collision box starts (0,0)
000D32  2               
000D32  2  A5 70        	lda SPRITES_ZP
000D34  2  4A           	lsr
000D35  2  4A           	lsr							; sprite_height
000D36  2  AA           	tax
000D37  2  BD F7 0C     	lda sprites_size,x
000D3A  2  99 07 0B     	sta sprites_aabb_h, y		; store height in pixels in the sprite attribute
000D3D  2  A9 00        	lda #00
000D3F  2  99 C7 0A     	sta sprites_aabb_y, y		; default collision box starts (0,0)
000D42  2               
000D42  2  60           	rts
000D43  2               
000D43  2               ;************************************************
000D43  2               ; set the collision box of the sprite
000D43  2               ;	input y = sprite index
000D43  2               ;		r0L = top-left corner X
000D43  2               ;		r0H = top-left corner Y
000D43  2               ;		r1L = width
000D43  2               ;		r1H = height
000D43  2               ;
000D43  2               set_aabb:
000D43  2  A5 02        	lda r0L
000D45  2  99 A7 0A     	sta sprites_aabb_x,y
000D48  2  A5 03        	lda r0H
000D4A  2  99 C7 0A     	sta sprites_aabb_y,y
000D4D  2  A5 04        	lda r1L
000D4F  2  99 E7 0A     	sta sprites_aabb_w,y
000D52  2  A5 05        	lda r1H
000D54  2  99 07 0B     	sta sprites_aabb_h,y
000D57  2  60           	rts
000D58  2               
000D58  2               ;************************************************
000D58  2               ; configure full veram memory (16:0) into optimized one (12:5)
000D58  2               ;	input: r0 = vram @ of the sprite data
000D58  2               ;	output: r1
000D58  2               ;
000D58  2               vram_to_16_5:
000D58  2               	; load full VERA memory (12:0) into R0
000D58  2  A5 02        	lda r0L
000D5A  2  85 04        	sta r1L
000D5C  2  A5 03        	lda r0H
000D5E  2  85 05        	sta r1H
000D60  2               
000D60  2               	; convert full addr to vera mode (bit shiting >> 5)
000D60  2  A5 05        	lda r1H
000D62  2  4A           	lsr
000D63  2  66 04        	ror r1L
000D65  2  4A           	lsr
000D66  2  66 04        	ror r1L
000D68  2  4A           	lsr
000D69  2  66 04        	ror r1L
000D6B  2  4A           	lsr
000D6C  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D6E  2  4A           	lsr
000D6F  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D71  2  85 05        	sta r1H
000D73  2  60           	rts
000D74  2               
000D74  2               ;************************************************
000D74  2               ; change the address of the bitmap for the sprite
000D74  2               ;	Y = sprite index
000D74  2               ;	r0 = vera memory (12:5)
000D74  2               ;
000D74  2               set_bitmap:
000D74  2  A2 00        	ldx #VSPRITE::address125
000D76  2  20 D6 0C     	jsr vram			; set very pointer to the address of the bitmap
000D79  2               
000D79  2  A5 02        	lda r0L
000D7B  2  8D 23 9F     	sta veradat
000D7E  2  A5 03        	lda r0H
000D80  2  09 80        	ora #$80						; M = 8 bits
000D82  2  8D 23 9F     	sta veradat
000D85  2               
000D85  2  60           	rts
000D86  2               
000D86  2               ;************************************************
000D86  2               ; change the display byte for a sprite
000D86  2               ;	Y = sprite index
000D86  2               ;	X = display value to set
000D86  2               ;
000D86  2               display:
000D86  2  86 02        	stx r0L		; save X for later
000D88  2  84 03        	sty r0H
000D8A  2               
000D8A  2               	; set vram memory on the X sprite
000D8A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D8C  2  20 D6 0C     	jsr vram
000D8F  2  AD 23 9F     	lda veradat
000D92  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000D94  2  05 02        	ora r0L
000D96  2  85 02        	sta r0L
000D98  2               
000D98  2  A4 03        	ldy r0H
000D9A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D9C  2  20 D6 0C     	jsr vram
000D9F  2               
000D9F  2  A5 02        	lda r0L
000DA1  2  8D 23 9F     	sta veradat
000DA4  2  60           	rts
000DA5  2               
000DA5  2               ;************************************************
000DA5  2               ; define position of sprite and recompute bounding box
000DA5  2               ;	Y = sprite index
000DA5  2               ;	r0 = addr of word X & word Y
000DA5  2               ;
000DA5  2               position:
000DA5  2               	; set vram memory on the X sprite
000DA5  2  84 70        	sty SPRITES_ZP
000DA7  2  A2 02        	ldx #VSPRITE::x70
000DA9  2  20 D6 0C     	jsr vram
000DAC  2  A6 70        	ldx SPRITES_ZP
000DAE  2               
000DAE  2  A0 00        	ldy #00
000DB0  2  BD A7 0A     	lda sprites_aabb_x, x	; X offset of the collision box
000DB3  2  F0 19        	beq @no_xoffset
000DB5  2               @xoffset:
000DB5  2  38           	sec
000DB6  2  B1 02        	lda (r0L),y
000DB8  2  FD A7 0A     	sbc sprites_aabb_x, x
000DBB  2  9D A7 09     	sta sprites_xL, x
000DBE  2  8D 23 9F     	sta veradat
000DC1  2  C8           	iny
000DC2  2  B1 02        	lda (r0L),y
000DC4  2  9D C7 09     	sta sprites_xH, x
000DC7  2  E9 00        	sbc #00
000DC9  2  8D 23 9F     	sta veradat				; X - xoffset => vera X
000DCC  2  80 11        	bra @after_xoffset
000DCE  2               @no_xoffset:
000DCE  2  B1 02        	lda (r0L),y
000DD0  2  8D 23 9F     	sta veradat
000DD3  2  9D A7 09     	sta sprites_xL, x
000DD6  2  C8           	iny
000DD7  2  B1 02        	lda (r0L),y
000DD9  2  8D 23 9F     	sta veradat
000DDC  2  9D C7 09     	sta sprites_xH, x		; X => vera X
000DDF  2               @after_xoffset:
000DDF  2               
000DDF  2  18           	clc
000DE0  2  BD A7 09     	lda sprites_xL, x
000DE3  2  7D E7 0A     	adc sprites_aabb_w, x
000DE6  2  9D 27 0A     	sta sprites_x1L, x
000DE9  2  BD C7 09     	lda sprites_xH, x
000DEC  2  69 00        	adc #0
000DEE  2  9D 47 0A     	sta sprites_x1H, x		;X1 = x + aabb.w
000DF1  2               
000DF1  2  BD C7 0A     	lda sprites_aabb_y, x	; Y offset of the collision box
000DF4  2  F0 19        	beq @no_yoffset
000DF6  2               @yoffset:
000DF6  2  38           	sec
000DF7  2  B1 02        	lda (r0L),y
000DF9  2  9D E7 09     	sta sprites_yL, x
000DFC  2  FD C7 0A     	sbc sprites_aabb_y, x
000DFF  2  8D 23 9F     	sta veradat
000E02  2  C8           	iny
000E03  2  B1 02        	lda (r0L),y
000E05  2  9D 07 0A     	sta sprites_yH, x
000E08  2  E9 00        	sbc #0
000E0A  2  8D 23 9F     	sta veradat				; Y - yoffset  => vera Y high
000E0D  2  80 12        	bra @after_yoffset
000E0F  2               @no_yoffset:
000E0F  2  C8           	iny
000E10  2  B1 02        	lda (r0L),y
000E12  2  8D 23 9F     	sta veradat
000E15  2  9D E7 09     	sta sprites_yL, x
000E18  2  C8           	iny
000E19  2  B1 02        	lda (r0L),y
000E1B  2  8D 23 9F     	sta veradat
000E1E  2  9D 07 0A     	sta sprites_yH, x		; y => vera Y
000E21  2               @after_yoffset:
000E21  2  18           	clc
000E22  2  BD E7 09     	lda sprites_yL, x
000E25  2  7D 07 0B     	adc sprites_aabb_h, x
000E28  2  9D 67 0A     	sta sprites_y1L, x
000E2B  2  BD 07 0A     	lda sprites_yH, x
000E2E  2  69 00        	adc #00
000E30  2  9D 87 0A     	sta sprites_y1H, x		; Y1 = y + aabb.y + aabb.h
000E33  2               
000E33  2  60           	rts
000E34  2               
000E34  2               ;************************************************
000E34  2               ; Change the flipping of a sprite
000E34  2               ;	Y = sprite index
000E34  2               ;	A = value to set
000E34  2               ;
000E34  2               set_flip:
000E34  2  85 70        	sta SPRITES_ZP
000E36  2  84 71        	sty SPRITES_ZP + 1
000E38  2               
000E38  2               	; set vram memory on the X sprite
000E38  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E3A  2  20 D6 0C     	jsr vram
000E3D  2               
000E3D  2  AD 23 9F     	lda veradat				;get current value
000E40  2  29 FC        	and #SPRITE_FLIP_CLEAR
000E42  2  05 70        	ora SPRITES_ZP			; change only the flip value
000E44  2  85 70        	sta SPRITES_ZP
000E46  2               
000E46  2  A4 71        	ldy SPRITES_ZP + 1
000E48  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E4A  2  20 D6 0C     	jsr vram
000E4D  2  A5 70        	lda SPRITES_ZP
000E4F  2  8D 23 9F     	sta veradat
000E52  2  60           	rts
000E53  2               
000E53  2               ;************************************************
000E53  2               ; register sprites collision
000E53  2               ; input: A = collision mask
000E53  2               ;
000E53  2               register_collision:
000E53  2  EE 68 0C     	inc collisions
000E56  2  8D 69 0C     	sta collisions + 1
000E59  2  60           	rts
000E5A  2               
000E5A  2               ;************************************************
000E5A  2               ; Axis Aligned Bounding Box collision between 2 sprites
000E5A  2               ; input: X = index of sprite 1
000E5A  2               ;		 Y = index of sprite 2
000E5A  2               ; return: Z = no collision
000E5A  2               ;
000E5A  2               aabb_collision:
000E5A  2  BD C7 09     	lda sprites_xH, x
000E5D  2  D9 47 0A     	cmp sprites_x1H, y
000E60  2  90 02        	bcc :+
000E62  2  D0 49        	bne @false
000E64  2               :
000E64  2  BD A7 09     	lda sprites_xL, x
000E67  2  D9 27 0A     	cmp sprites_x1L, y
000E6A  2  90 02        	bcc :+
000E6C  2  D0 3F        	bne @false
000E6E  2               :						; s(x).left_x <= s(y).right_x
000E6E  2               
000E6E  2  B9 C7 09     	lda sprites_xH, y
000E71  2  DD 47 0A     	cmp sprites_x1H, x
000E74  2  90 02        	bcc :+
000E76  2  D0 35        	bne @false
000E78  2               :
000E78  2  B9 A7 09     	lda sprites_xL, y
000E7B  2  DD 27 0A     	cmp sprites_x1L, x
000E7E  2  90 02        	bcc :+
000E80  2  D0 2B        	bne @false
000E82  2               :						; AND s(y).left_x <= s(x).right_x
000E82  2               
000E82  2  BD 07 0A     	lda sprites_yH, x
000E85  2  D9 87 0A     	cmp sprites_y1H, y
000E88  2  90 02        	bcc :+
000E8A  2  D0 21        	bne @false
000E8C  2               :
000E8C  2  BD E7 09     	lda sprites_yL, x
000E8F  2  D9 67 0A     	cmp sprites_y1L, y
000E92  2  90 02        	bcc :+
000E94  2  D0 17        	bne @false
000E96  2               :						; AND s(x).bottom_y <= s(y).top_y
000E96  2               
000E96  2  B9 07 0A     	lda sprites_yH, y
000E99  2  DD 87 0A     	cmp sprites_y1H, x
000E9C  2  90 02        	bcc :+
000E9E  2  D0 0D        	bne @false
000EA0  2               :
000EA0  2  B9 E7 09     	lda sprites_yL, y
000EA3  2  DD 67 0A     	cmp sprites_y1L, x
000EA6  2  90 02        	bcc :+
000EA8  2  D0 03        	bne @false
000EAA  2               :						; AND s(y).bottom_y <= s(x).top_y
000EAA  2               
000EAA  2               @true:
000EAA  2  A9 01        	lda #01
000EAC  2  60           	rts
000EAD  2               @false:
000EAD  2  A9 00        	lda #00
000EAF  2  60           	rts
000EB0  2               
000EB0  2               ;************************************************
000EB0  2               ; after a collision IRQ, test all sprites to find colliding ones
000EB0  2               ; return: a = no collision
000EB0  2               ;
000EB0  2               find_colliding:
000EB0  2  AD 67 0C     	lda nb_sprites
000EB3  2  3A           	dec
000EB4  2  85 70        	sta SPRITES_ZP
000EB6  2  3A           	dec
000EB7  2  85 71        	sta SPRITES_ZP + 1
000EB9  2               
000EB9  2               @inner_loop:
000EB9  2  A6 70        	ldx SPRITES_ZP
000EBB  2  A4 71        	ldy SPRITES_ZP + 1
000EBD  2  20 5A 0E     	jsr aabb_collision
000EC0  2  D0 15        	bne @found
000EC2  2               
000EC2  2  C6 71        	dec SPRITES_ZP + 1
000EC4  2  30 02        	bmi @try_next
000EC6  2  80 F1        	bra @inner_loop
000EC8  2               
000EC8  2               @try_next:
000EC8  2  A5 70        	lda SPRITES_ZP
000ECA  2  3A           	dec
000ECB  2  F0 07        	beq @not_found
000ECD  2  85 70        	sta SPRITES_ZP			; start comparison end - 1
000ECF  2  3A           	dec						; compare with start - 1 unless < 0
000ED0  2  85 71        	sta SPRITES_ZP + 1
000ED2  2  80 E5        	bra @inner_loop
000ED4  2               
000ED4  2               @not_found:
000ED4  2  A9 00        	lda #00
000ED6  2  60           	rts
000ED7  2               @found:
000ED7  2  A9 01        	lda #01
000ED9  2  60           	rts
000EDA  2               
000EDA  2               ;************************************************
000EDA  2               ; manage collisions after a collision IRQ
000EDA  2               ;
000EDA  2               check_irq_collision:
000EDA  2  AD 68 0C     	lda collisions
000EDD  2  F0 06        	beq @return
000EDF  2               
000EDF  2  9C 68 0C     	stz collisions		; clear the collision flag
000EE2  2               
000EE2  2  20 B0 0E     	jsr find_colliding
000EE5  2               
000EE5  2               @return:
000EE5  2  60           	rts
000EE6  2               
000EE6  2               ;************************************************
000EE6  2               ; check if sprite X collides with any of the others
000EE6  2               ; input : X = sprite index to test
000EE6  2               ; return: a = index of sprite in collision or $FF if no collision
000EE6  2               ;
000EE6  2               check_collision:
000EE6  2  86 70        	stx SPRITES_ZP
000EE8  2  AD 67 0C     	lda nb_sprites
000EEB  2  3A           	dec
000EEC  2  F0 11        	beq @no_collision		; if there is only 1 sprite, no_collision
000EEE  2  A8           	tay						; start with the last sprite
000EEF  2               @loop:
000EEF  2  C4 70        	cpy SPRITES_ZP
000EF1  2  F0 05        	beq @next				; ignore the input sprite
000EF3  2  20 5A 0E     	jsr aabb_collision
000EF6  2  D0 05        	bne @collision
000EF8  2               @next:
000EF8  2  88           	dey
000EF9  2  30 04        	bmi @no_collision		; 0 has to be taked care off
000EFB  2  80 F2        	bra @loop
000EFD  2               
000EFD  2               @collision:
000EFD  2  98           	tya						; store index of the colliding sprite
000EFE  2  60           	rts
000EFF  2               
000EFF  2               @no_collision:
000EFF  2  A9 FF        	lda #$ff
000F01  2  60           	rts
000F02  2               
000F02  2               ;************************************************
000F02  2               ; simulate a sprite movement and check collision
000F02  2               ;	input A = vertical (1) / horizontal (2)
000F02  2               ;			  plus (4) / minus (8)
000F02  2               ;		  X = sprite index
000F02  2               ; 	return: a = index of colliding sprite, $ff if no collision
000F02  2               ;
000F02  2               precheck_collision:
000F02  2  85 72        	sta SPRITES_ZP + 2
000F04  2  86 73        	stx SPRITES_ZP + 3
000F06  2               
000F06  2  89 01        	bit #01
000F08  2  D0 5D        	bne @vertical
000F0A  2  89 08        	bit #08
000F0C  2  D0 2D        	bne @horizontal_minus
000F0E  2               
000F0E  2               @horizontal_plus:
000F0E  2               	; save current X, X1 and add the delta
000F0E  2  18           	clc
000F0F  2  BD A7 09     	lda sprites_xL, x
000F12  2  85 75        	sta SPRITES_ZP + 5
000F14  2  69 01        	adc #01
000F16  2  9D A7 09     	sta sprites_xL, x
000F19  2               
000F19  2  BD C7 09     	lda sprites_xH, x
000F1C  2  85 76        	sta SPRITES_ZP + 6
000F1E  2  69 00        	adc #00
000F20  2  9D C7 09     	sta sprites_xH, x
000F23  2               @horizontal_plus_width:
000F23  2  18           	clc
000F24  2  BD 27 0A     	lda sprites_x1L, x
000F27  2  85 77        	sta SPRITES_ZP + 7
000F29  2  69 01        	adc #01
000F2B  2  9D 27 0A     	sta sprites_x1L, x
000F2E  2               
000F2E  2  BD 47 0A     	lda sprites_x1H, x
000F31  2  85 78        	sta SPRITES_ZP + 8
000F33  2  69 00        	adc #00
000F35  2  9D 47 0A     	sta sprites_x1H, x
000F38  2  4C C1 0F     	jmp @test
000F3B  2               
000F3B  2               @horizontal_minus:
000F3B  2  38           	sec
000F3C  2  BD A7 09     	lda sprites_xL, x
000F3F  2  85 75        	sta SPRITES_ZP + 5
000F41  2  E9 01        	sbc #01
000F43  2  9D A7 09     	sta sprites_xL, x
000F46  2               
000F46  2  BD C7 09     	lda sprites_xH, x
000F49  2  85 76        	sta SPRITES_ZP + 6
000F4B  2  E9 00        	sbc #00
000F4D  2  9D C7 09     	sta sprites_xH, x
000F50  2               @horizontal_minus_width:
000F50  2  38           	sec
000F51  2  BD 27 0A     	lda sprites_x1L, x
000F54  2  85 77        	sta SPRITES_ZP + 7
000F56  2  E9 01        	sbc #01
000F58  2  9D 27 0A     	sta sprites_x1L, x
000F5B  2               
000F5B  2  BD 47 0A     	lda sprites_x1H, x
000F5E  2  85 78        	sta SPRITES_ZP + 8
000F60  2  E9 00        	sbc #00
000F62  2  9D 47 0A     	sta sprites_x1H, x
000F65  2  80 5A        	bra @test
000F67  2               
000F67  2               @vertical:
000F67  2  89 08        	bit #08
000F69  2  D0 2C        	bne @vertical_minus
000F6B  2               @vertical_plus:
000F6B  2               	; save current Y, Y1 and add delta
000F6B  2  18           	clc
000F6C  2  BD E7 09     	lda sprites_yL, x
000F6F  2  85 75        	sta SPRITES_ZP + 5
000F71  2  69 01        	adc #01
000F73  2  9D E7 09     	sta sprites_yL, x
000F76  2               
000F76  2  BD 07 0A     	lda sprites_yH, x
000F79  2  85 76        	sta SPRITES_ZP + 6
000F7B  2  69 00        	adc #00
000F7D  2  9D 07 0A     	sta sprites_yH, x
000F80  2               
000F80  2  18           	clc
000F81  2  BD 67 0A     	lda sprites_y1L, x
000F84  2  85 77        	sta SPRITES_ZP + 7
000F86  2  69 01        	adc #01
000F88  2  9D 67 0A     	sta sprites_y1L, x
000F8B  2               
000F8B  2  BD 87 0A     	lda sprites_y1H, x
000F8E  2  85 78        	sta SPRITES_ZP + 8
000F90  2  69 00        	adc #00
000F92  2  9D 87 0A     	sta sprites_y1H, x
000F95  2  80 2A        	bra @test
000F97  2               @vertical_minus:
000F97  2               	; save current Y, Y1 and add delta
000F97  2  38           	sec
000F98  2  BD E7 09     	lda sprites_yL, x
000F9B  2  85 75        	sta SPRITES_ZP + 5
000F9D  2  E9 01        	sbc #01
000F9F  2  9D E7 09     	sta sprites_yL, x
000FA2  2               
000FA2  2  BD 07 0A     	lda sprites_yH, x
000FA5  2  85 76        	sta SPRITES_ZP + 6
000FA7  2  E9 00        	sbc #00
000FA9  2  9D 07 0A     	sta sprites_yH, x
000FAC  2               
000FAC  2  38           	sec
000FAD  2  BD 67 0A     	lda sprites_y1L, x
000FB0  2  85 77        	sta SPRITES_ZP + 7
000FB2  2  69 01        	adc #01
000FB4  2  9D 67 0A     	sta sprites_y1L, x
000FB7  2               
000FB7  2  BD 87 0A     	lda sprites_y1H, x
000FBA  2  85 78        	sta SPRITES_ZP + 8
000FBC  2  E9 00        	sbc #00
000FBE  2  9D 87 0A     	sta sprites_y1H, x
000FC1  2               
000FC1  2               @test:
000FC1  2  20 E6 0E     	jsr check_collision
000FC4  2  85 74        	sta SPRITES_ZP + 4		; save the result
000FC6  2               
000FC6  2               @restore:
000FC6  2               	; and restore the data
000FC6  2  A6 73        	ldx SPRITES_ZP + 3
000FC8  2  A5 72        	lda SPRITES_ZP + 2
000FCA  2  89 02        	bit #02
000FCC  2  F0 16        	beq @vertical_restore
000FCE  2               @horizontal_restore:
000FCE  2  A5 75        	lda SPRITES_ZP + 5
000FD0  2  9D A7 09     	sta sprites_xL, x
000FD3  2  A5 76        	lda SPRITES_ZP + 6
000FD5  2  9D C7 09     	sta sprites_xH, x
000FD8  2  A5 77        	lda SPRITES_ZP + 7
000FDA  2  9D 27 0A     	sta sprites_x1L, x
000FDD  2  A5 78        	lda SPRITES_ZP + 8
000FDF  2  9D C7 09     	sta sprites_xH, x
000FE2  2  80 14        	bra @return
000FE4  2               
000FE4  2               @vertical_restore:
000FE4  2  A5 75        	lda SPRITES_ZP + 5
000FE6  2  9D E7 09     	sta sprites_yL, x
000FE9  2  A5 76        	lda SPRITES_ZP + 6
000FEB  2  9D 07 0A     	sta sprites_yH, x
000FEE  2  A5 77        	lda SPRITES_ZP + 7
000FF0  2  9D 67 0A     	sta sprites_y1L, x
000FF3  2  A5 78        	lda SPRITES_ZP + 8
000FF5  2  9D 07 0A     	sta sprites_yH, x
000FF8  2               
000FF8  2               @return:
000FF8  2  A5 74        	lda SPRITES_ZP + 4	; result of the collision
000FFA  2  60           	rts
000FFB  2               
000FFB  2               .endscope
000FFB  2               
000FFB  1               .include "tilemap.asm"
000FFB  2               ;-----------------------------------------------------------------------------
000FFB  2               ;/////////////////////////////////////////////////////////////////////////////
000FFB  2               ; START Tilemap code
000FFB  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000FFB  2               ;-----------------------------------------------------------------------------
000FFB  2               
000FFB  2               .scope Tilemap
000FFB  2               
000FFB  2               COLLISION_MAP = HIMEM
000FFB  2               
000FFB  2               ;************************************************
000FFB  2               ; load the layers and the collision map
000FFB  2               ;
000FFB  2               load:
000FFB  2               	; load tilemap into layer 0
000FFB  2  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
000FFF  2  0F 09 00 8D  
001003  2  2D 9F        
001005  2  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
001009  2  0F 09 03 8D  
00100D  2  2D 9F        
00100F  2  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
001013  2  9F           
001014  2  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
001018  2  A0 00 20 BA  
00101C  2  FF A9 0B A2  
001035  2               
001035  2               	; load tilemap into layer 1
001035  2  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
001039  2  0F 09 00 8D  
00103D  2  34 9F        
00103F  2  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
001043  2  0F 09 03 8D  
001047  2  34 9F        
001049  2  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
00104D  2  9F           
00104E  2  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
001052  2  A0 00 20 BA  
001056  2  FF A9 09 A2  
00106F  2               
00106F  2               	; load collisionmap into ram
00106F  2  A9 00        	lda #0
001071  2  85 00        	sta $00
001073  2  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), COLLISION_MAP
001077  2  A0 00 20 BA  
00107B  2  FF A9 0D A2  
001094  2               
001094  2               
001094  2  60               rts
001095  2               
001095  2               ;************************************************
001095  2               ; convert (x,y) position into a collision memory address
001095  2               ;	input: r0  = X
001095  2               ;            r1 = Y
001095  2               ;	output : r0
001095  2               ;
001095  2               get_collision_addr:
001095  2  A5 02        	lda r0L
001097  2  29 F0        	and #%11110000
001099  2  0A           	asl
00109A  2  26 03        	rol r0H
00109C  2  85 02        	sta r0L 					; r0 = first tile of the tilemap in the row
00109E  2               								; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
00109E  2               
00109E  2  A5 05            lda r1H
0010A0  2  4A           	lsr
0010A1  2  66 04        	ror r1L
0010A3  2  4A           	lsr
0010A4  2  66 04        	ror r1L
0010A6  2  4A           	lsr
0010A7  2  66 04        	ror r1L
0010A9  2  4A           	lsr
0010AA  2  66 04        	ror r1L
0010AC  2  85 05        	sta r1H 					; r1 = tile X in the row
0010AE  2               								; sprite X /16 (convert to tile X)
0010AE  2               
0010AE  2  18           	clc
0010AF  2  A5 02        	lda r0L
0010B1  2  65 04        	adc r1L
0010B3  2  85 02        	sta r0L
0010B5  2  A5 03        	lda r0H
0010B7  2  65 05        	adc r1H
0010B9  2  85 03        	sta r0H						; r0 = tile position in the tilemap
0010BB  2               
0010BB  2  18           	clc
0010BC  2  A5 02        	lda r0L
0010BE  2  69 00        	adc #<COLLISION_MAP
0010C0  2  85 02        	sta r0L						; r0 = tile position in the memory tilemap
0010C2  2  A5 03        	lda r0H
0010C4  2  69 A0        	adc #>COLLISION_MAP
0010C6  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
0010C8  2  60           	rts
0010C9  2               
0010C9  2               .endscope
0010C9  2               
0010C9  1               .include "entities.asm"
0010C9  2               ;-----------------------------------------------------------------------------
0010C9  2               ;/////////////////////////////////////////////////////////////////////////////
0010C9  2               ;           start ENTITY code
0010C9  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0010C9  2               ;-----------------------------------------------------------------------------
0010C9  2               
0010C9  2               .struct Entity
0010C9  2                   spriteID    .byte   ; ID of the vera sprite
0010C9  2               	status		.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
0010C9  2                   levelx      .word   ; level position
0010C9  2                   levely      .word
0010C9  2               	falling_ticks .word	; ticks since the player is falling (thing t in gravity)
0010C9  2               	delta_x		.byte	; when driving by phisics, original delta_x value
0010C9  2               
0010C9  2               	bWidth		.byte	; widht in pixel of the entity
0010C9  2               	bHeight		.byte	; Height in pixel of the entity
0010C9  2               	bFlags		.byte	; position of the entity was changed
0010C9  2               	bXOffset	.byte	; signed offset of the top-left corder of the sprite vs the collision box
0010C9  2               	bYOffset	.byte	;
0010C9  2               	collision_addr	.word	; cached @ of the collision equivalent of the center of the player
0010C9  2               .endstruct
0010C9  2               
0010C9  2               .enum EntityFlags
0010C9  2               	physics = 1
0010C9  2               	moved = 2
0010C9  2               	colission_map_changed = 4
0010C9  2               .endenum
0010C9  2               
0010C9  2               
0010C9  2               ENTITY_ZP = $0065
0010C9  2               
0010C9  2               bSide2test = ENTITY_ZP + 4
0010C9  2               ; pixel size converted to tiles size
0010C9  2               bTilesWidth = ENTITY_ZP + 5
0010C9  2               bTilesHeight = ENTITY_ZP + 6
0010C9  2               bPlayerOnSlop = ENTITY_ZP + 7
0010C9  2               bInLoop = ENTITY_ZP + 8
0010C9  2               
0010C9  2               ; number of tiles an entity covers (based on the collision box height and width)
0010C9  2               bTilesCoveredX = r1L
0010C9  2               bTilesCoveredY = r1H
0010C9  2               
0010C9  2               .scope Entities
0010C9  2               
0010C9  2               ; pointers to entites
0010C9  2  00 00 00 00  indexLO:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0010CD  2  00 00 00 00  
0010D1  2  00 00 00 00  
0010E9  2  00 00 00 00  indexHI:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0010ED  2  00 00 00 00  
0010F1  2  00 00 00 00  
001109  2  00 00 00 00  indexUse:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00110D  2  00 00 00 00  
001111  2  00 00 00 00  
001129  2               
001129  2               ;************************************************
001129  2               ; add an entity
001129  2               ;   input: a = lo-byte of entity address
001129  2               ;		   y = hi-byte
001129  2               ;			x = entityID
001129  2               register:
001129  2               	.ifdef DEBUG
001129  2               	cpx .sizeof(indexLO)
001129  2               	bcs :+
001129  2               	stp				; detect out of bound
001129  2               :
001129  2               	.endif
001129  2  9D C9 10     	sta indexLO,x
00112C  2  98           	tya
00112D  2  9D E9 10     	sta indexHI,x
001130  2               
001130  2  A9 01        	lda #01
001132  2  9D 09 11     	sta indexUse,x	; entitie is activate
001135  2  60           	rts
001136  2               
001136  2               ;************************************************
001136  2               ; init all attributes of an entity
001136  2               ;   input: X = entityID
001136  2               ;	output: r3 = entity address
001136  2               ;
001136  2               get_pointer:
001136  2               	.ifdef DEBUG
001136  2               	cpx .sizeof(indexLO)
001136  2               	bcs :+
001136  2               	stp				; detect out of bound
001136  2               :
001136  2               	lda indexUse, x
001136  2               	bne :+
001136  2               	stp				; detect inactive entities
001136  2               :
001136  2               	.endif
001136  2  BD C9 10     	lda indexLO, x
001139  2  85 08        	sta r3
00113B  2  BD E9 10     	lda indexHI, x
00113E  2  85 08        	sta r3
001140  2  60           	rts
001141  2               
001141  2               ;************************************************
001141  2               ; init all attributes of an entity
001141  2               ;   input: X = entityID
001141  2               ;
001141  2               initIndex:
001141  2               	.ifdef DEBUG
001141  2               	cpx .sizeof(indexLO)
001141  2               	bcs :+
001141  2               	stp				; detect out of bound
001141  2               :
001141  2               	lda indexUse, x
001141  2               	bne :+
001141  2               	stp				; detect inactive entities
001141  2               :
001141  2               	.endif
001141  2  BD C9 10     	lda indexLO, x
001144  2  85 08        	sta r3
001146  2  BD E9 10     	lda indexHI, x
001149  2  85 08        	sta r3
00114B  2               
00114B  2               	; pass through
00114B  2               
00114B  2               ;************************************************
00114B  2               ; init all attributes of an entity
00114B  2               ;   input: R3 = start of the object
00114B  2               ;
00114B  2               init:
00114B  2               	.ifdef DEBUG
00114B  2               	cmp r3H
00114B  2               	bne :+
00114B  2               	cmp r3L
00114B  2               	bne :+
00114B  2               
00114B  2               	stp				; detect NULL pointer
00114B  2               :
00114B  2               	.endif
00114B  2               
00114B  2  A9 00            lda #00
00114D  2  A0 00            ldy #Entity::spriteID
00114F  2  91 08        	sta (r3), y
001151  2  A0 01            ldy #Entity::status
001153  2  A9 00        	lda #STATUS_WALKING_IDLE
001155  2  91 08        	sta (r3), y
001157  2  A9 00            lda #00
001159  2  A0 06            ldy #Entity::falling_ticks
00115B  2  91 08        	sta (r3),y
00115D  2  C8               iny
00115E  2  91 08        	sta (r3),y
001160  2  C8               iny
001161  2  91 08        	sta (r3),y 	; delta_x
001163  2  A0 02            ldy #Entity::levelx
001165  2  91 08        	sta (r3),y
001167  2  C8               iny
001168  2  91 08        	sta (r3),y
00116A  2  A0 04            ldy #Entity::levely
00116C  2  91 08        	sta (r3),y
00116E  2  C8               iny
00116F  2  91 08        	sta (r3),y
001171  2  A9 01        	lda #01
001173  2  A0 0B        	ldy #Entity::bFlags
001175  2  A9 07        	lda #(EntityFlags::physics | EntityFlags::moved | EntityFlags::colission_map_changed)
001177  2  91 08        	sta (r3),y	; force screen position and size to be recomputed
001179  2  60               rts
00117A  2               
00117A  2               ;************************************************
00117A  2               ; change  position of the sprite (level view) => (screen view)
00117A  2               ;   input: R3 = start of the object
00117A  2               ;
00117A  2               set_position:
00117A  2  84 65        	sty ENTITY_ZP			; save Y
00117C  2               
00117C  2                   ; screenX = levelX - layer1_scroll_x
00117C  2  A0 02            ldy #(Entity::levelx)
00117E  2  38               sec
00117F  2  B1 08            lda (r3), y
001181  2  ED 37 9F         sbc VERA_L1_hscrolllo
001184  2  85 04            sta r1L
001186  2  C8               iny
001187  2  B1 08            lda (r3), y
001189  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
00118C  2  85 05            sta r1H
00118E  2               
00118E  2                   ; screenY = levelY - layer1_scroll_y
00118E  2  A0 04            ldy #(Entity::levely)
001190  2  38               sec
001191  2  B1 08            lda (r3), y
001193  2  ED 39 9F         sbc VERA_L1_vscrolllo
001196  2  85 06            sta r2L
001198  2  C8               iny
001199  2  B1 08            lda (r3), y
00119B  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
00119E  2  85 07            sta r2H
0011A0  2               
0011A0  2                   ; get the sprite ID
0011A0  2  B2 08        	lda (r3)                        ; sprite id
0011A2  2  A8               tay
0011A3  2               
0011A3  2                   ; adresse of the and px, py attributes
0011A3  2  A9 04        	lda #<r1L
0011A5  2  85 02            sta r0L
0011A7  2  A9 00        	lda #>r1L
0011A9  2  85 03            sta r0H
0011AB  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
0011AE  2               
0011AE  2  A0 0B        	ldy #Entity::bFlags
0011B0  2  B1 08        	lda (r3), y
0011B2  2  29 FD        	and #(255 - EntityFlags::moved)
0011B4  2  91 08        	sta (r3), y  		; clear the refresh flag
0011B6  2               
0011B6  2               @return:
0011B6  2  A4 65        	ldy ENTITY_ZP		; restore Y
0011B8  2  60               rts
0011B9  2               
0011B9  2               ;************************************************
0011B9  2               ; recompute the collision map address of the entity
0011B9  2               ;   input: R3 = start of the object
0011B9  2               ;   output: r0 = address on the collision map
0011B9  2               ;
0011B9  2               get_collision_map:
0011B9  2  A0 0B        	ldy #Entity::bFlags
0011BB  2  B1 08        	lda (r3),y
0011BD  2  89 04        	bit #EntityFlags::colission_map_changed
0011BF  2  D0 0C        	bne @update_addr
0011C1  2               
0011C1  2               	; cache the collision @
0011C1  2  A0 0E        	ldy #Entity::collision_addr
0011C3  2  B1 08        	lda (r3),y
0011C5  2  85 02        	sta r0L
0011C7  2  C8           	iny
0011C8  2  B1 08        	lda (r3),y
0011CA  2  85 03        	sta r0H
0011CC  2               
0011CC  2  60           	rts
0011CD  2               
0011CD  2               @update_addr:
0011CD  2  A0 04        	ldy #Entity::levely
0011CF  2  B1 08        	lda (r3),y
0011D1  2  85 02        	sta r0L
0011D3  2  C8           	iny
0011D4  2  B1 08        	lda (r3),y
0011D6  2  85 03        	sta r0H								; r0 = sprite absolute position Y in the level
0011D8  2               
0011D8  2  A0 02        	ldy #Entity::levelx
0011DA  2  B1 08        	lda (r3),y
0011DC  2  85 04        	sta r1L
0011DE  2  C8           	iny
0011DF  2  B1 08        	lda (r3),y
0011E1  2  85 05        	sta r1H								; r1 = sprite absolute position X in the level
0011E3  2               
0011E3  2  20 95 10     	jsr Tilemap::get_collision_addr		; update the collision address
0011E6  2               
0011E6  2               	; cache the collision @
0011E6  2  A0 0E        	ldy #Entity::collision_addr
0011E8  2  A5 02        	lda r0L
0011EA  2  91 08        	sta (r3),y
0011EC  2  C8           	iny
0011ED  2  A5 03        	lda r0H
0011EF  2  91 08        	sta (r3),y
0011F1  2               
0011F1  2  A0 0B        	ldy #Entity::bFlags
0011F3  2  B1 08        	lda (r3), y
0011F5  2  29 FB        	and #(255 - EntityFlags::colission_map_changed)
0011F7  2  91 08        	sta (r3), y  						; clear the refresh flag
0011F9  2  60           	rts
0011FA  2               
0011FA  2               ;************************************************
0011FA  2               ; update all entities screen position (when the object was moved, when the layer was moved)
0011FA  2               ;
0011FA  2               update:
0011FA  2  A2 00        	ldx #00
0011FC  2               
0011FC  2               @loop:
0011FC  2  BD 09 11     	lda indexUse,x
0011FF  2  F0 23        	beq @next
001201  2               
001201  2  BD E9 10     	lda indexHI,x
001204  2  85 09        	sta r3H
001206  2  BD C9 10     	lda indexLO,x
001209  2  85 08        	sta r3L
00120B  2               
00120B  2  A0 0B        	ldy #Entity::bFlags
00120D  2  B1 08        	lda (r3),y
00120F  2  89 01        	bit #EntityFlags::physics
001211  2  F0 03        	beq :+			; nothing to do
001213  2  20 DA 14     	jsr physics
001216  2               
001216  2               :
001216  2  A0 0B        	ldy #Entity::bFlags
001218  2  B1 08        	lda (r3),y
00121A  2  89 02        	bit #EntityFlags::moved
00121C  2  F0 06        	beq @next			; nothing to do
00121E  2  20 7A 11     	jsr Entities::set_position
001221  2  20 B9 11     	jsr Entities::get_collision_map
001224  2               @next:
001224  2  E8           	inx
001225  2  E0 20        	cpx #(.sizeof(indexLO))
001227  2  D0 D3            bne @loop
001229  2               
001229  2               @return:
001229  2  60               rts
00122A  2               
00122A  2               ;************************************************
00122A  2               ; change screen position of all entities when the layer moves (level view) => (screen view)
00122A  2               ;
00122A  2               fix_positions:
00122A  2  A2 00        	ldx #00
00122C  2               
00122C  2               @loop:
00122C  2  BD 09 11     	lda indexUse,x
00122F  2  F0 10        	beq @next
001231  2               
001231  2  BD E9 10     	lda indexHI,x
001234  2  85 09        	sta r3H
001236  2  BD C9 10     	lda indexLO,x
001239  2  85 08        	sta r3L
00123B  2               
00123B  2  20 7A 11         jsr Entities::set_position
00123E  2  20 B9 11     	jsr Entities::get_collision_map
001241  2               
001241  2               @next:
001241  2  E8           	inx
001242  2  E0 20        	cpx #(.sizeof(indexLO))
001244  2  D0 E6            bne @loop
001246  2               
001246  2               @return:
001246  2  60               rts
001247  2               
001247  2               ;************************************************
001247  2               ; increase entity X position
001247  2               ;   input: R3 = start of the object
001247  2               ;
001247  2               position_x_inc:
001247  2               	; move the absolute position levelx + 1
001247  2  A0 02        	ldy #Entity::levelx
001249  2  B1 08            lda (r3),y
00124B  2  1A               inc
00124C  2  91 08            sta (r3),y
00124E  2  D0 06            bne :+
001250  2  C8               iny
001251  2  B1 08            lda (r3),y
001253  2  1A               inc
001254  2  91 08            sta (r3),y
001256  2               :
001256  2  A0 0B        	ldy #Entity::bFlags
001258  2  B1 08        	lda (r3), y  						; set the refresh bits
00125A  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
00125C  2  91 08        	sta (r3), y
00125E  2               
00125E  2  60           	rts
00125F  2               
00125F  2               ;************************************************
00125F  2               ; decrease entity X position
00125F  2               ;   input: R3 = start of the object
00125F  2               ;
00125F  2               position_x_dec:
00125F  2  A0 02        	ldy #Entity::levelx
001261  2  B1 08            lda (r3),y
001263  2  3A               dec
001264  2  91 08            sta (r3),y
001266  2  C9 FF            cmp #$ff
001268  2  D0 06            bne :+
00126A  2  C8               iny
00126B  2  B1 08            lda (r3),y
00126D  2  3A               dec
00126E  2  91 08            sta (r3),y
001270  2               :
001270  2  A0 0B        	ldy #Entity::bFlags
001272  2  B1 08        	lda (r3), y  						; set the refresh bits
001274  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
001276  2  91 08        	sta (r3), y
001278  2  60           	rts
001279  2               
001279  2               ;************************************************
001279  2               ; increase entity Y position
001279  2               ;   input: R3 = start of the object
001279  2               ;
001279  2               position_y_inc:
001279  2               	; move the absolute position levelx + 1
001279  2  A0 04        	ldy #Entity::levely
00127B  2  B1 08            lda (r3),y
00127D  2  1A               inc
00127E  2  91 08            sta (r3),y
001280  2  D0 06            bne :+
001282  2  C8               iny
001283  2  B1 08            lda (r3),y
001285  2  1A               inc
001286  2  91 08            sta (r3),y
001288  2               :
001288  2  A0 0B        	ldy #Entity::bFlags
00128A  2  B1 08        	lda (r3), y  						; set the refresh bits
00128C  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
00128E  2  91 08        	sta (r3), y
001290  2  60           	rts
001291  2               
001291  2               ;************************************************
001291  2               ; decrease entity X position
001291  2               ;   input: R3 = start of the object
001291  2               ;
001291  2               position_y_dec:
001291  2  A0 04        	ldy #Entity::levely
001293  2  B1 08            lda (r3),y
001295  2  3A               dec
001296  2  91 08            sta (r3),y
001298  2  C9 FF            cmp #$ff
00129A  2  D0 06            bne :+
00129C  2  C8               iny
00129D  2  B1 08            lda (r3),y
00129F  2  3A               dec
0012A0  2  91 08            sta (r3),y
0012A2  2               :
0012A2  2  A0 0B        	ldy #Entity::bFlags
0012A4  2  B1 08        	lda (r3), y  						; set the refresh bits
0012A6  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
0012A8  2  91 08        	sta (r3), y
0012AA  2  60           	rts
0012AB  2               
0012AB  2               ;************************************************
0012AB  2               ;	compute the number of tiles covered by the boundingbox
0012AB  2               ; input: r3 pointer to entity
0012AB  2               ; output: r1L : number of tiles height
0012AB  2               ;			X = r1H : number of tiles width
0012AB  2               ;			Y = r2L : index of the first tile to test
0012AB  2               ;				r2H : size of object in tile coordinated
0012AB  2               								; 8 pixels => + 0 byte
0012AB  2               								; 16 pixels => + 1 byte
0012AB  2               								; 32 pixels => + 2 bytes
0012AB  2               								; 64 pixels => + 4 bytes
0012AB  2               
0012AB  2               bbox_coverage:
0012AB  2  A0 09        	ldy #Entity::bWidth
0012AD  2  B1 08        	lda (r3),y
0012AF  2  C9 10        	cmp #16
0012B1  2  D0 04        	bne :+
0012B3  2  A9 01        	lda #01
0012B5  2  80 0A        	bra @width
0012B7  2               :
0012B7  2  C9 20        	cmp #32
0012B9  2  D0 04        	bne :+
0012BB  2  A9 02        	lda #02
0012BD  2  80 02        	bra @width
0012BF  2               :
0012BF  2  A9 00        	lda #00
0012C1  2               
0012C1  2               @width:
0012C1  2  85 6A        	sta bTilesWidth
0012C3  2               
0012C3  2               	; X = how many column of tiles to test
0012C3  2  A0 02            ldy #Entity::levelx
0012C5  2  B1 08        	lda (r3),y
0012C7  2  29 0F        	and #%00001111
0012C9  2  F0 0B        	beq @one_tile
0012CB  2               @two_tiles_right:
0012CB  2  A6 6A        	ldx bTilesWidth						; test 2 column ( y % 16 <> 0)
0012CD  2  E8           	inx
0012CE  2  86 04        	stx bTilesCoveredX
0012D0  2  A0 00        	ldy #00								; starting on row +1
0012D2  2  84 06        	sty r2L
0012D4  2  80 08        	bra @test_lines
0012D6  2               @one_tile:
0012D6  2  A6 6A        	ldx bTilesWidth						; test 1 column ( y % 16  == 8)
0012D8  2  86 04        	stx bTilesCoveredX
0012DA  2  A0 00        	ldy #00								; starting on row +1
0012DC  2  84 06        	sty r2L
0012DE  2               
0012DE  2               @test_lines:
0012DE  2  A0 0A        	ldy #Entity::bHeight
0012E0  2  B1 08        	lda (r3),y
0012E2  2  C9 10        	cmp #16
0012E4  2  D0 04        	bne :+
0012E6  2  A9 01        	lda #01
0012E8  2  80 0A        	bra @height
0012EA  2               :
0012EA  2  C9 20        	cmp #32
0012EC  2  D0 04        	bne :+
0012EE  2  A9 02        	lda #02
0012F0  2  80 02        	bra @height
0012F2  2               :
0012F2  2  A9 00        	lda #00
0012F4  2               @height:
0012F4  2  85 6B        	sta bTilesHeight
0012F6  2               
0012F6  2  A0 04            ldy #Entity::levely
0012F8  2  B1 08        	lda (r3),y
0012FA  2  29 0F        	and #%00001111
0012FC  2  D0 05        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
0012FE  2               @yint:
0012FE  2  A5 6B        	lda bTilesHeight		; test 2 lines ( y % 16 == 0)
001300  2  85 05        	sta bTilesCoveredY
001302  2  60           	rts
001303  2               @yfloat:
001303  2  A5 6B        	lda bTilesHeight
001305  2  1A           	inc
001306  2  85 05        	sta bTilesCoveredY
001308  2  60           	rts
001309  2               
001309  2               ;************************************************
001309  2               ; check collision on the height
001309  2               ; input: r3 pointer to entity
001309  2               ; return:;	A = vaule of the collision
001309  2               ;	        ZERO = no collision
001309  2               ;
001309  2               if_collision_tile_height:
001309  2  A0 0E            ldy #Entity::collision_addr
00130B  2  B1 08        	lda (r3),y
00130D  2  85 02        	sta r0L
00130F  2  C8               iny
001310  2  B1 08        	lda (r3),y
001312  2  85 03        	sta r0H
001314  2               
001314  2               	; only tiles test if we are on a tile edge
001314  2  A0 02            ldy #Entity::levelx
001316  2  B1 08        	lda (r3),y
001318  2  29 0F        	and #%00001111
00131A  2  D0 3C        	bne @no_collision
00131C  2               
00131C  2  20 AB 12     	jsr bbox_coverage
00131F  2  A6 05        	ldx bTilesCoveredY				; tiles height
001321  2  A5 69        	lda bSide2test
001323  2  10 11        	bpl @right
001325  2               
001325  2               @left:
001325  2               	; check one tile on the left
001325  2  38           	sec
001326  2  A5 02        	lda r0L
001328  2  E9 01        	sbc #01
00132A  2  85 02        	sta r0L
00132C  2  A5 03        	lda r0H
00132E  2  E9 00        	sbc #00
001330  2  85 03        	sta r0H
001332  2  A0 00        	ldy #00
001334  2  80 03        	bra @test_line
001336  2               
001336  2               @right:
001336  2  A5 6A        	lda bTilesWidth
001338  2  A8           	tay					; test x(tile) + bTlesWidth
001339  2               
001339  2               @test_line:
001339  2  B1 02        	lda (r0L),y
00133B  2  F0 11        	beq @test_next_line
00133D  2               
00133D  2               	; some tiles are not real collision
00133D  2  84 30        	sty $30
00133F  2  A8           	tay
001340  2  B9 7C 1F     	lda tiles_attributes,y
001343  2  89 02        	bit #TILE_ATTR::SOLID_WALL
001345  2  F0 05        	beq @test_next_line1
001347  2  A4 30        	ldy $30
001349  2  B1 02        	lda (r0L),y
00134B  2  60           	rts
00134C  2               
00134C  2               @test_next_line1:
00134C  2  A4 30        	ldy $30
00134E  2               
00134E  2               @test_next_line:
00134E  2  CA           	dex
00134F  2  F0 07        	beq @no_collision
001351  2  98           	tya
001352  2  18           	clc
001353  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
001355  2  A8           	tay
001356  2  80 E1        	bra @test_line					; LADDERS can be traversed
001358  2               
001358  2               @no_collision:						; force a no collision
001358  2  A9 00        	lda #00
00135A  2               @return:
00135A  2  60           	rts
00135B  2               
00135B  2               ;************************************************
00135B  2               ; check collision on the right
00135B  2               ; input: r3 pointer to entity
00135B  2               ; output: A = value of the collision, or 00/01 for sprites
00135B  2               ;			ZERO = no collision
00135B  2               ;
00135B  2               check_collision_right:
00135B  2               	; if levelx == TILEMAP_WIDTH - sprite.width => collision
00135B  2  A0 03        	ldy #Entity::levelx + 1
00135D  2  B1 08        	lda (r3),y
00135F  2  F0 0F        	beq :+							; if x < 256, no need to test right border
001361  2  A0 02        	ldy #Entity::levelx
001363  2  B1 08        	lda (r3),y
001365  2  A0 09        	ldy #Entity::bWidth
001367  2  71 08        	adc (r3),y
001369  2  C9 00        	cmp #<(LEVEL_WIDTH)
00136B  2  D0 03        	bne :+
00136D  2  A9 01        	lda #01
00136F  2  60           	rts
001370  2               
001370  2               :
001370  2  A9 01        	lda #$01
001372  2  85 69        	sta bSide2test
001374  2  20 09 13     	jsr if_collision_tile_height
001377  2  D0 11        	bne @return						; if tile collision, return the tile value
001379  2               
001379  2  B2 08        	lda (r3)
00137B  2  AA               tax
00137C  2  A9 06        	lda #(02 | 04)
00137E  2  A0 01        	ldy #01
001380  2  20 02 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right, if a=$ff => nocollision
001383  2  30 03        	bmi @no_collision
001385  2  A9 01        	lda #01
001387  2  60           	rts
001388  2               
001388  2               @no_collision:
001388  2  A9 00        	lda #00
00138A  2               @return:
00138A  2  60           	rts
00138B  2               
00138B  2               ;************************************************
00138B  2               ; check collision on the left
00138B  2               ; input: r3 pointer to entity
00138B  2               ; output: A = value of the collision, or 00/01 for sprites
00138B  2               ;			ZERO = no collision
00138B  2               ;
00138B  2               check_collision_left:
00138B  2               	; if levelx == 0 => collision
00138B  2  A0 03        	ldy #Entity::levelx + 1
00138D  2  B1 08        	lda (r3),y
00138F  2  D0 09        	bne :+
001391  2  A0 02        	ldy #Entity::levelx
001393  2  B1 08        	lda (r3),y
001395  2  D0 03        	bne :+
001397  2  A9 01        	lda #01
001399  2  60           	rts
00139A  2               
00139A  2               :
00139A  2               	; left border is a collision
00139A  2  A9 FF        	lda #$ff
00139C  2  85 69        	sta bSide2test
00139E  2  20 09 13     	jsr if_collision_tile_height
0013A1  2  D0 11        	bne @return
0013A3  2               
0013A3  2  B2 08        	lda (r3)
0013A5  2  AA               tax
0013A6  2  A9 0A        	lda #(02 | 08)
0013A8  2  A0 01        	ldy #01
0013AA  2  20 02 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right
0013AD  2  30 03        	bmi @no_collision
0013AF  2  A9 01        	lda #01
0013B1  2  60           	rts
0013B2  2               
0013B2  2               @no_collision:
0013B2  2  A9 00        	lda #00
0013B4  2               @return:
0013B4  2  60           	rts
0013B5  2               
0013B5  2               ;************************************************
0013B5  2               ; check collision down
0013B5  2               ;	collision surface to test is 16 pixels around the mid X
0013B5  2               ; input: r3 pointer to entity
0013B5  2               ; output : Z = no collision
0013B5  2               ;
0013B5  2               check_collision_down:
0013B5  2               	; if levely == LEVEL_HEIGHT - sprite.width => collision
0013B5  2  A0 05        	ldy #Entity::levely + 1
0013B7  2  B1 08        	lda (r3),y
0013B9  2  F0 0F        	beq :+							; if x < 256, no need to test right border
0013BB  2  A0 04        	ldy #Entity::levely
0013BD  2  B1 08        	lda (r3),y
0013BF  2  A0 0A        	ldy #Entity::bHeight
0013C1  2  71 08        	adc (r3),y
0013C3  2  C9 00        	cmp #<(LEVEL_HEIGHT)
0013C5  2  D0 03        	bne :+
0013C7  2  A9 01        	lda #01
0013C9  2  60           	rts
0013CA  2               
0013CA  2               :
0013CA  2  A0 04            ldy #Entity::levely
0013CC  2  B1 08        	lda (r3),y               	; if the player is inbetween 2 tiles there can be no collision
0013CE  2  29 0F        	and #%00001111
0013D0  2  D0 34        	bne @check_sprites
0013D2  2               
0013D2  2               @check_tiles:
0013D2  2  A0 0E            ldy #Entity::collision_addr
0013D4  2  B1 08        	lda (r3),y
0013D6  2  85 02        	sta r0L
0013D8  2  C8               iny
0013D9  2  B1 08        	lda (r3),y
0013DB  2  85 03        	sta r0H
0013DD  2               
0013DD  2  20 AB 12     	jsr bbox_coverage
0013E0  2  A6 6B        	ldx bTilesHeight	; check below the player
0013E2  2  A9 00        	lda #00
0013E4  2  18           	clc
0013E5  2               @loop:
0013E5  2  69 20        	adc #LEVEL_TILES_WIDTH
0013E7  2  CA           	dex
0013E8  2  D0 FB        	bne @loop
0013EA  2  A8           	tay
0013EB  2               
0013EB  2  A6 04        	ldx bTilesCoveredX						; tiles to test in width
0013ED  2               @test_colum:
0013ED  2  B1 02        	lda (r0L),y
0013EF  2  F0 0C        	beq @next_colum							; empty tile, test the next one
0013F1  2               
0013F1  2  84 30        	sty $30
0013F3  2  A8           	tay
0013F4  2  B9 7C 1F     	lda tiles_attributes,y
0013F7  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
0013F9  2  D0 08        	bne @collision							; considere slopes as empty
0013FB  2  A4 30        	ldy $30
0013FD  2               
0013FD  2               @next_colum:
0013FD  2  CA           	dex
0013FE  2  F0 06        	beq @check_sprites
001400  2  C8           	iny
001401  2  80 EA        	bra @test_colum
001403  2               @collision:
001403  2  A9 01        	lda #01
001405  2  60           	rts
001406  2               
001406  2               @check_sprites:
001406  2  B2 08            lda (r3)
001408  2  AA               tax
001409  2  A9 05        	lda #(01 | 04)
00140B  2  A0 01        	ldy #01
00140D  2  20 02 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001410  2  30 03        	bmi @no_collision
001412  2  A9 01        	lda #01
001414  2  60           	rts
001415  2               @no_collision:
001415  2  A9 00        	lda #00
001417  2  60           	rts
001418  2               
001418  2  60           	rts
001419  2               
001419  2               ;************************************************
001419  2               ; check collision up
001419  2               ;	collision surface to test is 16 pixels around the mid X
001419  2               ; input: r3 pointer to entity
001419  2               ;		r0 : @ of current tile the top-left corner of the player sprite
001419  2               ; output : Z = no collision
001419  2               ;
001419  2               check_collision_up:
001419  2               	; if levely == 0 => collision
001419  2  A0 05        	ldy #Entity::levely + 1
00141B  2  B1 08        	lda (r3),y
00141D  2  D0 09        	bne :+
00141F  2  A0 04        	ldy #Entity::levely
001421  2  B1 08        	lda (r3),y
001423  2  D0 03        	bne :+
001425  2  A9 01        	lda #01
001427  2  60           	rts
001428  2               
001428  2               :
001428  2  A0 04            ldy #Entity::levely
00142A  2  B1 08        	lda (r3),y               	; if the player is inbetween 2 tiles there can be no collision
00142C  2  29 0F        	and #%00001111
00142E  2  D0 30        	bne @check_sprites
001430  2               
001430  2  38           	sec
001431  2  A0 0E            ldy #Entity::collision_addr
001433  2  B1 08        	lda (r3),y
001435  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001437  2  85 02        	sta r0L
001439  2  C8               iny
00143A  2  B1 08        	lda (r3),y
00143C  2  E9 00        	sbc #0
00143E  2  85 03        	sta r0H
001440  2               
001440  2  20 AB 12     	jsr bbox_coverage
001443  2               
001443  2  A6 04        	ldx bTilesCoveredX
001445  2  A0 00        	ldy #00
001447  2               @test_colum:
001447  2  B1 02        	lda (r0L),y							; left side
001449  2  F0 0C        	beq @next_column
00144B  2               
00144B  2  84 65        	sty ENTITY_ZP
00144D  2  A8           	tay
00144E  2  B9 7C 1F     	lda tiles_attributes,y
001451  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001453  2  D0 08        	bne @collision
001455  2  A4 65        	ldy ENTITY_ZP
001457  2               
001457  2               @next_column:
001457  2  CA           	dex
001458  2  F0 06        	beq @no_collision
00145A  2  C8           	iny
00145B  2  80 EA        	bra @test_colum
00145D  2               @collision:
00145D  2  A9 01        	lda #01
00145F  2  60           	rts
001460  2               @no_collision:
001460  2               @check_sprites:
001460  2  A9 00        	lda #00
001462  2  60           	rts
001463  2               
001463  2               ;************************************************
001463  2               ; check if the player feet is ABOVE a slope tile
001463  2               ;   input: 	r0 pointer to player position on collision map
001463  2               ;			r3 pointer to entity
001463  2               ;	        Y = feet position tested (vs r0)
001463  2               ;	modify: bPlayerOnSlop
001463  2               ;	return: Z = slop
001463  2               ;
001463  2               if_above_slop:
001463  2  64 6C        	stz bPlayerOnSlop				; no slope
001465  2               
001465  2  20 AB 12     	jsr bbox_coverage
001468  2               
001468  2  18           	clc
001469  2  A9 00        	lda #00
00146B  2  A6 05        	ldx bTilesCoveredY					; test BELOW feet level
00146D  2               :
00146D  2  69 20        	adc #LEVEL_TILES_WIDTH
00146F  2  CA           	dex
001470  2  D0 FB        	bne :-
001472  2  85 67        	sta ENTITY_ZP + 2					; position of the feet tiles
001474  2               
001474  2  A0 02            ldy #Entity::levelx
001476  2  B1 08        	lda (r3),y
001478  2  29 0F        	and #%00001111
00147A  2  C9 08        	cmp #08
00147C  2  90 04        	bcc @column0
00147E  2  F0 0E        	beq @no_slope						; if x % 16 > 8, on the edge
001480  2               @column1:
001480  2  E6 67        	inc ENTITY_ZP + 2					; if x % 16 > 8, check the next colum
001482  2               @column0:
001482  2  A4 67            ldy ENTITY_ZP + 2
001484  2  B1 02        	lda (r0),y
001486  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001488  2  F0 09        	beq @above_slope
00148A  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
00148C  2  F0 05        	beq @above_slope
00148E  2               @no_slope:
00148E  2  A9 00        	lda #0
001490  2  85 6C        	sta bPlayerOnSlop
001492  2  60           	rts
001493  2               @above_slope:
001493  2  85 6C        	sta bPlayerOnSlop
001495  2  A5 6C        	lda bPlayerOnSlop
001497  2  60           	rts
001498  2               
001498  2               ;************************************************
001498  2               ; check if the entity base is exactly on a slope tile
001498  2               ;   input:  A = direction the object is moving to  (left = $ff, right = $01)
001498  2               ;			r0 pointer to player position on collision map
001498  2               ;			r3 pointer to entity
001498  2               ;	modify: bPlayerOnSlop
001498  2               ;	return: Z = slop
001498  2               ;			Y = feet position tested (vs r0)
001498  2               ;
001498  2               if_on_slop:
001498  2  64 6C        	stz bPlayerOnSlop				; no slope
00149A  2               
00149A  2  20 AB 12     	jsr bbox_coverage
00149D  2               
00149D  2  18           	clc
00149E  2  A9 00        	lda #00
0014A0  2  A6 05        	ldx bTilesCoveredY
0014A2  2  CA           	dex									; remove 1 to pick the feet position, and not BELOW the feet
0014A3  2               :
0014A3  2  69 20        	adc #LEVEL_TILES_WIDTH
0014A5  2  CA           	dex
0014A6  2  D0 FB        	bne :-
0014A8  2  85 67        	sta ENTITY_ZP + 2					; position of the feet tiles
0014AA  2               
0014AA  2  A0 02            ldy #Entity::levelx
0014AC  2  B1 08        	lda (r3),y
0014AE  2  29 0F        	and #%00001111
0014B0  2  C9 08        	cmp #08
0014B2  2  90 10        	bcc @column0						; if x % 16 < 8, check column 0
0014B4  2  D0 0C        	bne @column1						; if x % 16 > 8, check column 1
0014B6  2               
0014B6  2  A4 67            ldy ENTITY_ZP + 2					; if x%16==8 test both columns
0014B8  2  B1 02        	lda (r0),y
0014BA  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0014BC  2  F0 12        	beq @on_slope
0014BE  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0014C0  2  F0 0E        	beq @on_slope
0014C2  2               
0014C2  2               @column1:
0014C2  2  E6 67        	inc ENTITY_ZP + 2					; if x % 16 > 8, check the next colum
0014C4  2               @column0:
0014C4  2  A4 67            ldy ENTITY_ZP + 2
0014C6  2               	; check if player feet is ON a slop
0014C6  2  B1 02        	lda (r0),y						; test ON feet level
0014C8  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0014CA  2  F0 04        	beq @on_slope
0014CC  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0014CE  2  D0 05        	bne @no_slope
0014D0  2               @on_slope:
0014D0  2  85 6C        	sta bPlayerOnSlop
0014D2  2  A5 6C        	lda bPlayerOnSlop				; remove the Z flag
0014D4  2  60           	rts
0014D5  2               
0014D5  2               @no_slope:
0014D5  2  A9 00        	lda #0
0014D7  2  85 6C        	sta bPlayerOnSlop
0014D9  2  60           	rts
0014DA  2               
0014DA  2               ;************************************************
0014DA  2               ; Handle entity physics when jumping or falling
0014DA  2               ;   input: r3 pointer to entity
0014DA  2               ;
0014DA  2               physics:
0014DA  2  86 68        	stx ENTITY_ZP + 3
0014DC  2               
0014DC  2  A0 01        	ldy #Entity::status
0014DE  2  B1 08        	lda (r3),y
0014E0  2  C9 02        	cmp #STATUS_CLIMBING
0014E2  2  F0 0B        	beq @return1
0014E4  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
0014E6  2  F0 07        	beq @return1
0014E8  2  C9 05        	cmp #STATUS_JUMPING
0014EA  2  D0 06        	bne @fall
0014EC  2  4C ED 15     	jmp @jump
0014EF  2               @return1:
0014EF  2  A6 68        	ldx ENTITY_ZP + 3
0014F1  2  60           	rts
0014F2  2               
0014F2  2               	;
0014F2  2               	; deal with gravity driven falling
0014F2  2               	;
0014F2  2               @fall:
0014F2  2               .ifdef DEBUG
0014F2  2               	CHECK_DEBUG
0014F2  2               .endif
0014F2  2  64 6D        	stz bInLoop					; we are not yet the the physic loop
0014F4  2               @loop:
0014F4  2  20 B9 11     	jsr Entities::get_collision_map
0014F7  2  20 B5 13     	jsr check_collision_down
0014FA  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
0014FC  2  4C D6 15     	jmp @sit_on_solid				; solid tile below the player that is not a slope
0014FF  2               
0014FF  2               @check_on_slope:
0014FF  2  20 98 14     	jsr if_on_slop
001502  2  F0 43        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
001504  2               	; player is on a slope
001504  2               @on_slope:
001504  2  A0 02        	ldy #Entity::levelx
001506  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001508  2  F0 18        	beq @slope_left
00150A  2               @slope_right:
00150A  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
00150C  2  29 0F        	and #%00001111
00150E  2  C9 08        	cmp #08
001510  2  90 07        	bcc :+
001512  2  49 0F        	eor #%00001111
001514  2  18           	clc
001515  2  69 09        	adc #09
001517  2  80 05        	bra @store_y1					; if x % 16 >= 8 = delta_y:  (x=8 => y=+15, x=15 => y = +8)
001519  2               :
001519  2  49 0F        	eor #%00001111
00151B  2  38           	sec
00151C  2  E9 07        	sbc #07							; if x % 16 < 8 = delta_y:  (x=0 => y=+8, x=7 => y = +0)
00151E  2               @store_y1:
00151E  2  85 30        	sta $30
001520  2  80 14        	bra @slope_y
001522  2               @slope_left:
001522  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
001524  2  29 0F        	and #%00001111
001526  2  C9 08        	cmp #08
001528  2  F0 07        	beq :+							; x%16 == 8 => keep 16
00152A  2  90 05        	bcc :+							; x%16 < 8	+8
00152C  2  38           	sec								; x%16 > 8	-8
00152D  2  E9 08        	sbc #08
00152F  2  80 ED        	bra @store_y1
001531  2               :
001531  2  18           	clc
001532  2  69 08        	adc #08
001534  2  85 30        	sta $30
001536  2               @slope_y:
001536  2  A0 04        	ldy #Entity::levely
001538  2  B1 08        	lda (r3),y
00153A  2  29 0F        	and #%00001111
00153C  2  D0 02        	bne :+
00153E  2  A9 10        	lda #$10						; dirty trick y % 16 == 0 => convert to $10 (far end of the tile)
001540  2               :
001540  2  C5 30        	cmp $30
001542  2  90 03        	bcc @no_collision_down
001544  2  4C D6 15     	jmp @sit_on_solid
001547  2               
001547  2               @no_collision_down:
001547  2  A5 6D        	lda bInLoop						; only modify the status and t if we are not in the loop
001549  2  D0 36        	bne @drive_fall
00154B  2               
00154B  2  A9 01        	lda #01
00154D  2  85 6D        	sta bInLoop
00154F  2               
00154F  2               	; if the player is already falling, increase t
00154F  2  A0 01        	ldy #Entity::status
001551  2  B1 08        	lda (r3),y
001553  2  C9 04        	cmp #STATUS_FALLING
001555  2  F0 0F        	beq @increase_ticks
001557  2               
001557  2               	; start the falling timer
001557  2  A9 04        	lda #STATUS_FALLING
001559  2  91 08        	sta (r3),y
00155B  2  A9 08        	lda #FALL_LO_TICKS
00155D  2  A0 06        	ldy #Entity::falling_ticks
00155F  2  91 08        	sta (r3),y						; reset t
001561  2  C8           	iny
001562  2  A9 00        	lda #00
001564  2  91 08        	sta (r3),y
001566  2               @increase_ticks:
001566  2  A0 06        	ldy #Entity::falling_ticks
001568  2  B1 08        	lda (r3),y									; increase the timer every 10 screen refresh
00156A  2  3A           	dec
00156B  2  91 08        	sta (r3),y
00156D  2  D0 0A        	bne @check_loop
00156F  2  A9 08        	lda #FALL_LO_TICKS
001571  2  91 08        	sta (r3),y
001573  2  C8           	iny
001574  2  B1 08        	lda (r3),y
001576  2  1A           	inc
001577  2  91 08        	sta (r3),y
001579  2               
001579  2               @check_loop:
001579  2  A0 07        	ldy #Entity::falling_ticks + 1
00157B  2  B1 08        	lda (r3),y
00157D  2  F0 52        	beq @fall_once
00157F  2  85 14        	sta r9L
001581  2               
001581  2               @drive_fall:
001581  2               	; move the player down #(falling_ticks + 1)
001581  2  20 79 12     	jsr position_y_inc
001584  2               
001584  2  C6 14        	dec r9L
001586  2  F0 03        	beq @apply_delta_x
001588  2  4C F4 14     	jmp @loop						; take t in count for gravity
00158B  2               
00158B  2               @apply_delta_x:
00158B  2               	; we did all the Y modification, so now as there was no collision we can move X
00158B  2  A0 08        	ldy #Entity::delta_x
00158D  2  B1 08        	lda (r3),y
00158F  2  F0 59        	beq @return						; delta_x == 0 => entity is not moving left or right
001591  2  30 21        	bmi @fall_left					; delta_x < 0 => move left
001593  2               
001593  2               @fall_right:
001593  2               	; cannot move if we are at the right border
001593  2  A0 02        	ldy #Entity::levelx
001595  2  B1 08        	lda (r3),y
001597  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
001599  2  D0 07        	bne @test_fall_collision_right
00159B  2  C8           	iny
00159C  2  B1 08        	lda (r3),y
00159E  2  C9 01        	cmp #>(LEVEL_WIDTH - 32)
0015A0  2  F0 05        	beq @fcollision_right			; we are at the level limit
0015A2  2               @test_fall_collision_right:
0015A2  2  20 5B 13     	jsr check_collision_right
0015A5  2  F0 07        	beq @no_fcollision_right
0015A7  2               @fcollision_right:
0015A7  2  A9 00        	lda #00
0015A9  2  A0 08        	ldy #Entity::delta_x
0015AB  2  91 08        	sta (r3),y						; cancel deltaX to transform to vertical movement
0015AD  2  60           	rts
0015AE  2               @no_fcollision_right:
0015AE  2  20 47 12     	jsr position_x_inc
0015B1  2  A6 68        	ldx ENTITY_ZP + 3
0015B3  2  60           	rts
0015B4  2               
0015B4  2               @fall_left:
0015B4  2               	; cannot move if we are at the left border
0015B4  2  A0 03        	ldy #Entity::levelx + 1
0015B6  2  B1 08        	lda (r3),y
0015B8  2  D0 05        	bne @test_fall_collision_left
0015BA  2  88           	dey
0015BB  2  B1 08        	lda (r3),y
0015BD  2  F0 05        	beq @fcollision_left
0015BF  2               @test_fall_collision_left:
0015BF  2  20 8B 13     	jsr check_collision_left
0015C2  2  F0 07        	beq @no_fcollision_left
0015C4  2               @fcollision_left:
0015C4  2  A9 00        	lda #00
0015C6  2  A0 08        	ldy #Entity::delta_x
0015C8  2  91 08        	sta (r3),y				 		; cancel deltaX to transform to vertical movement
0015CA  2  60           	rts
0015CB  2               @no_fcollision_left:
0015CB  2  20 5F 12     	jsr position_x_dec
0015CE  2  A6 68        	ldx ENTITY_ZP + 3
0015D0  2  60           	rts
0015D1  2               
0015D1  2               @fall_once:
0015D1  2  20 79 12     	jsr position_y_inc
0015D4  2  80 B5        	bra @apply_delta_x
0015D6  2               
0015D6  2               @sit_on_solid:
0015D6  2  A0 0B        	ldy #Entity::bFlags
0015D8  2  B1 08        	lda (r3),y
0015DA  2  29 FE        	and #(255-EntityFlags::physics)
0015DC  2  91 08        	sta (r3),y						; disengage physics engine for that entity
0015DE  2               
0015DE  2               	; change the status if falling
0015DE  2  A0 01        	ldy #Entity::status
0015E0  2  B1 08        	lda (r3),y
0015E2  2  C9 04        	cmp #STATUS_FALLING
0015E4  2  D0 04        	bne @return
0015E6  2  A9 00        	lda #STATUS_WALKING_IDLE
0015E8  2  91 08        	sta (r3),y
0015EA  2               
0015EA  2               @return:
0015EA  2  A6 68        	ldx ENTITY_ZP + 3
0015EC  2  60           	rts
0015ED  2               
0015ED  2               	;
0015ED  2               	; deal with gravity driven jumping
0015ED  2               	;
0015ED  2               @jump:
0015ED  2               @decrease_ticks:
0015ED  2  A0 06        	ldy #Entity::falling_ticks
0015EF  2  B1 08        	lda (r3),y
0015F1  2  3A           	dec								 	; decrease  HI every 10 refresh
0015F2  2  91 08        	sta (r3),y
0015F4  2  D0 0D        	bne @drive_jump
0015F6  2  C8           	iny
0015F7  2  B1 08        	lda (r3),y
0015F9  2  3A           	dec
0015FA  2  91 08        	sta (r3),y
0015FC  2  F0 50        	beq @apex							; reached the apex of the jump
0015FE  2               
0015FE  2  A9 0A        	lda #JUMP_LO_TICKS
001600  2  88           	dey
001601  2  91 08        	sta (r3),y							; reset t
001603  2               
001603  2               @drive_jump:
001603  2  A0 07        	ldy #Entity::falling_ticks + 1
001605  2  B1 08        	lda (r3),y
001607  2  85 66        	sta ENTITY_ZP + 1
001609  2               @loop_jump:
001609  2  20 91 12     	jsr position_y_dec
00160C  2               
00160C  2               	; refresh the collision address
00160C  2  20 B9 11     	jsr Entities::get_collision_map
00160F  2               
00160F  2  A0 04        	ldy #Entity::levely
001611  2  B1 08        	lda (r3),y
001613  2  29 0F        	and #%00001111
001615  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
001617  2               
001617  2               	; test hit a ceiling
001617  2  20 19 14     	jsr check_collision_up
00161A  2  D0 04        	bne @collision_up
00161C  2               @no_collision_up:
00161C  2  C6 66        	dec ENTITY_ZP + 1
00161E  2  D0 E9        	bne @loop_jump						; loop to take t in count for gravity
001620  2               
001620  2               @collision_up:
001620  2  A0 08        	ldy #Entity::delta_x
001622  2  B1 08        	lda (r3),y					 		; deal with deltax
001624  2  F0 C4        	beq @return
001626  2  30 12        	bmi @jump_left
001628  2               @jump_right:
001628  2  20 5B 13     	jsr check_collision_right
00162B  2  F0 09        	beq @no_collision_right
00162D  2               @collision_right:
00162D  2  A9 00        	lda #00
00162F  2  A0 08        	ldy #Entity::delta_x
001631  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
001633  2  A6 68        	ldx ENTITY_ZP + 3
001635  2  60           	rts
001636  2               @no_collision_right:
001636  2  20 47 12     	jsr position_x_inc
001639  2  60           	rts
00163A  2               @jump_left:
00163A  2  20 8B 13     	jsr check_collision_left
00163D  2  F0 09        	beq @no_collision_left
00163F  2               @collision_left:
00163F  2  A9 00        	lda #00
001641  2  A0 08        	ldy #Entity::delta_x
001643  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
001645  2  A6 68        	ldx ENTITY_ZP + 3
001647  2  60           	rts
001648  2               @no_collision_left:
001648  2  20 5F 12     	jsr position_x_dec
00164B  2  A6 68        	ldx ENTITY_ZP + 3
00164D  2  60           	rts
00164E  2               
00164E  2               @apex:
00164E  2  A0 01            ldy #Entity::status
001650  2  A9 06        	lda #STATUS_JUMPING_IDLE
001652  2  91 08        	sta (r3),y
001654  2               
001654  2  A6 68        	ldx ENTITY_ZP + 3
001656  2  60           	rts
001657  2               
001657  2               .endscope
001657  2               
001657  1               .include "objects.asm"
001657  2               ;-----------------------------------------------------------------------------
001657  2               ;/////////////////////////////////////////////////////////////////////////////
001657  2               ;           start OBJECT code
001657  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001657  2               ;-----------------------------------------------------------------------------
001657  2               
001657  2               .scope Objects
001657  2               
001657  2               OBJECT_ZP = $0060	    ; memory reserved for objects
001657  2               
001657  2  00 00        objects_map: .word 0
001659  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
00165B  2               
00165B  2               .enum Attribute
00165B  2                   GRAB = 1
00165B  2               .endenum
00165B  2               
00165B  2               .struct Object
00165B  2               	entity		.tag Entity
00165B  2                   imageID     .byte   ; ID of the image in the spritesheet
00165B  2                   attribute   .byte
00165B  2               .endstruct
00165B  2               
00165B  2               ;************************************************
00165B  2               ; init the object data of the level
00165B  2               ;
00165B  2               init:
00165B  2                   ; load the list of objects at the end of the previous load
00165B  2  AD 10 08         lda current_load
00165E  2  8D 57 16         sta objects_map
001661  2  AD 11 08         lda current_load + 1
001664  2  8D 58 16         sta objects_map + 1
001667  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
00166B  2  A0 00 20 BA  
00166F  2  FF A9 0B A2  
00168A  2               
00168A  2                   ; load the sprites  of objects at the end of the previous vload
00168A  2  AD 12 08         lda Vera::vram_load
00168D  2  8D 59 16         sta objects_sprites
001690  2  AD 13 08         lda Vera::vram_load + 1
001693  2  8D 5A 16         sta objects_sprites + 1
001696  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
00169A  2  A0 00 20 BA  
00169E  2  FF A9 0C A2  
0016B9  2               
0016B9  2                   ; add each available sprites on screen
0016B9  2  AD 57 16         lda objects_map
0016BC  2  85 08            sta r3L
0016BE  2  AD 58 16         lda objects_map + 1
0016C1  2  85 09            sta r3H
0016C3  2               
0016C3  2  B2 08            lda (r3)
0016C5  2  85 31            sta $31     ; number of objects
0016C7  2  64 32            stz $32     ; object #0
0016C9  2               
0016C9  2  E6 08            inc r3L
0016CB  2               
0016CB  2               @loop:
0016CB  2                   ; get a free sprite
0016CB  2  20 BE 0C         jsr Sprite::new
0016CE  2  8A               txa
0016CF  2  92 08            sta (r3)
0016D1  2               
0016D1  2                   ; register the entity
0016D1  2  A5 08            lda r3L
0016D3  2  A4 09            ldy r3H
0016D5  2  20 29 11         jsr Entities::register
0016D8  2               
0016D8  2                   ; load the first object
0016D8  2  AD 59 16     	lda objects_sprites
0016DB  2  85 02        	sta r0L
0016DD  2  AD 5A 16     	lda objects_sprites + 1
0016E0  2  85 03        	sta r0H
0016E2  2  20 58 0D         jsr Sprite::vram_to_16_5
0016E5  2  A5 04            lda r1L
0016E7  2  85 02            sta r0L
0016E9  2  A5 05            lda r1H
0016EB  2  85 03            sta r0H
0016ED  2               
0016ED  2  B2 08        	lda (r3)                        ; sprite id
0016EF  2  A8               tay
0016F0  2  A9 10           	lda #%00010000					; collision mask 1
0016F2  2  A2 50           	ldx #%01010000					; 16x16 sprite
0016F4  2  20 FB 0C     	jsr Sprite::load
0016F7  2               
0016F7  2                   ; display the object
0016F7  2  B2 08        	lda (r3)                        ; sprite id
0016F9  2  A8               tay
0016FA  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0016FC  2  20 86 0D     	jsr Sprite::display
0016FF  2               
0016FF  2  A0 0B        	ldy #Entity::bFlags
001701  2  A9 07        	lda #(EntityFlags::physics | EntityFlags::moved | EntityFlags::colission_map_changed)
001703  2  91 08        	sta (r3),y	                    ; force screen position and size to be recomputed
001705  2  20 7A 11         jsr Entities::set_position
001708  2               
001708  2                   ; last object ?
001708  2  C6 31            dec $31
00170A  2  F0 11            beq @return
00170C  2               
00170C  2                   ; move to the next object
00170C  2  18               clc
00170D  2  A5 08            lda r3L
00170F  2  69 12            adc #.sizeof(Object)
001711  2  85 08            sta r3L
001713  2  A5 09            lda r3H
001715  2  69 00            adc #00
001717  2  85 09            sta r3H
001719  2               
001719  2  E6 32            inc $32                     ; object #next
00171B  2  80 AE            bra @loop
00171D  2               
00171D  2               @return:
00171D  2  60               rts
00171E  2               
00171E  2               ;************************************************
00171E  2               ; change  position of the sprite (level view) => (screen view)
00171E  2               ;   input: X = index of the object
00171E  2               ;   output: r3 = pointer to the object
00171E  2               ;
00171E  2               set_position_index:
00171E  2  AD 36 11         lda Entities::get_pointer
001721  2               
001721  2               ;************************************************
001721  2               ; change position of all sprites when the layer moves (level view) => (screen view)
001721  2               ;
001721  2               fix_positions:
001721  2  AD 57 16         lda objects_map
001724  2  85 08            sta r3L
001726  2  AD 58 16         lda objects_map + 1
001729  2  85 09            sta r3H
00172B  2               
00172B  2  B2 08            lda (r3)
00172D  2  85 31            sta $31     ; number of objects
00172F  2  64 32            stz $32
001731  2  E6 08            inc r3L
001733  2               
001733  2               @loop:
001733  2                   ; position the first object
001733  2  20 7A 11         jsr Entities::set_position
001736  2               
001736  2                   ; last object ?
001736  2  E6 32            inc $32
001738  2  C6 31            dec $31
00173A  2  F0 0F            beq @return
00173C  2               
00173C  2                   ; move to the next object
00173C  2  18               clc
00173D  2  A5 08            lda r3L
00173F  2  69 12            adc #.sizeof(Object)
001741  2  85 08            sta r3L
001743  2  A5 09            lda r3H
001745  2  69 00            adc #00
001747  2  85 09            sta r3H
001749  2               
001749  2  80 E8            bra @loop
00174B  2               
00174B  2               @return:
00174B  2  60               rts
00174C  2               
00174C  2               ;************************************************
00174C  2               ; find the object with a sprite ID
00174C  2               ;   input: A = spriteID
00174C  2               ;   output: (r3) start of the address of the objects
00174C  2               ;           Y = memory index of the start of the object, $FF if no object
00174C  2               ;
00174C  2               get_by_spriteID:
00174C  2  85 60            sta OBJECT_ZP
00174E  2               
00174E  2  AD 57 16         lda objects_map
001751  2  85 08            sta r3L
001753  2  AD 58 16         lda objects_map + 1
001756  2  85 09            sta r3H
001758  2               
001758  2  B2 08            lda (r3)            ; number of objects
00175A  2  AA               tax
00175B  2  E6 08            inc r3L             ; move to the first object
00175D  2               
00175D  2  A0 00            ldy #00
00175F  2               @loop:
00175F  2  B1 08            lda (r3), y
001761  2  C5 60            cmp OBJECT_ZP
001763  2  F0 0A            beq @found
001765  2               
001765  2                   ; last object ?
001765  2  CA               dex
001766  2  F0 08            beq @no_object
001768  2               
001768  2                   ; move to the next object
001768  2  98               tya
001769  2  18               clc
00176A  2  69 12            adc #.sizeof(Object)
00176C  2  A8               tay
00176D  2  80 F0            bra @loop
00176F  2               
00176F  2               @found:
00176F  2  60               rts
001770  2               
001770  2               @no_object:
001770  2  A0 FF            ldy #$ff
001772  2  60               rts
001773  2               
001773  2               .endscope
001773  2               
001773  1               .include "layers.asm"
001773  2               ;-----------------------------------------------------------------------------
001773  2               ;/////////////////////////////////////////////////////////////////////////////
001773  2               ; START Layers code
001773  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001773  2               ;-----------------------------------------------------------------------------
001773  2               
001773  2               .scope Layers
001773  2               
001773  2               LAYERS_ZP = $0055
001773  2               wHScroll = LAYERS_ZP
001773  2               wVScroll = LAYERS_ZP + 2
001773  2               bDirty = LAYERS_ZP + 4
001773  2               
001773  2               HSCROLL = 0
001773  2               VSCROLL = 2
001773  2               
001773  2               ;************************************************
001773  2               ; init layers module
001773  2               ;
001773  2               init:
001773  2  64 55        	stz wHScroll
001775  2  64 56        	stz wHScroll + 1
001777  2               
001777  2  64 57        	stz wVScroll
001779  2  64 58        	stz wVScroll + 1
00177B  2               
00177B  2  64 59        	stz bDirty
00177D  2  60           	rts
00177E  2               
00177E  2               ;************************************************
00177E  2               ; set layer1 X position
00177E  2               ; input: X = xLO
00177E  2               ;		 Y = xHI
00177E  2               set_x:
00177E  2               	; is a real change requested ?
00177E  2  C4 56        	cpy wHScroll + 1
001780  2  D0 05        	bne @dirty
001782  2  E4 55        	cpx wHScroll
001784  2  D0 01        	bne @dirty
001786  2  60           	rts
001787  2               @dirty:
001787  2  86 55        	stx wHScroll
001789  2  8E 37 9F     	stx VERA_L1_hscrolllo
00178C  2  84 56        	sty wHScroll + 1
00178E  2  8C 38 9F     	sty VERA_L1_hscrollhi
001791  2               
001791  2  A9 01        	lda #01
001793  2  85 59        	sta bDirty
001795  2  60           	rts
001796  2               
001796  2               ;************************************************
001796  2               ; set layer1 y position
001796  2               ; input: X = yLO
001796  2               ;		 Y = yHI
001796  2               set_y:
001796  2               	; is a real change requested ?
001796  2  C4 58        	cpy wVScroll + 1
001798  2  D0 05        	bne @dirty
00179A  2  E4 57        	cpx wVScroll
00179C  2  D0 01        	bne @dirty
00179E  2  60           	rts
00179F  2               @dirty:
00179F  2  86 57        	stx wVScroll
0017A1  2  8E 39 9F     	stx VERA_L1_vscrolllo
0017A4  2  84 58        	sty wVScroll + 1
0017A6  2  8C 3A 9F     	sty VERA_L1_vscrollhi
0017A9  2               
0017A9  2  A9 01        	lda #01
0017AB  2  85 59        	sta bDirty
0017AD  2  60           	rts
0017AE  2               
0017AE  2               ;************************************************
0017AE  2               ; increase layer scrolling with a 8bits limit
0017AE  2               ;	X: : 0 = horizontal
0017AE  2               ;	   : 2 = vertical
0017AE  2               ;	Y: limit
0017AE  2               ;
0017AE  2               scroll_inc_8:
0017AE  2  84 02        	sty r0L
0017B0  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
0017B3  2  C5 02        	cmp r0L
0017B5  2  F0 0F        	beq @noscroll
0017B7  2               @scrollinc:
0017B7  2  1A           	inc
0017B8  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
0017BB  2  D0 03        	bne @scrolled
0017BD  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
0017C0  2               @scrolled:
0017C0  2               	; fix the objects position now that the layers scrolled
0017C0  2  20 21 17     	jsr Objects::fix_positions
0017C3  2  A9 01        	lda #01		; clear ZERO => scrolled
0017C5  2  60           	rts
0017C6  2               @noscroll:
0017C6  2  A9 00        	lda #00		; set ZERO => noscroll
0017C8  2  60           	rts
0017C9  2               
0017C9  2               ;************************************************
0017C9  2               ; increase layer scrolling with a 16bits limit
0017C9  2               ;	X: : 0 = horizontal
0017C9  2               ;	   : 2 = vertical
0017C9  2               ;	r0L: limit
0017C9  2               ;
0017C9  2               scroll_inc_16:
0017C9  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
0017CC  2  C5 02        	cmp r0L
0017CE  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
0017D0  2  A8           	tay
0017D1  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
0017D4  2  C5 03        	cmp r0H
0017D6  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
0017D8  2  98           	tya
0017D9  2               @scrollinc:
0017D9  2  1A           	inc
0017DA  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
0017DD  2  D0 03        	bne @scrolled
0017DF  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
0017E2  2               @scrolled:
0017E2  2               	; fix the objects position now that the layers scrolled
0017E2  2  20 21 17     	jsr Objects::fix_positions
0017E5  2  A9 01        	lda #01	; clear ZERO => scrolled
0017E7  2  60           	rts
0017E8  2               @noscroll:
0017E8  2  A9 00        	lda #00	; set ZERO => noscroll
0017EA  2  60           	rts
0017EB  2               
0017EB  2               ; increase a layer scroll offset but do NOT overlap
0017EB  2               .macro VSCROLL_INC direction,limit
0017EB  2               .if limit > 255
0017EB  2               	LOAD_r0 limit
0017EB  2               	ldx #direction
0017EB  2               	jsr Layers::scroll_inc_16
0017EB  2               .else
0017EB  2               	ldy #limit
0017EB  2               	ldx #direction
0017EB  2               	jsr Layers::scroll_inc_8
0017EB  2               .endif
0017EB  2               .endmacro
0017EB  2               
0017EB  2               ;
0017EB  2               ;
0017EB  2               ; decrease a layer scroll offset
0017EB  2               ;	X : 0 = horizontal
0017EB  2               ;	  : 2 = vertical
0017EB  2               ;
0017EB  2               scroll_dec:
0017EB  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
0017EE  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
0017F0  2  3A           	dec
0017F1  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
0017F4  2  80 0E        	bra @scrolled
0017F6  2               @scrollHI:
0017F6  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
0017F9  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
0017FB  2  3A           	dec
0017FC  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
0017FF  2  88           	dey
001800  2  98           	tya
001801  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
001804  2               
001804  2               @scrolled:
001804  2               	; fix the objects position now that the layers scrolled
001804  2  20 2A 12     	jsr Entities::fix_positions
001807  2  A9 01        	lda #01		; clear ZERO => scrolled
001809  2  60           	rts
00180A  2               
00180A  2               @noscroll:
00180A  2  A9 00        	lda #00		; set ZERO => noscroll
00180C  2  60           	rts
00180D  2               
00180D  2               ;************************************************
00180D  2               ; refresh layers
00180D  2               ;		layer 0 : scrolling to be half of the layer1 scrolling
00180D  2               ;		entities : screen position = entity position - layers1 position
00180D  2               ;
00180D  2               update:
00180D  2  A5 59        	lda bDirty
00180F  2  F0 1D        	beq @return
001811  2               
001811  2  A5 56        	lda wHScroll + 1		; layer0 hScroll is layer 1 / 2
001813  2  4A           	lsr
001814  2  8D 31 9F     	sta VERA_L0_hscrollhi
001817  2  A5 55        	lda wHScroll
001819  2  6A           	ror
00181A  2  8D 30 9F     	sta VERA_L0_hscrolllo
00181D  2               
00181D  2  A5 58        	lda wVScroll + 1		; layer0 hScroll is layer 1 / 2
00181F  2  4A           	lsr
001820  2  8D 33 9F     	sta VERA_L0_vscrollhi
001823  2  A5 57        	lda wVScroll
001825  2  6A           	ror
001826  2  8D 32 9F     	sta VERA_L0_vscrolllo
001829  2               
001829  2               	; fix the objects position now that the layers scrolled
001829  2  20 2A 12     	jsr Entities::fix_positions
00182C  2               
00182C  2               	; clear dirty flag
00182C  2  64 59        	stz bDirty
00182E  2               @return:
00182E  2  60           	rts
00182F  2               .endscope
00182F  2               
00182F  1               .include "player.asm"
00182F  2               ;-----------------------------------------------------------------------------
00182F  2               ;/////////////////////////////////////////////////////////////////////////////
00182F  2               ; START player code
00182F  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00182F  2               ;-----------------------------------------------------------------------------
00182F  2               
00182F  2               PLAYER_SPRITE_ANIMATION = 3
00182F  2               
00182F  2               JUMP_LO_TICKS = 10
00182F  2               JUMP_HI_TICKS = 2
00182F  2               FALL_LO_TICKS = 8
00182F  2               FALL_HI_TICKS = 2
00182F  2               
00182F  2               PLAYER_ZP = $0050
00182F  2               
00182F  2               PNG_SPRITES_LINES = 5
00182F  2               PNG_SPRITES_COLUMNS = 3
00182F  2               
00182F  2               .enum
00182F  2               	STATUS_WALKING_IDLE
00182F  2               	STATUS_WALKING
00182F  2               	STATUS_CLIMBING
00182F  2               	STATUS_CLIMBING_IDLE
00182F  2               	STATUS_FALLING
00182F  2               	STATUS_JUMPING
00182F  2               	STATUS_JUMPING_IDLE
00182F  2               	STATUS_PUSHING
00182F  2               .endenum
00182F  2               
00182F  2               .enum
00182F  2               	SITTING_NO_SLOP
00182F  2               	SITTING_ON_SLOPE
00182F  2               	SITTING_ABOVE_SLOPE
00182F  2               .endenum
00182F  2               
00182F  2               .struct PLAYER
00182F  2               	entity			.tag Entity
00182F  2               	animation_tick	.byte
00182F  2               	frameID 		.byte	; current animation loop start
00182F  2               	frame 			.byte	; current frame
00182F  2               	frameDirection 	.byte 	; direction of the animation
00182F  2               	flip 			.byte
00182F  2               	grab_object		.word	; address of the object currently grabbed
00182F  2               	vera_bitmaps    .res 	(2 * 3 * 5)	; 9 words to store vera bitmaps address
00182F  2               .endstruct
00182F  2               
00182F  2               .macro m_status value
00182F  2               	lda #(value)
00182F  2               	sta player0 + PLAYER::entity + Entity::status
00182F  2               .endmacro
00182F  2               
00182F  2               .scope Player
00182F  2               
00182F  2               .macro SET_SPRITE id, frameval
00182F  2               	lda #id
00182F  2               	sta player0 + PLAYER::frameID
00182F  2               	lda #frameval
00182F  2               	sta player0 + PLAYER::frame
00182F  2               	jsr set_bitmap
00182F  2               .endmacro
00182F  2               
00182F  2               ;************************************************
00182F  2               ; player sprites status
00182F  2               ;
00182F  2               .enum Sprites
00182F  2               	FRONT = 0
00182F  2               	LEFT = FRONT + PNG_SPRITES_COLUMNS
00182F  2               	CLIMB = LEFT + PNG_SPRITES_COLUMNS
00182F  2               	HANG = CLIMB + PNG_SPRITES_COLUMNS
00182F  2               	PUSH = HANG + PNG_SPRITES_COLUMNS
00182F  2               .endenum
00182F  2               
00182F  2               WIDTH = 16
00182F  2               HEIGHT = 32
00182F  2               
00182F  2               ;************************************************
00182F  2               ; local variables
00182F  2               ;
00182F  2               
00182F  2  00           ladders: .byte 0
001830  2  00           test_right_left: .byte 0
001831  2               
001831  2               ;************************************************
001831  2               ; init the player data
001831  2               ;
001831  2               init:
001831  2  A2 00        	ldx #00
001833  2  A9 86        	lda #<player0
001835  2  85 08        	sta r3L
001837  2  A0 20        	ldy #>player0
001839  2  84 09        	sty r3H
00183B  2  20 29 11     	jsr Entities::register
00183E  2               
00183E  2  20 4B 11     	jsr Entities::init
001841  2               
001841  2  A9 0A        	lda #10
001843  2  A0 10        	ldy #PLAYER::animation_tick
001845  2  91 08        	sta (r3), y
001847  2  A9 03        	lda #Player::Sprites::LEFT
001849  2  A0 11        	ldy #PLAYER::frameID
00184B  2  91 08        	sta (r3), y
00184D  2  A9 00        	lda #00
00184F  2  A0 12        	ldy #PLAYER::frame
001851  2  91 08        	sta (r3), y
001853  2  A9 01        	lda #1
001855  2  A0 13        	ldy #PLAYER::frameDirection
001857  2  91 08        	sta (r3), y
001859  2  A9 00        	lda #00
00185B  2  A0 14        	ldy #PLAYER::flip
00185D  2  91 08        	sta (r3), y
00185F  2               
00185F  2               	; player sprite is 32x32, but collision box is 16x32
00185F  2  A0 09        	ldy #Entity::bWidth
001861  2  A9 10        	lda #Player::WIDTH
001863  2  91 08        	sta (r3), y
001865  2  A0 0A        	ldy #Entity::bHeight
001867  2  A9 20        	lda #Player::HEIGHT
001869  2  91 08        	sta (r3), y
00186B  2               
00186B  2               	; player collision box is shifted by (8,0) pixels compared to sprite top-left corner
00186B  2  A9 08        	lda #08
00186D  2  A0 0C        	ldy #Entity::bXOffset
00186F  2  91 08        	sta (r3), y
001871  2  A9 00        	lda #00
001873  2  A0 0D        	ldy #Entity::bYOffset
001875  2  91 08        	sta (r3), y
001877  2               
001877  2               	; load sprites data at the end of the tiles
001877  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (::VRAM_tiles + tiles * tile_size)
00187B  2  A0 00 20 BA  
00187F  2  FF A9 0B A2  
001898  2               
001898  2  AD 9D 20     	lda player0 + PLAYER::vera_bitmaps
00189B  2  85 02        	sta r0L
00189D  2  AD 9E 20     	lda player0 + PLAYER::vera_bitmaps+1
0018A0  2  85 03        	sta r0H
0018A2  2               
0018A2  2  B2 08        	lda (r3)
0018A4  2  A8           	tay
0018A5  2  A9 10        	lda #%00010000					; collision mask 1
0018A7  2  A2 A0        	ldx #%10100000					; 32x32 sprite
0018A9  2  20 FB 0C     	jsr Sprite::load
0018AC  2               
0018AC  2  A9 08        	lda #08
0018AE  2  85 02        	sta r0L
0018B0  2  A9 00        	lda #00
0018B2  2  85 03        	sta r0H
0018B4  2  A9 0F        	lda #15
0018B6  2  85 04        	sta r1L
0018B8  2  A9 1F        	lda #31
0018BA  2  85 05        	sta r1H
0018BC  2               
0018BC  2  B2 08        	lda (r3)
0018BE  2  A8           	tay
0018BF  2  20 43 0D     	jsr Sprite::set_aabb			; collision box (8,0) -> (24, 32)
0018C2  2               
0018C2  2               	; turn sprite 0 on
0018C2  2  B2 08        	lda (r3)
0018C4  2  A8           	tay
0018C5  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0018C7  2  20 86 0D     	jsr Sprite::display
0018CA  2               
0018CA  2               	; register the vera simplified memory 12:5
0018CA  2  A0 0F        	ldy #(PNG_SPRITES_COLUMNS * PNG_SPRITES_LINES)
0018CC  2  84 50        	sty PLAYER_ZP
0018CE  2  A0 17        	ldy #PLAYER::vera_bitmaps
0018D0  2  A9 00 85 04  	LOAD_r1 (::VRAM_tiles + tiles * tile_size)
0018D4  2  A9 40 85 05  
0018D8  2               
0018D8  2               @loop:
0018D8  2               	; load full VERA memory (12:0) into R0
0018D8  2  A5 04        	lda r1L
0018DA  2  85 02        	sta r0L
0018DC  2  A5 05        	lda r1H
0018DE  2  85 03        	sta r0H
0018E0  2               
0018E0  2               	; convert full addr to vera mode (bit shiting >> 5)
0018E0  2  A5 03        	lda r0H
0018E2  2  4A           	lsr
0018E3  2  66 02        	ror r0L
0018E5  2  4A           	lsr
0018E6  2  66 02        	ror r0L
0018E8  2  4A           	lsr
0018E9  2  66 02        	ror r0L
0018EB  2  4A           	lsr
0018EC  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0018EE  2  4A           	lsr
0018EF  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0018F1  2               
0018F1  2               	; store 12:5 into our cache
0018F1  2  91 08        	sta (r3), y
0018F3  2  C8           	iny
0018F4  2  A5 02        	lda r0L
0018F6  2  91 08        	sta (r3), y
0018F8  2  C8           	iny
0018F9  2               
0018F9  2               	; increase the vram (+4 r1H = +1024 r1)
0018F9  2  18           	clc
0018FA  2  A5 05        	lda r1H
0018FC  2  69 04        	adc #4
0018FE  2  85 05        	sta r1H
001900  2               
001900  2  C6 50        	dec PLAYER_ZP
001902  2  D0 D4        	bne @loop
001904  2               
001904  2               	; set first bitmap
001904  2  20 08 19     	jsr set_bitmap
001907  2  60           	rts
001908  2               
001908  2               ;************************************************
001908  2               ; change the player bitmap
001908  2               ;
001908  2               set_bitmap:
001908  2  18           	clc
001909  2  AD 98 20     	lda player0 + PLAYER::frame
00190C  2  6D 97 20     	adc player0 + PLAYER::frameID
00190F  2  0A           	asl						; convert sprite index to work position
001910  2  AA           	tax
001911  2               
001911  2               	; extract the vera bitmap address in vera format (12:5 bits)
001911  2  BD 9D 20     	lda player0 + PLAYER::vera_bitmaps, x
001914  2  85 03        	sta r0H
001916  2  BD 9E 20     	lda player0 + PLAYER::vera_bitmaps + 1, x
001919  2  85 02        	sta r0L
00191B  2               
00191B  2  AC 86 20     	ldy player0 + PLAYER::entity + Entity::spriteID
00191E  2  20 74 0D     	jsr Sprite::set_bitmap
001921  2  60           	rts
001922  2               
001922  2               ;************************************************
001922  2               ; move layers if the player sprite reached the screen boundaries
001922  2               ;
001922  2               check_scroll_layers:
001922  2               	; distance from layer border to sprite absolute position
001922  2  38           	sec
001923  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001926  2  E5 55        	sbc Layers::wHScroll
001928  2  85 02        	sta r0L
00192A  2  AD 89 20     	lda player0 + PLAYER::entity + Entity::levelx + 1
00192D  2  E5 56        	sbc Layers::wHScroll + 1
00192F  2  85 03        	sta r0H									; r0 = dx = level.x - layer.x
001931  2               
001931  2  D0 26        	bne @check_right						; dx > 256, no need to check left
001933  2               @check_left:
001933  2  A5 02        	lda r0L
001935  2  C9 40        	cmp #64
001937  2  B0 20        	bcs @check_right						; dx > 96 and dx < 256, no need to check left
001939  2               	; are we on far left of the layer ?
001939  2  A5 56        	lda Layers::wHScroll + 1
00193B  2  D0 04        	bne @scroll_layer_left					; H_SCROLL > 256, scroll layer
00193D  2  A5 55        	lda Layers::wHScroll
00193F  2  F0 0F        	beq @set_x_0							; H_SCROLL == 0 => NO horizontal scroll
001941  2               @scroll_layer_left:
001941  2  38           	sec
001942  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001945  2  E9 40        	sbc #64
001947  2  AA           	tax
001948  2  AD 89 20     	lda player0 + PLAYER::entity + Entity::levelx + 1
00194B  2  E9 00        	sbc #00
00194D  2  A8           	tay
00194E  2  80 04        	bra @fix_layer_0_x
001950  2               @set_x_0:
001950  2  A2 00        	ldx #00
001952  2  A0 00        	ldy #00
001954  2               @fix_layer_0_x:
001954  2  20 7E 17     	jsr Layers::set_x
001957  2  80 21        	bra @check_top
001959  2               
001959  2               @check_right:
001959  2  A5 02        	lda r0L
00195B  2  C9 F1        	cmp #<(SCREEN_WIDTH - 63 - Player::WIDTH)		; remove the width of the sprite
00195D  2  90 1B        	bcc @check_top							; dx < 320 - 96, no need to check right
00195F  2               	; are we on far right of the layer ?
00195F  2  A5 55        	lda Layers::wHScroll
001961  2  C9 BF        	cmp #(32*16-320 - 1)
001963  2  B0 0F        	bcs @set_x_max							; H_SCROLL > 192 (512 - 320) => force max
001965  2               
001965  2  38           	sec
001966  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001969  2  E9 F0        	sbc #<(320 - 64 - Player::WIDTH)
00196B  2  AA           	tax
00196C  2  AD 89 20     	lda player0 + PLAYER::entity + Entity::levelx + 1
00196F  2  E9 00        	sbc #>(320 - 64 - Player::WIDTH)
001971  2  A8           	tay
001972  2  80 E0        	bra @fix_layer_0_x
001974  2               @set_x_max:
001974  2  A2 C0        	ldx #<(32*16-320)
001976  2  A0 00        	ldy #>(32*16-320)
001978  2  80 DA        	bra @fix_layer_0_x
00197A  2               
00197A  2               @check_top:
00197A  2               	; distance from layer border to sprite absolute position
00197A  2  38           	sec
00197B  2  AD 8A 20     	lda player0 + PLAYER::entity + Entity::levely
00197E  2  E5 57        	sbc Layers::wVScroll
001980  2  85 02        	sta r0L
001982  2  AD 8B 20     	lda player0 + PLAYER::entity + Entity::levely + 1
001985  2  E5 58        	sbc Layers::wVScroll + 1
001987  2  85 03        	sta r0H									; r0 = dy = level.y - layer.y
001989  2               
001989  2  D0 25        	bne @check_bottom						; dy > 256, no need to check top
00198B  2               @check_top_1:
00198B  2  A5 02        	lda r0L
00198D  2  C9 20        	cmp #Player::HEIGHT
00198F  2  B0 1F        	bcs @check_bottom						; dy > 96 and dy < 256, check bottom
001991  2               @move_y:
001991  2               	; are we on far top of the layer ?
001991  2  A5 58        	lda Layers::wVScroll + 1
001993  2  D0 04        	bne @scroll_layer_top					; V_SCROLL > 256, scroll layer
001995  2  A5 57        	lda Layers::wVScroll
001997  2  F0 0F        	beq @set_y_0							; V_SCROLL == 0 => NO vertical scroll
001999  2               @scroll_layer_top:
001999  2  38           	sec
00199A  2  AD 8A 20     	lda player0 + PLAYER::entity + Entity::levely
00199D  2  E9 20        	sbc #Player::HEIGHT
00199F  2  AA           	tax
0019A0  2  AD 8B 20     	lda player0 + PLAYER::entity + Entity::levely + 1
0019A3  2  E9 00        	sbc #00
0019A5  2  A8           	tay
0019A6  2  80 04        	bra @fix_layer_0_y
0019A8  2               @set_y_0:
0019A8  2  A2 00        	ldx #00
0019AA  2  A0 00        	ldy #00
0019AC  2               @fix_layer_0_y:
0019AC  2  20 96 17     	jsr Layers::set_y
0019AF  2  60           	rts
0019B0  2               
0019B0  2               @check_bottom:
0019B0  2  A5 02        	lda r0L
0019B2  2  C9 B0        	cmp #<(240 - Player::HEIGHT * 2)
0019B4  2  B0 01        	bcs @scroll_bottom
0019B6  2  60           	rts										; dy < 144, no need to check vertical
0019B7  2               @scroll_bottom:
0019B7  2               	; are we on far bottom of the layer ?
0019B7  2  A5 58        	lda Layers::wVScroll + 1
0019B9  2  F0 06        	beq @scroll_layer_bottom				; V_SCROLL < 256, scroll layer
0019BB  2  A5 57        	lda Layers::wVScroll
0019BD  2  C9 0F        	cmp #<(32*16-240 - 1)
0019BF  2  B0 0F        	bcs @set_y_max							; V_SCROLL == 512-240 => NO vertical scroll
0019C1  2               @scroll_layer_bottom:
0019C1  2  38           	sec
0019C2  2  AD 8A 20     	lda player0 + PLAYER::entity + Entity::levely
0019C5  2  E9 B0        	sbc #<(240 - Player::HEIGHT*2)
0019C7  2  AA           	tax
0019C8  2  AD 8B 20     	lda player0 + PLAYER::entity + Entity::levely + 1
0019CB  2  E9 00        	sbc #>(240 - Player::HEIGHT*2)
0019CD  2  A8           	tay
0019CE  2  80 DC        	bra @fix_layer_0_y
0019D0  2               @set_y_max:
0019D0  2  A2 10        	ldx #<(32*16-240)
0019D2  2  A0 01        	ldy #>(32*16-240)
0019D4  2  80 D6        	bra @fix_layer_0_y
0019D6  2               
0019D6  2               ;************************************************
0019D6  2               ; hide the current sprite
0019D6  2               ;
0019D6  2               hide1:
0019D6  2  DB           	stp
0019D7  2  18           	clc
0019D8  2  AD 98 20     	lda player0 + PLAYER::frame
0019DB  2  6D 97 20     	adc player0 + PLAYER::frameID
0019DE  2  A8           	tay		; sprite index
0019DF  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
0019E1  2  20 86 0D     	jsr Sprite::display			; turn current sprite off
0019E4  2  60           	rts
0019E5  2               
0019E5  2               ;************************************************
0019E5  2               ; Animate the player if needed
0019E5  2               ;
0019E5  2               animate:
0019E5  2  AD 87 20     	lda player0 + PLAYER::entity + Entity::status
0019E8  2  C9 00        	cmp #STATUS_WALKING_IDLE
0019EA  2  F0 37        	beq @end
0019EC  2  C9 04        	cmp #STATUS_FALLING
0019EE  2  F0 33        	beq @end
0019F0  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
0019F2  2  F0 2F        	beq @end
0019F4  2               
0019F4  2  CE 96 20     	dec player0 + PLAYER::animation_tick
0019F7  2  D0 2A        	bne @end
0019F9  2               
0019F9  2  A9 0A        	lda #10
0019FB  2  8D 96 20     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
0019FE  2               
0019FE  2  18           	clc
0019FF  2  AD 98 20     	lda player0 + PLAYER::frame
001A02  2  6D 99 20     	adc player0 + PLAYER::frameDirection
001A05  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
001A07  2  C9 03        	cmp #3
001A09  2  F0 0B        	beq @set_sprite_anim_decrease
001A0B  2  80 10        	bra @set_sprite_on
001A0D  2               @set_sprite_anim_increase:
001A0D  2  A9 01        	lda #01
001A0F  2  8D 99 20     	sta player0 + PLAYER::frameDirection
001A12  2  A9 00        	lda #0
001A14  2  80 07        	bra @set_sprite_on
001A16  2               @set_sprite_anim_decrease:
001A16  2  A9 FF        	lda #$ff
001A18  2  8D 99 20     	sta player0 + PLAYER::frameDirection
001A1B  2  A9 02        	lda #2
001A1D  2               @set_sprite_on:
001A1D  2  8D 98 20     	sta player0 + PLAYER::frame	; turn next sprite on
001A20  2  20 08 19     	jsr Player::set_bitmap
001A23  2               @end:
001A23  2  60           	rts
001A24  2               
001A24  2               ;************************************************
001A24  2               ; force player status to be idle
001A24  2               ;
001A24  2               set_idle:
001A24  2  AD 87 20     	lda player0 + PLAYER::entity + Entity::status
001A27  2  C9 01        	cmp #STATUS_WALKING
001A29  2  F0 06        	beq @set_idle_walking
001A2B  2  C9 02        	cmp #STATUS_CLIMBING
001A2D  2  F0 08        	beq @set_idle_climbing
001A2F  2  60           	rts							; keep the current value
001A30  2               @set_idle_jump:
001A30  2  60           	rts
001A31  2               @set_idle_walking:
001A31  2  A9 00 8D 87  	m_status STATUS_WALKING_IDLE
001A35  2  20           
001A36  2  60           	rts
001A37  2               @set_idle_climbing:
001A37  2  A9 03 8D 87  	m_status STATUS_CLIMBING_IDLE
001A3B  2  20           
001A3C  2  60           	rts
001A3D  2               
001A3D  2               ;************************************************
001A3D  2               ; status to ignore while moving
001A3D  2               ;
001A3D  2               ignore_move_request:
001A3D  2  00           	.byte	00	;	STATUS_WALKING_IDLE
001A3E  2  00           	.byte	00	;	STATUS_WALKING
001A3F  2  02           	.byte	02	;	STATUS_CLIMBING
001A40  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
001A41  2  01           	.byte	01	;	STATUS_FALLING
001A42  2  01           	.byte	01	;	STATUS_JUMPING
001A43  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
001A44  2               
001A44  2               ;************************************************
001A44  2               ; Try to move player to the right, walk up if facing a slope
001A44  2               ;
001A44  2               move_right:
001A44  2               	; r3 = *player
001A44  2  A9 86        	lda #<player0
001A46  2  85 08        	sta r3L
001A48  2  A9 20        	lda #>player0
001A4A  2  85 09        	sta r3H
001A4C  2               
001A4C  2               	; cannot move if we are at the border
001A4C  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001A4F  2  AE 89 20     	ldx player0 + PLAYER::entity + Entity::levelx + 1
001A52  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
001A54  2  D0 05        	bne @not_border
001A56  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
001A58  2  D0 01        	bne @not_border					; we are at the level limit
001A5A  2               @return2:
001A5A  2  60           	rts
001A5B  2               
001A5B  2               @not_border:
001A5B  2  AC 87 20     	ldy player0 + PLAYER::entity + Entity::status
001A5E  2  B9 3D 1A     	lda ignore_move_request, y
001A61  2  F0 07        	beq @walk_right					; if 0 => can move
001A63  2  C9 02        	cmp #02
001A65  2  D0 F3        	bne @return2				; if 2 => has to climb
001A67  2  4C E7 1A     	jmp @climb_right					; else block the move
001A6A  2               
001A6A  2               @walk_right:
001A6A  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001A6D  2  85 02        	sta r0L
001A6F  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001A72  2  85 03        	sta r0H
001A74  2               
001A74  2  20 98 14     	jsr Entities::if_on_slop
001A77  2  D0 05        	bne @no_collision
001A79  2               
001A79  2  20 5B 13     	jsr Entities::check_collision_right
001A7C  2  D0 68        	bne @return1					; block is collision on the right  and there is no slope on the right
001A7E  2               
001A7E  2               @no_collision:
001A7E  2  A9 01        	lda #01
001A80  2  8D 8E 20     	sta player0 + PLAYER::entity + Entity::delta_x
001A83  2               
001A83  2               @set_walking_sprite:
001A83  2  A9 01        	lda #SPRITE_FLIP_H
001A85  2  8D 9A 20     	sta player0 + PLAYER::flip
001A88  2  AC 86 20     	ldy player0 + PLAYER::entity + Entity::spriteID
001A8B  2  20 34 0E     	jsr Sprite::set_flip				; force sprite to look right
001A8E  2               
001A8E  2  A9 01 8D 87  	m_status STATUS_WALKING
001A92  2  20           
001A93  2               
001A93  2               	;change player sprite
001A93  2  A9 03        	lda #Player::Sprites::LEFT
001A95  2  CD 97 20     	cmp player0 + PLAYER::frameID
001A98  2  F0 08        	beq @move_x
001A9A  2               
001A9A  2  A9 03        	lda #Player::Sprites::LEFT
001A9C  2  8D 97 20     	sta player0 + PLAYER::frameID
001A9F  2  20 08 19     	jsr set_bitmap
001AA2  2               
001AA2  2               @move_x:
001AA2  2  20 47 12     	jsr Entities::position_x_inc		; move the player in the level, and the screen layers and sprite
001AA5  2               
001AA5  2               	; if sitting on a slop
001AA5  2  A5 6C        	lda bPlayerOnSlop
001AA7  2  D0 08        	bne @move_slop
001AA9  2               
001AA9  2               	; TODO ///////////////////////
001AA9  2  20 B9 11     	jsr Entities::get_collision_map
001AAC  2  20 63 14     	jsr Entities::if_above_slop			; check if NOW were are above a slope
001AAF  2  F0 2D        	beq @set_position
001AB1  2               	; TODO \\\\\\\\\\\\\\\\\\\\\\\\\\
001AB1  2               
001AB1  2               @move_slop:
001AB1  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001AB3  2  F0 26        	beq @move_y_up
001AB5  2               @try_move_y_dow:
001AB5  2  AD 8A 20     	lda player0 + PLAYER::entity + Entity::levely
001AB8  2  29 0F        	and #%00001111
001ABA  2  D0 1A        	bne @move_y_down
001ABC  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001ABF  2  85 02        	sta r0L
001AC1  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001AC4  2  85 03        	sta r0H
001AC6  2  A5 06        	lda r2L
001AC8  2  18           	clc
001AC9  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
001ACB  2  A8           	tay
001ACC  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
001ACE  2  A8           	tay
001ACF  2  B9 7C 1F     	lda tiles_attributes,y
001AD2  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001AD4  2  D0 77        	bne @return							; do not change Y if the tile below the player is a solid one
001AD6  2               @move_y_down:
001AD6  2  20 79 12     	jsr Entities::position_y_inc
001AD9  2  80 03        	bra @set_position
001ADB  2               @move_y_up:
001ADB  2  20 91 12     	jsr Entities::position_y_dec
001ADE  2               
001ADE  2               @set_position:
001ADE  2               	;TODO ///////////////////////
001ADE  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001AE1  2  09 01        	ora #(EntityFlags::physics)
001AE3  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001AE6  2               	;TODO ///////////////////////
001AE6  2               @return1:
001AE6  2  60           	rts
001AE7  2               
001AE7  2               @climb_right:
001AE7  2  20 5B 13     	jsr Entities::check_collision_right
001AEA  2  F0 05        	beq @climb_right_1
001AEC  2  C9 04        	cmp #TILE_SOLID_LADER
001AEE  2  F0 01        	beq @climb_right_1
001AF0  2  60           	rts
001AF1  2               @climb_right_1:
001AF1  2  20 AB 12     	jsr Entities::bbox_coverage
001AF4  2               
001AF4  2  A2 01        	ldx #01
001AF6  2  A0 00        	ldy #00
001AF8  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001AFB  2  29 0F        	and #%00001111
001AFD  2  F0 01        	beq @get_tile
001AFF  2  E8           	inx								; if x%8 <> 0, test 2 tiles
001B00  2               @get_tile:
001B00  2  B1 02        	lda (r0),y
001B02  2  F0 0E        	beq @no_grab					; no tile on right
001B04  2  85 31        	sta $31
001B06  2  84 30        	sty $30
001B08  2  A8           	tay
001B09  2  B9 7C 1F     	lda tiles_attributes,y
001B0C  2  89 08        	bit #TILE_ATTR::GRABBING
001B0E  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
001B10  2  A4 30        	ldy $30
001B12  2               @no_grab:							; test the tile on the right on next line
001B12  2  C8           	iny
001B13  2  CA           	dex
001B14  2  D0 EA        	bne @get_tile
001B16  2  80 23        	bra @climb_right_drop			; no grab tile on the right of the player
001B18  2               @climb_right_2:
001B18  2  A5 31        	lda $31							; tile index with grab attribute
001B1A  2  C9 05        	cmp #TILE_LEDGE
001B1C  2  D0 04        	bne @set_climb_sprite
001B1E  2               @set_hang_sprite:
001B1E  2  A9 09        	lda #Player::Sprites::HANG
001B20  2  80 02        	bra @next
001B22  2               @set_climb_sprite:
001B22  2  A9 06        	lda #Player::Sprites::CLIMB
001B24  2               @next:
001B24  2  8D 97 20     	sta player0 + PLAYER::frameID
001B27  2  20 08 19     	jsr set_bitmap
001B2A  2  A9 02 8D 87  	m_status STATUS_CLIMBING
001B2E  2  20           
001B2F  2  20 47 12     	jsr Entities::position_x_inc		; move the player sprite, if the
001B32  2               	;TODO ///////////////////////
001B32  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags
001B35  2  09 01        	ora #(EntityFlags::physics)
001B37  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001B3A  2               	;TODO ///////////////////////
001B3A  2  60           	rts
001B3B  2               @climb_right_drop:
001B3B  2  A9 01 8D 87  	m_status STATUS_WALKING
001B3F  2  20           
001B40  2  A9 03 8D 97  	SET_SPRITE Player::Sprites::LEFT, 1
001B44  2  20 A9 01 8D  
001B48  2  98 20 20 08  
001B4D  2               
001B4D  2               @return:
001B4D  2  60           	rts
001B4E  2               
001B4E  2               ;************************************************
001B4E  2               ; try to move the player to the left
001B4E  2               ;
001B4E  2               move_left:
001B4E  2               	; r3 = *player
001B4E  2  A9 86        	lda #<player0
001B50  2  85 08        	sta r3L
001B52  2  A9 20        	lda #>player0
001B54  2  85 09        	sta r3H
001B56  2               
001B56  2               	; cannot move if we are at the left border
001B56  2  AE 89 20     	ldx player0 + PLAYER::entity + Entity::levelx + 1
001B59  2  D0 06        	bne @not_border
001B5B  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001B5E  2  D0 01        	bne @not_border
001B60  2               @return1:
001B60  2  60           	rts
001B61  2               
001B61  2               @not_border:
001B61  2               	; cannot move if we are in frozen status
001B61  2  AC 87 20     	ldy player0 + PLAYER::entity + Entity::status
001B64  2  B9 3D 1A     	lda ignore_move_request, y
001B67  2  F0 07        	beq @walk_left					; if 0 => can move
001B69  2  C9 02        	cmp #02
001B6B  2  D0 F3        	bne @return1				; if 2 => has to climb
001B6D  2  4C ED 1B     	jmp @climb_left				; else block the move
001B70  2               
001B70  2               @walk_left:
001B70  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001B73  2  85 02        	sta r0L
001B75  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001B78  2  85 03        	sta r0H
001B7A  2               
001B7A  2  20 98 14     	jsr Entities::if_on_slop
001B7D  2  D0 05        	bne @no_collision				; ignore right collision left if on a slope
001B7F  2               
001B7F  2  20 8B 13     	jsr Entities::check_collision_left
001B82  2  D0 68        	bne @return						; block is collision on the right  and there is no slope on the right
001B84  2               
001B84  2               @no_collision:
001B84  2  A9 FF        	lda #$ff
001B86  2  8D 8E 20     	sta player0 + PLAYER::entity + Entity::delta_x
001B89  2               
001B89  2               @set_walking_sprite:
001B89  2  A9 00        	lda #SPRITE_FLIP_NONE
001B8B  2  8D 9A 20     	sta player0 + PLAYER::flip
001B8E  2  AC 86 20     	ldy player0 + PLAYER::entity + Entity::spriteID
001B91  2  20 34 0E     	jsr Sprite::set_flip				; force sprite to loop right
001B94  2               
001B94  2  A9 01 8D 87  	m_status STATUS_WALKING
001B98  2  20           
001B99  2               
001B99  2  A9 03        	lda #Player::Sprites::LEFT
001B9B  2  CD 97 20     	cmp player0 + PLAYER::frameID
001B9E  2  F0 08        	beq @move_x
001BA0  2               
001BA0  2               	;change player sprite
001BA0  2  A9 03        	lda #Player::Sprites::LEFT
001BA2  2  8D 97 20     	sta player0 + PLAYER::frameID
001BA5  2  20 08 19     	jsr set_bitmap
001BA8  2               
001BA8  2               @move_x:
001BA8  2  20 5F 12     	jsr Entities::position_x_dec
001BAB  2  A5 6C        	lda bPlayerOnSlop				; if walking a slop also increase Y
001BAD  2  D0 08        	bne @move_slop
001BAF  2               
001BAF  2               	; TODO ///////////////////////
001BAF  2  20 B9 11     	jsr Entities::get_collision_map
001BB2  2  20 63 14     	jsr Entities::if_above_slop			; check if NOW were are above a slope
001BB5  2  F0 2D        	beq @set_position
001BB7  2               	; TODO \\\\\\\\\\\\\\\\\\\\\\\\\\
001BB7  2               
001BB7  2               @move_slop:
001BB7  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001BB9  2  F0 26        	beq @move_y_up
001BBB  2               @try_move_y_dow:
001BBB  2  AD 8A 20     	lda player0 + PLAYER::entity + Entity::levely
001BBE  2  29 0F        	and #%00001111
001BC0  2  D0 1A        	bne @move_y_down
001BC2  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001BC5  2  85 02        	sta r0L
001BC7  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001BCA  2  85 03        	sta r0H
001BCC  2  A5 06        	lda r2L
001BCE  2  18           	clc
001BCF  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
001BD1  2  A8           	tay
001BD2  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
001BD4  2  A8           	tay
001BD5  2  B9 7C 1F     	lda tiles_attributes,y
001BD8  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001BDA  2  D0 08        	bne @set_position					; do not change Y if the tile below the player is a solid one
001BDC  2               @move_y_down:
001BDC  2  20 79 12     	jsr Entities::position_y_inc
001BDF  2  80 03        	bra @set_position
001BE1  2               @move_y_up:
001BE1  2  20 91 12     	jsr Entities::position_y_dec
001BE4  2               
001BE4  2               @set_position:
001BE4  2               	;TODO ///////////////////////
001BE4  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001BE7  2  09 01        	ora #(EntityFlags::physics)
001BE9  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001BEC  2               	;TODO ///////////////////////
001BEC  2               
001BEC  2               @return:
001BEC  2  60           	rts
001BED  2               
001BED  2               @climb_left:
001BED  2  20 8B 13     	jsr Entities::check_collision_left
001BF0  2  F0 01        	beq @climb_left_1
001BF2  2  60           	rts								; collision on left, block the move
001BF3  2               @climb_left_1:
001BF3  2  20 AB 12     	jsr Entities::bbox_coverage				; what tiles is the player covering
001BF6  2               
001BF6  2  A2 01        	ldx #01
001BF8  2  A0 00        	ldy #00
001BFA  2  AD 88 20     	lda player0 + PLAYER::entity + Entity::levelx
001BFD  2  29 0F        	and #%00001111
001BFF  2  F0 01        	beq @get_tile
001C01  2  E8           	inx								; if x%8 <> 0, test 2 tiles
001C02  2               @get_tile:
001C02  2  B1 02        	lda (r0),y
001C04  2  F0 0E        	beq @no_grab					; no tile on right
001C06  2  85 31        	sta $31
001C08  2  84 30        	sty $30
001C0A  2  A8           	tay
001C0B  2  B9 7C 1F     	lda tiles_attributes,y
001C0E  2  89 08        	bit #TILE_ATTR::GRABBING
001C10  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
001C12  2  A4 30        	ldy $30
001C14  2               @no_grab:							; test the tile on the left on next line
001C14  2  C8           	iny
001C15  2  CA           	dex
001C16  2  D0 EA        	bne @get_tile
001C18  2  80 23        	bra @climb_left_drop			; no grab tile on the right of the player
001C1A  2               @climb_left_2:
001C1A  2  A5 31        	lda $31							; tile index with grab attribute
001C1C  2  C9 05        	cmp #TILE_LEDGE
001C1E  2  D0 04        	bne @set_climb_sprite
001C20  2               @set_hang_sprite:
001C20  2  A9 09        	lda #Player::Sprites::HANG
001C22  2  80 02        	bra @next
001C24  2               @set_climb_sprite:
001C24  2  A9 06        	lda #Player::Sprites::CLIMB
001C26  2               @next:
001C26  2  8D 97 20     	sta player0 + PLAYER::frameID
001C29  2  20 08 19     	jsr set_bitmap
001C2C  2  A9 02 8D 87  	m_status STATUS_CLIMBING
001C30  2  20           
001C31  2  20 5F 12     	jsr Entities::position_x_dec		; move the player sprite, if the
001C34  2               	;TODO ///////////////////////
001C34  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001C37  2  09 01        	ora #(EntityFlags::physics)
001C39  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001C3C  2               	;TODO ///////////////////////
001C3C  2  60           	rts
001C3D  2               @climb_left_drop:					; no ladder to stick to
001C3D  2  A9 01 8D 87  	m_status STATUS_WALKING
001C41  2  20           
001C42  2  A9 03 8D 97  	SET_SPRITE Player::Sprites::LEFT, 1
001C46  2  20 A9 01 8D  
001C4A  2  98 20 20 08  
001C4F  2  60           	rts
001C50  2               
001C50  2               ;************************************************
001C50  2               ; try to move the player down (crouch, hide, move down a ladder)
001C50  2               ;
001C50  2               move_down:
001C50  2               	; r3 = *player
001C50  2  A9 86        	lda #<player0
001C52  2  85 08        	sta r3L
001C54  2  A9 20        	lda #>player0
001C56  2  85 09        	sta r3H
001C58  2               
001C58  2  AD 87 20     	lda player0 + PLAYER::entity + Entity::status
001C5B  2  C9 04        	cmp #STATUS_FALLING
001C5D  2  D0 01        	bne @try_move_down						; cannot move when falling
001C5F  2  60           	rts
001C60  2               
001C60  2               @try_move_down:
001C60  2               	; custom collision down
001C60  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001C63  2  85 02        	sta r0L
001C65  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001C68  2  85 03        	sta r0H
001C6A  2               
001C6A  2  20 AB 12     	jsr Entities::bbox_coverage
001C6D  2  8E 2F 18     	stx ladders						; width of the player in tiles = number of ladders to find below
001C70  2  A5 06        	lda r2L
001C72  2  18           	clc
001C73  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001C75  2  A8           	tay
001C76  2               
001C76  2               @test_colum:
001C76  2  B1 02        	lda (r0L),y
001C78  2  C9 04        	cmp #TILE_SOLID_LADER
001C7A  2  D0 05        	bne @check_solid_ground
001C7C  2               @ladder_down:
001C7C  2  CE 2F 18     	dec ladders
001C7F  2  80 0C        	bra @next_column
001C81  2               @check_solid_ground:
001C81  2  84 30        	sty $30
001C83  2  A8           	tay
001C84  2  B9 7C 1F     	lda tiles_attributes,y
001C87  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001C89  2  D0 4A        	bne @cannot_move_down
001C8B  2  A4 30        	ldy $30
001C8D  2               @next_column:
001C8D  2  CA           	dex
001C8E  2  F0 03        	beq @end
001C90  2  C8           	iny
001C91  2  80 E3        	bra @test_colum
001C93  2               @end:
001C93  2               
001C93  2  AD 2F 18     	lda ladders
001C96  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
001C98  2               
001C98  2               	; if there player is covering ANY ladders (accros the boundingbox)
001C98  2  A4 06        	ldy r2L
001C9A  2               @check_line:							; already climbing down is player grabbing no ladder
001C9A  2  A6 05        	ldx r1H
001C9C  2               @check_row:
001C9C  2  B1 02        	lda (r0L),y
001C9E  2  C9 04        	cmp #TILE_SOLID_LADER
001CA0  2  F0 12        	beq @move_down
001CA2  2  C8           	iny
001CA3  2  CA           	dex
001CA4  2  D0 F6        	bne @check_row
001CA6  2  C6 04        	dec r1L
001CA8  2  F0 2B        	beq @cannot_move_down
001CAA  2               
001CAA  2  98           	tya
001CAB  2  18           	clc
001CAC  2  69 20        	adc #LEVEL_TILES_WIDTH
001CAE  2  38           	sec
001CAF  2  E5 05        	sbc r1H
001CB1  2  A8           	tay
001CB2  2  80 E6        	bra @check_line
001CB4  2               
001CB4  2               @move_down:
001CB4  2  20 79 12     	jsr Entities::position_y_inc		; move down the ladder
001CB7  2               	;TODO ///////////////////////
001CB7  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001CBA  2  09 01        	ora #(EntityFlags::physics)
001CBC  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001CBF  2               	;TODO ///////////////////////
001CBF  2               
001CBF  2  A9 02 8D 87  	m_status STATUS_CLIMBING
001CC3  2  20           
001CC4  2               
001CC4  2  A9 06        	lda #Player::Sprites::CLIMB
001CC6  2  CD 97 20     	cmp player0 + PLAYER::frameID
001CC9  2  D0 01        	bne @change_sprite
001CCB  2  60           	rts
001CCC  2               
001CCC  2               @change_sprite:
001CCC  2               	;change player sprite
001CCC  2  A9 06        	lda #Player::Sprites::CLIMB
001CCE  2  8D 97 20     	sta player0 + PLAYER::frameID
001CD1  2  20 08 19     	jsr set_bitmap
001CD4  2  60           	rts
001CD5  2               
001CD5  2               @cannot_move_down:
001CD5  2  A9 00        	lda #STATUS_WALKING_IDLE
001CD7  2  8D 87 20     	sta player0 + PLAYER::entity + Entity::status
001CDA  2  A9 01        	lda #01
001CDC  2  8D 98 20     	sta player0 + PLAYER::frame
001CDF  2  20 08 19     	jsr set_bitmap
001CE2  2  9C 8E 20     	stz player0 + PLAYER::entity + Entity::delta_x
001CE5  2  60           	rts
001CE6  2               
001CE6  2               ;************************************************
001CE6  2               ; try to move the player up (move up a ladder)
001CE6  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
001CE6  2               ;	modify: r0, r1, r2
001CE6  2               ;
001CE6  2               move_up:
001CE6  2               	; r3 = *player
001CE6  2  A9 86        	lda #<player0
001CE8  2  85 08        	sta r3L
001CEA  2  A9 20        	lda #>player0
001CEC  2  85 09        	sta r3H
001CEE  2               
001CEE  2  AD 87 20     	lda player0 + PLAYER::entity + Entity::status
001CF1  2  C9 04        	cmp #STATUS_FALLING
001CF3  2  D0 01        	bne @try_move_up				; cannot move when falling
001CF5  2  60           	rts
001CF6  2               @try_move_up:
001CF6  2               	; custom collision up
001CF6  2  20 AB 12     	jsr Entities::bbox_coverage
001CF9  2  A4 06        	ldy r2L
001CFB  2  8E 2F 18     	stx ladders						; width of the player in tiles = number of ladders to find below
001CFE  2               
001CFE  2               	; check the situation ABOVE the player
001CFE  2  38           	sec
001CFF  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001D02  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001D04  2  85 02        	sta r0L
001D06  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001D09  2  E9 00        	sbc #0
001D0B  2  85 03        	sta r0H
001D0D  2               
001D0D  2               	; if there the right numbers of ladder tiles above the player
001D0D  2               @test_colum:
001D0D  2  B1 02        	lda (r0L),y
001D0F  2  C9 04        	cmp #TILE_SOLID_LADER
001D11  2  D0 05        	bne @check_solid_ceiling
001D13  2  CE 2F 18     	dec ladders
001D16  2  80 0C        	bra @next_column
001D18  2               @check_solid_ceiling:
001D18  2  84 30        	sty $30
001D1A  2  A8           	tay
001D1B  2  B9 7C 1F     	lda tiles_attributes,y
001D1E  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001D20  2  D0 54        	bne @cannot_move_up
001D22  2  A4 30        	ldy $30
001D24  2               @next_column:
001D24  2  CA           	dex
001D25  2  F0 03        	beq @end
001D27  2  C8           	iny
001D28  2  80 E3        	bra @test_colum
001D2A  2               @end:
001D2A  2               
001D2A  2  AD 2F 18     	lda ladders
001D2D  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001D2F  2               
001D2F  2               	; if there player is covering ANY LADER (accros the boundingbox)
001D2F  2  AD 94 20     	lda player0 + PLAYER::entity + Entity::collision_addr
001D32  2  85 02        	sta r0L
001D34  2  AD 95 20     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001D37  2  85 03        	sta r0H
001D39  2               
001D39  2  A4 06        	ldy r2L
001D3B  2               @check_line:							; already climbing up is player grabbing no ladder
001D3B  2  A6 05        	ldx r1H
001D3D  2               @check_row:
001D3D  2  B1 02        	lda (r0L),y
001D3F  2  C9 04        	cmp #TILE_SOLID_LADER
001D41  2  F0 12        	beq @climb_down
001D43  2  C8           	iny
001D44  2  CA           	dex
001D45  2  D0 F6        	bne @check_row
001D47  2  C6 04        	dec r1L
001D49  2  F0 2B        	beq @cannot_move_up
001D4B  2               
001D4B  2  98           	tya
001D4C  2  18           	clc
001D4D  2  69 20        	adc #LEVEL_TILES_WIDTH
001D4F  2  38           	sec
001D50  2  E5 05        	sbc r1H
001D52  2  A8           	tay
001D53  2  80 E6        	bra @check_line
001D55  2               
001D55  2               @climb_down:
001D55  2  20 91 12     	jsr Entities::position_y_dec		; move up the ladder
001D58  2               	;TODO ///////////////////////
001D58  2  AD 91 20     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001D5B  2  09 01        	ora #(EntityFlags::physics)
001D5D  2  8D 91 20     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001D60  2               	;TODO ///////////////////////
001D60  2               
001D60  2  A9 02 8D 87  	m_status STATUS_CLIMBING
001D64  2  20           
001D65  2               
001D65  2  A9 06        	lda #Player::Sprites::CLIMB
001D67  2  CD 97 20     	cmp player0 + PLAYER::frameID
001D6A  2  D0 01        	bne @set_sprite
001D6C  2  60           	rts
001D6D  2               @set_sprite:						;change player sprite
001D6D  2  A9 06        	lda #Player::Sprites::CLIMB
001D6F  2  8D 97 20     	sta player0 + PLAYER::frameID
001D72  2  20 08 19     	jsr set_bitmap
001D75  2  60           	rts
001D76  2               
001D76  2               @cannot_move_up:
001D76  2  A9 00        	lda #STATUS_WALKING_IDLE
001D78  2  8D 87 20     	sta player0 + PLAYER::entity + Entity::status
001D7B  2  60           	rts
001D7C  2               
001D7C  2               ;************************************************
001D7C  2               ; jump
001D7C  2               ;	input: A = delta X value
001D7C  2               ;
001D7C  2               jump:
001D7C  2  AA           	tax
001D7D  2               
001D7D  2               	; r3 = *player
001D7D  2  A9 86        	lda #<player0
001D7F  2  85 08        	sta r3L
001D81  2  A9 20        	lda #>player0
001D83  2  85 09        	sta r3H
001D85  2               
001D85  2  AC 87 20         ldy player0 + PLAYER::entity + Entity::status
001D88  2  B9 3D 1A     	lda ignore_move_request,y
001D8B  2  D0 1F        	bne @return
001D8D  2  8E 8E 20     	stx player0 + PLAYER::entity + Entity::delta_x
001D90  2               
001D90  2               	; ensure there is no ceiling over the player
001D90  2  20 19 14     	jsr Entities::check_collision_up
001D93  2  D0 17        	bne @return
001D95  2               
001D95  2  A9 0A        	lda #JUMP_LO_TICKS
001D97  2  8D 8C 20     	sta player0 + PLAYER::entity + Entity::falling_ticks	; decrease  HI every 10 refresh
001D9A  2  A9 02        	lda #JUMP_HI_TICKS
001D9C  2  8D 8D 20     	sta player0 + PLAYER::entity + Entity::falling_ticks	+ 1
001D9F  2               
001D9F  2               
001D9F  2  A0 0B        	ldy #Entity::bFlags
001DA1  2  B1 08        	lda (r3),y
001DA3  2  09 01        	ora #EntityFlags::physics
001DA5  2  91 08        	sta (r3),y						; engage physics engine for that entity
001DA7  2               
001DA7  2  A9 05 8D 87  	m_status STATUS_JUMPING
001DAB  2  20           
001DAC  2               @return:
001DAC  2  60           	rts
001DAD  2               
001DAD  2               ;************************************************
001DAD  2               ; grab the object if front of the player, if there is an object
001DAD  2               ;
001DAD  2               grab_object:
001DAD  2  AD 9A 20     	lda player0 + PLAYER::flip
001DB0  2  D0 04        	bne @right
001DB2  2               @left:
001DB2  2  A9 0A        	lda #(02 | 08)
001DB4  2  80 02        	bra @cont
001DB6  2               @right:
001DB6  2  A9 06        	lda #(02 | 04)
001DB8  2               @cont:
001DB8  2  AE 86 20     	ldx player0 + PLAYER::entity + Entity::spriteID
001DBB  2  20 02 0F     	jsr Sprite::precheck_collision	; get the frameID in Y
001DBE  2  30 3C        	bmi @return						; no object
001DC0  2               
001DC0  2  20 4C 17     	jsr Objects::get_by_spriteID	; find the object that has frameID Y
001DC3  2  C0 FF        	cpy #$ff
001DC5  2  F0 35        	beq @return						; no object with this ID
001DC7  2               
001DC7  2  98           	tya
001DC8  2  69 10        	adc #Objects::Object::imageID
001DCA  2  98           	tya
001DCB  2  B1 08        	lda (r3), y
001DCD  2  89 01        	bit #Objects::Attribute::GRAB
001DCF  2  F0 2B        	beq @return						; object cannot be grabbed
001DD1  2               
001DD1  2  84 50        	sty PLAYER_ZP					; save the pointer to the grabbed object
001DD3  2  18           	clc
001DD4  2  A5 08        	lda r3L
001DD6  2  65 50        	adc PLAYER_ZP
001DD8  2  8D 9B 20     	sta player0 + PLAYER::grab_object
001DDB  2  A5 09        	lda r3H
001DDD  2  69 00        	adc #00
001DDF  2  8D 9C 20     	sta player0 + PLAYER::grab_object + 1
001DE2  2               
001DE2  2  A9 0C        	lda #Player::Sprites::PUSH
001DE4  2  8D 97 20     	sta player0 + PLAYER::frameID
001DE7  2  9C 98 20     	stz player0 + PLAYER::frame
001DEA  2  A9 0A        	lda #10
001DEC  2  8D 96 20     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001DEF  2  A9 01        	lda #01
001DF1  2  8D 99 20     	sta player0 + PLAYER::frameDirection
001DF4  2  20 08 19     	jsr set_bitmap
001DF7  2               
001DF7  2  A9 07 8D 87  	m_status STATUS_PUSHING
001DFB  2  20           
001DFC  2               
001DFC  2               @return:
001DFC  2  60           	rts
001DFD  2               
001DFD  2               ;************************************************
001DFD  2               ; release the object the player is moving
001DFD  2               ;
001DFD  2               release_object:
001DFD  2  9C 9B 20     	stz player0 + PLAYER::grab_object
001E00  2  9C 9C 20     	stz player0 + PLAYER::grab_object + 1
001E03  2  A9 00 8D 87  	m_status STATUS_WALKING_IDLE
001E07  2  20           
001E08  2               
001E08  2  A9 03        	lda #Player::Sprites::LEFT
001E0A  2  8D 97 20     	sta player0 + PLAYER::frameID
001E0D  2  9C 98 20     	stz player0 + PLAYER::frame
001E10  2  A9 0A        	lda #10
001E12  2  8D 96 20     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001E15  2  A9 01        	lda #01
001E17  2  8D 99 20     	sta player0 + PLAYER::frameDirection
001E1A  2  20 08 19     	jsr set_bitmap
001E1D  2               
001E1D  2  60           	rts
001E1E  2               
001E1E  2               .endscope
001E1E  2               
001E1E  1               
001E1E  1               ;-----------------------------------------------------------------------------
001E1E  1               ;/////////////////////////////////////////////////////////////////////////////
001E1E  1               ; main code
001E1E  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001E1E  1               ;-----------------------------------------------------------------------------
001E1E  1               
001E1E  1  00 00        objects: .word 0
001E20  1               
001E20  1               start:
001E20  1               	; 320x240
001E20  1  A9 40        	lda #64
001E22  1  8D 2A 9F     	sta veradchscale
001E25  1  8D 2B 9F     	sta veradcvscale
001E28  1               
001E28  1               	; activate layer0
001E28  1  A9 71        	lda #%01110001
001E2A  1               ;	and #(255-VERA_LAYER0)
001E2A  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
001E2A  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
001E2D  1               
001E2D  1  20 73 17     	jsr Layers::init
001E30  1               
001E30  1               	;---------------------------------
001E30  1               	; load tiles file into vram
001E30  1               	;---------------------------------
001E30  1  20 45 08     	jsr Tiles::load_static
001E33  1               
001E33  1               	;---------------------------------
001E33  1               	;---------------------------------
001E33  1               	; load tilemaps into vram
001E33  1               	;---------------------------------
001E33  1  20 FB 0F     	jsr Tilemap::load
001E36  1               
001E36  1               	; load animated tiles into ram
001E36  1               	;---------------------------------
001E36  1  20 8F 08     	jsr Tiles::load_anim
001E39  1               
001E39  1               	;---------------------------------
001E39  1               	; load sprite 0,1,2 into vram
001E39  1               	;---------------------------------
001E39  1               load_sprites:
001E39  1               	; prepare VERA sprites
001E39  1  20 6A 0C     	jsr Sprite::init_addr_table
001E3C  1               
001E3C  1  A9 00 85 02  	LOAD_r0 (::VRAM_tiles + tiles * tile_size)	; base for the sprites
001E40  1  A9 40 85 03  
001E44  1  20 31 18     	jsr Player::init
001E47  1               
001E47  1               	;---------------------------------
001E47  1               	; load objects list into ram
001E47  1               	;---------------------------------
001E47  1  20 5B 16     	jsr Objects::init
001E4A  1               
001E4A  1  20 FA 11     	jsr Entities::update				; place all entitieson on screen
001E4D  1               setirq:
001E4D  1                  ; backup default RAM IRQ vector
001E4D  1  AD 14 03        lda IRQVec
001E50  1  8D 79 1F        sta default_irq_vector
001E53  1  AD 15 03        lda IRQVec+1
001E56  1  8D 7A 1F        sta default_irq_vector+1
001E59  1               
001E59  1                  ; overwrite RAM IRQ vector with custom handler address
001E59  1  78              sei ; disable IRQ while vector is changing
001E5A  1  A9 71           lda #<custom_irq_handler
001E5C  1  8D 14 03        sta IRQVec
001E5F  1  A9 1E           lda #>custom_irq_handler
001E61  1  8D 15 03        sta IRQVec+1
001E64  1  AD 26 9F        lda veraien
001E67  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001E69  1  8D 26 9F        sta veraien
001E6C  1  58              cli ; enable IRQ now that vector is properly set
001E6D  1               
001E6D  1               mainloop:
001E6D  1  CB           	wai
001E6E  1  80 FD        	bra mainloop
001E70  1               
001E70  1  60           	rts
001E71  1               
001E71  1               ;-----------------------------------------------------------------------------
001E71  1               ;/////////////////////////////////////////////////////////////////////////////
001E71  1               ; deal with IRQ"s
001E71  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001E71  1               ;-----------------------------------------------------------------------------
001E71  1               custom_irq_handler:
001E71  1  AD 27 9F     	lda veraisr
001E74  1  AA           	tax
001E75  1  29 04        	and #VERA_SPRCOL_BIT
001E77  1  F0 0B        	beq @check_vsync
001E79  1               
001E79  1               @sprite_collision:
001E79  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
001E7C  1  8A           	txa
001E7D  1  4A           	lsr
001E7E  1  4A           	lsr
001E7F  1  4A           	lsr
001E80  1  4A           	lsr								; extract the collision mask (4:7)
001E81  1  20 53 0E     	jsr Sprite::register_collision
001E84  1               
001E84  1               @check_vsync:
001E84  1  8A           	txa
001E85  1  29 01        	and #VERA_VSYNC_BIT
001E87  1  F0 6B        	beq @continue
001E89  1               
001E89  1               @frame_update:
001E89  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001E8C  1               
001E8C  1               	;---------------------------------
001E8C  1               	; animate sprite
001E8C  1               	;---------------------------------
001E8C  1  20 E5 19     	jsr Player::animate
001E8F  1               
001E8F  1               	;---------------------------------
001E8F  1               	; swap animated tiles
001E8F  1               	;---------------------------------
001E8F  1  20 39 09     	jsr Tiles::animate
001E92  1               
001E92  1               	;---------------------------------
001E92  1               	; sprite collisions management
001E92  1               	;---------------------------------
001E92  1  20 DA 0E     	jsr Sprite::check_irq_collision
001E95  1               
001E95  1               	;---------------------------------
001E95  1               	; check keyboard
001E95  1               	;---------------------------------
001E95  1               @check_keyboard:
001E95  1               	; get fake-joystick data from keyboard
001E95  1  A9 00        	lda #0
001E97  1  20 56 FF     	jsr joystick_get
001E9A  1  8D 82 1F     	sta joystick_data
001E9D  1  8E 83 1F     	stx joystick_data + 1
001EA0  1               
001EA0  1               	; get real joystick data
001EA0  1  A9 01        	lda #1
001EA2  1  20 56 FF     	jsr joystick_get
001EA5  1  C0 00        	cpy #0
001EA7  1  D0 0D        	bne @check_buttons
001EA9  1               
001EA9  1               	; if there is a joystick, mix the data
001EA9  1  2D 82 1F     	and joystick_data
001EAC  1  8D 82 1F     	sta joystick_data
001EAF  1               
001EAF  1  8A           	txa
001EB0  1  2D 83 1F     	and joystick_data + 1
001EB3  1  8D 83 1F     	sta joystick_data + 1
001EB6  1               
001EB6  1               @check_buttons:
001EB6  1               	; check button A press/release
001EB6  1  4D 85 1F     	eor joystick_data_old + 1
001EB9  1               
001EB9  1  89 80        	bit #JOY_A
001EBB  1  F0 0F        	beq @save_data				; no change for the A
001EBD  1               
001EBD  1  AD 83 1F     	lda joystick_data + 1
001EC0  1  89 80        	bit #JOY_A
001EC2  1  F0 05        	beq @grab
001EC4  1               @release:
001EC4  1  20 FD 1D     	jsr Player::release_object
001EC7  1  80 03        	bra @save_data
001EC9  1               @grab:
001EC9  1  20 AD 1D     	jsr Player::grab_object
001ECC  1               @save_data:
001ECC  1  AD 83 1F     	lda joystick_data + 1
001ECF  1  8D 85 1F     	sta joystick_data_old + 1
001ED2  1               
001ED2  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001ED2  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001ED2  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001ED2  1               ;
001ED2  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001ED2  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001ED2  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001ED2  1               ;  .Y, byte 2:
001ED2  1               ;              $00 = joystick present
001ED2  1               ;              $FF = joystick not present
001ED2  1               
001ED2  1               @other_check:
001ED2  1  AD 82 1F     	lda joystick_data
001ED5  1               
001ED5  1  89 81        	bit #(JOY_RIGHT|JOY_B)
001ED7  1  F0 27        	beq @jump_right
001ED9  1  89 82        	bit #(JOY_LEFT|JOY_B)
001EDB  1  F0 2A        	beq @jump_left
001EDD  1  89 01        	bit #JOY_RIGHT
001EDF  1  F0 32        	beq @joystick_right
001EE1  1  89 02        	bit #JOY_LEFT
001EE3  1  F0 29        	beq @joystick_left
001EE5  1  89 04        	bit #JOY_DOWN
001EE7  1  F0 34        	beq @movedown
001EE9  1  89 08        	bit #JOY_UP
001EEB  1  F0 2B        	beq @moveup
001EED  1  89 80        	bit #JOY_B
001EEF  1  F0 31        	beq @jump
001EF1  1               
001EF1  1  20 24 1A     	jsr Player::set_idle
001EF4  1               
001EF4  1               @continue:
001EF4  1  20 0D 18     	jsr Layers::update					; refresh layers if needed
001EF7  1  20 FA 11     	jsr Entities::update				; place all entities on on screen
001EFA  1  20 22 19     	jsr Player::check_scroll_layers
001EFD  1               
001EFD  1               	; continue to default IRQ handler
001EFD  1  6C 79 1F     	jmp (default_irq_vector)
001F00  1               	; RTI will happen after jump
001F00  1               
001F00  1               @jump_right:
001F00  1  A9 01        	lda #$01					; jump right
001F02  1  20 7C 1D     	jsr Player::jump
001F05  1  80 ED        	bra @continue
001F07  1               
001F07  1               @jump_left:
001F07  1  A9 FF        	lda #$ff					; jump left
001F09  1  20 7C 1D     	jsr Player::jump
001F0C  1  80 E6        	bra @continue
001F0E  1               
001F0E  1               @joystick_left:
001F0E  1  20 4E 1B     	jsr Player::move_left
001F11  1  80 E1        	bra @continue
001F13  1               
001F13  1               @joystick_right:
001F13  1  20 44 1A     	jsr Player::move_right
001F16  1  80 DC        	bra @continue
001F18  1               
001F18  1               @moveup:
001F18  1  20 E6 1C     	jsr Player::move_up
001F1B  1  80 D7        	bra @continue
001F1D  1               
001F1D  1               @movedown:
001F1D  1  20 50 1C     	jsr Player::move_down
001F20  1  80 D2        	bra @continue
001F22  1               
001F22  1               @jump:
001F22  1  A9 00        	lda #0				; jump up
001F24  1  20 7C 1D     	jsr Player::jump
001F27  1  80 CB        	bra @continue
001F29  1               
001F29  1               .segment "DATA"
001F29  1               .include "tilemap.inc"
001F29  2               map:
001F29  2  20 20        	.byte 32,32
001F2B  2  6C 65 76 65  fslevel: .literal "level.bin"
001F2F  2  6C 2E 62 69  
001F33  2  6E           
001F34  2               fslevel_end:
001F34  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001F38  2  65 72 79 2E  
001F3C  2  62 69 6E     
001F3F  2               fsbackground_end:
001F3F  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001F43  2  69 73 69 6F  
001F47  2  6E 2E 62 69  
001F4C  2               fscollision_end:
001F4C  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
001F50  2  63 74 73 2E  
001F54  2  62 69 6E     
001F57  2               fsobjects_end:
001F57  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
001F5B  2  74 65 73 31  
001F5F  2  2E 62 69 6E  
001F63  2               fssprites1_end:
001F63  2               tileset:
001F63  2  10 10        	.byte 16,16
001F65  2               tiles = 48
001F65  2               tile_size = 256
001F65  2  74 69 6C 65  fstile: .literal "tiles.bin"
001F69  2  73 2E 62 69  
001F6D  2  6E           
001F6E  2               fstileend:
001F6E  2               
001F6E  1               .include "sprite.inc"
001F6E  2  73 70 72 69  fssprite:	.literal "sprites.bin"
001F72  2  74 65 73 2E  
001F76  2  62 69 6E     
001F79  2               fsspriteend:
001F79  2               sprites = 15
001F79  2               sprite_size = 1024
001F79  2               
001F79  1               
001F79  1  00 00        default_irq_vector: .addr 0
001F7B  1  00           trigger_debug: .byte 0
001F7C  1               tiles_attributes:
001F7C  1  00           	.byte %00000000	;	TILE_NO_COLLISION
001F7D  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
001F7E  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
001F7F  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
001F80  1  09           	.byte %00001001	;	TILE_SOLID_LADER
001F81  1  09           	.byte %00001001	;	TILE_LEDGE
001F82  1               
001F82  1               .segment "BSS"
001F82  1  00 00        	joystick_data: .byte 0, 0
001F84  1  00 00        	joystick_data_old: .byte 0, 0
001F86  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
001F8A  1  xx xx xx xx  
001F8E  1  xx xx xx xx  
002086  1  xx xx xx xx  	player0: .tag PLAYER
00208A  1  xx xx xx xx  
00208E  1  xx xx xx xx  
002086  1               
