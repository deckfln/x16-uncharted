ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C BF 17        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               
000839  1               .include "sprites.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Sprite code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .struct VSPRITE
000839  2               	address125 .byte
000839  2               	mode_xxx_address1613 .byte
000839  2               	x70 .byte
000839  2               	x98 .byte
000839  2               	y70 .byte
000839  2               	y98 .byte
000839  2               	collision_zdepth_vflip_hflip .byte
000839  2               	height_width_offset .byte
000839  2               .endstruct
000839  2               
000839  2               .scope Sprite
000839  2               
000839  2               ;-----------------------------------------
000839  2               ; sprites components collections
000839  2               MAX_SPRITES = 32
000839  2               
000839  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
00083D  2  xx xx xx xx  
000841  2  xx xx xx xx  
000859  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
00085D  2  xx xx xx xx  
000861  2  xx xx xx xx  
000879  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
00087D  2  xx xx xx xx  
000881  2  xx xx xx xx  
000899  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
00089D  2  xx xx xx xx  
0008A1  2  xx xx xx xx  
0008B9  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
0008BD  2  xx xx xx xx  
0008C1  2  xx xx xx xx  
0008D9  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
0008DD  2  xx xx xx xx  
0008E1  2  xx xx xx xx  
0008F9  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
0008FD  2  xx xx xx xx  
000901  2  xx xx xx xx  
000919  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
00091D  2  xx xx xx xx  
000921  2  xx xx xx xx  
000939  2  xx xx xx xx  sprites_sx: .res MAX_SPRITES
00093D  2  xx xx xx xx  
000941  2  xx xx xx xx  
000959  2  xx xx xx xx  sprites_sy: .res MAX_SPRITES
00095D  2  xx xx xx xx  
000961  2  xx xx xx xx  
000979  2               
000979  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
00097D  2  xx xx xx xx  
000981  2  xx xx xx xx  
000A79  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000A7A  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000A7C  2               
000A7C  2               ;************************************************
000A7C  2               ;  init sprites manager
000A7C  2               ; create a table with the VERA @addr for each sprite
000A7C  2               ;
000A7C  2               init_addr_table:
000A7C  2               	; clear the sprites components
000A7C  2  A6 20        	ldx MAX_SPRITES
000A7E  2  CA           	dex
000A7F  2               :
000A7F  2  9E 39 08     	stz sprites_xL,x
000A82  2  9E 59 08     	stz sprites_xH,x
000A85  2  9E 79 08     	stz sprites_yL,x
000A88  2  9E 99 08     	stz sprites_yH,x
000A8B  2  9E 39 09     	stz sprites_sx,x
000A8E  2  9E 59 09     	stz sprites_sy,x
000A91  2  CA           	dex
000A92  2  10 EB        	bpl :-
000A94  2               
000A94  2               	; activate sprite colisions
000A94  2  AD 26 9F     	lda veraien
000A97  2  09 04        	ora #VERA_SPRCOL_BIT
000A99  2  8D 26 9F     	sta veraien
000A9C  2               
000A9C  2               	; all sprites are availble but ZERO (reserved player)
000A9C  2  A2 FF        	ldx #$ff
000A9E  2               :
000A9E  2  9E 79 09     	stz sprites,X
000AA1  2  CA           	dex
000AA2  2  D0 FA        	bne :-
000AA4  2  A9 01        	lda #01
000AA6  2  8D 79 09     	sta sprites
000AA9  2               
000AA9  2               	; start of the sprites in VERA memory
000AA9  2  A9 00        	lda #<vram_sprd
000AAB  2  85 02        	sta r0L
000AAD  2  A9 FC        	lda #>vram_sprd
000AAF  2  85 03        	sta r0H
000AB1  2               
000AB1  2  A2 80        	ldx #128
000AB3  2  A0 00        	ldy #0
000AB5  2                @loop:
000AB5  2  A5 03        	lda r0H
000AB7  2  99 BA 19     	sta sprites_table,y
000ABA  2  C8           	iny
000ABB  2  A5 02        	lda r0L
000ABD  2  99 BA 19     	sta sprites_table,y
000AC0  2  C8           	iny
000AC1  2               
000AC1  2  18           	clc
000AC2  2  A5 02        	lda r0L
000AC4  2  69 08        	adc #8
000AC6  2  85 02        	sta r0L
000AC8  2  A5 03        	lda r0H
000ACA  2  69 00        	adc #0
000ACC  2  85 03        	sta r0H	; move to next sprite
000ACE  2               
000ACE  2  CA           	dex
000ACF  2  D0 E4        	bne @loop
000AD1  2               
000AD1  2  60           	rts
000AD2  2               
000AD2  2               ;************************************************
000AD2  2               ; get a new available vera sprite
000AD2  2               ;	output: X = index of the vera sprite
000AD2  2               ;			0 = no sprite available
000AD2  2               ;
000AD2  2               new:
000AD2  2  A2 01        	ldx #$01
000AD4  2               :
000AD4  2  BD 79 09     	lda sprites,x
000AD7  2  F0 03        	beq @return
000AD9  2  E8           	inx
000ADA  2  D0 F8        	bne :-
000ADC  2               @return:
000ADC  2  A9 01        	lda #01
000ADE  2  9D 79 09     	sta sprites,x
000AE1  2               
000AE1  2               	; count activated sprites
000AE1  2  EC 79 0A     	cpx nb_sprites
000AE4  2  90 03        	bcc :+
000AE6  2               
000AE6  2  EE 79 0A     	inc nb_sprites
000AE9  2               :
000AE9  2  60           	rts
000AEA  2               
000AEA  2               ;
000AEA  2               ; the the VERA memory pointer to sprite Y + attribute X
000AEA  2               ;	Y = sprite index
000AEA  2               ;	X = attribute offset
000AEA  2               ;
000AEA  2               vram:
000AEA  2  DA           	phx			; save X on the stack
000AEB  2               
000AEB  2  98           	tya			; index of the sprite
000AEC  2  0A           	asl
000AED  2  A8           	tay			; index of the address of the sprite (y*2)
000AEE  2               
000AEE  2  A9 00        	lda #0
000AF0  2  8D 25 9F     	sta veractl
000AF3  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000AF5  2  8D 22 9F     	sta verahi
000AF8  2  B9 BA 19     	lda sprites_table, y
000AFB  2  8D 21 9F     	sta veramid
000AFE  2  C8           	iny
000AFF  2  BA           	tsx
000B00  2  BD 01 01     	lda $0101,x	; reload X from the stack
000B03  2  79 BA 19     	adc sprites_table, y
000B06  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000B09  2  FA           	plx
000B0A  2  60           	rts
000B0B  2               
000B0B  2               ;************************************************
000B0B  2               ; configure the sprite
000B0B  2               ;	input: 	A = sprite collision mask
000B0B  2               ;			Y = sprite index
000B0B  2               ;		   	X = sprite size :
000B0B  2               ;		   	r0 = vram @ of the sprite data
000B0B  2               ;
000B0B  2  08 10 20 40  sprites_size: .byte 8, 16, 32, 64
000B0F  2               
000B0F  2               load:
000B0F  2  85 32        	sta $32
000B11  2  86 30        	stx $30
000B13  2  84 33        	sty $33
000B15  2  20 69 0B     	jsr set_bitmap
000B18  2               
000B18  2  9C 23 9F     	stz veradat					; x = 0
000B1B  2  9C 23 9F     	stz veradat
000B1E  2  9C 23 9F     	stz veradat					; y = 0
000B21  2  9C 23 9F     	stz veradat
000B24  2  A5 32        	lda $32						; load collision mask
000B26  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000B28  2  8D 23 9F     	sta veradat
000B2B  2  A5 30        	lda $30						; 32x32 sprite
000B2D  2  8D 23 9F     	sta veradat
000B30  2               
000B30  2  4A           	lsr
000B31  2  4A           	lsr
000B32  2  4A           	lsr
000B33  2  4A           	lsr
000B34  2  85 30        	sta $30						; focus on sprite_height, sprite_width
000B36  2               
000B36  2  A4 33        	ldy $33						; sprite index
000B38  2               
000B38  2  29 03        	and #%00000011				; sprite_width
000B3A  2  AA           	tax
000B3B  2  BD 0B 0B     	lda sprites_size,x
000B3E  2  99 39 09     	sta sprites_sx, y			; store width in pixels in the sprite attribute
000B41  2               
000B41  2  A5 30        	lda $30
000B43  2  4A           	lsr
000B44  2  4A           	lsr							; sprite_height
000B45  2  AA           	tax
000B46  2  BD 0B 0B     	lda sprites_size,x
000B49  2  99 59 09     	sta sprites_sy, y			; store height in pixels in the sprite attribute
000B4C  2               
000B4C  2  60           	rts
000B4D  2               
000B4D  2               ;************************************************
000B4D  2               ; configure full veram memory (16:0) into optimized one (12:5)
000B4D  2               ;	input: r0 = vram @ of the sprite data
000B4D  2               ;	output: r1
000B4D  2               ;
000B4D  2               vram_to_16_5:
000B4D  2               	; load full VERA memory (12:0) into R0
000B4D  2  A5 02        	lda r0L
000B4F  2  85 04        	sta r1L
000B51  2  A5 03        	lda r0H
000B53  2  85 05        	sta r1H
000B55  2               
000B55  2               	; convert full addr to vera mode (bit shiting >> 5)
000B55  2  A5 05        	lda r1H
000B57  2  4A           	lsr
000B58  2  66 04        	ror r1L
000B5A  2  4A           	lsr
000B5B  2  66 04        	ror r1L
000B5D  2  4A           	lsr
000B5E  2  66 04        	ror r1L
000B60  2  4A           	lsr
000B61  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000B63  2  4A           	lsr
000B64  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000B66  2  85 05        	sta r1H
000B68  2  60           	rts
000B69  2               
000B69  2               ;************************************************
000B69  2               ; change the address of the bitmap for the sprite
000B69  2               ;	Y = sprite index
000B69  2               ;	r0 = vera memory (12:5)
000B69  2               ;
000B69  2               set_bitmap:
000B69  2  A2 00        	ldx #VSPRITE::address125
000B6B  2  20 EA 0A     	jsr vram			; set very pointer to the address of the bitmap
000B6E  2               
000B6E  2  A5 02        	lda r0L
000B70  2  8D 23 9F     	sta veradat
000B73  2  A5 03        	lda r0H
000B75  2  09 80        	ora #$80						; M = 8 bits
000B77  2  8D 23 9F     	sta veradat
000B7A  2               
000B7A  2  60           	rts
000B7B  2               
000B7B  2               ;************************************************
000B7B  2               ; change the display byte for a sprite
000B7B  2               ;	Y = sprite index
000B7B  2               ;	X = display value to set
000B7B  2               ;
000B7B  2               display:
000B7B  2  86 02        	stx r0L		; save X for later
000B7D  2  84 03        	sty r0H
000B7F  2               
000B7F  2               	; set vram memory on the X sprite
000B7F  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000B81  2  20 EA 0A     	jsr vram
000B84  2  AD 23 9F     	lda veradat
000B87  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000B89  2  05 02        	ora r0L
000B8B  2  85 02        	sta r0L
000B8D  2               
000B8D  2  A4 03        	ldy r0H
000B8F  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000B91  2  20 EA 0A     	jsr vram
000B94  2               
000B94  2  A5 02        	lda r0L
000B96  2  8D 23 9F     	sta veradat
000B99  2  60           	rts
000B9A  2               
000B9A  2               ;************************************************
000B9A  2               ; define position of sprite
000B9A  2               ;	Y = sprite index
000B9A  2               ;	r0 = addr of word X & word Y
000B9A  2               ;
000B9A  2               position:
000B9A  2               	; set vram memory on the X sprite
000B9A  2  5A           	phy
000B9B  2  A2 02        	ldx #VSPRITE::x70
000B9D  2  20 EA 0A     	jsr vram
000BA0  2  FA           	plx
000BA1  2               
000BA1  2  A0 01        	ldy #1
000BA3  2  18           	clc
000BA4  2  B2 02        	lda (r0L)				; X low => vera and to sprite attribute XL
000BA6  2  8D 23 9F     	sta veradat
000BA9  2  9D 39 08     	sta sprites_xL, x
000BAC  2  7D 39 09     	adc sprites_sx, x
000BAF  2  9D B9 08     	sta sprites_x1L, x		;X1 = x + sprite width
000BB2  2               
000BB2  2  B1 02        	lda (r0L),y
000BB4  2  8D 23 9F     	sta veradat
000BB7  2  9D 59 08     	sta sprites_xH, x		; X high => vera and to sprite attribute XH
000BBA  2  69 00        	adc #0
000BBC  2  9D D9 08     	sta sprites_x1H, x		;X1 = x + sprite width
000BBF  2               
000BBF  2  18           	clc
000BC0  2  C8           	iny
000BC1  2  B1 02        	lda (r0L),y
000BC3  2  8D 23 9F     	sta veradat
000BC6  2  9D 79 08     	sta sprites_yL, x		; Y low => vera and to sprite attribute YL
000BC9  2  7D 59 09     	adc sprites_sy, x
000BCC  2  9D F9 08     	sta sprites_y1L, x		; Y1 = Y + sprite height
000BCF  2  C8           	iny
000BD0  2  B1 02        	lda (r0L),y
000BD2  2  8D 23 9F     	sta veradat
000BD5  2  9D 99 08     	sta sprites_yH, x		; Y High => vera and to sprite attribute YH
000BD8  2  69 00        	adc #0
000BDA  2  9D 19 09     	sta sprites_y1H, x		; Y1 = y + sprite height
000BDD  2               
000BDD  2  60           	rts
000BDE  2               
000BDE  2               ;************************************************
000BDE  2               ; Change the flipping of a sprite
000BDE  2               ;	Y = sprite index
000BDE  2               ;	A = value to set
000BDE  2               ;
000BDE  2               set_flip:
000BDE  2  85 30        	sta $30
000BE0  2  84 31        	sty $31
000BE2  2               
000BE2  2               	; set vram memory on the X sprite
000BE2  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000BE4  2  20 EA 0A     	jsr vram
000BE7  2               
000BE7  2  AD 23 9F     	lda veradat				;get current value
000BEA  2  29 FC        	and #SPRITE_FLIP_CLEAR
000BEC  2  05 30        	ora $30					; change only the flip value
000BEE  2  85 30        	sta $30
000BF0  2               
000BF0  2  A4 31        	ldy $31
000BF2  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000BF4  2  20 EA 0A     	jsr vram
000BF7  2  A5 30        	lda $30
000BF9  2  8D 23 9F     	sta veradat
000BFC  2  60           	rts
000BFD  2               
000BFD  2               ;************************************************
000BFD  2               ; register sprites collision
000BFD  2               ; input: A = collision mask
000BFD  2               ;
000BFD  2               register_collision:
000BFD  2  EE 7A 0A     	inc collisions
000C00  2  8D 7B 0A     	sta collisions + 1
000C03  2  60           	rts
000C04  2               
000C04  2               ;************************************************
000C04  2               ; Axis Aligned Bounding Box collision between 2 sprites
000C04  2               ; input: X = index of sprite 1
000C04  2               ;		 Y = index of sprite 2
000C04  2               ; return: Z = no collision
000C04  2               ;
000C04  2               aabb_collision:
000C04  2  BD 59 08     	lda sprites_xH, x
000C07  2  D9 D9 08     	cmp sprites_x1H, y
000C0A  2  90 02        	bcc :+
000C0C  2  D0 49        	bne @false
000C0E  2               :
000C0E  2  BD 39 08     	lda sprites_xL, x
000C11  2  D9 B9 08     	cmp sprites_x1L, y
000C14  2  90 02        	bcc :+
000C16  2  D0 3F        	bne @false
000C18  2               :						; s(x).left_x <= s(y).right_x
000C18  2               
000C18  2  B9 59 08     	lda sprites_xH, y
000C1B  2  DD D9 08     	cmp sprites_x1H, x
000C1E  2  90 02        	bcc :+
000C20  2  D0 35        	bne @false
000C22  2               :
000C22  2  B9 59 08     	lda sprites_xH, y
000C25  2  DD D9 08     	cmp sprites_x1H, x
000C28  2  90 02        	bcc :+
000C2A  2  D0 2B        	bne @false
000C2C  2               :						; AND s(y).left_x <= s(x).right_x
000C2C  2               
000C2C  2  BD 99 08     	lda sprites_yH, x
000C2F  2  D9 19 09     	cmp sprites_y1H, y
000C32  2  90 02        	bcc :+
000C34  2  D0 21        	bne @false
000C36  2               :
000C36  2  BD 99 08     	lda sprites_yH, x
000C39  2  D9 19 09     	cmp sprites_y1H, y
000C3C  2  90 02        	bcc :+
000C3E  2  D0 17        	bne @false
000C40  2               :						; AND s(x).bottom_y <= s(y).top_y
000C40  2               
000C40  2  B9 99 08     	lda sprites_yH, y
000C43  2  DD 19 09     	cmp sprites_y1H, x
000C46  2  90 02        	bcc :+
000C48  2  D0 0D        	bne @false
000C4A  2               :
000C4A  2  B9 99 08     	lda sprites_yH, y
000C4D  2  DD 19 09     	cmp sprites_y1H, x
000C50  2  90 02        	bcc :+
000C52  2  D0 03        	bne @false
000C54  2               :						; AND s(y).bottom_y <= s(x).top_y
000C54  2               
000C54  2               @true:
000C54  2  A9 01        	lda #01
000C56  2  60           	rts
000C57  2               @false:
000C57  2  A9 00        	lda #00
000C59  2  60           	rts
000C5A  2               
000C5A  2               ;************************************************
000C5A  2               ; find colliding sprites
000C5A  2               ; return: a = no collision
000C5A  2               ;
000C5A  2               find_colliding:
000C5A  2  AD 79 0A     	lda nb_sprites
000C5D  2  3A           	dec
000C5E  2  85 30        	sta $30
000C60  2  3A           	dec
000C61  2  85 31        	sta $31
000C63  2               
000C63  2               @inner_loop:
000C63  2  A6 30        	ldx $30
000C65  2  A4 31        	ldy $31
000C67  2  20 04 0C     	jsr aabb_collision
000C6A  2  D0 13        	bne @found
000C6C  2               
000C6C  2  C6 31        	dec $31
000C6E  2  D0 F3        	bne @inner_loop
000C70  2               
000C70  2  A5 30        	lda $30
000C72  2  3A           	dec
000C73  2  85 30        	sta $30					; start comparison end - 1
000C75  2  3A           	dec						; compare with start - 1 unless < 0
000C76  2  30 04        	bmi @not_found
000C78  2  85 31        	sta $31
000C7A  2  80 E7        	bra @inner_loop
000C7C  2               
000C7C  2               @not_found:
000C7C  2  A9 00        	lda #00
000C7E  2  60           	rts
000C7F  2               @found:
000C7F  2  A9 01        	lda #01
000C81  2  60           	rts
000C82  2               
000C82  2               ;************************************************
000C82  2               ; manage collisions if there were detected
000C82  2               ;
000C82  2               check_collision:
000C82  2  AD 7A 0A     	lda collisions
000C85  2  F0 06        	beq @return
000C87  2               
000C87  2  9C 7A 0A     	stz collisions		; clear the collision flag
000C8A  2               
000C8A  2  20 5A 0C     	jsr find_colliding
000C8D  2               
000C8D  2               @return:
000C8D  2  60           	rts
000C8E  2               
000C8E  2               .endscope
000C8E  2               
000C8E  1               .include "objects.asm"
000C8E  2               ;-----------------------------------------------------------------------------
000C8E  2               ;/////////////////////////////////////////////////////////////////////////////
000C8E  2               ;           start OBJECT code
000C8E  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000C8E  2               ;-----------------------------------------------------------------------------
000C8E  2               
000C8E  2               .scope Objects
000C8E  2               
000C8E  2  00 00        objects_map: .word 0
000C90  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
000C92  2               
000C92  2               .struct Object
000C92  2                   spriteID    .byte   ; ID of the vera sprite
000C92  2                   imageID     .byte   ; ID of the image in the spritesheet
000C92  2                   levelx      .word   ; level position
000C92  2                   levely      .word
000C92  2                   px          .word   ; screen position
000C92  2                   py          .word
000C92  2               .endstruct
000C92  2               
000C92  2               ;************************************************
000C92  2               ; init the object data of the level
000C92  2               ;
000C92  2               init:
000C92  2                   ; load the list of objects at the end of the previous load
000C92  2  AD 10 08         lda current_load
000C95  2  8D 8E 0C         sta objects_map
000C98  2  AD 11 08         lda current_load + 1
000C9B  2  8D 8F 0C         sta objects_map + 1
000C9E  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
000CA2  2  A0 00 20 BA  
000CA6  2  FF A9 0B A2  
000CC1  2               
000CC1  2                   ; load the sprites  of objects at the end of the previous vload
000CC1  2  AD 12 08         lda Vera::vram_load
000CC4  2  8D 90 0C         sta objects_sprites
000CC7  2  AD 13 08         lda Vera::vram_load + 1
000CCA  2  8D 91 0C         sta objects_sprites + 1
000CCD  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
000CD1  2  A0 00 20 BA  
000CD5  2  FF A9 0C A2  
000CF0  2               
000CF0  2                   ; add each available sprites on screen
000CF0  2  AD 8E 0C         lda objects_map
000CF3  2  85 08            sta r3L
000CF5  2  AD 8F 0C         lda objects_map + 1
000CF8  2  85 09            sta r3H
000CFA  2               
000CFA  2  B2 08            lda (r3)
000CFC  2  85 31            sta $31     ; number of objects
000CFE  2  64 32            stz $32     ; object #0
000D00  2               
000D00  2  E6 08            inc r3L
000D02  2               
000D02  2               @loop:
000D02  2                   ; get a free sprite
000D02  2  20 D2 0A         jsr Sprite::new
000D05  2  8A               txa
000D06  2  92 08            sta (r3)
000D08  2               
000D08  2                   ; load the first object
000D08  2  AD 90 0C     	lda objects_sprites
000D0B  2  85 02        	sta r0L
000D0D  2  AD 91 0C     	lda objects_sprites + 1
000D10  2  85 03        	sta r0H
000D12  2  20 4D 0B         jsr Sprite::vram_to_16_5
000D15  2  A5 04            lda r1L
000D17  2  85 02            sta r0L
000D19  2  A5 05            lda r1H
000D1B  2  85 03            sta r0H
000D1D  2               
000D1D  2  B2 08        	lda (r3)                        ; sprite id
000D1F  2  A8               tay
000D20  2  A9 10           	lda #%00010000					; collision mask 1
000D22  2  A2 50           	ldx #%01010000					; 16x16 sprite
000D24  2  20 0F 0B     	jsr Sprite::load
000D27  2               
000D27  2                   ; display the object
000D27  2  B2 08        	lda (r3)                        ; sprite id
000D29  2  A8               tay
000D2A  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
000D2C  2  20 7B 0B     	jsr Sprite::display
000D2F  2               
000D2F  2                   ; position the first object
000D2F  2  20 68 0D         jsr set_position_r3
000D32  2               
000D32  2                   ; last object ?
000D32  2  C6 31            dec $31
000D34  2  F0 11            beq @return
000D36  2               
000D36  2                   ; move to the next object
000D36  2  18               clc
000D37  2  A5 08            lda r3L
000D39  2  69 0A            adc #.sizeof(Object)
000D3B  2  85 08            sta r3L
000D3D  2  A5 09            lda r3H
000D3F  2  69 00            adc #00
000D41  2  85 09            sta r3H
000D43  2               
000D43  2  E6 32            inc $32                     ; object #next
000D45  2  80 BB            bra @loop
000D47  2               
000D47  2               @return:
000D47  2  60               rts
000D48  2               
000D48  2               ;************************************************
000D48  2               ; change  position of the sprite (level view) => (screen view)
000D48  2               ;   input: X = index of the object
000D48  2               ;
000D48  2               set_position_index:
000D48  2  AD 8E 0C         lda objects_map
000D4B  2  85 08            sta r3L
000D4D  2  AD 8F 0C         lda objects_map + 1
000D50  2  85 09            sta r3H
000D52  2  E6 08            inc r3L
000D54  2               
000D54  2  E0 00            cpx #00                 ; ignore object 0
000D56  2  F0 10            beq @next
000D58  2               
000D58  2               @mult:
000D58  2  18               clc
000D59  2  A5 08            lda r3L
000D5B  2  69 0A            adc #.sizeof(Object)
000D5D  2  85 08            sta r3L
000D5F  2  A5 09            lda r3H
000D61  2  69 00            adc #00
000D63  2  85 09            sta r3H
000D65  2  CA               dex
000D66  2  D0 F0            bne @mult               ; r2 = objects_map + X*sizeof(Object)
000D68  2               
000D68  2               @next:
000D68  2               
000D68  2               ;************************************************
000D68  2               ; change  position of the sprite (level view) => (screen view)
000D68  2               ;   input: R3 = start of the object
000D68  2               ;
000D68  2               set_position_r3:
000D68  2                   ; screenX = levelX - layer1_scroll_x
000D68  2  A0 02            ldy #Object::levelx
000D6A  2  38               sec
000D6B  2  B1 08            lda (r3), y
000D6D  2  ED 37 9F         sbc VERA_L1_hscrolllo
000D70  2  85 02            sta r0L
000D72  2  C8               iny
000D73  2  B1 08            lda (r3), y
000D75  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
000D78  2  85 03            sta r0H
000D7A  2               
000D7A  2                   ; screenY = levelY - layer1_scroll_y
000D7A  2  A0 04            ldy #Object::levely
000D7C  2  38               sec
000D7D  2  B1 08            lda (r3), y
000D7F  2  ED 39 9F         sbc VERA_L1_vscrolllo
000D82  2  85 04            sta r1L
000D84  2  C8               iny
000D85  2  B1 08            lda (r3), y
000D87  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
000D8A  2  85 05            sta r1H
000D8C  2               
000D8C  2                   ; save the screen positions in the object
000D8C  2  A0 06            ldy #Object::px
000D8E  2  A5 02            lda r0L
000D90  2  91 08            sta (r3), Y
000D92  2  C8               iny
000D93  2  A5 03            lda r0H
000D95  2  91 08            sta (r3), Y
000D97  2               
000D97  2  A0 08            ldy #Object::py
000D99  2  A5 04            lda r1L
000D9B  2  91 08            sta (r3), Y
000D9D  2  C8               iny
000D9E  2  A5 05            lda r1H
000DA0  2  91 08            sta (r3), Y
000DA2  2               
000DA2  2                   ; set the player position
000DA2  2  B2 08        	lda (r3)                        ; sprite id
000DA4  2  A8               tay
000DA5  2               
000DA5  2                   ; adresse of thepx, py attributes
000DA5  2  18               clc
000DA6  2  A5 08            lda r3L
000DA8  2  69 06            adc #Object::px
000DAA  2  85 02            sta r0L
000DAC  2  A5 09            lda r3H
000DAE  2  69 00            adc #00
000DB0  2  85 03            sta r0H
000DB2  2  20 9A 0B     	jsr Sprite::position			; set position of the sprite
000DB5  2               
000DB5  2  60               rts
000DB6  2               
000DB6  2               ;************************************************
000DB6  2               ; change position of all sprites when the layer moves (level view) => (screen view)
000DB6  2               ;
000DB6  2               fix_positions:
000DB6  2  AD 8E 0C         lda objects_map
000DB9  2  85 08            sta r3L
000DBB  2  AD 8F 0C         lda objects_map + 1
000DBE  2  85 09            sta r3H
000DC0  2               
000DC0  2  B2 08            lda (r3)
000DC2  2  85 31            sta $31     ; number of objects
000DC4  2  64 32            stz $32
000DC6  2  E6 08            inc r3L
000DC8  2               
000DC8  2               @loop:
000DC8  2                   ; position the first object
000DC8  2  20 68 0D         jsr set_position_r3
000DCB  2               
000DCB  2                   ; last object ?
000DCB  2  E6 32            inc $32
000DCD  2  C6 31            dec $31
000DCF  2  F0 0F            beq @return
000DD1  2               
000DD1  2                   ; move to the next object
000DD1  2  18               clc
000DD2  2  A5 08            lda r3L
000DD4  2  69 0A            adc #.sizeof(Object)
000DD6  2  85 08            sta r3L
000DD8  2  A5 09            lda r3H
000DDA  2  69 00            adc #00
000DDC  2  85 09            sta r3H
000DDE  2               
000DDE  2  80 E8            bra @loop
000DE0  2               
000DE0  2               @return:
000DE0  2  60               rts
000DE1  2               
000DE1  2               .endscope
000DE1  2               
000DE1  1               .include "layers.asm"
000DE1  2               ;-----------------------------------------------------------------------------
000DE1  2               ;/////////////////////////////////////////////////////////////////////////////
000DE1  2               ; START Layers code
000DE1  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000DE1  2               ;-----------------------------------------------------------------------------
000DE1  2               
000DE1  2               .scope Layers
000DE1  2               
000DE1  2               HSCROLL = 0
000DE1  2               VSCROLL = 2
000DE1  2               
000DE1  2               ; define size of tiles for layer
000DE1  2               .macro VTILEMODE layer, mode
000DE1  2               	lda veral0tilebase + layer * 7
000DE1  2               	and #VERA_CLEAR_TILE_SIZE
000DE1  2               	ora #mode
000DE1  2               	sta veral0tilebase + layer * 7
000DE1  2               .endmacro
000DE1  2               
000DE1  2               ; define number of tiles in the map
000DE1  2               .macro VCONFIG_TILES layer,mode
000DE1  2               	lda veral0config + layer * 7
000DE1  2               	and #VERA_CONFIG_CLEAR_TILES
000DE1  2               	ora #mode
000DE1  2               	sta veral0config + layer * 7
000DE1  2               .endmacro
000DE1  2               
000DE1  2               ; define number of colors for the map
000DE1  2               .macro VCONFIG_DEPTH layer,mode
000DE1  2               	lda veral0config + layer * 7
000DE1  2               	and #VERA_CONFIG_CLEAR_DEPTH
000DE1  2               	ora #mode
000DE1  2               	sta veral0config + layer * 7
000DE1  2               .endmacro
000DE1  2               
000DE1  2               ; set the tilebase for the layer
000DE1  2               .macro VTILEBASE layer,addr
000DE1  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000DE1  2               	and #VERA_TILEBASE_CLEAR_ADR
000DE1  2               	ora #(addr >> 9)
000DE1  2               	sta veral0tilebase + layer * 7
000DE1  2               .endmacro
000DE1  2               
000DE1  2               ; set the mapbase for the layer
000DE1  2               .macro VMAPBASE layer,addr
000DE1  2                   lda #(addr >> 9)         ; store 2 last bits
000DE1  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000DE1  2               .endmacro
000DE1  2               
000DE1  2               ;************************************************
000DE1  2               ; increase layer scrolling with a 8bits limit
000DE1  2               ;	X: : 0 = horizontal
000DE1  2               ;	   : 2 = vertical
000DE1  2               ;	Y: limit
000DE1  2               ;
000DE1  2               scroll_inc_8:
000DE1  2  84 02        	sty r0L
000DE3  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000DE6  2  C5 02        	cmp r0L
000DE8  2  F0 0F        	beq @noscroll
000DEA  2               @scrollinc:
000DEA  2  1A           	inc
000DEB  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000DEE  2  D0 03        	bne @scrolled
000DF0  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000DF3  2               @scrolled:
000DF3  2               	; fix the objects position now that the layers scrolled
000DF3  2  20 B6 0D     	jsr Objects::fix_positions
000DF6  2  A9 01        	lda #01		; clear ZERO => scrolled
000DF8  2  60           	rts
000DF9  2               @noscroll:
000DF9  2  A9 00        	lda #00		; set ZERO => noscroll
000DFB  2  60           	rts
000DFC  2               
000DFC  2               ;************************************************
000DFC  2               ; increase layer scrolling with a 16bits limit
000DFC  2               ;	X: : 0 = horizontal
000DFC  2               ;	   : 2 = vertical
000DFC  2               ;	r0L: limit
000DFC  2               ;
000DFC  2               scroll_inc_16:
000DFC  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000DFF  2  C5 02        	cmp r0L
000E01  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
000E03  2  A8           	tay
000E04  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
000E07  2  C5 03        	cmp r0H
000E09  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
000E0B  2  98           	tya
000E0C  2               @scrollinc:
000E0C  2  1A           	inc
000E0D  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000E10  2  D0 03        	bne @scrolled
000E12  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000E15  2               @scrolled:
000E15  2               	; fix the objects position now that the layers scrolled
000E15  2  20 B6 0D     	jsr Objects::fix_positions
000E18  2  A9 01        	lda #01	; clear ZERO => scrolled
000E1A  2  60           	rts
000E1B  2               @noscroll:
000E1B  2  A9 00        	lda #00	; set ZERO => noscroll
000E1D  2  60           	rts
000E1E  2               
000E1E  2               ; increase a layer scroll offset but do NOT overlap
000E1E  2               .macro VSCROLL_INC direction,limit
000E1E  2               .if limit > 255
000E1E  2               	LOAD_r0 limit
000E1E  2               	ldx #direction
000E1E  2               	jsr Layers::scroll_inc_16
000E1E  2               .else
000E1E  2               	ldy #limit
000E1E  2               	ldx #direction
000E1E  2               	jsr Layers::scroll_inc_8
000E1E  2               .endif
000E1E  2               .endmacro
000E1E  2               
000E1E  2               ;
000E1E  2               ;
000E1E  2               ; decrease a layer scroll offset
000E1E  2               ;	X : 0 = horizontal
000E1E  2               ;	  : 2 = vertical
000E1E  2               ;
000E1E  2               scroll_dec:
000E1E  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000E21  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
000E23  2  3A           	dec
000E24  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000E27  2  80 0E        	bra @scrolled
000E29  2               @scrollHI:
000E29  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
000E2C  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
000E2E  2  3A           	dec
000E2F  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000E32  2  88           	dey
000E33  2  98           	tya
000E34  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
000E37  2               
000E37  2               @scrolled:
000E37  2               	; fix the objects position now that the layers scrolled
000E37  2  20 B6 0D     	jsr Objects::fix_positions
000E3A  2  A9 01        	lda #01		; clear ZERO => scrolled
000E3C  2  60           	rts
000E3D  2               
000E3D  2               @noscroll:
000E3D  2  A9 00        	lda #00		; set ZERO => noscroll
000E3F  2  60           	rts
000E40  2               
000E40  2               ;
000E40  2               ; force layer0 scrolling to be half of the layer1 scrolling
000E40  2               ;
000E40  2               scroll_l0:
000E40  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
000E43  2  4A           	lsr
000E44  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
000E47  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000E4A  2  6A           	ror
000E4B  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
000E4E  2  60           	rts
000E4F  2               .endscope
000E4F  2               
000E4F  1               .include "player.asm"
000E4F  2               ;-----------------------------------------------------------------------------
000E4F  2               ;/////////////////////////////////////////////////////////////////////////////
000E4F  2               ; START player code
000E4F  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000E4F  2               ;-----------------------------------------------------------------------------
000E4F  2               
000E4F  2               PLAYER_SPRITE_ANIMATION = 3
000E4F  2               
000E4F  2               JUMP_LO_TICKS = 10
000E4F  2               JUMP_HI_TICKS = 2
000E4F  2               FALL_LO_TICKS = 8
000E4F  2               FALL_HI_TICKS = 2
000E4F  2               
000E4F  2               .enum
000E4F  2               	STATUS_WALKING_IDLE
000E4F  2               	STATUS_WALKING
000E4F  2               	STATUS_CLIMBING
000E4F  2               	STATUS_CLIMBING_IDLE
000E4F  2               	STATUS_FALLING
000E4F  2               	STATUS_JUMPING
000E4F  2               	STATUS_JUMPING_IDLE
000E4F  2               .endenum
000E4F  2               
000E4F  2               .enum
000E4F  2               	SITTING_NO_SLOP
000E4F  2               	SITTING_ON_SLOPE
000E4F  2               	SITTING_ABOVE_SLOPE
000E4F  2               .endenum
000E4F  2               
000E4F  2               .enum TILE_ATTR
000E4F  2               	SOLID_GROUND = 1
000E4F  2               	SOLID_WALL = 2
000E4F  2               	SOLID_CEILING = 4
000E4F  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000E4F  2               .endenum
000E4F  2               
000E4F  2               .struct PLAYER
000E4F  2               	sprite			.byte	; sprite index
000E4F  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
000E4F  2               	falling_ticks	.word	; ticks since the player is fllaing (thing t in gravity)
000E4F  2               	delta_x			.byte	; when driving by phisics, original delta_x value
000E4F  2               	animation_tick	.byte
000E4F  2               	spriteID 		.byte	; current animation loop start
000E4F  2               	spriteAnim 		.byte	; current frame
000E4F  2               	spriteAnimDirection .byte ; direction of the animation
000E4F  2               	px 				.word	; relative X & Y on screen
000E4F  2               	py 				.word
000E4F  2               	levelx			.word	; absolute X & Y in the level
000E4F  2               	levely			.word
000E4F  2               	flip 			.byte
000E4F  2               	tilemap			.word	; cached @ of the tilemap equivalent of the center of the player
000E4F  2               	vera_bitmaps    .res 	2*12	; 9 words to store vera bitmaps address
000E4F  2               .endstruct
000E4F  2               
000E4F  2               .macro m_status value
000E4F  2               	lda #(value)
000E4F  2               	sta player0 + PLAYER::status
000E4F  2               .endmacro
000E4F  2               
000E4F  2               .scope Player
000E4F  2               
000E4F  2               .macro SET_SPRITE id, frame
000E4F  2               	lda #id
000E4F  2               	sta player0 + PLAYER::spriteID
000E4F  2               	lda #frame
000E4F  2               	sta player0 + PLAYER::spriteAnim
000E4F  2               	jsr set_bitmap
000E4F  2               .endmacro
000E4F  2               
000E4F  2               ;************************************************
000E4F  2               ; player sprites status
000E4F  2               ;
000E4F  2               .enum Sprites
000E4F  2               	FRONT = 0
000E4F  2               	LEFT = 3
000E4F  2               	CLIMB = 6
000E4F  2               	HANG = 9
000E4F  2               .endenum
000E4F  2               
000E4F  2               ;************************************************
000E4F  2               ; local variables
000E4F  2               ;
000E4F  2               
000E4F  2  00           player_on_slop: .byte 0
000E50  2  00           ladders: .byte 0
000E51  2  00           test_right_left: .byte 0
000E52  2               
000E52  2               ;************************************************
000E52  2               ; init the player data
000E52  2               ;
000E52  2               init:
000E52  2  9C BA 1A     	stz player0 + PLAYER::sprite
000E55  2  A9 0A        	lda #10
000E57  2  8D BF 1A     	sta player0 + PLAYER::animation_tick
000E5A  2  A9 00        	lda #STATUS_WALKING_IDLE
000E5C  2  8D BB 1A     	sta player0 + PLAYER::status
000E5F  2  9C BC 1A     	stz player0 + PLAYER::falling_ticks
000E62  2  9C BD 1A     	stz player0 + PLAYER::falling_ticks + 1
000E65  2  A9 03        	lda #Player::Sprites::LEFT
000E67  2  8D C0 1A     	sta player0 + PLAYER::spriteID
000E6A  2  9C C1 1A     	stz player0 + PLAYER::spriteAnim
000E6D  2  A9 01        	lda #1
000E6F  2  8D C2 1A     	sta player0 + PLAYER::spriteAnimDirection
000E72  2  9C C3 1A     	stz player0 + PLAYER::px
000E75  2  9C C4 1A     	stz player0 + PLAYER::px+1
000E78  2  9C C5 1A     	stz player0 + PLAYER::py
000E7B  2  9C C6 1A     	stz player0 + PLAYER::py+1
000E7E  2  9C C7 1A     	stz player0 + PLAYER::levelx
000E81  2  9C C8 1A     	stz player0 + PLAYER::levelx+1
000E84  2  9C C9 1A     	stz player0 + PLAYER::levely
000E87  2  9C CA 1A     	stz player0 + PLAYER::levely+1
000E8A  2  9C CB 1A     	stz player0 + PLAYER::flip
000E8D  2               
000E8D  2               	; load sprites data at the end of the tiles
000E8D  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (VRAM_tiles + tiles * tile_size)
000E91  2  A0 00 20 BA  
000E95  2  FF A9 0B A2  
000EAE  2               
000EAE  2  AD CE 1A     	lda player0 + PLAYER::vera_bitmaps
000EB1  2  85 02        	sta r0L
000EB3  2  AD CF 1A     	lda player0 + PLAYER::vera_bitmaps+1
000EB6  2  85 03        	sta r0H
000EB8  2               
000EB8  2  AC BA 1A     	ldy player0 + PLAYER::sprite
000EBB  2  A9 10        	lda #%00010000					; collision mask 1
000EBD  2  A2 A0        	ldx #%10100000					; 32x32 sprite
000EBF  2  20 0F 0B     	jsr Sprite::load
000EC2  2               
000EC2  2               	; turn sprite 0 on
000EC2  2  AC BA 1A     	ldy player0 + PLAYER::sprite
000EC5  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
000EC7  2  20 7B 0B     	jsr Sprite::display
000ECA  2               
000ECA  2               	; register the vera simplified memory 12:5
000ECA  2  A2 00        	ldx #0
000ECC  2  A0 0C        	ldy #(3*4)
000ECE  2  A9 00 85 04  	LOAD_r1 (VRAM_tiles + tiles * tile_size)
000ED2  2  A9 41 85 05  
000ED6  2               
000ED6  2               @loop:
000ED6  2               	; load full VERA memory (12:0) into R0
000ED6  2  A5 04        	lda r1L
000ED8  2  85 02        	sta r0L
000EDA  2  A5 05        	lda r1H
000EDC  2  85 03        	sta r0H
000EDE  2               
000EDE  2               	; convert full addr to vera mode (bit shiting >> 5)
000EDE  2  A5 03        	lda r0H
000EE0  2  4A           	lsr
000EE1  2  66 02        	ror r0L
000EE3  2  4A           	lsr
000EE4  2  66 02        	ror r0L
000EE6  2  4A           	lsr
000EE7  2  66 02        	ror r0L
000EE9  2  4A           	lsr
000EEA  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000EEC  2  4A           	lsr
000EED  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000EEF  2               
000EEF  2               	; store 12:5 into our cache
000EEF  2  9D CE 1A     	sta player0 + PLAYER::vera_bitmaps, x
000EF2  2  E8           	inx
000EF3  2  A5 02        	lda r0L
000EF5  2  9D CE 1A     	sta player0 + PLAYER::vera_bitmaps, x
000EF8  2  E8           	inx
000EF9  2               
000EF9  2               	; increase the vram (+4 r1H = +1024 r1)
000EF9  2  18           	clc
000EFA  2  A5 05        	lda r1H
000EFC  2  69 04        	adc #4
000EFE  2  85 05        	sta r1H
000F00  2               
000F00  2  88           	dey
000F01  2  D0 D3        	bne @loop
000F03  2               
000F03  2               	; set first bitmap
000F03  2  20 16 0F     	jsr set_bitmap
000F06  2  60           	rts
000F07  2               
000F07  2               ;************************************************
000F07  2               ; force the current player sprite at its position
000F07  2               ;
000F07  2               position_set:
000F07  2  AC BA 1A     	ldy player0 + PLAYER::sprite
000F0A  2  A9 C3 85 02  	LOAD_r0 (player0 + PLAYER::px)
000F0E  2  A9 1A 85 03  
000F12  2  20 9A 0B     	jsr Sprite::position			; set position of the sprite
000F15  2  60           	rts
000F16  2               
000F16  2               ;************************************************
000F16  2               ; change the player bitmap
000F16  2               ;
000F16  2               set_bitmap:
000F16  2  18           	clc
000F17  2  AD C1 1A     	lda player0 + PLAYER::spriteAnim
000F1A  2  6D C0 1A     	adc player0 + PLAYER::spriteID
000F1D  2  0A           	asl						; convert sprite index to work position
000F1E  2  AA           	tax
000F1F  2               
000F1F  2               	; extract the vera bitmap address in vera format (12:5 bits)
000F1F  2  BD CE 1A     	lda player0 + PLAYER::vera_bitmaps, x
000F22  2  85 03        	sta r0H
000F24  2  BD CF 1A     	lda player0 + PLAYER::vera_bitmaps + 1, x
000F27  2  85 02        	sta r0L
000F29  2               
000F29  2  AC BA 1A     	ldy player0 + PLAYER::sprite
000F2C  2  20 69 0B     	jsr Sprite::set_bitmap
000F2F  2  60           	rts
000F30  2               
000F30  2               ;************************************************
000F30  2               ; increase player X position
000F30  2               ;	modify r0
000F30  2               ;
000F30  2               position_x_inc:
000F30  2               	; move the absolute position levelx + 1
000F30  2  AD C7 1A     	lda player0 + PLAYER::levelx
000F33  2  AE C8 1A     	ldx player0 + PLAYER::levelx + 1
000F36  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
000F38  2  D0 04        	bne @incLOW1
000F3A  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
000F3C  2  F0 48        	beq @no_move						; we are at the level limit
000F3E  2               @incLOW1:
000F3E  2  1A           	inc
000F3F  2  8D C7 1A     	sta player0 + PLAYER::levelx
000F42  2  D0 04        	bne @inc_screen_x
000F44  2               @incHi:
000F44  2  E8           	inx
000F45  2  8E C8 1A     	stx player0 + PLAYER::levelx + 1
000F48  2               
000F48  2               @inc_screen_x:
000F48  2               	; distance from layer border to sprite absolute position
000F48  2  38           	sec
000F49  2  AD C7 1A     	lda player0 + PLAYER::levelx
000F4C  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000F4F  2  85 02        	sta r0L
000F51  2  AD C8 1A     	lda player0 + PLAYER::levelx + 1
000F54  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000F57  2  85 03        	sta r0H
000F59  2               
000F59  2  D0 17        	bne @move_sprite_upper
000F5B  2  A6 03        	ldx r0H
000F5D  2  A5 02        	lda r0L
000F5F  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
000F61  2  90 19        	bcc @move_sprite
000F63  2               
000F63  2               @move_layers:
000F63  2               	; keep the sprite onscreen 224, for level 224->416
000F63  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
000F67  2  20 E1 0D     
000F6A  2  F0 06        	beq @move_sprite_upper
000F6C  2  A2 00        	ldx #Layers::HSCROLL
000F6E  2  20 40 0E     	jsr Layers::scroll_l0
000F71  2  60           	rts
000F72  2               
000F72  2               @move_sprite_upper:
000F72  2  AD C3 1A     	lda player0 + PLAYER::px
000F75  2  AE C4 1A     	ldx player0 + PLAYER::px + 1
000F78  2  1A           	inc
000F79  2  D0 01        	bne @move_sprite
000F7B  2  E8           	inx
000F7C  2               
000F7C  2               @move_sprite:
000F7C  2  8D C3 1A     	sta player0 + PLAYER::px
000F7F  2  8E C4 1A     	stx player0 + PLAYER::px + 1
000F82  2  20 07 0F     	jsr Player::position_set
000F85  2  60           	rts
000F86  2               
000F86  2               @no_move:
000F86  2  60           	rts
000F87  2               
000F87  2               ;************************************************
000F87  2               ; decrease player position X unless at 0
000F87  2               ;
000F87  2               position_x_dec:
000F87  2               	; move the absolute position levelx + 1
000F87  2  AD C7 1A     	lda player0 + PLAYER::levelx
000F8A  2  D0 05        	bne @decLOW
000F8C  2  AE C8 1A     	ldx player0 + PLAYER::levelx + 1
000F8F  2  F0 49        	beq @no_move						; we are at Y == 0
000F91  2               @decLOW:
000F91  2  3A           	dec
000F92  2  8D C7 1A     	sta player0 + PLAYER::levelx
000F95  2  C9 FF        	cmp #$ff
000F97  2  D0 04        	bne @dec_screen_x
000F99  2               @decHi:
000F99  2  CA           	dex
000F9A  2  8E C8 1A     	stx player0 + PLAYER::levelx + 1
000F9D  2               
000F9D  2               @dec_screen_x:
000F9D  2               	; distance from layer border to sprite absolute position
000F9D  2  38           	sec
000F9E  2  AD C7 1A     	lda player0 + PLAYER::levelx
000FA1  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000FA4  2  85 02        	sta r0L
000FA6  2  AD C8 1A     	lda player0 + PLAYER::levelx + 1
000FA9  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000FAC  2  85 03        	sta r0H
000FAE  2               
000FAE  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000FB0  2               
000FB0  2  A5 02        	lda r0L
000FB2  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000FB4  2  C9 40        	cmp #64
000FB6  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
000FB8  2               
000FB8  2               @move_layers:
000FB8  2               	; keep the sprite onscreen 224, for level 224->416
000FB8  2  A2 00        	ldx #Layers::HSCROLL
000FBA  2  20 1E 0E     	jsr Layers::scroll_dec
000FBD  2  F0 06        	beq @move_sprite_lower
000FBF  2  A2 00        	ldx #Layers::HSCROLL
000FC1  2  20 40 0E     	jsr Layers::scroll_l0
000FC4  2  60           	rts
000FC5  2               
000FC5  2               @move_sprite_lower:
000FC5  2  AD C3 1A     	lda player0 + PLAYER::px
000FC8  2  AE C4 1A     	ldx player0 + PLAYER::px + 1
000FCB  2  3A           	dec
000FCC  2  C9 FF        	cmp #$ff
000FCE  2  D0 01        	bne @move_sprite
000FD0  2  CA           	dex
000FD1  2               
000FD1  2               @move_sprite:
000FD1  2  8D C3 1A     	sta player0 + PLAYER::px
000FD4  2  8E C4 1A     	stx player0 + PLAYER::px + 1
000FD7  2  20 07 0F     	jsr Player::position_set
000FDA  2               
000FDA  2               @no_move:
000FDA  2  60           	rts
000FDB  2               
000FDB  2               ;************************************************
000FDB  2               ; increase player Y position
000FDB  2               ;
000FDB  2               position_y_inc:
000FDB  2               	; move the absolute position levelx + 1
000FDB  2  AD C9 1A     	lda player0 + PLAYER::levely
000FDE  2  AE CA 1A     	ldx player0 + PLAYER::levely + 1
000FE1  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
000FE3  2  D0 04        	bne @incLOW1
000FE5  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
000FE7  2  F0 4E        	beq @no_move						; we are at the level limit
000FE9  2               @incLOW1:
000FE9  2  1A           	inc
000FEA  2  8D C9 1A     	sta player0 + PLAYER::levely
000FED  2  D0 04        	bne @inc_screen_y
000FEF  2               @incHi:
000FEF  2  E8           	inx
000FF0  2  8E CA 1A     	stx player0 + PLAYER::levely + 1
000FF3  2               
000FF3  2               @inc_screen_y:
000FF3  2               	; distance from layer border to sprite absolute position
000FF3  2  38           	sec
000FF4  2  AD C9 1A     	lda player0 + PLAYER::levely
000FF7  2  ED 39 9F     	sbc VERA_L1_vscrolllo
000FFA  2  85 02        	sta r0L
000FFC  2  AD CA 1A     	lda player0 + PLAYER::levely + 1
000FFF  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
001002  2  85 03        	sta r0H
001004  2               
001004  2  D0 1D        	bne @move_sprite_upper
001006  2  A6 03        	ldx r0H
001008  2  A5 02        	lda r0L
00100A  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
00100C  2  90 1F        	bcc @move_sprite
00100E  2               
00100E  2               @move_layers:
00100E  2               	; keep the sprite onscreen 224, for level 224->416
00100E  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
001012  2  A9 01 85 03  
001016  2  A2 02 20 FC  
00101B  2  F0 06        	beq @move_sprite_upper
00101D  2  A2 02        	ldx #Layers::VSCROLL
00101F  2  20 40 0E     	jsr Layers::scroll_l0
001022  2  60           	rts
001023  2               
001023  2               @move_sprite_upper:
001023  2  AD C5 1A     	lda player0 + PLAYER::py
001026  2  AE C6 1A     	ldx player0 + PLAYER::py + 1
001029  2  1A           	inc
00102A  2  D0 01        	bne @move_sprite
00102C  2  E8           	inx
00102D  2               
00102D  2               @move_sprite:
00102D  2  8D C5 1A     	sta player0 + PLAYER::py
001030  2  8E C6 1A     	stx player0 + PLAYER::py + 1
001033  2  20 07 0F     	jsr Player::position_set
001036  2  60           	rts
001037  2               
001037  2               @no_move:
001037  2  60           	rts
001038  2               
001038  2               ;;
001038  2  AD C5 1A     	lda player0 + PLAYER::py
00103B  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
00103D  2  F0 09        	beq @moveleftP0
00103F  2  1A           	inc
001040  2  8D C5 1A     	sta player0 + PLAYER::py
001043  2  D0 03        	bne @moveleftP0
001045  2  EE C6 1A     	inc player0 + PLAYER::py + 1
001048  2               @moveleftP0:
001048  2  20 07 0F     	jsr Player::position_set
00104B  2  60           	rts
00104C  2               
00104C  2               ;************************************************
00104C  2               ; decrease player position X unless at 0
00104C  2               ;
00104C  2               position_y_dec:
00104C  2               	; move the absolute position levelx + 1
00104C  2  AD C9 1A     	lda player0 + PLAYER::levely
00104F  2  D0 05        	bne @decLOW
001051  2  AE CA 1A     	ldx player0 + PLAYER::levely + 1
001054  2  F0 49        	beq @no_move						; we are at Y == 0
001056  2               @decLOW:
001056  2  3A           	dec
001057  2  8D C9 1A     	sta player0 + PLAYER::levely
00105A  2  C9 FF        	cmp #$ff
00105C  2  D0 04        	bne @dec_screen_y
00105E  2               @decHi:
00105E  2  CA           	dex
00105F  2  8E CA 1A     	stx player0 + PLAYER::levely + 1
001062  2               
001062  2               @dec_screen_y:
001062  2               	; distance from layer border to sprite absolute position
001062  2  38           	sec
001063  2  AD C9 1A     	lda player0 + PLAYER::levely
001066  2  ED 39 9F     	sbc VERA_L1_vscrolllo
001069  2  85 02        	sta r0L
00106B  2  AD CA 1A     	lda player0 + PLAYER::levely + 1
00106E  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
001071  2  85 03        	sta r0H
001073  2               
001073  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
001075  2               
001075  2  A5 02        	lda r0L
001077  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
001079  2  C9 20        	cmp #32
00107B  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
00107D  2               
00107D  2               @move_layers:
00107D  2               	; keep the sprite onscreen 224, for level 224->416
00107D  2  A2 02        	ldx #Layers::VSCROLL
00107F  2  20 1E 0E     	jsr Layers::scroll_dec
001082  2  F0 06        	beq @move_sprite_lower
001084  2  A2 02        	ldx #Layers::VSCROLL
001086  2  20 40 0E     	jsr Layers::scroll_l0
001089  2  60           	rts
00108A  2               
00108A  2               @move_sprite_lower:
00108A  2  AD C5 1A     	lda player0 + PLAYER::py
00108D  2  AE C6 1A     	ldx player0 + PLAYER::py + 1
001090  2  3A           	dec
001091  2  C9 FF        	cmp #$ff
001093  2  D0 01        	bne @move_sprite
001095  2  CA           	dex
001096  2               
001096  2               @move_sprite:
001096  2  8D C5 1A     	sta player0 + PLAYER::py
001099  2  8E C6 1A     	stx player0 + PLAYER::py + 1
00109C  2  20 07 0F     	jsr Player::position_set
00109F  2               
00109F  2               @no_move:
00109F  2  60           	rts
0010A0  2               
0010A0  2               ;************************************************
0010A0  2               ; hide the current sprite
0010A0  2               ;
0010A0  2               hide1:
0010A0  2  DB           	stp
0010A1  2  18           	clc
0010A2  2  AD C1 1A     	lda player0 + PLAYER::spriteAnim
0010A5  2  6D C0 1A     	adc player0 + PLAYER::spriteID
0010A8  2  A8           	tay		; sprite index
0010A9  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
0010AB  2  20 7B 0B     	jsr Sprite::display			; turn current sprite off
0010AE  2  60           	rts
0010AF  2               
0010AF  2               ;************************************************
0010AF  2               ; Animate the player if needed
0010AF  2               ;
0010AF  2               animate:
0010AF  2  AD BB 1A     	lda player0 + PLAYER::status
0010B2  2  C9 00        	cmp #STATUS_WALKING_IDLE
0010B4  2  F0 3A        	beq @end
0010B6  2  C9 04        	cmp #STATUS_FALLING
0010B8  2  F0 36        	beq @end
0010BA  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
0010BC  2  F0 32        	beq @end
0010BE  2               
0010BE  2  CE BF 1A     	dec player0 + PLAYER::animation_tick
0010C1  2  D0 2D        	bne @end
0010C3  2               
0010C3  2  A9 0A        	lda #10
0010C5  2  8D BF 1A     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
0010C8  2               
0010C8  2  18           	clc
0010C9  2  AD C1 1A     	lda player0 + PLAYER::spriteAnim
0010CC  2  6D C2 1A     	adc player0 + PLAYER::spriteAnimDirection
0010CF  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
0010D1  2  C9 03        	cmp #3
0010D3  2  F0 0B        	beq @set_sprite_anim_decrease
0010D5  2  80 10        	bra @set_sprite_on
0010D7  2               @set_sprite_anim_increase:
0010D7  2  A9 01        	lda #01
0010D9  2  8D C2 1A     	sta player0 + PLAYER::spriteAnimDirection
0010DC  2  A9 00        	lda #0
0010DE  2  80 07        	bra @set_sprite_on
0010E0  2               @set_sprite_anim_decrease:
0010E0  2  A9 FF        	lda #$ff
0010E2  2  8D C2 1A     	sta player0 + PLAYER::spriteAnimDirection
0010E5  2  A9 02        	lda #2
0010E7  2               @set_sprite_on:
0010E7  2  8D C1 1A     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
0010EA  2  20 16 0F     	jsr Player::set_bitmap
0010ED  2  20 07 0F     	jsr Player::position_set
0010F0  2               @end:
0010F0  2  60           	rts
0010F1  2               
0010F1  2               ;************************************************
0010F1  2               ; position of the player on the layer1 tilemap
0010F1  2               ;	modified : r1
0010F1  2               ;	output : r0
0010F1  2               ;
0010F1  2               get_tilemap_position:
0010F1  2  18           	clc
0010F2  2  AD C9 1A     	lda player0 + PLAYER::levely		; sprite screen position
0010F5  2  85 02        	sta r0L
0010F7  2  AD CA 1A     	lda player0 + PLAYER::levely + 1
0010FA  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
0010FC  2               
0010FC  2  A5 02        	lda r0L
0010FE  2  29 F0        	and #%11110000
001100  2  85 02        	sta r0L
001102  2  A5 03        	lda r0H
001104  2  85 03        	sta r0H
001106  2  A5 02        	lda r0L
001108  2  0A           	asl
001109  2  26 03        	rol r0H
00110B  2  85 02        	sta r0L 						; r0 = first tile of the tilemap in the row
00110D  2               									; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
00110D  2               
00110D  2  AD C7 1A     	lda player0 + PLAYER::levelx		; sprite screen position
001110  2  85 04        	sta r1L
001112  2  AD C8 1A     	lda player0 + PLAYER::levelx + 1
001115  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
001117  2               
001117  2  4A           	lsr
001118  2  66 04        	ror r1L
00111A  2  4A           	lsr
00111B  2  66 04        	ror r1L
00111D  2  4A           	lsr
00111E  2  66 04        	ror r1L
001120  2  4A           	lsr
001121  2  66 04        	ror r1L
001123  2  85 05        	sta r1H 					; r1 = tile X in the row
001125  2               								; sprite X /16 (convert to tile X)
001125  2               
001125  2  18           	clc
001126  2  A5 02        	lda r0L
001128  2  65 04        	adc r1L
00112A  2  85 02        	sta r0L
00112C  2  A5 03        	lda r0H
00112E  2  65 05        	adc r1H
001130  2  85 03        	sta r0H						; r0 = tile position in the tilemap
001132  2               
001132  2  18           	clc
001133  2  A5 03        	lda r0H
001135  2  69 A0        	adc #>HIMEM
001137  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
001139  2  60           	rts
00113A  2               
00113A  2               ;************************************************
00113A  2               ; force player status to be idle
00113A  2               ;
00113A  2               set_idle:
00113A  2  AD BB 1A     	lda player0 + PLAYER::status
00113D  2  C9 01        	cmp #STATUS_WALKING
00113F  2  F0 06        	beq @set_idle_walking
001141  2  C9 02        	cmp #STATUS_CLIMBING
001143  2  F0 08        	beq @set_idle_climbing
001145  2  60           	rts							; keep the current value
001146  2               @set_idle_jump:
001146  2  60           	rts
001147  2               @set_idle_walking:
001147  2  A9 00 8D BB  	m_status STATUS_WALKING_IDLE
00114B  2  1A           
00114C  2  60           	rts
00114D  2               @set_idle_climbing:
00114D  2  A9 03 8D BB  	m_status STATUS_CLIMBING_IDLE
001151  2  1A           
001152  2  60           	rts
001153  2               
001153  2               ;************************************************
001153  2               ; check if the player sits on a solid tile
001153  2               ;
001153  2               physics:
001153  2  20 F1 10     	jsr get_tilemap_position
001156  2  A5 02 8D CC  	SAVE_r0 player0 + PLAYER::tilemap	; cache the tilemap @
00115A  2  1A A5 03 8D  
00115E  2  CD 1A        
001160  2               
001160  2  AD BB 1A     	lda player0 + PLAYER::status
001163  2  C9 02        	cmp #STATUS_CLIMBING
001165  2  F0 0B        	beq @return1
001167  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
001169  2  F0 07        	beq @return1
00116B  2  C9 05        	cmp #STATUS_JUMPING
00116D  2  D0 04        	bne @fall
00116F  2  4C 17 12     	jmp @jump
001172  2               @return1:
001172  2  60           	rts
001173  2               
001173  2               	;
001173  2               	; deal with gravity driven falling
001173  2               	;
001173  2               @fall:
001173  2               .ifdef DEBUG
001173  2               	CHECK_DEBUG
001173  2               .endif
001173  2  20 F8 12     	jsr check_collision_down
001176  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
001178  2  4C 0A 12     	jmp @sit_on_solid				; solid tile below the player that is not a slope
00117B  2               
00117B  2               @check_on_slope:
00117B  2  20 79 13     	jsr check_player_on_slop
00117E  2  F0 23        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
001180  2               
001180  2               @on_slope:
001180  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001182  2  F0 0B        	beq @slope_left
001184  2               @slope_right:
001184  2  AD C7 1A     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
001187  2  29 0F        	and #%00001111
001189  2  49 0F        	eor #%00001111					; X = 0 => Y can go up to 15
00118B  2  85 30        	sta $30
00118D  2  80 09        	bra @slope_y
00118F  2               @slope_left:
00118F  2  AD C7 1A     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
001192  2  29 0F        	and #%00001111
001194  2  85 30        	sta $30
001196  2  80 00        	bra @slope_y
001198  2               @slope_y:
001198  2  AD C9 1A     	lda player0 + PLAYER::levely
00119B  2  29 0F        	and #%00001111
00119D  2  C5 30        	cmp $30
00119F  2  30 02        	bmi @no_collision_down
0011A1  2  80 67        	bra @sit_on_solid
0011A3  2               
0011A3  2               @no_collision_down:
0011A3  2               	; if the player is already falling, increase t
0011A3  2  AD BB 1A     	lda player0 + PLAYER::status
0011A6  2  C9 04        	cmp #STATUS_FALLING
0011A8  2  F0 0D        	beq @increase_ticks
0011AA  2               
0011AA  2               	; let the player fall
0011AA  2  A9 04        	lda #STATUS_FALLING
0011AC  2  8D BB 1A     	sta player0 + PLAYER::status
0011AF  2  A9 08        	lda #FALL_LO_TICKS
0011B1  2  8D BC 1A     	sta player0 + PLAYER::falling_ticks	; reset t
0011B4  2  9C BD 1A     	stz player0 + PLAYER::falling_ticks + 1
0011B7  2               @increase_ticks:
0011B7  2  CE BC 1A     	dec player0 + PLAYER::falling_ticks	; increase HI every 10 refresh
0011BA  2  D0 08        	bne @drive_fall
0011BC  2  A9 08        	lda #FALL_LO_TICKS
0011BE  2  8D BC 1A     	sta player0 + PLAYER::falling_ticks	; reset t
0011C1  2  EE BD 1A     	inc player0 + PLAYER::falling_ticks + 1
0011C4  2               
0011C4  2               @drive_fall:
0011C4  2  AD BD 1A     	lda player0 + PLAYER::falling_ticks + 1
0011C7  2  F0 3C        	beq @fall_once
0011C9  2  85 14        	sta r9L
0011CB  2               @loop_fall:
0011CB  2  20 DB 0F     	jsr position_y_inc
0011CE  2  20 F1 10     	jsr get_tilemap_position
0011D1  2  A5 02 8D CC  	SAVE_r0 player0 + PLAYER::tilemap
0011D5  2  1A A5 03 8D  
0011D9  2  CD 1A        
0011DB  2               
0011DB  2               	; test reached solid ground
0011DB  2  20 F8 12     	jsr check_collision_down
0011DE  2  D0 2A        	bne @sit_on_solid
0011E0  2               
0011E0  2               @loop_fall_no_collision:
0011E0  2  C6 14        	dec r9L
0011E2  2  D0 E7        	bne @loop_fall						; take t in count for gravity
0011E4  2               
0011E4  2               @apply_delta_x:
0011E4  2  AD BE 1A     	lda player0 + PLAYER::delta_x		; apply delatx
0011E7  2  F0 2D        	beq @return
0011E9  2  30 0D        	bmi @fall_left
0011EB  2               @fall_right:
0011EB  2  20 E6 12     	jsr check_collision_right
0011EE  2  F0 04        	beq @no_fcollision_right
0011F0  2               @fcollision_right:
0011F0  2  9C BE 1A     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
0011F3  2  60           	rts
0011F4  2               @no_fcollision_right:
0011F4  2  20 30 0F     	jsr position_x_inc
0011F7  2  60           	rts
0011F8  2               @fall_left:
0011F8  2  20 EF 12     	jsr check_collision_left
0011FB  2  F0 04        	beq @no_fcollision_left
0011FD  2               @fcollision_left:
0011FD  2  9C BE 1A     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
001200  2  60           	rts
001201  2               @no_fcollision_left:
001201  2  20 87 0F     	jsr position_x_dec
001204  2  60           	rts
001205  2               
001205  2               @fall_once:
001205  2  20 DB 0F     	jsr position_y_inc
001208  2  80 DA        	bra @apply_delta_x
00120A  2               
00120A  2               @sit_on_solid:
00120A  2               	; change the status if falling
00120A  2  AD BB 1A     	lda player0 + PLAYER::status
00120D  2  C9 04        	cmp #STATUS_FALLING
00120F  2  D0 05        	bne @return
001211  2  A9 00        	lda #STATUS_WALKING_IDLE
001213  2  8D BB 1A     	sta player0 + PLAYER::status
001216  2               @return:
001216  2  60           	rts
001217  2               
001217  2               	;
001217  2               	; deal with gravity driven jumping
001217  2               	;
001217  2               @jump:
001217  2               @decrease_ticks:
001217  2  CE BC 1A     	dec player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
00121A  2  D0 0A        	bne @drive_jump
00121C  2  CE BD 1A     	dec player0 + PLAYER::falling_ticks	+ 1
00121F  2  F0 4B        	beq @apex							; reached the apex of the jump
001221  2               
001221  2  A9 0A        	lda #JUMP_LO_TICKS
001223  2  8D BC 1A     	sta player0 + PLAYER::falling_ticks	; reset t
001226  2               
001226  2               @drive_jump:
001226  2  AD BD 1A     	lda player0 + PLAYER::falling_ticks + 1
001229  2  85 14        	sta r9L
00122B  2               @loop_jump:
00122B  2  20 4C 10     	jsr position_y_dec
00122E  2  20 F1 10     	jsr get_tilemap_position
001231  2  A5 02 8D CC  	SAVE_r0 player0 + PLAYER::tilemap
001235  2  1A A5 03 8D  
001239  2  CD 1A        
00123B  2               
00123B  2  AD C9 1A     	lda player0 + PLAYER::levely
00123E  2  29 0F        	and #%00001111
001240  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
001242  2               
001242  2               	; test hit a ceiling
001242  2  20 2D 13     	jsr check_collision_up
001245  2  D0 04        	bne @collision_up
001247  2               @no_collision_up:
001247  2  C6 14        	dec r9L
001249  2  D0 E0        	bne @loop_jump						; loop to take t in count for gravity
00124B  2               
00124B  2               @collision_up:
00124B  2  AD BE 1A     	lda player0 + PLAYER::delta_x		; deal with deltax
00124E  2  F0 C6        	beq @return
001250  2  30 0D        	bmi @jump_left
001252  2               @jump_right:
001252  2  20 E6 12     	jsr check_collision_right
001255  2  F0 04        	beq @no_collision_right
001257  2               @collision_right:
001257  2  9C BE 1A     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
00125A  2  60           	rts
00125B  2               @no_collision_right:
00125B  2  20 30 0F     	jsr position_x_inc
00125E  2  60           	rts
00125F  2               @jump_left:
00125F  2  20 EF 12     	jsr check_collision_left
001262  2  F0 04        	beq @no_collision_left
001264  2               @collision_left:
001264  2  9C BE 1A     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
001267  2  60           	rts
001268  2               @no_collision_left:
001268  2  20 87 0F     	jsr position_x_dec
00126B  2  60           	rts
00126C  2               
00126C  2               @apex:
00126C  2  A9 06 8D BB  	m_status STATUS_JUMPING_IDLE
001270  2  1A           
001271  2  60           	rts
001272  2               
001272  2               ;************************************************
001272  2               ;	compute the number of tiles covered by the boundingbox
001272  2               ;	return: r1L : number of tiles height
001272  2               ;			X = r1H : number of tiles width
001272  2               ;			Y = r2L : index of the first tile to test
001272  2               ;
001272  2               bbox_coverage:
001272  2               	; X = how many column of tiles to test
001272  2  AD C7 1A     	lda player0 + PLAYER::levelx
001275  2  29 0F        	and #%00001111
001277  2  C9 08        	cmp #8
001279  2  F0 08        	beq @one_tile
00127B  2  30 0C        	bmi @two_tiles_straight				; if X < 8, test as if int
00127D  2               @two_tiles_right:
00127D  2  A2 02        	ldx #02								; test 2 column ( y % 16 <> 0)
00127F  2  A0 01        	ldy #01								; starting on row +1
001281  2  80 0A        	bra @test_lines
001283  2               @one_tile:
001283  2  A2 01        	ldx #01								; test 1 column ( y % 16  == 8)
001285  2  A0 01        	ldy #01								; starting on row +1
001287  2  80 04        	bra @test_lines
001289  2               @two_tiles_straight:
001289  2  A2 02        	ldx #02								; test 2 columns ( y % 16 == 0)
00128B  2  A0 00        	ldy #00								; test on row  0 ( x % 16 != 0)
00128D  2               
00128D  2               @test_lines:
00128D  2               	; X = how many lines of tiles to test
00128D  2  AD C9 1A     	lda player0 + PLAYER::levely
001290  2  29 0F        	and #%00001111
001292  2  D0 09        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
001294  2               @yint:
001294  2  A9 02        	lda #02					; test 2 lines ( y % 16 == 0)
001296  2  85 04        	sta r1L
001298  2  86 05        	stx r1H
00129A  2  84 06        	sty r2L
00129C  2  60           	rts
00129D  2               @yfloat:
00129D  2  A9 03        	lda #03					; test 3 rows ( y % 16 <> 0)
00129F  2  85 04        	sta r1L
0012A1  2  86 05        	stx r1H
0012A3  2  84 06        	sty r2L
0012A5  2  60           	rts
0012A6  2               
0012A6  2               ;************************************************
0012A6  2               ; check collision on the height
0012A6  2               ;	A = vaule of the collision
0012A6  2               ;	ZERO = no collision
0012A6  2               ;
0012A6  2               check_collision_height:
0012A6  2               	; only test if we are 'centered'
0012A6  2  AD C7 1A     	lda player0 + PLAYER::levelx
0012A9  2  29 0F        	and #%00001111
0012AB  2  C9 08        	cmp #08
0012AD  2  D0 34        	bne @no_collision
0012AF  2               
0012AF  2  AD CC 1A     	lda player0 + PLAYER::tilemap
0012B2  2  85 02        	sta r0L
0012B4  2  AD CD 1A     	lda player0 + PLAYER::tilemap + 1
0012B7  2  85 03        	sta r0H
0012B9  2               
0012B9  2  20 72 12     	jsr bbox_coverage
0012BC  2  A6 04        	ldx r1L				; tiles height
0012BE  2  98           	tya
0012BF  2  18           	clc
0012C0  2  6D 51 0E     	adc test_right_left
0012C3  2  A8           	tay
0012C4  2               
0012C4  2               @test_line:
0012C4  2  B1 02        	lda (r0L),y
0012C6  2  F0 11        	beq @test_next_line
0012C8  2               
0012C8  2               	; some tiles are not real collision
0012C8  2  84 30        	sty $30
0012CA  2  A8           	tay
0012CB  2  B9 B3 19     	lda tiles_attributes,y
0012CE  2  29 02        	and #TILE_ATTR::SOLID_WALL
0012D0  2  F0 05        	beq @test_next_line1
0012D2  2  A4 30        	ldy $30
0012D4  2  B1 02        	lda (r0L),y
0012D6  2  60           	rts
0012D7  2               
0012D7  2               @test_next_line1:
0012D7  2  A4 30        	ldy $30
0012D9  2               
0012D9  2               @test_next_line:
0012D9  2  CA           	dex
0012DA  2  F0 07        	beq @no_collision
0012DC  2  98           	tya
0012DD  2  18           	clc
0012DE  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
0012E0  2  A8           	tay
0012E1  2  80 E1        	bra @test_line					; LADDERS can be traversed
0012E3  2               
0012E3  2               @no_collision:						; force a no collision
0012E3  2  A9 00        	lda #00
0012E5  2               @return:
0012E5  2  60           	rts
0012E6  2               
0012E6  2               ;************************************************
0012E6  2               ; check collision on the right
0012E6  2               ;	return: A = value of the collision
0012E6  2               ;			ZERO = no collision
0012E6  2               ;
0012E6  2               check_collision_right:
0012E6  2  A9 01        	lda #$01
0012E8  2  8D 51 0E     	sta test_right_left
0012EB  2  20 A6 12     	jsr check_collision_height
0012EE  2  60           	rts
0012EF  2               
0012EF  2               ;************************************************
0012EF  2               ; check collision on the left
0012EF  2               ;
0012EF  2               check_collision_left:
0012EF  2  A9 FF        	lda #$ff
0012F1  2  8D 51 0E     	sta test_right_left
0012F4  2  20 A6 12     	jsr check_collision_height
0012F7  2  60           	rts
0012F8  2               
0012F8  2               ;************************************************
0012F8  2               ; check collision down
0012F8  2               ;	collision surface to test is 16 pixels around the mid X
0012F8  2               ; 	output : Z = no collision
0012F8  2               ;
0012F8  2               check_collision_down:
0012F8  2  AD C9 1A     	lda player0 + PLAYER::levely	; if the player is inbetween 2 tiles there can be no collision
0012FB  2  29 0F        	and #%00001111
0012FD  2  F0 03        	beq @real_test
0012FF  2  A9 00        	lda #00
001301  2  60           	rts
001302  2               @real_test:
001302  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001305  2  85 02        	sta r0L
001307  2  AD CD 1A     	lda player0 + PLAYER::tilemap + 1
00130A  2  85 03        	sta r0H
00130C  2               
00130C  2  20 72 12     	jsr bbox_coverage
00130F  2  98           	tya
001310  2  18           	clc
001311  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001313  2  A8           	tay
001314  2               
001314  2               @test_colum:
001314  2  B1 02        	lda (r0L),y
001316  2  F0 0C        	beq @next_colum							; empty tile, test the next one
001318  2               
001318  2  84 30        	sty $30
00131A  2  A8           	tay
00131B  2  B9 B3 19     	lda tiles_attributes,y
00131E  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001320  2  D0 08        	bne @return1							; considere slopes as empty
001322  2  A4 30        	ldy $30
001324  2               
001324  2               @next_colum:
001324  2  CA           	dex
001325  2  F0 05        	beq @return
001327  2  C8           	iny
001328  2  80 EA        	bra @test_colum
00132A  2               @return1:
00132A  2  A9 01        	lda #01
00132C  2               @return:
00132C  2  60           	rts
00132D  2               
00132D  2               ;************************************************
00132D  2               ; check collision up
00132D  2               ;	collision surface to test is 16 pixels around the mid X
00132D  2               ;	input :
00132D  2               ;		r0 : @ of current tile the top-left corner of the player sprite
00132D  2               ; 	output : Z = no collision
00132D  2               ;
00132D  2               check_collision_up:
00132D  2  38           	sec
00132E  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001331  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001333  2  85 02        	sta r0L
001335  2  AD CD 1A     	lda player0 + PLAYER::tilemap + 1
001338  2  E9 00        	sbc #0
00133A  2  85 03        	sta r0H
00133C  2               
00133C  2               	; X = how many column of tiles to test
00133C  2  AD C7 1A     	lda player0 + PLAYER::levelx
00133F  2  29 0F        	and #%00001111
001341  2  F0 0A        	beq @xint				; if player is not on a multiple of 16 (tile size)
001343  2               @xfloat:
001343  2  C9 08        	cmp #8
001345  2  30 06        	bmi @xint
001347  2  A2 01        	ldx #1					; test 1 column ( y % 16 <> 0)
001349  2  A0 01        	ldy #1					; starting at colum + 1
00134B  2  80 13        	bra @test_colum
00134D  2               @xint:
00134D  2  A2 02        	ldx #2					; test 2 columns ( y % 16 == 0)
00134F  2  A0 00        	ldy #0					; starting at colum
001351  2  80 00        	bra @test_y
001353  2               
001353  2               @test_y:
001353  2               	; Y = how tile rows to test
001353  2  AD C9 1A     	lda player0 + PLAYER::levely
001356  2  29 0F        	and #%00001111
001358  2  F0 06        	beq @yint				; if player is not on a multiple of 16 (tile size)
00135A  2               @yfloat:
00135A  2  98           	tya
00135B  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; test on (row -1) +1 ( x % 16 != 0) + column
00135D  2  A8           	tay
00135E  2  80 00        	bra @test_colum
001360  2               @yint:
001360  2               
001360  2               @test_colum:
001360  2  B1 02        	lda (r0L),y							; left side
001362  2  F0 0C        	beq @next_column
001364  2               
001364  2  84 30        	sty $30
001366  2  A8           	tay
001367  2  B9 B3 19     	lda tiles_attributes,y
00136A  2  29 04        	and #TILE_ATTR::SOLID_CEILING
00136C  2  D0 08        	bne @return1
00136E  2  A4 30        	ldy $30
001370  2               
001370  2               @next_column:
001370  2  CA           	dex
001371  2  F0 05        	beq @return
001373  2  C8           	iny
001374  2  80 EA        	bra @test_colum
001376  2               @return1:
001376  2  A9 01        	lda #01
001378  2               @return:
001378  2  60           	rts
001379  2               
001379  2               ;************************************************
001379  2               ; check if the player feet is exactly on a slope tile
001379  2               ;	modify: player_on_slop
001379  2               ;	return: Z = slop
001379  2               ;			Y = feet position tested (vs r0)
001379  2               ;
001379  2               check_player_on_slop:
001379  2  9C 4F 0E     	stz player_on_slop				; no slope
00137C  2               
00137C  2  20 72 12     	jsr bbox_coverage
00137F  2               
00137F  2  18           	clc
001380  2  98           	tya
001381  2  A6 04        	ldx r1L
001383  2  CA           	dex
001384  2               :
001384  2  69 20        	adc #LEVEL_TILES_WIDTH
001386  2  CA           	dex
001387  2  D0 FB        	bne :-
001389  2  A8           	tay								; position of the feet tiles
00138A  2               
00138A  2  AD C7 1A     	lda player0 + PLAYER::levelx
00138D  2  29 0F        	and #%00001111
00138F  2  C9 08        	cmp #08
001391  2  10 01        	bpl :+
001393  2  C8           	iny
001394  2               :
001394  2               
001394  2               	; check if player feet is ON a slop
001394  2  B1 02        	lda (r0),y						; test ON feet level
001396  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001398  2  F0 04        	beq @on_slope
00139A  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
00139C  2  D0 06        	bne @no_slope
00139E  2               @on_slope:
00139E  2  B1 02        	lda (r0),y						; test ON feet level
0013A0  2  8D 4F 0E     	sta player_on_slop
0013A3  2  60           	rts
0013A4  2               
0013A4  2               @no_slope:
0013A4  2  A9 00        	lda #0
0013A6  2  8D 4F 0E     	sta player_on_slop
0013A9  2  60           	rts
0013AA  2               
0013AA  2               ;************************************************
0013AA  2               ; check if the player feet is ABOVE a slope tile
0013AA  2               ;	input: 	Y = feet position tested (vs r0)
0013AA  2               ;	modify: player_on_slop
0013AA  2               ;	return: Z = slop
0013AA  2               ;
0013AA  2               is_player_above_slop:
0013AA  2  9C 4F 0E     	stz player_on_slop				; no slope
0013AD  2               
0013AD  2  98           	tya
0013AE  2  18           	clc
0013AF  2  69 20        	adc #LEVEL_TILES_WIDTH
0013B1  2  A8           	tay								; test BELOW feet level
0013B2  2  B1 02        	lda (r0),y
0013B4  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0013B6  2  F0 0A        	beq @above_slope
0013B8  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0013BA  2  F0 06        	beq @above_slope
0013BC  2               @no_slope:
0013BC  2  A9 00        	lda #0
0013BE  2  8D 4F 0E     	sta player_on_slop
0013C1  2  60           	rts
0013C2  2               @above_slope:
0013C2  2  8D 4F 0E     	sta player_on_slop
0013C5  2  60           	rts
0013C6  2               
0013C6  2               ;************************************************
0013C6  2               ; status to ignore while moving
0013C6  2               ;
0013C6  2               ignore_move_request:
0013C6  2  00           	.byte	00	;	STATUS_WALKING_IDLE
0013C7  2  00           	.byte	00	;	STATUS_WALKING
0013C8  2  02           	.byte	02	;	STATUS_CLIMBING
0013C9  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
0013CA  2  01           	.byte	01	;	STATUS_FALLING
0013CB  2  01           	.byte	01	;	STATUS_JUMPING
0013CC  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
0013CD  2               
0013CD  2               ;************************************************
0013CD  2               ; Try to move player to the right, walk up if facing a slope
0013CD  2               ;
0013CD  2               move_right:
0013CD  2  AC BB 1A     	ldy player0 + PLAYER::status
0013D0  2  B9 C6 13     	lda ignore_move_request, y
0013D3  2  F0 06        	beq @walk_right					; if 0 => can move
0013D5  2  C9 02        	cmp #02
0013D7  2  F0 6E        	beq @climb_right				; if 2 => has to climb
0013D9  2  80 6B        	bra @return1					; else block the move
0013DB  2               
0013DB  2               @walk_right:
0013DB  2  20 79 13     	jsr check_player_on_slop
0013DE  2  D0 0A        	bne @no_collision
0013E0  2               
0013E0  2  20 AA 13     	jsr is_player_above_slop
0013E3  2  D0 05        	bne @no_collision
0013E5  2               
0013E5  2  20 E6 12     	jsr Player::check_collision_right
0013E8  2  D0 5C        	bne @return1					; block is collision on the right  and there is no slope on the right
0013EA  2               
0013EA  2               @no_collision:
0013EA  2  A9 01        	lda #01
0013EC  2  8D BE 1A     	sta player0 + PLAYER::delta_x
0013EF  2               
0013EF  2               @set_walking_sprite:
0013EF  2  A9 01        	lda #SPRITE_FLIP_H
0013F1  2  8D CB 1A     	sta player0 + PLAYER::flip
0013F4  2  AC BA 1A     	ldy player0 + PLAYER::sprite
0013F7  2  20 DE 0B     	jsr Sprite::set_flip				; force sprite to look right
0013FA  2               
0013FA  2  A9 01 8D BB  	m_status STATUS_WALKING
0013FE  2  1A           
0013FF  2               
0013FF  2               	;change player sprite
0013FF  2  A9 03        	lda #Player::Sprites::LEFT
001401  2  CD C0 1A     	cmp player0 + PLAYER::spriteID
001404  2  F0 08        	beq @move_x
001406  2               
001406  2  A9 03        	lda #Player::Sprites::LEFT
001408  2  8D C0 1A     	sta player0 + PLAYER::spriteID
00140B  2  20 16 0F     	jsr set_bitmap
00140E  2               
00140E  2               @move_x:
00140E  2  20 30 0F     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
001411  2               
001411  2               	; if sitting on a slop
001411  2  AD 4F 0E     	lda player_on_slop
001414  2  F0 2D        	beq @set_position
001416  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001418  2  F0 26        	beq @move_y_up
00141A  2               @try_move_y_dow:
00141A  2  AD C9 1A     	lda player0 + PLAYER::levely
00141D  2  29 0F        	and #%00001111
00141F  2  D0 1A        	bne @move_y_down
001421  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001424  2  85 02        	sta r0L
001426  2  AD CD 1A     	lda player0 + PLAYER::tilemap+1
001429  2  85 03        	sta r0H
00142B  2  A5 06        	lda r2L
00142D  2  18           	clc
00142E  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
001430  2  A8           	tay
001431  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
001433  2  A8           	tay
001434  2  B9 B3 19     	lda tiles_attributes,y
001437  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001439  2  D0 61        	bne @return							; do not change Y if the tile below the player is a solid one
00143B  2               @move_y_down:
00143B  2  20 DB 0F     	jsr position_y_inc
00143E  2  80 03        	bra @set_position
001440  2               @move_y_up:
001440  2  20 4C 10     	jsr position_y_dec
001443  2               
001443  2               @set_position:
001443  2  20 07 0F     	jsr position_set
001446  2               @return1:
001446  2  60           	rts
001447  2               
001447  2               @climb_right:
001447  2  20 E6 12     	jsr Player::check_collision_right
00144A  2  F0 05        	beq @climb_right_1
00144C  2  C9 04        	cmp #TILE_SOLID_LADER
00144E  2  F0 01        	beq @climb_right_1
001450  2  60           	rts
001451  2               @climb_right_1:
001451  2  20 72 12     	jsr bbox_coverage
001454  2               @get_tile:
001454  2  B1 02        	lda (r0),y
001456  2  F0 0E        	beq @no_grab					; no tile on right
001458  2  85 31        	sta $31
00145A  2  84 30        	sty $30
00145C  2  A8           	tay
00145D  2  B9 B3 19     	lda tiles_attributes,y
001460  2  29 08        	and #TILE_ATTR::GRABBING
001462  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
001464  2  A4 30        	ldy $30
001466  2               @no_grab:							; test the tile on the right on next line
001466  2  C8           	iny
001467  2  CA           	dex
001468  2  D0 EA        	bne @get_tile
00146A  2  80 1E        	bra @climb_right_drop			; no grab tile on the right of the player
00146C  2               @climb_right_2:
00146C  2  A5 31        	lda $31							; tile index with grab attribute
00146E  2  C9 05        	cmp #TILE_LEDGE
001470  2  D0 04        	bne @set_climb_sprite
001472  2               @set_hang_sprite:
001472  2  A9 09        	lda #Player::Sprites::HANG
001474  2  80 02        	bra @next
001476  2               @set_climb_sprite:
001476  2  A9 06        	lda #Player::Sprites::CLIMB
001478  2               @next:
001478  2  8D C0 1A     	sta player0 + PLAYER::spriteID
00147B  2  20 16 0F     	jsr set_bitmap
00147E  2  A9 02 8D BB  	m_status STATUS_CLIMBING
001482  2  1A           
001483  2  20 30 0F     	jsr Player::position_x_inc		; move the player sprite, if the
001486  2  20 07 0F     	jsr position_set
001489  2  60           	rts
00148A  2               @climb_right_drop:
00148A  2  A9 01 8D BB  	m_status STATUS_WALKING
00148E  2  1A           
00148F  2  A9 03 8D C0  	SET_SPRITE Player::Sprites::LEFT, 1
001493  2  1A A9 01 8D  
001497  2  C1 1A 20 16  
00149C  2               
00149C  2               @return:
00149C  2  60           	rts
00149D  2               
00149D  2               ;************************************************
00149D  2               ; try to move the player to the left
00149D  2               ;
00149D  2               move_left:
00149D  2  AC BB 1A     	ldy player0 + PLAYER::status
0014A0  2  B9 C6 13     	lda ignore_move_request, y
0014A3  2  F0 06        	beq @walk_left					; if 0 => can move
0014A5  2  C9 02        	cmp #02
0014A7  2  F0 6E        	beq @climb_left				; if 2 => has to climb
0014A9  2  80 6B        	bra @return					; else block the move
0014AB  2               
0014AB  2               @walk_left:
0014AB  2  20 79 13     	jsr check_player_on_slop
0014AE  2  D0 0A        	bne @no_collision				; ignore right collision left if on a slope
0014B0  2               
0014B0  2  20 AA 13     	jsr is_player_above_slop
0014B3  2  D0 05        	bne @no_collision
0014B5  2               
0014B5  2  20 EF 12     	jsr Player::check_collision_left
0014B8  2  D0 5C        	bne @return						; block is collision on the right  and there is no slope on the right
0014BA  2               
0014BA  2               @no_collision:
0014BA  2  A9 FF        	lda #$ff
0014BC  2  8D BE 1A     	sta player0 + PLAYER::delta_x
0014BF  2               
0014BF  2               @set_walking_sprite:
0014BF  2  A9 00        	lda #SPRITE_FLIP_NONE
0014C1  2  8D CB 1A     	sta player0 + PLAYER::flip
0014C4  2  AC BA 1A     	ldy player0 + PLAYER::sprite
0014C7  2  20 DE 0B     	jsr Sprite::set_flip				; force sprite to loop right
0014CA  2               
0014CA  2  A9 01 8D BB  	m_status STATUS_WALKING
0014CE  2  1A           
0014CF  2               
0014CF  2  A9 03        	lda #Player::Sprites::LEFT
0014D1  2  CD C0 1A     	cmp player0 + PLAYER::spriteID
0014D4  2  F0 08        	beq @move_x
0014D6  2               
0014D6  2               	;change player sprite
0014D6  2  A9 03        	lda #Player::Sprites::LEFT
0014D8  2  8D C0 1A     	sta player0 + PLAYER::spriteID
0014DB  2  20 16 0F     	jsr set_bitmap
0014DE  2               
0014DE  2               @move_x:
0014DE  2  20 87 0F     	jsr Player::position_x_dec
0014E1  2               
0014E1  2  AD 4F 0E     	lda player_on_slop				; if walking a slop also increase Y
0014E4  2  F0 2D        	beq @set_position
0014E6  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0014E8  2  F0 26        	beq @move_y_up
0014EA  2               @try_move_y_dow:
0014EA  2  AD C9 1A     	lda player0 + PLAYER::levely
0014ED  2  29 0F        	and #%00001111
0014EF  2  D0 1A        	bne @move_y_down
0014F1  2  AD CC 1A     	lda player0 + PLAYER::tilemap
0014F4  2  85 02        	sta r0L
0014F6  2  AD CD 1A     	lda player0 + PLAYER::tilemap+1
0014F9  2  85 03        	sta r0H
0014FB  2  A5 06        	lda r2L
0014FD  2  18           	clc
0014FE  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
001500  2  A8           	tay
001501  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
001503  2  A8           	tay
001504  2  B9 B3 19     	lda tiles_attributes,y
001507  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001509  2  D0 0B        	bne @return							; do not change Y if the tile below the player is a solid one
00150B  2               @move_y_down:
00150B  2  20 DB 0F     	jsr position_y_inc
00150E  2  80 03        	bra @set_position
001510  2               @move_y_up:
001510  2  20 4C 10     	jsr position_y_dec
001513  2               
001513  2               @set_position:
001513  2  20 07 0F     	jsr position_set
001516  2               
001516  2               @return:
001516  2  60           	rts
001517  2               
001517  2               @climb_left:
001517  2  20 EF 12     	jsr Player::check_collision_left
00151A  2  F0 01        	beq @climb_left_1
00151C  2  60           	rts								; collision on left, block the move
00151D  2               @climb_left_1:
00151D  2  20 72 12     	jsr bbox_coverage				; what tiles is the player covering
001520  2               @get_tile:
001520  2  B1 02        	lda (r0),y
001522  2  F0 0E        	beq @no_grab					; no tile on right
001524  2  85 31        	sta $31
001526  2  84 30        	sty $30
001528  2  A8           	tay
001529  2  B9 B3 19     	lda tiles_attributes,y
00152C  2  29 08        	and #TILE_ATTR::GRABBING
00152E  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
001530  2  A4 30        	ldy $30
001532  2               @no_grab:							; test the tile on the left on next line
001532  2  C8           	iny
001533  2  CA           	dex
001534  2  D0 EA        	bne @get_tile
001536  2  80 1E        	bra @climb_left_drop			; no grab tile on the right of the player
001538  2               @climb_left_2:
001538  2  A5 31        	lda $31							; tile index with grab attribute
00153A  2  C9 05        	cmp #TILE_LEDGE
00153C  2  D0 04        	bne @set_climb_sprite
00153E  2               @set_hang_sprite:
00153E  2  A9 09        	lda #Player::Sprites::HANG
001540  2  80 02        	bra @next
001542  2               @set_climb_sprite:
001542  2  A9 06        	lda #Player::Sprites::CLIMB
001544  2               @next:
001544  2  8D C0 1A     	sta player0 + PLAYER::spriteID
001547  2  20 16 0F     	jsr set_bitmap
00154A  2  A9 02 8D BB  	m_status STATUS_CLIMBING
00154E  2  1A           
00154F  2  20 87 0F     	jsr Player::position_x_dec		; move the player sprite, if the
001552  2  20 07 0F     	jsr position_set
001555  2  60           	rts
001556  2               @climb_left_drop:					; no ladder to stick to
001556  2  A9 01 8D BB  	m_status STATUS_WALKING
00155A  2  1A           
00155B  2  A9 03 8D C0  	SET_SPRITE Player::Sprites::LEFT, 1
00155F  2  1A A9 01 8D  
001563  2  C1 1A 20 16  
001568  2  60           	rts
001569  2               
001569  2               ;************************************************
001569  2               ; try to move the player down (crouch, hide, move down a ladder)
001569  2               ;
001569  2               move_down:
001569  2  AD BB 1A     	lda player0 + PLAYER::status
00156C  2  C9 04        	cmp #STATUS_FALLING
00156E  2  D0 01        	bne @try_move_down						; cannot move when falling
001570  2  60           	rts
001571  2               
001571  2               @try_move_down:
001571  2               	; custom collision down
001571  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001574  2  85 02        	sta r0L
001576  2  AD CD 1A     	lda player0 + PLAYER::tilemap + 1
001579  2  85 03        	sta r0H
00157B  2               
00157B  2  20 72 12     	jsr bbox_coverage
00157E  2  8E 50 0E     	stx ladders						; width of the player in tiles = number of ladders to find below
001581  2  98           	tya
001582  2  18           	clc
001583  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001585  2  A8           	tay
001586  2               
001586  2               @test_colum:
001586  2  B1 02        	lda (r0L),y
001588  2  C9 04        	cmp #TILE_SOLID_LADER
00158A  2  D0 05        	bne @check_solid_ground
00158C  2               @ladder_down:
00158C  2  CE 50 0E     	dec ladders
00158F  2  80 0C        	bra @next_column
001591  2               @check_solid_ground:
001591  2  84 30        	sty $30
001593  2  A8           	tay
001594  2  B9 B3 19     	lda tiles_attributes,y
001597  2  29 01        	and #TILE_ATTR::SOLID_GROUND
001599  2  D0 45        	bne @cannot_move_down
00159B  2  A4 30        	ldy $30
00159D  2               @next_column:
00159D  2  CA           	dex
00159E  2  F0 03        	beq @end
0015A0  2  C8           	iny
0015A1  2  80 E3        	bra @test_colum
0015A3  2               @end:
0015A3  2               
0015A3  2  AD 50 0E     	lda ladders
0015A6  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
0015A8  2               
0015A8  2               	; if there player is covering ANY ladders (accros the boundingbox)
0015A8  2  A4 06        	ldy r2L
0015AA  2               @check_line:							; already climbing down is player grabbing no ladder
0015AA  2  A6 05        	ldx r1H
0015AC  2               @check_row:
0015AC  2  B1 02        	lda (r0L),y
0015AE  2  C9 04        	cmp #TILE_SOLID_LADER
0015B0  2  F0 12        	beq @move_down
0015B2  2  C8           	iny
0015B3  2  CA           	dex
0015B4  2  D0 F6        	bne @check_row
0015B6  2  C6 04        	dec r1L
0015B8  2  F0 26        	beq @cannot_move_down
0015BA  2               
0015BA  2  98           	tya
0015BB  2  18           	clc
0015BC  2  69 20        	adc #LEVEL_TILES_WIDTH
0015BE  2  38           	sec
0015BF  2  E5 05        	sbc r1H
0015C1  2  A8           	tay
0015C2  2  80 E6        	bra @check_line
0015C4  2               
0015C4  2               @move_down:
0015C4  2  20 DB 0F     	jsr Player::position_y_inc		; move down the ladder
0015C7  2  20 07 0F     	jsr position_set
0015CA  2               
0015CA  2  A9 02 8D BB  	m_status STATUS_CLIMBING
0015CE  2  1A           
0015CF  2               
0015CF  2  A9 06        	lda #Player::Sprites::CLIMB
0015D1  2  CD C0 1A     	cmp player0 + PLAYER::spriteID
0015D4  2  D0 01        	bne @change_sprite
0015D6  2  60           	rts
0015D7  2               
0015D7  2               @change_sprite:
0015D7  2               	;change player sprite
0015D7  2  A9 06        	lda #Player::Sprites::CLIMB
0015D9  2  8D C0 1A     	sta player0 + PLAYER::spriteID
0015DC  2  20 16 0F     	jsr set_bitmap
0015DF  2  60           	rts
0015E0  2               
0015E0  2               @cannot_move_down:
0015E0  2  A9 00        	lda #STATUS_WALKING_IDLE
0015E2  2  8D BB 1A     	sta player0 + PLAYER::status
0015E5  2  A9 01        	lda #01
0015E7  2  8D C1 1A     	sta player0 + PLAYER::spriteAnim
0015EA  2  20 16 0F     	jsr set_bitmap
0015ED  2  9C BE 1A     	stz player0 + PLAYER::delta_x
0015F0  2  60           	rts
0015F1  2               
0015F1  2               ;************************************************
0015F1  2               ; try to move the player up (move up a ladder)
0015F1  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
0015F1  2               ;	modify: r0, r1, r2
0015F1  2               ;
0015F1  2               move_up:
0015F1  2  AD BB 1A     	lda player0 + PLAYER::status
0015F4  2  C9 04        	cmp #STATUS_FALLING
0015F6  2  D0 01        	bne @try_move_up				; cannot move when falling
0015F8  2  60           	rts
0015F9  2               @try_move_up:
0015F9  2               	; custom collision up
0015F9  2  20 72 12     	jsr bbox_coverage
0015FC  2  8E 50 0E     	stx ladders						; width of the player in tiles = number of ladders to find below
0015FF  2               
0015FF  2               	; check the situation ABOVE the player
0015FF  2  38           	sec
001600  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001603  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001605  2  85 02        	sta r0L
001607  2  AD CD 1A     	lda player0 + PLAYER::tilemap+1
00160A  2  E9 00        	sbc #0
00160C  2  85 03        	sta r0H
00160E  2               
00160E  2               	; if there the right numbers of ladder tiles above the player
00160E  2               @test_colum:
00160E  2  B1 02        	lda (r0L),y
001610  2  C9 04        	cmp #TILE_SOLID_LADER
001612  2  D0 05        	bne @check_solid_ceiling
001614  2  CE 50 0E     	dec ladders
001617  2  80 0C        	bra @next_column
001619  2               @check_solid_ceiling:
001619  2  84 30        	sty $30
00161B  2  A8           	tay
00161C  2  B9 B3 19     	lda tiles_attributes,y
00161F  2  29 04        	and #TILE_ATTR::SOLID_CEILING
001621  2  D0 4F        	bne @cannot_move_up
001623  2  A4 30        	ldy $30
001625  2               @next_column:
001625  2  CA           	dex
001626  2  F0 03        	beq @end
001628  2  C8           	iny
001629  2  80 E3        	bra @test_colum
00162B  2               @end:
00162B  2               
00162B  2  AD 50 0E     	lda ladders
00162E  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001630  2               
001630  2               	; if there player is covering ANY LADER (accros the boundingbox)
001630  2  AD CC 1A     	lda player0 + PLAYER::tilemap
001633  2  85 02        	sta r0L
001635  2  AD CD 1A     	lda player0 + PLAYER::tilemap+1
001638  2  85 03        	sta r0H
00163A  2               
00163A  2  A4 06        	ldy r2L
00163C  2               @check_line:							; already climbing up is player grabbing no ladder
00163C  2  A6 05        	ldx r1H
00163E  2               @check_row:
00163E  2  B1 02        	lda (r0L),y
001640  2  C9 04        	cmp #TILE_SOLID_LADER
001642  2  F0 12        	beq @climb_down
001644  2  C8           	iny
001645  2  CA           	dex
001646  2  D0 F6        	bne @check_row
001648  2  C6 04        	dec r1L
00164A  2  F0 26        	beq @cannot_move_up
00164C  2               
00164C  2  98           	tya
00164D  2  18           	clc
00164E  2  69 20        	adc #LEVEL_TILES_WIDTH
001650  2  38           	sec
001651  2  E5 05        	sbc r1H
001653  2  A8           	tay
001654  2  80 E6        	bra @check_line
001656  2               
001656  2               @climb_down:
001656  2  20 4C 10     	jsr Player::position_y_dec		; move up the ladder
001659  2  20 07 0F     	jsr position_set
00165C  2               
00165C  2  A9 02 8D BB  	m_status STATUS_CLIMBING
001660  2  1A           
001661  2               
001661  2  A9 06        	lda #Player::Sprites::CLIMB
001663  2  CD C0 1A     	cmp player0 + PLAYER::spriteID
001666  2  D0 01        	bne @set_sprite
001668  2  60           	rts
001669  2               @set_sprite:						;change player sprite
001669  2  A9 06        	lda #Player::Sprites::CLIMB
00166B  2  8D C0 1A     	sta player0 + PLAYER::spriteID
00166E  2  20 16 0F     	jsr set_bitmap
001671  2  60           	rts
001672  2               
001672  2               @cannot_move_up:
001672  2  A9 00        	lda #STATUS_WALKING_IDLE
001674  2  8D BB 1A     	sta player0 + PLAYER::status
001677  2  60           	rts
001678  2               
001678  2               ;************************************************
001678  2               ; jump
001678  2               ;	A = delta X value
001678  2               ;
001678  2               jump:
001678  2  AA           	tax
001679  2  AC BB 1A         ldy player0 + PLAYER::status
00167C  2  B9 C6 13     	lda ignore_move_request,y
00167F  2  D0 17        	bne @return
001681  2  8E BE 1A     	stx player0 + PLAYER::delta_x
001684  2               
001684  2               	; ensure there is no ceiling over the player
001684  2  20 2D 13     	jsr check_collision_up
001687  2  D0 0F        	bne @return
001689  2               
001689  2  A9 0A        	lda #JUMP_LO_TICKS
00168B  2  8D BC 1A     	sta player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
00168E  2  A9 02        	lda #JUMP_HI_TICKS
001690  2  8D BD 1A     	sta player0 + PLAYER::falling_ticks	+ 1
001693  2               
001693  2  A9 05 8D BB  	m_status STATUS_JUMPING
001697  2  1A           
001698  2               @return:
001698  2  60           	rts
001699  2               
001699  2               .endscope
001699  2               
001699  1               .include "tiles.asm"
001699  2               ;-----------------------------------------------------------------------------
001699  2               ;/////////////////////////////////////////////////////////////////////////////
001699  2               ; START Tiles code
001699  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001699  2               ;-----------------------------------------------------------------------------
001699  2               
001699  2               .scope Tiles
001699  2               
001699  2               ;animated_tiles_map
001699  2               ;   nb_animated_tiles
001699  2               ;   tile[0]
001699  2               ;        tick,
001699  2               ;        nb_frames
001699  2               ;        current_frame
001699  2               ;        @frame[0][0]
001699  2               ;        nb_tiles
001699  2               ;        @addr_tiles_list[0]
001699  2               ;   tile[1]
001699  2               ;   ....
001699  2               ;   tile[nb_animated_tiles-1]
001699  2               ;   frame[t0][0]: duration, tile_index
001699  2               ;   frame[t0][1]
001699  2               ;   .....
001699  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
001699  2               ;   frame[t1][0]: duration, tile_index
001699  2               ;   frame[t1][1]
001699  2               ;   .....
001699  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
001699  2               ;   .....
001699  2               ;   frame[tnb_animated_tiles-1][0]
001699  2               ;   .....
001699  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
001699  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
001699  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
001699  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
001699  2               
001699  2               .struct ANIMATED_TILES
001699  2                   nb_animated_tiles   .byte
001699  2               
001699  2                   .struct ANIMATED_TILE
001699  2                       tick            .byte   ; number of 18ms frames until next animation
001699  2                       nb_frames       .byte
001699  2                       current_frame   .byte
001699  2                       addr_frames  .addr   ; offset of the list of animation
001699  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
001699  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
001699  2                   .endstruct
001699  2               .endstruct
001699  2               
001699  2               .struct FRAME
001699  2                   duration    .byte
001699  2                   tile_index  .byte
001699  2               .endstruct
001699  2               
001699  2               animated_tiles_map = HIMEM + $400
001699  2               animated_tiles = HIMEM + $400 + 1
001699  2               
001699  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
00169D  2  73 61 6E 69  
0016A1  2  2E 62 69 6E  
0016A5  2               fsanimated_tiles_end:
0016A5  2               
0016A5  2               ;-----------------------------------------
0016A5  2               ; load and fix the animated tiles data
0016A5  2               ;
0016A5  2               load:
0016A5  2  A9 00        	lda #0
0016A7  2  85 00        	sta $00
0016A9  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
0016AD  2  A0 00 20 BA  
0016B1  2  FF A9 0C A2  
0016CA  2               
0016CA  2                   ; convert offsets in the data structure to memory addr
0016CA  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0016CD  2  A2 00            ldx #0
0016CF  2               
0016CF  2               @next_tile:
0016CF  2  18               clc
0016D0  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0016D3  2  69 00            adc #<animated_tiles_map
0016D5  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0016D8  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0016DB  2  69 A4            adc #>animated_tiles_map
0016DD  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0016E0  2               
0016E0  2  18               clc
0016E1  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0016E4  2  69 00            adc #<animated_tiles_map
0016E6  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0016E9  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0016EC  2  69 A4            adc #>animated_tiles_map
0016EE  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0016F1  2               
0016F1  2  88               dey
0016F2  2  F0 07            beq @convert_tileslist_addr
0016F4  2               
0016F4  2  8A               txa
0016F5  2  18               clc
0016F6  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
0016F8  2  AA               tax
0016F9  2  80 D4            bra @next_tile
0016FB  2               
0016FB  2               @convert_tileslist_addr:
0016FB  2                   ; convert tilemap offset into vera offset
0016FB  2                   ; convert offsets in the data structure to memory addr
0016FB  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0016FE  2  A2 00            ldx #0
001700  2               @next_tile1:
001700  2                   ; setup the listf of memory offset in vera memory
001700  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
001703  2  85 02            sta r0L
001705  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
001708  2  85 03            sta r0H
00170A  2               
00170A  2  5A               phy
00170B  2  DA               phx
00170C  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
00170F  2  AA               tax
001710  2  A0 00            ldy #00
001712  2               
001712  2               @loop_tiles:
001712  2  18               clc
001713  2  B1 02            lda (r0),y
001715  2  69 00            adc #<VRAM_layer1_map
001717  2  91 02            sta (r0),y
001719  2  C8               iny
00171A  2               
00171A  2  B1 02            lda (r0),y
00171C  2  69 08            adc #>VRAM_layer1_map
00171E  2  91 02            sta (r0),y
001720  2  C8               iny
001721  2               
001721  2  CA               dex
001722  2  D0 EE            bne @loop_tiles
001724  2  FA               plx
001725  2  7A               ply
001726  2               
001726  2  88               dey
001727  2  F0 07            beq @init
001729  2               
001729  2  8A               txa
00172A  2  18               clc
00172B  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00172D  2  AA               tax
00172E  2  80 D0            bra @next_tile1
001730  2               
001730  2               @init:
001730  2                   ; init the timers
001730  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
001733  2  A2 00            ldx #0
001735  2               
001735  2               @next_tile2:
001735  2                   ; setup the list of frames
001735  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
001738  2  85 02            sta r0L
00173A  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00173D  2  85 03            sta r0H
00173F  2               
00173F  2                   ; save new frame duration in the timer
00173F  2  B2 02            lda (r0)
001741  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001744  2               
001744  2  88               dey
001745  2  F0 07            beq @return
001747  2               
001747  2  8A               txa
001748  2  18               clc
001749  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00174B  2  AA               tax
00174C  2  80 E7            bra @next_tile2
00174E  2               
00174E  2               @return:
00174E  2  60               rts
00174F  2               
00174F  2               ;-----------------------------------------
00174F  2               ; parse the animated tiles to update
00174F  2               ;
00174F  2               animate:
00174F  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
001752  2  A2 00            ldx #0
001754  2               
001754  2               @next_tile:
001754  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001757  2  D0 03            bne :+
001759  2  20 67 17         jsr next_frame
00175C  2               :
00175C  2  88               dey
00175D  2  F0 07            beq @return
00175F  2               
00175F  2  8A               txa
001760  2  18               clc
001761  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
001763  2  AA               tax
001764  2  80 EE            bra @next_tile
001766  2               
001766  2               @return:
001766  2  60               rts
001767  2               
001767  2               ;-----------------------------------------
001767  2               ; move to the next frame of an animated tile
001767  2               ; update tiles on the tilemap
001767  2               ; input X : offset of the anim_tile structure
001767  2               ;
001767  2               next_frame:
001767  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
00176A  2  1A               inc
00176B  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
00176E  2  D0 02            bne :+
001770  2  A9 00            lda #00         ; roll back to 0
001772  2               :
001772  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
001775  2  DA               phx
001776  2  5A               phy
001777  2               
001777  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
001778  2  A8               tay         ; Y = current animation frame
001779  2               
001779  2                   ; setup the list of frames
001779  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
00177C  2  85 02            sta r0L
00177E  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
001781  2  85 03            sta r0H
001783  2               
001783  2  B1 02            lda (r0), y         ; save new frame duration in the timer
001785  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
001788  2  C8               iny
001789  2  B1 02            lda (r0), y
00178B  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
00178D  2               
00178D  2                   ; setup the listf of memory offset in vera memory
00178D  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
001790  2  85 02            sta r0L
001792  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
001795  2  85 03            sta r0H
001797  2               
001797  2                   ; push all tiles in vera memory
001797  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
00179A  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
00179B  2  3A               dec         ; start at the end
00179C  2  A8               tay
00179D  2               
00179D  2  A6 30            ldx $30
00179F  2               
00179F  2               @next_tile_index:
00179F  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
00179F  2               
00179F  2  A9 00        	lda #0
0017A1  2  8D 25 9F     	sta veractl
0017A4  2  A9 02          	lda #(^VRAM_layer1_map + 2)
0017A6  2  8D 22 9F     	sta verahi
0017A9  2  B1 02            lda (r0), y
0017AB  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
0017AE  2  88               dey
0017AF  2  B1 02            lda (r0), y
0017B1  2  8D 20 9F     	sta veralo
0017B4  2  88               dey
0017B5  2  8E 23 9F         stx veradat
0017B8  2               
0017B8  2  10 E5            bpl @next_tile_index
0017BA  2               
0017BA  2  7A               ply
0017BB  2  FA               plx
0017BC  2  60               rts
0017BD  2               .endscope
0017BD  2               
0017BD  1               
0017BD  1               ;-----------------------------------------------------------------------------
0017BD  1               ;/////////////////////////////////////////////////////////////////////////////
0017BD  1               ; main code
0017BD  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0017BD  1               ;-----------------------------------------------------------------------------
0017BD  1               
0017BD  1  00 00        objects: .word 0
0017BF  1               
0017BF  1               start:
0017BF  1               	; 320x240
0017BF  1  A9 40        	lda #64
0017C1  1  8D 2A 9F     	sta veradchscale
0017C4  1  8D 2B 9F     	sta veradcvscale
0017C7  1               
0017C7  1               	; activate layer0
0017C7  1  A9 71        	lda #%01110001
0017C9  1               ;	and #(255-VERA_LAYER0)
0017C9  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
0017C9  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
0017CC  1               
0017CC  1               	;---------------------------------
0017CC  1               	; load tiles file into vram
0017CC  1               	;---------------------------------
0017CC  1  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), VRAM_tiles
0017D0  1  A0 00 20 BA  
0017D4  1  FF A9 09 A2  
0017ED  1               
0017ED  1               	;---------------------------------
0017ED  1               	; load tilemaps into vram
0017ED  1               	;---------------------------------
0017ED  1               setlayer0:
0017ED  1  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
0017F1  1  0F 09 00 8D  
0017F5  1  2D 9F        
0017F7  1  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
0017FB  1  0F 09 03 8D  
0017FF  1  2D 9F        
001801  1  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
001805  1  9F           
001806  1  AD 2F 9F 29  	VTILEBASE 0, VRAM_tiles
00180A  1  03 09 08 8D  
00180E  1  2F 9F        
001810  1  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
001814  1  FC 09 03 8D  
001818  1  2F 9F        
00181A  1  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
00181E  1  A0 00 20 BA  
001822  1  FF A9 0B A2  
00183B  1               
00183B  1               setlayer1:
00183B  1  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
00183F  1  0F 09 00 8D  
001843  1  34 9F        
001845  1  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
001849  1  0F 09 03 8D  
00184D  1  34 9F        
00184F  1  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
001853  1  9F           
001854  1  AD 36 9F 29  	VTILEBASE 1, VRAM_tiles
001858  1  03 09 08 8D  
00185C  1  36 9F        
00185E  1  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
001862  1  FC 09 03 8D  
001866  1  36 9F        
001868  1  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
00186C  1  A0 00 20 BA  
001870  1  FF A9 09 A2  
001889  1               
001889  1               	;---------------------------------
001889  1               	; load collisionmap into ram
001889  1               	;---------------------------------
001889  1  A9 00        	lda #0
00188B  1  85 00        	sta $00
00188D  1  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), HIMEM
001891  1  A0 00 20 BA  
001895  1  FF A9 0D A2  
0018AE  1               
0018AE  1               	;---------------------------------
0018AE  1               	; load animated tiles into ram
0018AE  1               	;---------------------------------
0018AE  1  20 A5 16     	jsr Tiles::load
0018B1  1               
0018B1  1               	;---------------------------------
0018B1  1               	; load sprite 0,1,2 into vram
0018B1  1               	;---------------------------------
0018B1  1               load_sprites:
0018B1  1               	; prepare VERA sprites
0018B1  1  20 7C 0A     	jsr Sprite::init_addr_table
0018B4  1               
0018B4  1  A9 00 85 02  	LOAD_r0 (VRAM_tiles + tiles * tile_size)	; base for the sprites
0018B8  1  A9 41 85 03  
0018BC  1  20 52 0E     	jsr Player::init
0018BF  1               
0018BF  1               	;---------------------------------
0018BF  1               	; load objects list into ram
0018BF  1               	;---------------------------------
0018BF  1  20 92 0C     	jsr Objects::init
0018C2  1               
0018C2  1               setirq:
0018C2  1                  ; backup default RAM IRQ vector
0018C2  1  AD 14 03        lda IRQVec
0018C5  1  8D B0 19        sta default_irq_vector
0018C8  1  AD 15 03        lda IRQVec+1
0018CB  1  8D B1 19        sta default_irq_vector+1
0018CE  1               
0018CE  1                  ; overwrite RAM IRQ vector with custom handler address
0018CE  1  78              sei ; disable IRQ while vector is changing
0018CF  1  A9 E6           lda #<custom_irq_handler
0018D1  1  8D 14 03        sta IRQVec
0018D4  1  A9 18           lda #>custom_irq_handler
0018D6  1  8D 15 03        sta IRQVec+1
0018D9  1  AD 26 9F        lda veraien
0018DC  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
0018DE  1  8D 26 9F        sta veraien
0018E1  1  58              cli ; enable IRQ now that vector is properly set
0018E2  1               
0018E2  1               mainloop:
0018E2  1  CB           	wai
0018E3  1               	; do nothing in main loop, just let ISR do everything
0018E3  1  80 FD        	bra mainloop
0018E5  1               
0018E5  1  60           	rts
0018E6  1               
0018E6  1               ;-----------------------------------------------------------------------------
0018E6  1               ;/////////////////////////////////////////////////////////////////////////////
0018E6  1               ; deal with IRQ"s
0018E6  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0018E6  1               ;-----------------------------------------------------------------------------
0018E6  1               custom_irq_handler:
0018E6  1  AD 27 9F     	lda veraisr
0018E9  1  AA           	tax
0018EA  1  29 04        	and #VERA_SPRCOL_BIT
0018EC  1  F0 0B        	beq @check_vsync
0018EE  1               
0018EE  1               @sprite_collision:
0018EE  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
0018F1  1  8A           	txa
0018F2  1  4A           	lsr
0018F3  1  4A           	lsr
0018F4  1  4A           	lsr
0018F5  1  4A           	lsr								; extract the collision mask (4:7)
0018F6  1  20 FD 0B     	jsr Sprite::register_collision
0018F9  1               
0018F9  1               @check_vsync:
0018F9  1  8A           	txa
0018FA  1  29 01        	and #VERA_VSYNC_BIT
0018FC  1  F0 36        	beq @continue
0018FE  1               
0018FE  1               @frame_update:
0018FE  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001901  1               
001901  1               	;---------------------------------
001901  1               	; animate sprite
001901  1               	;---------------------------------
001901  1  20 AF 10     	jsr Player::animate
001904  1               
001904  1               	;---------------------------------
001904  1               	; swap animated tiles
001904  1               	;---------------------------------
001904  1  20 4F 17     	jsr Tiles::animate
001907  1               
001907  1               	;---------------------------------
001907  1               	; sprite collisions management
001907  1               	;---------------------------------
001907  1  20 82 0C     	jsr Sprite::check_collision
00190A  1               
00190A  1               	;---------------------------------
00190A  1               	; player physics
00190A  1               	;---------------------------------
00190A  1  20 53 11     	jsr Player::physics
00190D  1               
00190D  1               	;---------------------------------
00190D  1               	; check keyboard
00190D  1               	;---------------------------------
00190D  1               @check_keyboard:
00190D  1  A9 00        	lda #0
00190F  1  20 56 FF     	jsr joystick_get
001912  1  8D B9 19     	sta joystick
001915  1               
001915  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001915  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001915  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001915  1               ;
001915  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001915  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001915  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001915  1               ;  .Y, byte 2:
001915  1               ;              $00 = joystick present
001915  1               ;              $FF = joystick not present
001915  1  89 81        	bit #(JOY_RIGHT|JOY_B)
001917  1  F0 1E        	beq @jump_right
001919  1  89 82        	bit #(JOY_LEFT|JOY_B)
00191B  1  F0 21        	beq @jump_left
00191D  1  89 01        	bit #JOY_RIGHT
00191F  1  F0 29        	beq @joystick_right
001921  1  89 02        	bit #JOY_LEFT
001923  1  F0 20        	beq @joystick_left
001925  1  89 04        	bit #JOY_DOWN
001927  1  F0 2B        	beq @movedown
001929  1  89 08        	bit #JOY_UP
00192B  1  F0 22        	beq @moveup
00192D  1  89 80        	bit #JOY_B
00192F  1  F0 28        	beq @jump
001931  1               
001931  1  20 3A 11     	jsr Player::set_idle
001934  1               
001934  1               @continue:
001934  1                  ; continue to default IRQ handler
001934  1  6C B0 19        jmp (default_irq_vector)
001937  1                  ; RTI will happen after jump
001937  1               
001937  1               @jump_right:
001937  1  A9 01        	lda #$01					; jump right
001939  1  20 78 16     	jsr Player::jump
00193C  1  80 F6        	bra @continue
00193E  1               
00193E  1               @jump_left:
00193E  1  A9 FF        	lda #$ff					; jump left
001940  1  20 78 16     	jsr Player::jump
001943  1  80 EF        	bra @continue
001945  1               
001945  1               @joystick_left:
001945  1  20 9D 14     	jsr Player::move_left
001948  1  80 EA        	bra @continue
00194A  1               
00194A  1               @joystick_right:
00194A  1  20 CD 13     	jsr Player::move_right
00194D  1  80 E5        	bra @continue
00194F  1               
00194F  1               @moveup:
00194F  1  20 F1 15     	jsr Player::move_up
001952  1  80 E0        	bra @continue
001954  1               
001954  1               @movedown:
001954  1  20 69 15     	jsr Player::move_down
001957  1  80 DB        	bra @continue
001959  1               
001959  1               @jump:
001959  1  A9 00        	lda #0				; jump up
00195B  1  20 78 16     	jsr Player::jump
00195E  1  80 D4        	bra @continue
001960  1               
001960  1               .segment "DATA"
001960  1               .include "tilemap.inc"
001960  2               map:
001960  2  20 20        	.byte 32,32
001962  2  6C 65 76 65  fslevel: .literal "level.bin"
001966  2  6C 2E 62 69  
00196A  2  6E           
00196B  2               fslevel_end:
00196B  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
00196F  2  65 72 79 2E  
001973  2  62 69 6E     
001976  2               fsbackground_end:
001976  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
00197A  2  69 73 69 6F  
00197E  2  6E 2E 62 69  
001983  2               fscollision_end:
001983  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
001987  2  63 74 73 2E  
00198B  2  62 69 6E     
00198E  2               fsobjects_end:
00198E  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
001992  2  74 65 73 31  
001996  2  2E 62 69 6E  
00199A  2               fssprites1_end:
00199A  2               tileset:
00199A  2  10 10        	.byte 16,16
00199C  2               tiles = 49
00199C  2               tile_size = 256
00199C  2  74 69 6C 65  fstile: .literal "tiles.bin"
0019A0  2  73 2E 62 69  
0019A4  2  6E           
0019A5  2               fstileend:
0019A5  2               
0019A5  1               .include "sprite.inc"
0019A5  2  73 70 72 69  fssprite:	.literal "sprites.bin"
0019A9  2  74 65 73 2E  
0019AD  2  62 69 6E     
0019B0  2               fsspriteend:
0019B0  2               sprites = 12
0019B0  2               sprite_size = 1024
0019B0  2               
0019B0  1               
0019B0  1  00 00        default_irq_vector: .addr 0
0019B2  1  00           trigger_debug: .byte 0
0019B3  1               tiles_attributes:
0019B3  1  00           	.byte %00000000	;	TILE_NO_COLLISION
0019B4  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
0019B5  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
0019B6  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
0019B7  1  09           	.byte %00001001	;	TILE_SOLID_LADER
0019B8  1  09           	.byte %00001001	;	TILE_LEDGE
0019B9  1               
0019B9  1               .segment "BSS"
0019B9  1  xx           	joystick: .res 1
0019BA  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
0019BE  1  xx xx xx xx  
0019C2  1  xx xx xx xx  
001ABA  1  xx xx xx xx  	player0: .tag PLAYER
001ABE  1  xx xx xx xx  
001AC2  1  xx xx xx xx  
001ABA  1               
