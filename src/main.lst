ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 49 1F        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               VERA_L0_vscrolllo	= verareg+$12
000810  2               VERA_L0_vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               ; set the tilebase for the layer
000810  2               .macro VTILEBASE layer,addr
000810  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000810  2               	and #VERA_TILEBASE_CLEAR_ADR
000810  2               	ora #(addr >> 9)
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define size of tiles for layer
000810  2               .macro VTILEMODE layer, mode
000810  2               	lda veral0tilebase + layer * 7
000810  2               	and #VERA_CLEAR_TILE_SIZE
000810  2               	ora #mode
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               
000810  2               ; define number of tiles in the map
000810  2               .macro VCONFIG_TILES layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_TILES
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define number of colors for the map
000810  2               .macro VCONFIG_DEPTH layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_DEPTH
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; set the mapbase for the layer
000810  2               .macro VMAPBASE layer,addr
000810  2                   lda #(addr >> 9)         ; store 2 last bits
000810  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               JOY_A		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               .include "tiles.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Tiles code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .enum TILE_ATTR
000839  2               	SOLID_GROUND = 1
000839  2               	SOLID_WALL = 2
000839  2               	SOLID_CEILING = 4
000839  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000839  2               .endenum
000839  2               
000839  2               
000839  2               .scope Tiles
000839  2               
000839  2               ;animated_tiles_map
000839  2               ;   nb_animated_tiles
000839  2               ;   tile[0]
000839  2               ;        tick,
000839  2               ;        nb_frames
000839  2               ;        current_frame
000839  2               ;        @frame[0][0]
000839  2               ;        nb_tiles
000839  2               ;        @addr_tiles_list[0]
000839  2               ;   tile[1]
000839  2               ;   ....
000839  2               ;   tile[nb_animated_tiles-1]
000839  2               ;   frame[t0][0]: duration, tile_index
000839  2               ;   frame[t0][1]
000839  2               ;   .....
000839  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
000839  2               ;   frame[t1][0]: duration, tile_index
000839  2               ;   frame[t1][1]
000839  2               ;   .....
000839  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][0]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
000839  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
000839  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
000839  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
000839  2               
000839  2               .struct ANIMATED_TILES
000839  2                   nb_animated_tiles   .byte
000839  2               
000839  2                   .struct ANIMATED_TILE
000839  2                       tick            .byte   ; number of 18ms frames until next animation
000839  2                       nb_frames       .byte
000839  2                       current_frame   .byte
000839  2                       addr_frames  .addr   ; offset of the list of animation
000839  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
000839  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
000839  2                   .endstruct
000839  2               .endstruct
000839  2               
000839  2               .struct FRAME
000839  2                   duration    .byte
000839  2                   tile_index  .byte
000839  2               .endstruct
000839  2               
000839  2               animated_tiles_map = HIMEM + $400
000839  2               animated_tiles = HIMEM + $400 + 1
000839  2               
000839  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
00083D  2  73 61 6E 69  
000841  2  2E 62 69 6E  
000845  2               fsanimated_tiles_end:
000845  2               
000845  2               ;-----------------------------------------
000845  2               ; load static tiles
000845  2               ;
000845  2               load_static:
000845  2  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), ::VRAM_tiles
000849  2  A0 00 20 BA  
00084D  2  FF A9 09 A2  
000866  2  AD 2F 9F 29  	VTILEBASE 0, ::VRAM_tiles
00086A  2  03 09 08 8D  
00086E  2  2F 9F        
000870  2  AD 36 9F 29  	VTILEBASE 1, ::VRAM_tiles
000874  2  03 09 08 8D  
000878  2  36 9F        
00087A  2  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
00087E  2  FC 09 03 8D  
000882  2  2F 9F        
000884  2  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000888  2  FC 09 03 8D  
00088C  2  36 9F        
00088E  2  60               rts
00088F  2               
00088F  2               ;-----------------------------------------
00088F  2               ; load and fix the animated tiles data
00088F  2               ;
00088F  2               load_anim:
00088F  2  A9 00        	lda #0
000891  2  85 00        	sta $00
000893  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
000897  2  A0 00 20 BA  
00089B  2  FF A9 0C A2  
0008B4  2               
0008B4  2                   ; convert offsets in the data structure to memory addr
0008B4  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008B7  2  A2 00            ldx #0
0008B9  2               
0008B9  2               @next_tile:
0008B9  2  18               clc
0008BA  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008BD  2  69 00            adc #<animated_tiles_map
0008BF  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008C2  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008C5  2  69 A4            adc #>animated_tiles_map
0008C7  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008CA  2               
0008CA  2  18               clc
0008CB  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008CE  2  69 00            adc #<animated_tiles_map
0008D0  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008D3  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008D6  2  69 A4            adc #>animated_tiles_map
0008D8  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008DB  2               
0008DB  2  88               dey
0008DC  2  F0 07            beq @convert_tileslist_addr
0008DE  2               
0008DE  2  8A               txa
0008DF  2  18               clc
0008E0  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
0008E2  2  AA               tax
0008E3  2  80 D4            bra @next_tile
0008E5  2               
0008E5  2               @convert_tileslist_addr:
0008E5  2                   ; convert tilemap offset into vera offset
0008E5  2                   ; convert offsets in the data structure to memory addr
0008E5  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008E8  2  A2 00            ldx #0
0008EA  2               @next_tile1:
0008EA  2                   ; setup the listf of memory offset in vera memory
0008EA  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008ED  2  85 02            sta r0L
0008EF  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008F2  2  85 03            sta r0H
0008F4  2               
0008F4  2  5A               phy
0008F5  2  DA               phx
0008F6  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
0008F9  2  AA               tax
0008FA  2  A0 00            ldy #00
0008FC  2               
0008FC  2               @loop_tiles:
0008FC  2  18               clc
0008FD  2  B1 02            lda (r0),y
0008FF  2  69 00            adc #<VRAM_layer1_map
000901  2  91 02            sta (r0),y
000903  2  C8               iny
000904  2               
000904  2  B1 02            lda (r0),y
000906  2  69 08            adc #>VRAM_layer1_map
000908  2  91 02            sta (r0),y
00090A  2  C8               iny
00090B  2               
00090B  2  CA               dex
00090C  2  D0 EE            bne @loop_tiles
00090E  2  FA               plx
00090F  2  7A               ply
000910  2               
000910  2  88               dey
000911  2  F0 07            beq @init
000913  2               
000913  2  8A               txa
000914  2  18               clc
000915  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000917  2  AA               tax
000918  2  80 D0            bra @next_tile1
00091A  2               
00091A  2               @init:
00091A  2                   ; init the timers
00091A  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00091D  2  A2 00            ldx #0
00091F  2               
00091F  2               @next_tile2:
00091F  2                   ; setup the list of frames
00091F  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000922  2  85 02            sta r0L
000924  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
000927  2  85 03            sta r0H
000929  2               
000929  2                   ; save new frame duration in the timer
000929  2  B2 02            lda (r0)
00092B  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
00092E  2               
00092E  2  88               dey
00092F  2  F0 07            beq @return
000931  2               
000931  2  8A               txa
000932  2  18               clc
000933  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000935  2  AA               tax
000936  2  80 E7            bra @next_tile2
000938  2               
000938  2               @return:
000938  2  60               rts
000939  2               
000939  2               ;-----------------------------------------
000939  2               ; parse the animated tiles to update
000939  2               ;
000939  2               animate:
000939  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00093C  2  A2 00            ldx #0
00093E  2               
00093E  2               @next_tile:
00093E  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000941  2  D0 03            bne :+
000943  2  20 51 09         jsr next_frame
000946  2               :
000946  2  88               dey
000947  2  F0 07            beq @return
000949  2               
000949  2  8A               txa
00094A  2  18               clc
00094B  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00094D  2  AA               tax
00094E  2  80 EE            bra @next_tile
000950  2               
000950  2               @return:
000950  2  60               rts
000951  2               
000951  2               ;-----------------------------------------
000951  2               ; move to the next frame of an animated tile
000951  2               ; update tiles on the tilemap
000951  2               ; input X : offset of the anim_tile structure
000951  2               ;
000951  2               next_frame:
000951  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
000954  2  1A               inc
000955  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
000958  2  D0 02            bne :+
00095A  2  A9 00            lda #00         ; roll back to 0
00095C  2               :
00095C  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
00095F  2  DA               phx
000960  2  5A               phy
000961  2               
000961  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
000962  2  A8               tay         ; Y = current animation frame
000963  2               
000963  2                   ; setup the list of frames
000963  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000966  2  85 02            sta r0L
000968  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00096B  2  85 03            sta r0H
00096D  2               
00096D  2  B1 02            lda (r0), y         ; save new frame duration in the timer
00096F  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000972  2  C8               iny
000973  2  B1 02            lda (r0), y
000975  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
000977  2               
000977  2                   ; setup the listf of memory offset in vera memory
000977  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00097A  2  85 02            sta r0L
00097C  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
00097F  2  85 03            sta r0H
000981  2               
000981  2                   ; push all tiles in vera memory
000981  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
000984  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
000985  2  3A               dec         ; start at the end
000986  2  A8               tay
000987  2               
000987  2  A6 30            ldx $30
000989  2               
000989  2               @next_tile_index:
000989  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
000989  2               
000989  2  A9 00        	lda #0
00098B  2  8D 25 9F     	sta veractl
00098E  2  A9 02          	lda #(^VRAM_layer1_map + 2)
000990  2  8D 22 9F     	sta verahi
000993  2  B1 02            lda (r0), y
000995  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
000998  2  88               dey
000999  2  B1 02            lda (r0), y
00099B  2  8D 20 9F     	sta veralo
00099E  2  88               dey
00099F  2  8E 23 9F         stx veradat
0009A2  2               
0009A2  2  10 E5            bpl @next_tile_index
0009A4  2               
0009A4  2  7A               ply
0009A5  2  FA               plx
0009A6  2  60               rts
0009A7  2               .endscope
0009A7  2               
0009A7  1               .include "sprites.asm"
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               ;/////////////////////////////////////////////////////////////////////////////
0009A7  2               ; START Sprite code
0009A7  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               
0009A7  2               .struct VSPRITE
0009A7  2               	address125 .byte
0009A7  2               	mode_xxx_address1613 .byte
0009A7  2               	x70 .byte
0009A7  2               	x98 .byte
0009A7  2               	y70 .byte
0009A7  2               	y98 .byte
0009A7  2               	collision_zdepth_vflip_hflip .byte
0009A7  2               	height_width_offset .byte
0009A7  2               .endstruct
0009A7  2               
0009A7  2               .scope Sprite
0009A7  2               
0009A7  2               SPRITES_ZP = $0070	; memory reserved for Sprites
0009A7  2               
0009A7  2               ;-----------------------------------------
0009A7  2               ; sprites components collections
0009A7  2               MAX_SPRITES = 32
0009A7  2               
0009A7  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
0009AB  2  xx xx xx xx  
0009AF  2  xx xx xx xx  
0009C7  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
0009CB  2  xx xx xx xx  
0009CF  2  xx xx xx xx  
0009E7  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
0009EB  2  xx xx xx xx  
0009EF  2  xx xx xx xx  
000A07  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
000A0B  2  xx xx xx xx  
000A0F  2  xx xx xx xx  
000A27  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
000A2B  2  xx xx xx xx  
000A2F  2  xx xx xx xx  
000A47  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
000A4B  2  xx xx xx xx  
000A4F  2  xx xx xx xx  
000A67  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
000A6B  2  xx xx xx xx  
000A6F  2  xx xx xx xx  
000A87  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
000A8B  2  xx xx xx xx  
000A8F  2  xx xx xx xx  
000AA7  2  xx xx xx xx  sprites_aabb_x: .res MAX_SPRITES	; collision box INSIDE the sprite top-left corner
000AAB  2  xx xx xx xx  
000AAF  2  xx xx xx xx  
000AC7  2  xx xx xx xx  sprites_aabb_y: .res MAX_SPRITES
000ACB  2  xx xx xx xx  
000ACF  2  xx xx xx xx  
000AE7  2  xx xx xx xx  sprites_aabb_w: .res MAX_SPRITES	; collision box INSIDE the sprite height/width
000AEB  2  xx xx xx xx  
000AEF  2  xx xx xx xx  
000B07  2  xx xx xx xx  sprites_aabb_h: .res MAX_SPRITES
000B0B  2  xx xx xx xx  
000B0F  2  xx xx xx xx  
000B27  2  xx xx xx xx  sprites_collision_callback: .res (MAX_SPRITES * 2)
000B2B  2  xx xx xx xx  
000B2F  2  xx xx xx xx  
000B67  2               
000B67  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
000B6B  2  xx xx xx xx  
000B6F  2  xx xx xx xx  
000C67  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000C68  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000C6A  2               
000C6A  2               ;************************************************
000C6A  2               ;  init sprites manager
000C6A  2               ; create a table with the VERA @addr for each sprite
000C6A  2               ;
000C6A  2               init_addr_table:
000C6A  2               	; clear the sprites components
000C6A  2  A6 20        	ldx MAX_SPRITES
000C6C  2  CA           	dex
000C6D  2               :
000C6D  2  9E A7 09     	stz sprites_xL,x
000C70  2  9E C7 09     	stz sprites_xH,x
000C73  2  9E E7 09     	stz sprites_yL,x
000C76  2  9E 07 0A     	stz sprites_yH,x
000C79  2  9E E7 0A     	stz sprites_aabb_w,x
000C7C  2  9E 07 0B     	stz sprites_aabb_h,x
000C7F  2  9E A7 0A     	stz sprites_aabb_x,x
000C82  2  9E C7 0A     	stz sprites_aabb_y,x
000C85  2  CA           	dex
000C86  2  10 E5        	bpl :-
000C88  2               
000C88  2               	; activate sprite colisions
000C88  2               	;lda veraien
000C88  2               	;ora #VERA_SPRCOL_BIT
000C88  2               	;sta veraien
000C88  2               
000C88  2               	; all sprites are availble but ZERO (reserved player)
000C88  2  A2 FF        	ldx #$ff
000C8A  2               :
000C8A  2  9E 67 0B     	stz sprites,X
000C8D  2  CA           	dex
000C8E  2  D0 FA        	bne :-
000C90  2  A9 01        	lda #01
000C92  2  8D 67 0B     	sta sprites
000C95  2               
000C95  2               	; start of the sprites in VERA memory
000C95  2  A9 00        	lda #<vram_sprd
000C97  2  85 02        	sta r0L
000C99  2  A9 FC        	lda #>vram_sprd
000C9B  2  85 03        	sta r0H
000C9D  2               
000C9D  2  A2 80        	ldx #128
000C9F  2  A0 00        	ldy #0
000CA1  2                @loop:
000CA1  2  A5 03        	lda r0H
000CA3  2  99 B0 20     	sta sprites_table,y
000CA6  2  C8           	iny
000CA7  2  A5 02        	lda r0L
000CA9  2  99 B0 20     	sta sprites_table,y
000CAC  2  C8           	iny
000CAD  2               
000CAD  2  18           	clc
000CAE  2  A5 02        	lda r0L
000CB0  2  69 08        	adc #8
000CB2  2  85 02        	sta r0L
000CB4  2  A5 03        	lda r0H
000CB6  2  69 00        	adc #0
000CB8  2  85 03        	sta r0H	; move to next sprite
000CBA  2               
000CBA  2  CA           	dex
000CBB  2  D0 E4        	bne @loop
000CBD  2               
000CBD  2  60           	rts
000CBE  2               
000CBE  2               ;************************************************
000CBE  2               ; get a new available vera sprite
000CBE  2               ;	output: X = index of the vera sprite
000CBE  2               ;			0 = no sprite available
000CBE  2               ;
000CBE  2               new:
000CBE  2  A2 01        	ldx #$01
000CC0  2               :
000CC0  2  BD 67 0B     	lda sprites,x
000CC3  2  F0 03        	beq @return
000CC5  2  E8           	inx
000CC6  2  D0 F8        	bne :-
000CC8  2               @return:
000CC8  2  A9 01        	lda #01
000CCA  2  9D 67 0B     	sta sprites,x
000CCD  2               
000CCD  2               	; count activated sprites
000CCD  2  EC 67 0C     	cpx nb_sprites
000CD0  2  90 03        	bcc :+
000CD2  2               
000CD2  2  EE 67 0C     	inc nb_sprites
000CD5  2               :
000CD5  2  60           	rts
000CD6  2               
000CD6  2               ;
000CD6  2               ; the the VERA memory pointer to sprite Y + attribute X
000CD6  2               ;	Y = sprite index
000CD6  2               ;	X = attribute offset
000CD6  2               ;
000CD6  2               vram:
000CD6  2  DA           	phx			; save X on the stack
000CD7  2               
000CD7  2  98           	tya			; index of the sprite
000CD8  2  0A           	asl
000CD9  2  A8           	tay			; index of the address of the sprite (y*2)
000CDA  2               
000CDA  2  A9 00        	lda #0
000CDC  2  8D 25 9F     	sta veractl
000CDF  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000CE1  2  8D 22 9F     	sta verahi
000CE4  2  B9 B0 20     	lda sprites_table, y
000CE7  2  8D 21 9F     	sta veramid
000CEA  2  C8           	iny
000CEB  2  BA           	tsx
000CEC  2  BD 01 01     	lda $0101,x	; reload X from the stack
000CEF  2  79 B0 20     	adc sprites_table, y
000CF2  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000CF5  2  FA           	plx
000CF6  2  60           	rts
000CF7  2               
000CF7  2               ;************************************************
000CF7  2               ; configure the sprite
000CF7  2               ;	input: 	A = sprite collision mask
000CF7  2               ;			Y = sprite index
000CF7  2               ;		   	X = sprite size :
000CF7  2               ;		   	r0 = vram @ of the sprite data
000CF7  2               ;
000CF7  2  07 0F 1F 3F  sprites_size: .byte 7, 15, 31, 63	; count byte 0 as a byte, so width is not "8" pixel nut "0" + "7" pixels
000CFB  2               
000CFB  2               load:
000CFB  2  86 70        	stx SPRITES_ZP
000CFD  2  85 72        	sta SPRITES_ZP + 2
000CFF  2  84 73        	sty SPRITES_ZP + 3
000D01  2  20 74 0D     	jsr set_bitmap
000D04  2               
000D04  2  9C 23 9F     	stz veradat					; x = 0
000D07  2  9C 23 9F     	stz veradat
000D0A  2  9C 23 9F     	stz veradat					; y = 0
000D0D  2  9C 23 9F     	stz veradat
000D10  2  A5 72        	lda SPRITES_ZP + 2			; load collision mask
000D12  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000D14  2  8D 23 9F     	sta veradat
000D17  2  A5 70        	lda SPRITES_ZP				; 32x32 sprite
000D19  2  8D 23 9F     	sta veradat
000D1C  2               
000D1C  2  4A           	lsr
000D1D  2  4A           	lsr
000D1E  2  4A           	lsr
000D1F  2  4A           	lsr
000D20  2  85 70        	sta SPRITES_ZP				; focus on sprite_height, sprite_width
000D22  2               
000D22  2  A4 73        	ldy SPRITES_ZP + 3			; sprite index
000D24  2               
000D24  2  29 03        	and #%00000011				; sprite_width
000D26  2  AA           	tax
000D27  2  BD F7 0C     	lda sprites_size,x
000D2A  2  99 E7 0A     	sta sprites_aabb_w, y		; store width in pixels in the sprite attribute
000D2D  2  A9 00        	lda #00
000D2F  2  99 A7 0A     	sta sprites_aabb_x, y		; default collision box starts (0,0)
000D32  2               
000D32  2  A5 70        	lda SPRITES_ZP
000D34  2  4A           	lsr
000D35  2  4A           	lsr							; sprite_height
000D36  2  AA           	tax
000D37  2  BD F7 0C     	lda sprites_size,x
000D3A  2  99 07 0B     	sta sprites_aabb_h, y		; store height in pixels in the sprite attribute
000D3D  2  A9 00        	lda #00
000D3F  2  99 C7 0A     	sta sprites_aabb_y, y		; default collision box starts (0,0)
000D42  2               
000D42  2  60           	rts
000D43  2               
000D43  2               ;************************************************
000D43  2               ; set the collision box of the sprite
000D43  2               ;	input y = sprite index
000D43  2               ;		r0L = top-left corner X
000D43  2               ;		r0H = top-left corner Y
000D43  2               ;		r1L = width
000D43  2               ;		r1H = height
000D43  2               ;
000D43  2               set_aabb:
000D43  2  A5 02        	lda r0L
000D45  2  99 A7 0A     	sta sprites_aabb_x,y
000D48  2  A5 03        	lda r0H
000D4A  2  99 C7 0A     	sta sprites_aabb_y,y
000D4D  2  A5 04        	lda r1L
000D4F  2  99 E7 0A     	sta sprites_aabb_w,y
000D52  2  A5 05        	lda r1H
000D54  2  99 07 0B     	sta sprites_aabb_h,y
000D57  2  60           	rts
000D58  2               
000D58  2               ;************************************************
000D58  2               ; configure full veram memory (16:0) into optimized one (12:5)
000D58  2               ;	input: r0 = vram @ of the sprite data
000D58  2               ;	output: r1
000D58  2               ;
000D58  2               vram_to_16_5:
000D58  2               	; load full VERA memory (12:0) into R0
000D58  2  A5 02        	lda r0L
000D5A  2  85 04        	sta r1L
000D5C  2  A5 03        	lda r0H
000D5E  2  85 05        	sta r1H
000D60  2               
000D60  2               	; convert full addr to vera mode (bit shiting >> 5)
000D60  2  A5 05        	lda r1H
000D62  2  4A           	lsr
000D63  2  66 04        	ror r1L
000D65  2  4A           	lsr
000D66  2  66 04        	ror r1L
000D68  2  4A           	lsr
000D69  2  66 04        	ror r1L
000D6B  2  4A           	lsr
000D6C  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D6E  2  4A           	lsr
000D6F  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D71  2  85 05        	sta r1H
000D73  2  60           	rts
000D74  2               
000D74  2               ;************************************************
000D74  2               ; change the address of the bitmap for the sprite
000D74  2               ;	Y = sprite index
000D74  2               ;	r0 = vera memory (12:5)
000D74  2               ;
000D74  2               set_bitmap:
000D74  2  A2 00        	ldx #VSPRITE::address125
000D76  2  20 D6 0C     	jsr vram			; set very pointer to the address of the bitmap
000D79  2               
000D79  2  A5 02        	lda r0L
000D7B  2  8D 23 9F     	sta veradat
000D7E  2  A5 03        	lda r0H
000D80  2  09 80        	ora #$80						; M = 8 bits
000D82  2  8D 23 9F     	sta veradat
000D85  2               
000D85  2  60           	rts
000D86  2               
000D86  2               ;************************************************
000D86  2               ; change the display byte for a sprite
000D86  2               ;	Y = sprite index
000D86  2               ;	X = display value to set
000D86  2               ;
000D86  2               display:
000D86  2  86 02        	stx r0L		; save X for later
000D88  2  84 03        	sty r0H
000D8A  2               
000D8A  2               	; set vram memory on the X sprite
000D8A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D8C  2  20 D6 0C     	jsr vram
000D8F  2  AD 23 9F     	lda veradat
000D92  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000D94  2  05 02        	ora r0L
000D96  2  85 02        	sta r0L
000D98  2               
000D98  2  A4 03        	ldy r0H
000D9A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D9C  2  20 D6 0C     	jsr vram
000D9F  2               
000D9F  2  A5 02        	lda r0L
000DA1  2  8D 23 9F     	sta veradat
000DA4  2  60           	rts
000DA5  2               
000DA5  2               ;************************************************
000DA5  2               ; define position of sprite and recompute bounding box
000DA5  2               ;	Y = sprite index
000DA5  2               ;	r0 = addr of word X & word Y
000DA5  2               ;
000DA5  2               position:
000DA5  2               	; set vram memory on the X sprite
000DA5  2  84 70        	sty SPRITES_ZP
000DA7  2  A2 02        	ldx #VSPRITE::x70
000DA9  2  20 D6 0C     	jsr vram
000DAC  2  A6 70        	ldx SPRITES_ZP
000DAE  2               
000DAE  2  A0 00        	ldy #00
000DB0  2  BD A7 0A     	lda sprites_aabb_x, x	; X offset of the collision box
000DB3  2  F0 19        	beq @no_xoffset
000DB5  2               @xoffset:
000DB5  2  38           	sec
000DB6  2  B1 02        	lda (r0L),y
000DB8  2  9D A7 09     	sta sprites_xL, x
000DBB  2  FD A7 0A     	sbc sprites_aabb_x, x
000DBE  2  8D 23 9F     	sta veradat
000DC1  2  C8           	iny
000DC2  2  B1 02        	lda (r0L),y
000DC4  2  9D C7 09     	sta sprites_xH, x
000DC7  2  E9 00        	sbc #00
000DC9  2  8D 23 9F     	sta veradat				; X - xoffset => vera X
000DCC  2  80 11        	bra @after_xoffset
000DCE  2               @no_xoffset:
000DCE  2  B1 02        	lda (r0L),y
000DD0  2  8D 23 9F     	sta veradat
000DD3  2  9D A7 09     	sta sprites_xL, x
000DD6  2  C8           	iny
000DD7  2  B1 02        	lda (r0L),y
000DD9  2  8D 23 9F     	sta veradat
000DDC  2  9D C7 09     	sta sprites_xH, x		; X => vera X
000DDF  2               @after_xoffset:
000DDF  2               
000DDF  2  18           	clc
000DE0  2  BD A7 09     	lda sprites_xL, x
000DE3  2  7D E7 0A     	adc sprites_aabb_w, x
000DE6  2  9D 27 0A     	sta sprites_x1L, x
000DE9  2  BD C7 09     	lda sprites_xH, x
000DEC  2  69 00        	adc #0
000DEE  2  9D 47 0A     	sta sprites_x1H, x		;X1 = x + aabb.w
000DF1  2               
000DF1  2  BD C7 0A     	lda sprites_aabb_y, x	; Y offset of the collision box
000DF4  2  F0 19        	beq @no_yoffset
000DF6  2               @yoffset:
000DF6  2  38           	sec
000DF7  2  B1 02        	lda (r0L),y
000DF9  2  9D E7 09     	sta sprites_yL, x
000DFC  2  FD C7 0A     	sbc sprites_aabb_y, x
000DFF  2  8D 23 9F     	sta veradat
000E02  2  C8           	iny
000E03  2  B1 02        	lda (r0L),y
000E05  2  9D 07 0A     	sta sprites_yH, x
000E08  2  E9 00        	sbc #0
000E0A  2  8D 23 9F     	sta veradat				; Y - yoffset  => vera Y high
000E0D  2  80 12        	bra @after_yoffset
000E0F  2               @no_yoffset:
000E0F  2  C8           	iny
000E10  2  B1 02        	lda (r0L),y
000E12  2  8D 23 9F     	sta veradat
000E15  2  9D E7 09     	sta sprites_yL, x
000E18  2  C8           	iny
000E19  2  B1 02        	lda (r0L),y
000E1B  2  8D 23 9F     	sta veradat
000E1E  2  9D 07 0A     	sta sprites_yH, x		; y => vera Y
000E21  2               @after_yoffset:
000E21  2  18           	clc
000E22  2  BD E7 09     	lda sprites_yL, x
000E25  2  7D 07 0B     	adc sprites_aabb_h, x
000E28  2  9D 67 0A     	sta sprites_y1L, x
000E2B  2  BD 07 0A     	lda sprites_yH, x
000E2E  2  69 00        	adc #00
000E30  2  9D 87 0A     	sta sprites_y1H, x		; Y1 = y + aabb.y + aabb.h
000E33  2               
000E33  2  60           	rts
000E34  2               
000E34  2               ;************************************************
000E34  2               ; Change the flipping of a sprite
000E34  2               ;	Y = sprite index
000E34  2               ;	A = value to set
000E34  2               ;
000E34  2               set_flip:
000E34  2  85 70        	sta SPRITES_ZP
000E36  2  84 71        	sty SPRITES_ZP + 1
000E38  2               
000E38  2               	; set vram memory on the X sprite
000E38  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E3A  2  20 D6 0C     	jsr vram
000E3D  2               
000E3D  2  AD 23 9F     	lda veradat				;get current value
000E40  2  29 FC        	and #SPRITE_FLIP_CLEAR
000E42  2  05 70        	ora SPRITES_ZP			; change only the flip value
000E44  2  85 70        	sta SPRITES_ZP
000E46  2               
000E46  2  A4 71        	ldy SPRITES_ZP + 1
000E48  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E4A  2  20 D6 0C     	jsr vram
000E4D  2  A5 70        	lda SPRITES_ZP
000E4F  2  8D 23 9F     	sta veradat
000E52  2  60           	rts
000E53  2               
000E53  2               ;************************************************
000E53  2               ; increase collision box by 1
000E53  2               ;	X = sprite index
000E53  2               ;
000E53  2               aabb_x_inc:
000E53  2  FE A7 09     	inc sprites_xL, x
000E56  2  D0 03        	bne :+
000E58  2  FE C7 09     	inc sprites_xH, x
000E5B  2               :
000E5B  2  FE 27 0A     	inc sprites_x1L, x
000E5E  2  D0 03        	bne :+
000E60  2  FE 47 0A     	inc sprites_x1H, x
000E63  2               :
000E63  2  60           	rts
000E64  2               
000E64  2               ;************************************************
000E64  2               ; decrease collision box by 1
000E64  2               ;	X = sprite index
000E64  2               ;
000E64  2               aabb_x_dec:
000E64  2  DE A7 09     	dec sprites_xL, x
000E67  2  BD A7 09     	lda sprites_xL, x
000E6A  2  C9 FF        	cmp #$ff
000E6C  2  D0 03        	bne :+
000E6E  2  DE C7 09     	dec sprites_xH, x
000E71  2               :
000E71  2  DE 27 0A     	dec sprites_x1L, x
000E74  2  BD 27 0A     	lda sprites_x1L, x
000E77  2  C9 FF        	cmp #$ff
000E79  2  D0 03        	bne :+
000E7B  2  DE 47 0A     	dec sprites_x1H, x
000E7E  2               :
000E7E  2  60           	rts
000E7F  2               
000E7F  2               ;************************************************
000E7F  2               ; increase collision box by 1
000E7F  2               ;	X = sprite index
000E7F  2               ;
000E7F  2               aabb_y_inc:
000E7F  2  FE E7 09     	inc sprites_yL, x
000E82  2  D0 03        	bne :+
000E84  2  FE 07 0A     	inc sprites_yH, x
000E87  2               :
000E87  2  FE 67 0A     	inc sprites_y1L, x
000E8A  2  D0 03        	bne :+
000E8C  2  FE 87 0A     	inc sprites_y1H, x
000E8F  2               :
000E8F  2  60           	rts
000E90  2               
000E90  2               ;************************************************
000E90  2               ; decrease collision box by 1
000E90  2               ;	X = sprite index
000E90  2               ;
000E90  2               aabb_y_dec:
000E90  2  DE E7 09     	dec sprites_yL, x
000E93  2  BD E7 09     	lda sprites_yL, x
000E96  2  C9 FF        	cmp #$ff
000E98  2  D0 03        	bne :+
000E9A  2  DE 07 0A     	dec sprites_yH, x
000E9D  2               :
000E9D  2  DE 67 0A     	dec sprites_y1L, x
000EA0  2  BD 67 0A     	lda sprites_y1L, x
000EA3  2  C9 FF        	cmp #$ff
000EA5  2  D0 03        	bne :+
000EA7  2  DE 87 0A     	dec sprites_y1H, x
000EAA  2               :
000EAA  2  60           	rts
000EAB  2               
000EAB  2               ;************************************************
000EAB  2               ; register sprites collision
000EAB  2               ; input: A = collision mask
000EAB  2               ;
000EAB  2               register_collision:
000EAB  2  EE 68 0C     	inc collisions
000EAE  2  8D 69 0C     	sta collisions + 1
000EB1  2  60           	rts
000EB2  2               
000EB2  2               ;************************************************
000EB2  2               ; Axis Aligned Bounding Box collision between 2 sprites
000EB2  2               ; input: X = index of sprite 1
000EB2  2               ;		 Y = index of sprite 2
000EB2  2               ; return: Z = no collision
000EB2  2               ;
000EB2  2               aabb_collision:
000EB2  2  BD C7 09     	lda sprites_xH, x
000EB5  2  D9 47 0A     	cmp sprites_x1H, y
000EB8  2  90 02        	bcc :+
000EBA  2  D0 49        	bne @false
000EBC  2               :
000EBC  2  BD A7 09     	lda sprites_xL, x
000EBF  2  D9 27 0A     	cmp sprites_x1L, y
000EC2  2  90 02        	bcc :+
000EC4  2  D0 3F        	bne @false
000EC6  2               :						; s(x).left_x <= s(y).right_x
000EC6  2               
000EC6  2  B9 C7 09     	lda sprites_xH, y
000EC9  2  DD 47 0A     	cmp sprites_x1H, x
000ECC  2  90 02        	bcc :+
000ECE  2  D0 35        	bne @false
000ED0  2               :
000ED0  2  B9 A7 09     	lda sprites_xL, y
000ED3  2  DD 27 0A     	cmp sprites_x1L, x
000ED6  2  90 02        	bcc :+
000ED8  2  D0 2B        	bne @false
000EDA  2               :						; AND s(y).left_x <= s(x).right_x
000EDA  2               
000EDA  2  BD 07 0A     	lda sprites_yH, x
000EDD  2  D9 87 0A     	cmp sprites_y1H, y
000EE0  2  90 02        	bcc :+
000EE2  2  D0 21        	bne @false
000EE4  2               :
000EE4  2  BD E7 09     	lda sprites_yL, x
000EE7  2  D9 67 0A     	cmp sprites_y1L, y
000EEA  2  90 02        	bcc :+
000EEC  2  D0 17        	bne @false
000EEE  2               :						; AND s(x).bottom_y <= s(y).top_y
000EEE  2               
000EEE  2  B9 07 0A     	lda sprites_yH, y
000EF1  2  DD 87 0A     	cmp sprites_y1H, x
000EF4  2  90 02        	bcc :+
000EF6  2  D0 0D        	bne @false
000EF8  2               :
000EF8  2  B9 E7 09     	lda sprites_yL, y
000EFB  2  DD 67 0A     	cmp sprites_y1L, x
000EFE  2  90 02        	bcc :+
000F00  2  D0 03        	bne @false
000F02  2               :						; AND s(y).bottom_y <= s(x).top_y
000F02  2               
000F02  2               @true:
000F02  2  A9 01        	lda #01
000F04  2  60           	rts
000F05  2               @false:
000F05  2  A9 00        	lda #00
000F07  2  60           	rts
000F08  2               
000F08  2               ;************************************************
000F08  2               ; after a collision IRQ, test all sprites to find colliding ones
000F08  2               ; return: a = no collision
000F08  2               ;
000F08  2               find_colliding:
000F08  2  AD 67 0C     	lda nb_sprites
000F0B  2  3A           	dec
000F0C  2  85 70        	sta SPRITES_ZP
000F0E  2  3A           	dec
000F0F  2  85 71        	sta SPRITES_ZP + 1
000F11  2               
000F11  2               @inner_loop:
000F11  2  A6 70        	ldx SPRITES_ZP
000F13  2  A4 71        	ldy SPRITES_ZP + 1
000F15  2  20 B2 0E     	jsr aabb_collision
000F18  2  D0 15        	bne @found
000F1A  2               
000F1A  2  C6 71        	dec SPRITES_ZP + 1
000F1C  2  30 02        	bmi @try_next
000F1E  2  80 F1        	bra @inner_loop
000F20  2               
000F20  2               @try_next:
000F20  2  A5 70        	lda SPRITES_ZP
000F22  2  3A           	dec
000F23  2  F0 07        	beq @not_found
000F25  2  85 70        	sta SPRITES_ZP			; start comparison end - 1
000F27  2  3A           	dec						; compare with start - 1 unless < 0
000F28  2  85 71        	sta SPRITES_ZP + 1
000F2A  2  80 E5        	bra @inner_loop
000F2C  2               
000F2C  2               @not_found:
000F2C  2  A9 00        	lda #00
000F2E  2  60           	rts
000F2F  2               @found:
000F2F  2  A9 01        	lda #01
000F31  2  60           	rts
000F32  2               
000F32  2               ;************************************************
000F32  2               ; manage collisions after a collision IRQ
000F32  2               ;
000F32  2               check_irq_collision:
000F32  2  AD 68 0C     	lda collisions
000F35  2  F0 06        	beq @return
000F37  2               
000F37  2  9C 68 0C     	stz collisions		; clear the collision flag
000F3A  2               
000F3A  2  20 08 0F     	jsr find_colliding
000F3D  2               
000F3D  2               @return:
000F3D  2  60           	rts
000F3E  2               
000F3E  2               ;************************************************
000F3E  2               ; check if sprite X collides with any of the others
000F3E  2               ; input : X = sprite index to test
000F3E  2               ; return: a = index of sprite in collision or $FF if no collision
000F3E  2               ;
000F3E  2               check_collision:
000F3E  2  86 70        	stx SPRITES_ZP
000F40  2  AD 67 0C     	lda nb_sprites
000F43  2  3A           	dec
000F44  2  F0 11        	beq @no_collision		; if there is only 1 sprite, no_collision
000F46  2  A8           	tay						; start with the last sprite
000F47  2               @loop:
000F47  2  C4 70        	cpy SPRITES_ZP
000F49  2  F0 05        	beq @next				; ignore the input sprite
000F4B  2  20 B2 0E     	jsr aabb_collision
000F4E  2  D0 05        	bne @collision
000F50  2               @next:
000F50  2  88           	dey
000F51  2  30 04        	bmi @no_collision		; 0 has to be taked care off
000F53  2  80 F2        	bra @loop
000F55  2               
000F55  2               @collision:
000F55  2  98           	tya						; store index of the colliding sprite
000F56  2  60           	rts
000F57  2               
000F57  2               @no_collision:
000F57  2  A9 FF        	lda #$ff
000F59  2  60           	rts
000F5A  2               
000F5A  2               ;************************************************
000F5A  2               ; simulate a sprite movement and check collision
000F5A  2               ;	input A = vertical (1) / horizontal (2)
000F5A  2               ;			  plus (4) / minus (8)
000F5A  2               ;		  X = sprite index
000F5A  2               ; 	return: a = index of colliding sprite, $ff if no collision
000F5A  2               ;
000F5A  2               precheck_collision:
000F5A  2  85 72        	sta SPRITES_ZP + 2
000F5C  2  86 73        	stx SPRITES_ZP + 3
000F5E  2               
000F5E  2  89 01        	bit #01
000F60  2  D0 5D        	bne @vertical
000F62  2  89 08        	bit #08
000F64  2  D0 2D        	bne @horizontal_minus
000F66  2               
000F66  2               @horizontal_plus:
000F66  2               	; save current X, X1 and add the delta
000F66  2  18           	clc
000F67  2  BD A7 09     	lda sprites_xL, x
000F6A  2  85 75        	sta SPRITES_ZP + 5
000F6C  2  69 01        	adc #01
000F6E  2  9D A7 09     	sta sprites_xL, x
000F71  2               
000F71  2  BD C7 09     	lda sprites_xH, x
000F74  2  85 76        	sta SPRITES_ZP + 6
000F76  2  69 00        	adc #00
000F78  2  9D C7 09     	sta sprites_xH, x
000F7B  2               @horizontal_plus_width:
000F7B  2  18           	clc
000F7C  2  BD 27 0A     	lda sprites_x1L, x
000F7F  2  85 77        	sta SPRITES_ZP + 7
000F81  2  69 01        	adc #01
000F83  2  9D 27 0A     	sta sprites_x1L, x
000F86  2               
000F86  2  BD 47 0A     	lda sprites_x1H, x
000F89  2  85 78        	sta SPRITES_ZP + 8
000F8B  2  69 00        	adc #00
000F8D  2  9D 47 0A     	sta sprites_x1H, x
000F90  2  4C 19 10     	jmp @test
000F93  2               
000F93  2               @horizontal_minus:
000F93  2  38           	sec
000F94  2  BD A7 09     	lda sprites_xL, x
000F97  2  85 75        	sta SPRITES_ZP + 5
000F99  2  E9 01        	sbc #01
000F9B  2  9D A7 09     	sta sprites_xL, x
000F9E  2               
000F9E  2  BD C7 09     	lda sprites_xH, x
000FA1  2  85 76        	sta SPRITES_ZP + 6
000FA3  2  E9 00        	sbc #00
000FA5  2  9D C7 09     	sta sprites_xH, x
000FA8  2               @horizontal_minus_width:
000FA8  2  38           	sec
000FA9  2  BD 27 0A     	lda sprites_x1L, x
000FAC  2  85 77        	sta SPRITES_ZP + 7
000FAE  2  E9 01        	sbc #01
000FB0  2  9D 27 0A     	sta sprites_x1L, x
000FB3  2               
000FB3  2  BD 47 0A     	lda sprites_x1H, x
000FB6  2  85 78        	sta SPRITES_ZP + 8
000FB8  2  E9 00        	sbc #00
000FBA  2  9D 47 0A     	sta sprites_x1H, x
000FBD  2  80 5A        	bra @test
000FBF  2               
000FBF  2               @vertical:
000FBF  2  89 08        	bit #08
000FC1  2  D0 2C        	bne @vertical_minus
000FC3  2               @vertical_plus:
000FC3  2               	; save current Y, Y1 and add delta
000FC3  2  18           	clc
000FC4  2  BD E7 09     	lda sprites_yL, x
000FC7  2  85 75        	sta SPRITES_ZP + 5
000FC9  2  69 01        	adc #01
000FCB  2  9D E7 09     	sta sprites_yL, x
000FCE  2               
000FCE  2  BD 07 0A     	lda sprites_yH, x
000FD1  2  85 76        	sta SPRITES_ZP + 6
000FD3  2  69 00        	adc #00
000FD5  2  9D 07 0A     	sta sprites_yH, x
000FD8  2               
000FD8  2  18           	clc
000FD9  2  BD 67 0A     	lda sprites_y1L, x
000FDC  2  85 77        	sta SPRITES_ZP + 7
000FDE  2  69 01        	adc #01
000FE0  2  9D 67 0A     	sta sprites_y1L, x
000FE3  2               
000FE3  2  BD 87 0A     	lda sprites_y1H, x
000FE6  2  85 78        	sta SPRITES_ZP + 8
000FE8  2  69 00        	adc #00
000FEA  2  9D 87 0A     	sta sprites_y1H, x
000FED  2  80 2A        	bra @test
000FEF  2               @vertical_minus:
000FEF  2               	; save current Y, Y1 and add delta
000FEF  2  38           	sec
000FF0  2  BD E7 09     	lda sprites_yL, x
000FF3  2  85 75        	sta SPRITES_ZP + 5
000FF5  2  E9 01        	sbc #01
000FF7  2  9D E7 09     	sta sprites_yL, x
000FFA  2               
000FFA  2  BD 07 0A     	lda sprites_yH, x
000FFD  2  85 76        	sta SPRITES_ZP + 6
000FFF  2  E9 00        	sbc #00
001001  2  9D 07 0A     	sta sprites_yH, x
001004  2               
001004  2  38           	sec
001005  2  BD 67 0A     	lda sprites_y1L, x
001008  2  85 77        	sta SPRITES_ZP + 7
00100A  2  69 01        	adc #01
00100C  2  9D 67 0A     	sta sprites_y1L, x
00100F  2               
00100F  2  BD 87 0A     	lda sprites_y1H, x
001012  2  85 78        	sta SPRITES_ZP + 8
001014  2  E9 00        	sbc #00
001016  2  9D 87 0A     	sta sprites_y1H, x
001019  2               
001019  2               @test:
001019  2  20 3E 0F     	jsr check_collision
00101C  2  85 74        	sta SPRITES_ZP + 4		; save the result
00101E  2               
00101E  2               @restore:
00101E  2               	; and restore the data
00101E  2  A6 73        	ldx SPRITES_ZP + 3
001020  2  A5 72        	lda SPRITES_ZP + 2
001022  2  89 02        	bit #02
001024  2  F0 16        	beq @vertical_restore
001026  2               @horizontal_restore:
001026  2  A5 75        	lda SPRITES_ZP + 5
001028  2  9D A7 09     	sta sprites_xL, x
00102B  2  A5 76        	lda SPRITES_ZP + 6
00102D  2  9D C7 09     	sta sprites_xH, x
001030  2  A5 77        	lda SPRITES_ZP + 7
001032  2  9D 27 0A     	sta sprites_x1L, x
001035  2  A5 78        	lda SPRITES_ZP + 8
001037  2  9D C7 09     	sta sprites_xH, x
00103A  2  80 14        	bra @return
00103C  2               
00103C  2               @vertical_restore:
00103C  2  A5 75        	lda SPRITES_ZP + 5
00103E  2  9D E7 09     	sta sprites_yL, x
001041  2  A5 76        	lda SPRITES_ZP + 6
001043  2  9D 07 0A     	sta sprites_yH, x
001046  2  A5 77        	lda SPRITES_ZP + 7
001048  2  9D 67 0A     	sta sprites_y1L, x
00104B  2  A5 78        	lda SPRITES_ZP + 8
00104D  2  9D 07 0A     	sta sprites_yH, x
001050  2               
001050  2               @return:
001050  2  A5 74        	lda SPRITES_ZP + 4	; result of the collision
001052  2  60           	rts
001053  2               
001053  2               .endscope
001053  2               
001053  1               .include "tilemap.asm"
001053  2               ;-----------------------------------------------------------------------------
001053  2               ;/////////////////////////////////////////////////////////////////////////////
001053  2               ; START Tilemap code
001053  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001053  2               ;-----------------------------------------------------------------------------
001053  2               
001053  2               .scope Tilemap
001053  2               
001053  2               COLLISION_MAP = HIMEM
001053  2               
001053  2               ;************************************************
001053  2               ; load the layers and the collision map
001053  2               ;
001053  2               load:
001053  2               	; load tilemap into layer 0
001053  2  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
001057  2  0F 09 00 8D  
00105B  2  2D 9F        
00105D  2  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
001061  2  0F 09 03 8D  
001065  2  2D 9F        
001067  2  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
00106B  2  9F           
00106C  2  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
001070  2  A0 00 20 BA  
001074  2  FF A9 0B A2  
00108D  2               
00108D  2               	; load tilemap into layer 1
00108D  2  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
001091  2  0F 09 00 8D  
001095  2  34 9F        
001097  2  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
00109B  2  0F 09 03 8D  
00109F  2  34 9F        
0010A1  2  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
0010A5  2  9F           
0010A6  2  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
0010AA  2  A0 00 20 BA  
0010AE  2  FF A9 09 A2  
0010C7  2               
0010C7  2               	; load collisionmap into ram
0010C7  2  A9 00        	lda #0
0010C9  2  85 00        	sta $00
0010CB  2  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), COLLISION_MAP
0010CF  2  A0 00 20 BA  
0010D3  2  FF A9 0D A2  
0010EC  2               
0010EC  2               
0010EC  2  60               rts
0010ED  2               
0010ED  2               ;************************************************
0010ED  2               ; convert (x,y) position into a collision memory address
0010ED  2               ;	input: r0  = X
0010ED  2               ;            r1 = Y
0010ED  2               ;	output : r0
0010ED  2               ;
0010ED  2               get_collision_addr:
0010ED  2  A5 02        	lda r0L
0010EF  2  29 F0        	and #%11110000
0010F1  2  0A           	asl
0010F2  2  26 03        	rol r0H
0010F4  2  85 02        	sta r0L 					; r0 = first tile of the tilemap in the row
0010F6  2               								; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
0010F6  2               
0010F6  2  A5 05            lda r1H
0010F8  2  4A           	lsr
0010F9  2  66 04        	ror r1L
0010FB  2  4A           	lsr
0010FC  2  66 04        	ror r1L
0010FE  2  4A           	lsr
0010FF  2  66 04        	ror r1L
001101  2  4A           	lsr
001102  2  66 04        	ror r1L
001104  2  85 05        	sta r1H 					; r1 = tile X in the row
001106  2               								; sprite X /16 (convert to tile X)
001106  2               
001106  2  18           	clc
001107  2  A5 02        	lda r0L
001109  2  65 04        	adc r1L
00110B  2  85 02        	sta r0L
00110D  2  A5 03        	lda r0H
00110F  2  65 05        	adc r1H
001111  2  85 03        	sta r0H						; r0 = tile position in the tilemap
001113  2               
001113  2  18           	clc
001114  2  A5 02        	lda r0L
001116  2  69 00        	adc #<COLLISION_MAP
001118  2  85 02        	sta r0L						; r0 = tile position in the memory tilemap
00111A  2  A5 03        	lda r0H
00111C  2  69 A0        	adc #>COLLISION_MAP
00111E  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
001120  2  60           	rts
001121  2               
001121  2               .endscope
001121  2               
001121  1               .include "entities.asm"
001121  2               ;-----------------------------------------------------------------------------
001121  2               ;/////////////////////////////////////////////////////////////////////////////
001121  2               ;           start ENTITY code
001121  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001121  2               ;-----------------------------------------------------------------------------
001121  2               
001121  2               .struct Entity
001121  2                   spriteID    .byte   ; ID of the vera sprite
001121  2               	status		.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
001121  2                   levelx      .word   ; level position
001121  2                   levely      .word
001121  2               	falling_ticks .word	; ticks since the player is falling (thing t in gravity)
001121  2               	delta_x		.byte	; when driving by phisics, original delta_x value
001121  2               
001121  2               	bWidth		.byte	; widht in pixel of the entity
001121  2               	bHeight		.byte	; Height in pixel of the entity
001121  2               	bFlags		.byte	; position of the entity was changed
001121  2               	bXOffset	.byte	; signed offset of the top-left corder of the sprite vs the collision box
001121  2               	bYOffset	.byte	;
001121  2               	collision_addr	.word	; cached @ of the collision equivalent of the center of the player
001121  2               .endstruct
001121  2               
001121  2               .enum EntityFlags
001121  2               	physics = 1
001121  2               	moved = 2
001121  2               	colission_map_changed = 4
001121  2               .endenum
001121  2               
001121  2               
001121  2               ENTITY_ZP = $0065
001121  2               
001121  2               bSaveX = ENTITY_ZP + 3
001121  2               bSide2test = ENTITY_ZP + 4
001121  2               ; pixel size converted to tiles size
001121  2               bTilesWidth = ENTITY_ZP + 5
001121  2               bTilesHeight = ENTITY_ZP + 6
001121  2               bPlayerOnSlop = ENTITY_ZP + 7
001121  2               bInLoop = ENTITY_ZP + 8
001121  2               bSlopX_delta = $30
001121  2               
001121  2               ; number of tiles an entity covers (based on the collision box height and width)
001121  2               bTilesCoveredX = r1L
001121  2               bTilesCoveredY = r1H
001121  2               
001121  2               .scope Entities
001121  2               
001121  2               ; pointers to entites
001121  2  00 00 00 00  indexLO:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001125  2  00 00 00 00  
001129  2  00 00 00 00  
001141  2  00 00 00 00  indexHI:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001145  2  00 00 00 00  
001149  2  00 00 00 00  
001161  2  00 00 00 00  indexUse:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
001165  2  00 00 00 00  
001169  2  00 00 00 00  
001181  2               
001181  2               ;************************************************
001181  2               ; add an entity
001181  2               ;   input: a = lo-byte of entity address
001181  2               ;		   y = hi-byte
001181  2               ;			x = entityID
001181  2               register:
001181  2               	.ifdef DEBUG
001181  2               	cpx .sizeof(indexLO)
001181  2               	bcs :+
001181  2               	stp				; detect out of bound
001181  2               :
001181  2               	.endif
001181  2  9D 21 11     	sta indexLO,x
001184  2  98           	tya
001185  2  9D 41 11     	sta indexHI,x
001188  2               
001188  2  A9 01        	lda #01
00118A  2  9D 61 11     	sta indexUse,x	; entitie is activate
00118D  2  60           	rts
00118E  2               
00118E  2               ;************************************************
00118E  2               ; init all attributes of an entity
00118E  2               ;   input: X = entityID
00118E  2               ;	output: r3 = entity address
00118E  2               ;
00118E  2               get_pointer:
00118E  2               	.ifdef DEBUG
00118E  2               	cpx .sizeof(indexLO)
00118E  2               	bcs :+
00118E  2               	stp				; detect out of bound
00118E  2               :
00118E  2               	lda indexUse, x
00118E  2               	bne :+
00118E  2               	stp				; detect inactive entities
00118E  2               :
00118E  2               	.endif
00118E  2  BD 21 11     	lda indexLO, x
001191  2  85 08        	sta r3
001193  2  BD 41 11     	lda indexHI, x
001196  2  85 08        	sta r3
001198  2  60           	rts
001199  2               
001199  2               ;************************************************
001199  2               ; init all attributes of an entity
001199  2               ;   input: X = entityID
001199  2               ;
001199  2               initIndex:
001199  2               	.ifdef DEBUG
001199  2               	cpx .sizeof(indexLO)
001199  2               	bcs :+
001199  2               	stp				; detect out of bound
001199  2               :
001199  2               	lda indexUse, x
001199  2               	bne :+
001199  2               	stp				; detect inactive entities
001199  2               :
001199  2               	.endif
001199  2  BD 21 11     	lda indexLO, x
00119C  2  85 08        	sta r3
00119E  2  BD 41 11     	lda indexHI, x
0011A1  2  85 08        	sta r3
0011A3  2               
0011A3  2               	; pass through
0011A3  2               
0011A3  2               ;************************************************
0011A3  2               ; init all attributes of an entity
0011A3  2               ;   input: R3 = start of the object
0011A3  2               ;
0011A3  2               init:
0011A3  2               	.ifdef DEBUG
0011A3  2               	cmp r3H
0011A3  2               	bne :+
0011A3  2               	cmp r3L
0011A3  2               	bne :+
0011A3  2               
0011A3  2               	stp				; detect NULL pointer
0011A3  2               :
0011A3  2               	.endif
0011A3  2               
0011A3  2  A9 00            lda #00
0011A5  2  A0 00            ldy #Entity::spriteID
0011A7  2  91 08        	sta (r3), y
0011A9  2  A0 01            ldy #Entity::status
0011AB  2  A9 00        	lda #STATUS_WALKING_IDLE
0011AD  2  91 08        	sta (r3), y
0011AF  2  A9 00            lda #00
0011B1  2  A0 06            ldy #Entity::falling_ticks
0011B3  2  91 08        	sta (r3),y
0011B5  2  C8               iny
0011B6  2  91 08        	sta (r3),y
0011B8  2  C8               iny
0011B9  2  91 08        	sta (r3),y 	; delta_x
0011BB  2  A0 02            ldy #Entity::levelx
0011BD  2  91 08        	sta (r3),y
0011BF  2  C8               iny
0011C0  2  91 08        	sta (r3),y
0011C2  2  A0 04            ldy #Entity::levely
0011C4  2  91 08        	sta (r3),y
0011C6  2  C8               iny
0011C7  2  91 08        	sta (r3),y
0011C9  2  A9 01        	lda #01
0011CB  2  A0 0B        	ldy #Entity::bFlags
0011CD  2  A9 07        	lda #(EntityFlags::physics | EntityFlags::moved | EntityFlags::colission_map_changed)
0011CF  2  91 08        	sta (r3),y	; force screen position and size to be recomputed
0011D1  2  60               rts
0011D2  2               
0011D2  2               ;************************************************
0011D2  2               ; change  position of the sprite (level view) => (screen view)
0011D2  2               ;   input: R3 = start of the object
0011D2  2               ;
0011D2  2               set_position:
0011D2  2  84 65        	sty ENTITY_ZP			; save Y
0011D4  2               
0011D4  2                   ; screenX = levelX - layer1_scroll_x
0011D4  2  A0 02            ldy #(Entity::levelx)
0011D6  2  38               sec
0011D7  2  B1 08            lda (r3), y
0011D9  2  ED 37 9F         sbc VERA_L1_hscrolllo
0011DC  2  85 04            sta r1L
0011DE  2  C8               iny
0011DF  2  B1 08            lda (r3), y
0011E1  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
0011E4  2  85 05            sta r1H
0011E6  2               
0011E6  2                   ; screenY = levelY - layer1_scroll_y
0011E6  2  A0 04            ldy #(Entity::levely)
0011E8  2  38               sec
0011E9  2  B1 08            lda (r3), y
0011EB  2  ED 39 9F         sbc VERA_L1_vscrolllo
0011EE  2  85 06            sta r2L
0011F0  2  C8               iny
0011F1  2  B1 08            lda (r3), y
0011F3  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
0011F6  2  85 07            sta r2H
0011F8  2               
0011F8  2                   ; get the sprite ID
0011F8  2  B2 08        	lda (r3)                        ; sprite id
0011FA  2  A8               tay
0011FB  2               
0011FB  2                   ; adresse of the and px, py attributes
0011FB  2  A9 04        	lda #<r1L
0011FD  2  85 02            sta r0L
0011FF  2  A9 00        	lda #>r1L
001201  2  85 03            sta r0H
001203  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
001206  2               
001206  2  A0 0B        	ldy #Entity::bFlags
001208  2  B1 08        	lda (r3), y
00120A  2  29 FD        	and #(255 - EntityFlags::moved)
00120C  2  91 08        	sta (r3), y  		; clear the refresh flag
00120E  2               
00120E  2               @return:
00120E  2  A4 65        	ldy ENTITY_ZP		; restore Y
001210  2  60               rts
001211  2               
001211  2               ;************************************************
001211  2               ; recompute the collision map address of the entity
001211  2               ;   input: R3 = start of the object
001211  2               ;   output: r0 = address on the collision map
001211  2               ;
001211  2               get_collision_map:
001211  2  A0 0B        	ldy #Entity::bFlags
001213  2  B1 08        	lda (r3),y
001215  2  89 04        	bit #EntityFlags::colission_map_changed
001217  2  D0 0C        	bne @update_addr
001219  2               
001219  2               	; cache the collision @
001219  2  A0 0E        	ldy #Entity::collision_addr
00121B  2  B1 08        	lda (r3),y
00121D  2  85 02        	sta r0L
00121F  2  C8           	iny
001220  2  B1 08        	lda (r3),y
001222  2  85 03        	sta r0H
001224  2               
001224  2  60           	rts
001225  2               
001225  2               @update_addr:
001225  2  A0 04        	ldy #Entity::levely
001227  2  B1 08        	lda (r3),y
001229  2  85 02        	sta r0L
00122B  2  C8           	iny
00122C  2  B1 08        	lda (r3),y
00122E  2  85 03        	sta r0H								; r0 = sprite absolute position Y in the level
001230  2               
001230  2  A0 02        	ldy #Entity::levelx
001232  2  B1 08        	lda (r3),y
001234  2  85 04        	sta r1L
001236  2  C8           	iny
001237  2  B1 08        	lda (r3),y
001239  2  85 05        	sta r1H								; r1 = sprite absolute position X in the level
00123B  2               
00123B  2  20 ED 10     	jsr Tilemap::get_collision_addr		; update the collision address
00123E  2               
00123E  2               	; cache the collision @
00123E  2  A0 0E        	ldy #Entity::collision_addr
001240  2  A5 02        	lda r0L
001242  2  91 08        	sta (r3),y
001244  2  C8           	iny
001245  2  A5 03        	lda r0H
001247  2  91 08        	sta (r3),y
001249  2               
001249  2  A0 0B        	ldy #Entity::bFlags
00124B  2  B1 08        	lda (r3), y
00124D  2  29 FB        	and #(255 - EntityFlags::colission_map_changed)
00124F  2  91 08        	sta (r3), y  						; clear the refresh flag
001251  2  60           	rts
001252  2               
001252  2               ;************************************************
001252  2               ; update all entities screen position (when the object was moved, when the layer was moved)
001252  2               ;
001252  2               update:
001252  2  A2 00        	ldx #00
001254  2               
001254  2               @loop:
001254  2  BD 61 11     	lda indexUse,x
001257  2  F0 23        	beq @next
001259  2               
001259  2  BD 41 11     	lda indexHI,x
00125C  2  85 09        	sta r3H
00125E  2  BD 21 11     	lda indexLO,x
001261  2  85 08        	sta r3L
001263  2               
001263  2  A0 0B        	ldy #Entity::bFlags
001265  2  B1 08        	lda (r3),y
001267  2  89 01        	bit #EntityFlags::physics
001269  2  F0 03        	beq :+			; nothing to do
00126B  2  20 52 15     	jsr physics
00126E  2               
00126E  2               :
00126E  2  A0 0B        	ldy #Entity::bFlags
001270  2  B1 08        	lda (r3),y
001272  2  89 02        	bit #EntityFlags::moved
001274  2  F0 06        	beq @next			; nothing to do
001276  2  20 D2 11     	jsr Entities::set_position
001279  2  20 11 12     	jsr Entities::get_collision_map
00127C  2               @next:
00127C  2  E8           	inx
00127D  2  E0 20        	cpx #(.sizeof(indexLO))
00127F  2  D0 D3            bne @loop
001281  2               
001281  2               @return:
001281  2  60               rts
001282  2               
001282  2               ;************************************************
001282  2               ; change screen position of all entities when the layer moves (level view) => (screen view)
001282  2               ;
001282  2               fix_positions:
001282  2  A2 00        	ldx #00
001284  2               
001284  2               @loop:
001284  2  BD 61 11     	lda indexUse,x
001287  2  F0 10        	beq @next
001289  2               
001289  2  BD 41 11     	lda indexHI,x
00128C  2  85 09        	sta r3H
00128E  2  BD 21 11     	lda indexLO,x
001291  2  85 08        	sta r3L
001293  2               
001293  2  20 D2 11         jsr Entities::set_position
001296  2  20 11 12     	jsr Entities::get_collision_map
001299  2               
001299  2               @next:
001299  2  E8           	inx
00129A  2  E0 20        	cpx #(.sizeof(indexLO))
00129C  2  D0 E6            bne @loop
00129E  2               
00129E  2               @return:
00129E  2  60               rts
00129F  2               
00129F  2               ;************************************************
00129F  2               ; increase entity X position
00129F  2               ;   input: R3 = start of the object
00129F  2               ;
00129F  2               position_x_inc:
00129F  2               	; move the absolute position levelx + 1
00129F  2  A0 02        	ldy #Entity::levelx
0012A1  2  B1 08            lda (r3),y
0012A3  2  1A               inc
0012A4  2  91 08            sta (r3),y
0012A6  2  D0 06            bne :+
0012A8  2  C8               iny
0012A9  2  B1 08            lda (r3),y
0012AB  2  1A               inc
0012AC  2  91 08            sta (r3),y
0012AE  2               :
0012AE  2  A0 0B        	ldy #Entity::bFlags
0012B0  2  B1 08        	lda (r3), y  						; set the refresh bits
0012B2  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
0012B4  2  91 08        	sta (r3), y
0012B6  2               
0012B6  2  A0 00        	ldy #Entity::spriteID
0012B8  2  B1 08        	lda (r3),y
0012BA  2  AA           	tax
0012BB  2  20 53 0E     	jsr Sprite::aabb_x_inc
0012BE  2               
0012BE  2  60           	rts
0012BF  2               
0012BF  2               ;************************************************
0012BF  2               ; decrease entity X position
0012BF  2               ;   input: R3 = start of the object
0012BF  2               ;
0012BF  2               position_x_dec:
0012BF  2  A0 02        	ldy #Entity::levelx
0012C1  2  B1 08            lda (r3),y
0012C3  2  3A               dec
0012C4  2  91 08            sta (r3),y
0012C6  2  C9 FF            cmp #$ff
0012C8  2  D0 06            bne :+
0012CA  2  C8               iny
0012CB  2  B1 08            lda (r3),y
0012CD  2  3A               dec
0012CE  2  91 08            sta (r3),y
0012D0  2               :
0012D0  2  A0 0B        	ldy #Entity::bFlags
0012D2  2  B1 08        	lda (r3), y  						; set the refresh bits
0012D4  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
0012D6  2  91 08        	sta (r3), y
0012D8  2               
0012D8  2  A0 00        	ldy #Entity::spriteID
0012DA  2  B1 08        	lda (r3),y
0012DC  2  AA           	tax
0012DD  2  20 64 0E     	jsr Sprite::aabb_x_dec
0012E0  2               
0012E0  2  60           	rts
0012E1  2               
0012E1  2               ;************************************************
0012E1  2               ; increase entity Y position
0012E1  2               ;   input: R3 = start of the object
0012E1  2               ;
0012E1  2               position_y_inc:
0012E1  2               	; move the absolute position levelx + 1
0012E1  2  A0 04        	ldy #Entity::levely
0012E3  2  B1 08            lda (r3),y
0012E5  2  1A               inc
0012E6  2  91 08            sta (r3),y
0012E8  2  D0 06            bne :+
0012EA  2  C8               iny
0012EB  2  B1 08            lda (r3),y
0012ED  2  1A               inc
0012EE  2  91 08            sta (r3),y
0012F0  2               :
0012F0  2  A0 0B        	ldy #Entity::bFlags
0012F2  2  B1 08        	lda (r3), y  						; set the refresh bits
0012F4  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
0012F6  2  91 08        	sta (r3), y
0012F8  2               
0012F8  2  A0 00        	ldy #Entity::spriteID
0012FA  2  B1 08        	lda (r3),y
0012FC  2  AA           	tax
0012FD  2  20 7F 0E     	jsr Sprite::aabb_y_inc
001300  2               
001300  2  60           	rts
001301  2               
001301  2               ;************************************************
001301  2               ; decrease entity X position
001301  2               ;   input: R3 = start of the object
001301  2               ;
001301  2               position_y_dec:
001301  2  A0 04        	ldy #Entity::levely
001303  2  B1 08            lda (r3),y
001305  2  3A               dec
001306  2  91 08            sta (r3),y
001308  2  C9 FF            cmp #$ff
00130A  2  D0 06            bne :+
00130C  2  C8               iny
00130D  2  B1 08            lda (r3),y
00130F  2  3A               dec
001310  2  91 08            sta (r3),y
001312  2               :
001312  2  A0 0B        	ldy #Entity::bFlags
001314  2  B1 08        	lda (r3), y  						; set the refresh bits
001316  2  09 06        	ora #(EntityFlags::moved | EntityFlags::colission_map_changed)
001318  2  91 08        	sta (r3), y
00131A  2               
00131A  2  A0 00        	ldy #Entity::spriteID
00131C  2  B1 08        	lda (r3),y
00131E  2  AA           	tax
00131F  2  20 90 0E     	jsr Sprite::aabb_y_dec
001322  2               
001322  2  60           	rts
001323  2               
001323  2               ;************************************************
001323  2               ;	compute the number of tiles covered by the boundingbox
001323  2               ; input: r3 pointer to entity
001323  2               ; output: r1L : number of tiles height
001323  2               ;			X = r1H : number of tiles width
001323  2               ;			Y = r2L : index of the first tile to test
001323  2               ;				r2H : size of object in tile coordinated
001323  2               								; 8 pixels => + 0 byte
001323  2               								; 16 pixels => + 1 byte
001323  2               								; 32 pixels => + 2 bytes
001323  2               								; 64 pixels => + 4 bytes
001323  2               
001323  2               bbox_coverage:
001323  2  A0 09        	ldy #Entity::bWidth
001325  2  B1 08        	lda (r3),y
001327  2  C9 10        	cmp #16
001329  2  D0 04        	bne :+
00132B  2  A9 01        	lda #01
00132D  2  80 0A        	bra @width
00132F  2               :
00132F  2  C9 20        	cmp #32
001331  2  D0 04        	bne :+
001333  2  A9 02        	lda #02
001335  2  80 02        	bra @width
001337  2               :
001337  2  A9 00        	lda #00
001339  2               
001339  2               @width:
001339  2  85 6A        	sta bTilesWidth
00133B  2               
00133B  2               	; X = how many column of tiles to test
00133B  2  A0 02            ldy #Entity::levelx
00133D  2  B1 08        	lda (r3),y
00133F  2  29 0F        	and #%00001111
001341  2  F0 0B        	beq @one_tile
001343  2               @two_tiles_right:
001343  2  A6 6A        	ldx bTilesWidth						; test 2 column ( y % 16 <> 0)
001345  2  E8           	inx
001346  2  86 04        	stx bTilesCoveredX
001348  2  A0 00        	ldy #00								; starting on row +1
00134A  2  84 06        	sty r2L
00134C  2  80 08        	bra @test_lines
00134E  2               @one_tile:
00134E  2  A6 6A        	ldx bTilesWidth						; test 1 column ( y % 16  == 8)
001350  2  86 04        	stx bTilesCoveredX
001352  2  A0 00        	ldy #00								; starting on row +1
001354  2  84 06        	sty r2L
001356  2               
001356  2               @test_lines:
001356  2  A0 0A        	ldy #Entity::bHeight
001358  2  B1 08        	lda (r3),y
00135A  2  C9 10        	cmp #16
00135C  2  D0 04        	bne :+
00135E  2  A9 01        	lda #01
001360  2  80 0A        	bra @height
001362  2               :
001362  2  C9 20        	cmp #32
001364  2  D0 04        	bne :+
001366  2  A9 02        	lda #02
001368  2  80 02        	bra @height
00136A  2               :
00136A  2  A9 00        	lda #00
00136C  2               @height:
00136C  2  85 6B        	sta bTilesHeight
00136E  2               
00136E  2  A0 04            ldy #Entity::levely
001370  2  B1 08        	lda (r3),y
001372  2  29 0F        	and #%00001111
001374  2  D0 05        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
001376  2               @yint:
001376  2  A5 6B        	lda bTilesHeight		; test 2 lines ( y % 16 == 0)
001378  2  85 05        	sta bTilesCoveredY
00137A  2  60           	rts
00137B  2               @yfloat:
00137B  2  A5 6B        	lda bTilesHeight
00137D  2  1A           	inc
00137E  2  85 05        	sta bTilesCoveredY
001380  2  60           	rts
001381  2               
001381  2               ;************************************************
001381  2               ; check collision on the height
001381  2               ; input: r3 pointer to entity
001381  2               ; return:;	A = vaule of the collision
001381  2               ;	        ZERO = no collision
001381  2               ;
001381  2               if_collision_tile_height:
001381  2  A0 0E            ldy #Entity::collision_addr
001383  2  B1 08        	lda (r3),y
001385  2  85 02        	sta r0L
001387  2  C8               iny
001388  2  B1 08        	lda (r3),y
00138A  2  85 03        	sta r0H
00138C  2               
00138C  2               	; only tiles test if we are on a tile edge
00138C  2  A0 02            ldy #Entity::levelx
00138E  2  B1 08        	lda (r3),y
001390  2  29 0F        	and #%00001111
001392  2  D0 3C        	bne @no_collision
001394  2               
001394  2  20 23 13     	jsr bbox_coverage
001397  2  A6 05        	ldx bTilesCoveredY				; tiles height
001399  2  A5 69        	lda bSide2test
00139B  2  10 11        	bpl @right
00139D  2               
00139D  2               @left:
00139D  2               	; check one tile on the left
00139D  2  38           	sec
00139E  2  A5 02        	lda r0L
0013A0  2  E9 01        	sbc #01
0013A2  2  85 02        	sta r0L
0013A4  2  A5 03        	lda r0H
0013A6  2  E9 00        	sbc #00
0013A8  2  85 03        	sta r0H
0013AA  2  A0 00        	ldy #00
0013AC  2  80 03        	bra @test_line
0013AE  2               
0013AE  2               @right:
0013AE  2  A5 6A        	lda bTilesWidth
0013B0  2  A8           	tay					; test x(tile) + bTlesWidth
0013B1  2               
0013B1  2               @test_line:
0013B1  2  B1 02        	lda (r0L),y
0013B3  2  F0 11        	beq @test_next_line
0013B5  2               
0013B5  2               	; some tiles are not real collision
0013B5  2  84 30        	sty $30
0013B7  2  A8           	tay
0013B8  2  B9 A5 20     	lda tiles_attributes,y
0013BB  2  89 02        	bit #TILE_ATTR::SOLID_WALL
0013BD  2  F0 05        	beq @test_next_line1
0013BF  2  A4 30        	ldy $30
0013C1  2  B1 02        	lda (r0L),y
0013C3  2  60           	rts
0013C4  2               
0013C4  2               @test_next_line1:
0013C4  2  A4 30        	ldy $30
0013C6  2               
0013C6  2               @test_next_line:
0013C6  2  CA           	dex
0013C7  2  F0 07        	beq @no_collision
0013C9  2  98           	tya
0013CA  2  18           	clc
0013CB  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
0013CD  2  A8           	tay
0013CE  2  80 E1        	bra @test_line					; LADDERS can be traversed
0013D0  2               
0013D0  2               @no_collision:						; force a no collision
0013D0  2  A9 00        	lda #00
0013D2  2               @return:
0013D2  2  60           	rts
0013D3  2               
0013D3  2               ;************************************************
0013D3  2               ; check collision on the right
0013D3  2               ; input: r3 pointer to entity
0013D3  2               ; output: A = value of the collision, or 00/01 for sprites
0013D3  2               ;			ZERO = no collision
0013D3  2               ;
0013D3  2               check_collision_right:
0013D3  2               	; if levelx == TILEMAP_WIDTH - sprite.width => collision
0013D3  2  A0 03        	ldy #Entity::levelx + 1
0013D5  2  B1 08        	lda (r3),y
0013D7  2  F0 0F        	beq :+							; if x < 256, no need to test right border
0013D9  2  A0 02        	ldy #Entity::levelx
0013DB  2  B1 08        	lda (r3),y
0013DD  2  A0 09        	ldy #Entity::bWidth
0013DF  2  71 08        	adc (r3),y
0013E1  2  C9 00        	cmp #<(LEVEL_WIDTH)
0013E3  2  D0 03        	bne :+
0013E5  2  A9 01        	lda #01							; colllision right border
0013E7  2  60           	rts
0013E8  2               
0013E8  2               :
0013E8  2  A9 01        	lda #$01
0013EA  2  85 69        	sta bSide2test
0013EC  2  20 81 13     	jsr if_collision_tile_height
0013EF  2  D0 11        	bne @return						; if tile collision, return the tile value
0013F1  2               
0013F1  2  B2 08        	lda (r3)
0013F3  2  AA               tax
0013F4  2  A9 06        	lda #(02 | 04)
0013F6  2  A0 01        	ldy #01
0013F8  2  20 5A 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right, if a=$ff => nocollision
0013FB  2  30 03        	bmi @no_collision
0013FD  2  A9 01        	lda #01
0013FF  2  60           	rts
001400  2               
001400  2               @no_collision:
001400  2  A9 00        	lda #00
001402  2               @return:
001402  2  60           	rts
001403  2               
001403  2               ;************************************************
001403  2               ; check collision on the left
001403  2               ; input: r3 pointer to entity
001403  2               ; output: A = value of the collision, or 00/01 for sprites
001403  2               ;			ZERO = no collision
001403  2               ;
001403  2               check_collision_left:
001403  2               	; if levelx == 0 => collision
001403  2  A0 03        	ldy #Entity::levelx + 1
001405  2  B1 08        	lda (r3),y
001407  2  D0 09        	bne :+
001409  2  A0 02        	ldy #Entity::levelx
00140B  2  B1 08        	lda (r3),y
00140D  2  D0 03        	bne :+
00140F  2  A9 01        	lda #01
001411  2  60           	rts
001412  2               
001412  2               :
001412  2               	; left border is a collision
001412  2  A9 FF        	lda #$ff
001414  2  85 69        	sta bSide2test
001416  2  20 81 13     	jsr if_collision_tile_height
001419  2  D0 11        	bne @return
00141B  2               
00141B  2  B2 08        	lda (r3)
00141D  2  AA               tax
00141E  2  A9 0A        	lda #(02 | 08)
001420  2  A0 01        	ldy #01
001422  2  20 5A 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001425  2  30 03        	bmi @no_collision
001427  2  A9 01        	lda #01
001429  2  60           	rts
00142A  2               
00142A  2               @no_collision:
00142A  2  A9 00        	lda #00
00142C  2               @return:
00142C  2  60           	rts
00142D  2               
00142D  2               ;************************************************
00142D  2               ; check collision down
00142D  2               ;	collision surface to test is 16 pixels around the mid X
00142D  2               ; input: r3 pointer to entity
00142D  2               ; output : Z = no collision
00142D  2               ;
00142D  2               check_collision_down:
00142D  2               	; if levely == LEVEL_HEIGHT - sprite.width => collision
00142D  2  A0 05        	ldy #Entity::levely + 1
00142F  2  B1 08        	lda (r3),y
001431  2  F0 0F        	beq :+							; if x < 256, no need to test right border
001433  2  A0 04        	ldy #Entity::levely
001435  2  B1 08        	lda (r3),y
001437  2  A0 0A        	ldy #Entity::bHeight
001439  2  71 08        	adc (r3),y
00143B  2  C9 00        	cmp #<(LEVEL_HEIGHT)
00143D  2  D0 03        	bne :+
00143F  2  A9 01        	lda #01
001441  2  60           	rts
001442  2               
001442  2               :
001442  2  A0 04            ldy #Entity::levely
001444  2  B1 08        	lda (r3),y               	; if the player is inbetween 2 tiles there can be no collision
001446  2  29 0F        	and #%00001111
001448  2  D0 34        	bne @check_sprites
00144A  2               
00144A  2               @check_tiles:
00144A  2  A0 0E            ldy #Entity::collision_addr
00144C  2  B1 08        	lda (r3),y
00144E  2  85 02        	sta r0L
001450  2  C8               iny
001451  2  B1 08        	lda (r3),y
001453  2  85 03        	sta r0H
001455  2               
001455  2  20 23 13     	jsr bbox_coverage
001458  2  A6 6B        	ldx bTilesHeight	; check below the player
00145A  2  A9 00        	lda #00
00145C  2  18           	clc
00145D  2               @loop:
00145D  2  69 20        	adc #LEVEL_TILES_WIDTH
00145F  2  CA           	dex
001460  2  D0 FB        	bne @loop
001462  2  A8           	tay
001463  2               
001463  2  A6 04        	ldx bTilesCoveredX						; tiles to test in width
001465  2               @test_colum:
001465  2  B1 02        	lda (r0L),y
001467  2  F0 0C        	beq @next_colum							; empty tile, test the next one
001469  2               
001469  2  84 30        	sty $30
00146B  2  A8           	tay
00146C  2  B9 A5 20     	lda tiles_attributes,y
00146F  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001471  2  D0 08        	bne @collision							; considere slopes as empty
001473  2  A4 30        	ldy $30
001475  2               
001475  2               @next_colum:
001475  2  CA           	dex
001476  2  F0 06        	beq @check_sprites
001478  2  C8           	iny
001479  2  80 EA        	bra @test_colum
00147B  2               @collision:
00147B  2  A9 01        	lda #01
00147D  2  60           	rts
00147E  2               
00147E  2               @check_sprites:
00147E  2  B2 08            lda (r3)
001480  2  AA               tax
001481  2  A9 05        	lda #(01 | 04)
001483  2  A0 01        	ldy #01
001485  2  20 5A 0F     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001488  2  30 03        	bmi @no_collision
00148A  2  A9 01        	lda #01
00148C  2  60           	rts
00148D  2               @no_collision:
00148D  2  A9 00        	lda #00
00148F  2  60           	rts
001490  2               
001490  2  60           	rts
001491  2               
001491  2               ;************************************************
001491  2               ; check collision up
001491  2               ;	collision surface to test is 16 pixels around the mid X
001491  2               ; input: r3 pointer to entity
001491  2               ;		r0 : @ of current tile the top-left corner of the player sprite
001491  2               ; output : Z = no collision
001491  2               ;
001491  2               check_collision_up:
001491  2               	; if levely == 0 => collision
001491  2  A0 05        	ldy #Entity::levely + 1
001493  2  B1 08        	lda (r3),y
001495  2  D0 09        	bne :+
001497  2  A0 04        	ldy #Entity::levely
001499  2  B1 08        	lda (r3),y
00149B  2  D0 03        	bne :+
00149D  2  A9 01        	lda #01
00149F  2  60           	rts
0014A0  2               
0014A0  2               :
0014A0  2  A0 04            ldy #Entity::levely
0014A2  2  B1 08        	lda (r3),y               	; if the player is inbetween 2 tiles there can be no collision
0014A4  2  29 0F        	and #%00001111
0014A6  2  D0 30        	bne @check_sprites
0014A8  2               
0014A8  2  38           	sec
0014A9  2  A0 0E            ldy #Entity::collision_addr
0014AB  2  B1 08        	lda (r3),y
0014AD  2  E9 20        	sbc #LEVEL_TILES_WIDTH
0014AF  2  85 02        	sta r0L
0014B1  2  C8               iny
0014B2  2  B1 08        	lda (r3),y
0014B4  2  E9 00        	sbc #0
0014B6  2  85 03        	sta r0H
0014B8  2               
0014B8  2  20 23 13     	jsr bbox_coverage
0014BB  2               
0014BB  2  A6 04        	ldx bTilesCoveredX
0014BD  2  A0 00        	ldy #00
0014BF  2               @test_colum:
0014BF  2  B1 02        	lda (r0L),y							; left side
0014C1  2  F0 0C        	beq @next_column
0014C3  2               
0014C3  2  84 65        	sty ENTITY_ZP
0014C5  2  A8           	tay
0014C6  2  B9 A5 20     	lda tiles_attributes,y
0014C9  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
0014CB  2  D0 08        	bne @collision
0014CD  2  A4 65        	ldy ENTITY_ZP
0014CF  2               
0014CF  2               @next_column:
0014CF  2  CA           	dex
0014D0  2  F0 06        	beq @no_collision
0014D2  2  C8           	iny
0014D3  2  80 EA        	bra @test_colum
0014D5  2               @collision:
0014D5  2  A9 01        	lda #01
0014D7  2  60           	rts
0014D8  2               @no_collision:
0014D8  2               @check_sprites:
0014D8  2  A9 00        	lda #00
0014DA  2  60           	rts
0014DB  2               
0014DB  2               ;************************************************
0014DB  2               ; check if the player feet is ABOVE a slope tile
0014DB  2               ;   input: 	r0 pointer to player position on collision map
0014DB  2               ;			r3 pointer to entity
0014DB  2               ;	        Y = feet position tested (vs r0)
0014DB  2               ;	modify: bPlayerOnSlop
0014DB  2               ;	return: Z = slop
0014DB  2               ;
0014DB  2               if_above_slop:
0014DB  2  64 6C        	stz bPlayerOnSlop				; no slope
0014DD  2               
0014DD  2  20 23 13     	jsr bbox_coverage
0014E0  2               
0014E0  2  18           	clc
0014E1  2  A9 00        	lda #00
0014E3  2  A6 05        	ldx bTilesCoveredY					; test BELOW feet level
0014E5  2               :
0014E5  2  69 20        	adc #LEVEL_TILES_WIDTH
0014E7  2  CA           	dex
0014E8  2  D0 FB        	bne :-
0014EA  2  85 67        	sta ENTITY_ZP + 2					; position of the feet tiles
0014EC  2               
0014EC  2  A0 02            ldy #Entity::levelx
0014EE  2  B1 08        	lda (r3),y
0014F0  2  29 0F        	and #%00001111
0014F2  2  C9 08        	cmp #08
0014F4  2  90 04        	bcc @column0
0014F6  2  F0 0E        	beq @no_slope						; if x % 16 > 8, on the edge
0014F8  2               @column1:
0014F8  2  E6 67        	inc ENTITY_ZP + 2					; if x % 16 > 8, check the next colum
0014FA  2               @column0:
0014FA  2  A4 67            ldy ENTITY_ZP + 2
0014FC  2  B1 02        	lda (r0),y
0014FE  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001500  2  F0 09        	beq @above_slope
001502  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001504  2  F0 05        	beq @above_slope
001506  2               @no_slope:
001506  2  A9 00        	lda #0
001508  2  85 6C        	sta bPlayerOnSlop
00150A  2  60           	rts
00150B  2               @above_slope:
00150B  2  85 6C        	sta bPlayerOnSlop
00150D  2  A5 6C        	lda bPlayerOnSlop
00150F  2  60           	rts
001510  2               
001510  2               ;************************************************
001510  2               ; check if the entity base is exactly on a slope tile
001510  2               ;   input:  A = direction the object is moving to  (left = $ff, right = $01)
001510  2               ;			r0 pointer to player position on collision map
001510  2               ;			r3 pointer to entity
001510  2               ;	modify: bPlayerOnSlop
001510  2               ;	return: Z = slop
001510  2               ;			Y = feet position tested (vs r0)
001510  2               ;
001510  2               if_on_slop:
001510  2  64 6C        	stz bPlayerOnSlop				; no slope
001512  2               
001512  2  20 23 13     	jsr bbox_coverage
001515  2               
001515  2  18           	clc
001516  2  A9 00        	lda #00
001518  2  A6 05        	ldx bTilesCoveredY
00151A  2  CA           	dex									; remove 1 to pick the feet position, and not BELOW the feet
00151B  2               :
00151B  2  69 20        	adc #LEVEL_TILES_WIDTH
00151D  2  CA           	dex
00151E  2  D0 FB        	bne :-
001520  2  85 67        	sta ENTITY_ZP + 2					; position of the feet tiles
001522  2               
001522  2  A0 02            ldy #Entity::levelx
001524  2  B1 08        	lda (r3),y
001526  2  29 0F        	and #%00001111
001528  2  C9 08        	cmp #08
00152A  2  90 10        	bcc @column0						; if x % 16 < 8, check column 0
00152C  2  D0 0C        	bne @column1						; if x % 16 > 8, check column 1
00152E  2               
00152E  2  A4 67            ldy ENTITY_ZP + 2					; if x%16==8 test both columns
001530  2  B1 02        	lda (r0),y
001532  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001534  2  F0 12        	beq @on_slope
001536  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001538  2  F0 0E        	beq @on_slope
00153A  2               
00153A  2               @column1:
00153A  2  E6 67        	inc ENTITY_ZP + 2					; if x % 16 > 8, check the next colum
00153C  2               @column0:
00153C  2  A4 67            ldy ENTITY_ZP + 2
00153E  2               	; check if player feet is ON a slop
00153E  2  B1 02        	lda (r0),y						; test ON feet level
001540  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001542  2  F0 04        	beq @on_slope
001544  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001546  2  D0 05        	bne @no_slope
001548  2               @on_slope:
001548  2  85 6C        	sta bPlayerOnSlop
00154A  2  A5 6C        	lda bPlayerOnSlop				; remove the Z flag
00154C  2  60           	rts
00154D  2               
00154D  2               @no_slope:
00154D  2  A9 00        	lda #0
00154F  2  85 6C        	sta bPlayerOnSlop
001551  2  60           	rts
001552  2               
001552  2               ;************************************************
001552  2               ; Handle entity physics when jumping or falling
001552  2               ;   input: r3 pointer to entity
001552  2               ;
001552  2               physics:
001552  2  86 68        	stx bSaveX
001554  2               
001554  2  A0 01        	ldy #Entity::status
001556  2  B1 08        	lda (r3),y
001558  2  C9 02        	cmp #STATUS_CLIMBING
00155A  2  F0 0B        	beq @return1
00155C  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
00155E  2  F0 07        	beq @return1
001560  2  C9 05        	cmp #STATUS_JUMPING
001562  2  D0 06        	bne @fall
001564  2  4C 99 16     	jmp @jump
001567  2               @return1:
001567  2  A6 68        	ldx bSaveX
001569  2  60           	rts
00156A  2               
00156A  2               	;
00156A  2               	; deal with gravity driven falling
00156A  2               	;
00156A  2               @fall:
00156A  2               .ifdef DEBUG
00156A  2               	CHECK_DEBUG
00156A  2               .endif
00156A  2  64 6D        	stz bInLoop					; we are not yet the the physic loop
00156C  2               @loop:
00156C  2  20 11 12     	jsr Entities::get_collision_map
00156F  2  20 2D 14     	jsr check_collision_down
001572  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
001574  2  4C 82 16     	jmp @sit_on_solid				; solid tile below the player that is not a slope
001577  2               
001577  2               @check_on_slope:
001577  2  20 10 15     	jsr if_on_slop
00157A  2  F0 43        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
00157C  2               	; player is on a slope
00157C  2               @on_slope:
00157C  2  A0 02        	ldy #Entity::levelx
00157E  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001580  2  F0 18        	beq @slope_left
001582  2               @slope_right:
001582  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
001584  2  29 0F        	and #%00001111
001586  2  C9 08        	cmp #08
001588  2  90 07        	bcc :+
00158A  2  49 0F        	eor #%00001111
00158C  2  18           	clc
00158D  2  69 09        	adc #09
00158F  2  80 05        	bra @store_y1					; if x % 16 >= 8 = delta_y:  (x=8 => y=+15, x=15 => y = +8)
001591  2               :
001591  2  49 0F        	eor #%00001111
001593  2  38           	sec
001594  2  E9 07        	sbc #07							; if x % 16 < 8 = delta_y:  (x=0 => y=+8, x=7 => y = +0)
001596  2               @store_y1:
001596  2  85 30        	sta bSlopX_delta
001598  2  80 14        	bra @slope_y
00159A  2               @slope_left:
00159A  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
00159C  2  29 0F        	and #%00001111
00159E  2  C9 08        	cmp #08
0015A0  2  F0 07        	beq :+							; x%16 == 8 => keep 16
0015A2  2  90 05        	bcc :+							; x%16 < 8	+8
0015A4  2  38           	sec								; x%16 > 8	-8
0015A5  2  E9 08        	sbc #08
0015A7  2  80 ED        	bra @store_y1
0015A9  2               :
0015A9  2  18           	clc
0015AA  2  69 08        	adc #08
0015AC  2  85 30        	sta bSlopX_delta
0015AE  2               @slope_y:
0015AE  2  A0 04        	ldy #Entity::levely
0015B0  2  B1 08        	lda (r3),y
0015B2  2  29 0F        	and #%00001111
0015B4  2  D0 02        	bne :+
0015B6  2  A9 10        	lda #$10						; dirty trick y % 16 == 0 => convert to $10 (far end of the tile)
0015B8  2               :
0015B8  2  C5 30        	cmp bSlopX_delta
0015BA  2  90 03        	bcc @no_collision_down
0015BC  2  4C 82 16     	jmp @sit_on_solid
0015BF  2               
0015BF  2               @no_collision_down:
0015BF  2  A5 6D        	lda bInLoop						; only modify the status and t if we are not in the loop
0015C1  2  D0 39        	bne @drive_fall
0015C3  2               
0015C3  2  A9 01        	lda #01
0015C5  2  85 6D        	sta bInLoop
0015C7  2               
0015C7  2               	; if the player is already falling, increase t
0015C7  2  A0 01        	ldy #Entity::status
0015C9  2  B1 08        	lda (r3),y
0015CB  2  C9 04        	cmp #STATUS_FALLING
0015CD  2  F0 0F        	beq @increase_ticks
0015CF  2               
0015CF  2               	; start the falling timer
0015CF  2  A9 04        	lda #STATUS_FALLING
0015D1  2  91 08        	sta (r3),y
0015D3  2  A9 08        	lda #FALL_LO_TICKS
0015D5  2  A0 06        	ldy #Entity::falling_ticks
0015D7  2  91 08        	sta (r3),y						; reset t
0015D9  2  C8           	iny
0015DA  2  A9 00        	lda #00
0015DC  2  91 08        	sta (r3),y
0015DE  2               @increase_ticks:
0015DE  2  A0 06        	ldy #Entity::falling_ticks
0015E0  2  B1 08        	lda (r3),y									; increase the timer every 10 screen refresh
0015E2  2  3A           	dec
0015E3  2  91 08        	sta (r3),y
0015E5  2  D0 0A        	bne @check_loop
0015E7  2  A9 08        	lda #FALL_LO_TICKS
0015E9  2  91 08        	sta (r3),y
0015EB  2  C8           	iny
0015EC  2  B1 08        	lda (r3),y
0015EE  2  1A           	inc
0015EF  2  91 08        	sta (r3),y
0015F1  2               
0015F1  2               @check_loop:
0015F1  2  A0 07        	ldy #Entity::falling_ticks + 1
0015F3  2  B1 08        	lda (r3),y
0015F5  2  D0 03        	bne @start_drive_fall
0015F7  2  4C 7D 16     	jmp @fall_once
0015FA  2               
0015FA  2               @start_drive_fall:
0015FA  2  85 14        	sta r9L
0015FC  2               
0015FC  2               @drive_fall:
0015FC  2               	; move the player down #(falling_ticks + 1)
0015FC  2  20 E1 12     	jsr position_y_inc
0015FF  2               
0015FF  2  C6 14        	dec r9L
001601  2  F0 03        	beq @apply_delta_x
001603  2  4C 6C 15     	jmp @loop						; take t in count for gravity
001606  2               
001606  2               @apply_delta_x:
001606  2               	; we did all the Y modification, so now as there was no collision we can move X
001606  2  A0 08        	ldy #Entity::delta_x
001608  2  B1 08        	lda (r3),y
00160A  2  F0 04        	beq :+						; delta_x == 0 => entity is not moving left or right
00160C  2  30 3B        	bmi @fall_left					; delta_x < 0 => move left
00160E  2  80 03        	bra @fall_right
001610  2               :
001610  2  A6 68        	ldx bSaveX
001612  2  60           	rts
001613  2               
001613  2               @fall_right:
001613  2               	; cannot move if we are at the right border
001613  2  A0 02        	ldy #Entity::levelx
001615  2  B1 08        	lda (r3),y
001617  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
001619  2  D0 07        	bne @test_fall_collision_right
00161B  2  C8           	iny
00161C  2  B1 08        	lda (r3),y
00161E  2  C9 01        	cmp #>(LEVEL_WIDTH - 32)
001620  2  F0 05        	beq @fcollision_right			; we are at the level limit
001622  2               @test_fall_collision_right:
001622  2  20 D3 13     	jsr check_collision_right
001625  2  F0 07        	beq @no_fcollision_right
001627  2               @fcollision_right:
001627  2  A9 00        	lda #00
001629  2  A0 08        	ldy #Entity::delta_x
00162B  2  91 08        	sta (r3),y						; cancel deltaX to transform to vertical movement
00162D  2  60           	rts
00162E  2               @no_fcollision_right:
00162E  2  A5 6C        	lda bPlayerOnSlop
001630  2  F0 11        	beq @move_x_inc
001632  2               
001632  2               	; on slope, check if we can move on X axis
001632  2  A0 04        	ldy #Entity::levely
001634  2  B1 08        	lda (r3),y
001636  2  29 0F        	and #%00001111
001638  2  D0 02        	bne :+
00163A  2  A9 10        	lda #$10						; dirty trick y % 16 == 0 => convert to $10 (far end of the tile)
00163C  2               :
00163C  2  C5 30        	cmp bSlopX_delta
00163E  2  90 03        	bcc @move_x_inc
001640  2               @cannot_move_x:
001640  2  A6 68        	ldx bSaveX
001642  2  60           	rts
001643  2               
001643  2               @move_x_inc:
001643  2  20 9F 12     	jsr position_x_inc
001646  2  A6 68        	ldx bSaveX
001648  2  60           	rts
001649  2               
001649  2               @fall_left:
001649  2               	; cannot move if we are at the left border
001649  2  A0 03        	ldy #Entity::levelx + 1
00164B  2  B1 08        	lda (r3),y
00164D  2  D0 05        	bne @test_fall_collision_left
00164F  2  88           	dey
001650  2  B1 08        	lda (r3),y
001652  2  F0 05        	beq @fcollision_left
001654  2               @test_fall_collision_left:
001654  2  20 03 14     	jsr check_collision_left
001657  2  F0 09        	beq @no_fcollision_left
001659  2               @fcollision_left:
001659  2  A9 00        	lda #00
00165B  2  A0 08        	ldy #Entity::delta_x
00165D  2  91 08        	sta (r3),y				 		; cancel deltaX to transform to vertical movement
00165F  2  A6 68        	ldx bSaveX
001661  2  60           	rts
001662  2               @no_fcollision_left:
001662  2  A5 6C        	lda bPlayerOnSlop
001664  2  F0 11        	beq @move_x_dec
001666  2               
001666  2               	; on slope, check if we can move on X axis
001666  2  A0 04        	ldy #Entity::levely
001668  2  B1 08        	lda (r3),y
00166A  2  29 0F        	and #%00001111
00166C  2  D0 02        	bne :+
00166E  2  A9 10        	lda #$10						; dirty trick y % 16 == 0 => convert to $10 (far end of the tile)
001670  2               :
001670  2  C5 30        	cmp bSlopX_delta
001672  2  90 03        	bcc @move_x_dec
001674  2               @cannot_move_x_dec:
001674  2  A6 68        	ldx bSaveX
001676  2  60           	rts
001677  2               @move_x_dec:
001677  2  20 BF 12     	jsr position_x_dec
00167A  2  A6 68        	ldx bSaveX
00167C  2  60           	rts
00167D  2               
00167D  2               @fall_once:
00167D  2  20 E1 12     	jsr position_y_inc
001680  2  80 84        	bra @apply_delta_x
001682  2               
001682  2               @sit_on_solid:
001682  2  A0 0B        	ldy #Entity::bFlags
001684  2  B1 08        	lda (r3),y
001686  2  29 FE        	and #(255-EntityFlags::physics)
001688  2  91 08        	sta (r3),y						; disengage physics engine for that entity
00168A  2               
00168A  2               	; change the status if falling
00168A  2  A0 01        	ldy #Entity::status
00168C  2  B1 08        	lda (r3),y
00168E  2  C9 04        	cmp #STATUS_FALLING
001690  2  D0 04        	bne @return
001692  2  A9 00        	lda #STATUS_WALKING_IDLE
001694  2  91 08        	sta (r3),y
001696  2               
001696  2               @return:
001696  2  A6 68        	ldx bSaveX
001698  2  60           	rts
001699  2               
001699  2               	;
001699  2               	; deal with gravity driven jumping
001699  2               	;
001699  2               @jump:
001699  2               @decrease_ticks:
001699  2  A0 06        	ldy #Entity::falling_ticks
00169B  2  B1 08        	lda (r3),y
00169D  2  3A           	dec								 	; decrease  HI every 10 refresh
00169E  2  91 08        	sta (r3),y
0016A0  2  D0 0D        	bne @drive_jump
0016A2  2  C8           	iny
0016A3  2  B1 08        	lda (r3),y
0016A5  2  3A           	dec
0016A6  2  91 08        	sta (r3),y
0016A8  2  F0 50        	beq @apex							; reached the apex of the jump
0016AA  2               
0016AA  2  A9 0A        	lda #JUMP_LO_TICKS
0016AC  2  88           	dey
0016AD  2  91 08        	sta (r3),y							; reset t
0016AF  2               
0016AF  2               @drive_jump:
0016AF  2  A0 07        	ldy #Entity::falling_ticks + 1
0016B1  2  B1 08        	lda (r3),y
0016B3  2  85 66        	sta ENTITY_ZP + 1
0016B5  2               @loop_jump:
0016B5  2  20 01 13     	jsr position_y_dec
0016B8  2               
0016B8  2               	; refresh the collision address
0016B8  2  20 11 12     	jsr Entities::get_collision_map
0016BB  2               
0016BB  2  A0 04        	ldy #Entity::levely
0016BD  2  B1 08        	lda (r3),y
0016BF  2  29 0F        	and #%00001111
0016C1  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
0016C3  2               
0016C3  2               	; test hit a ceiling
0016C3  2  20 91 14     	jsr check_collision_up
0016C6  2  D0 04        	bne @collision_up
0016C8  2               @no_collision_up:
0016C8  2  C6 66        	dec ENTITY_ZP + 1
0016CA  2  D0 E9        	bne @loop_jump						; loop to take t in count for gravity
0016CC  2               
0016CC  2               @collision_up:
0016CC  2  A0 08        	ldy #Entity::delta_x
0016CE  2  B1 08        	lda (r3),y					 		; deal with deltax
0016D0  2  F0 C4        	beq @return
0016D2  2  30 12        	bmi @jump_left
0016D4  2               @jump_right:
0016D4  2  20 D3 13     	jsr check_collision_right
0016D7  2  F0 09        	beq @no_collision_right
0016D9  2               @collision_right:
0016D9  2  A9 00        	lda #00
0016DB  2  A0 08        	ldy #Entity::delta_x
0016DD  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
0016DF  2  A6 68        	ldx bSaveX
0016E1  2  60           	rts
0016E2  2               @no_collision_right:
0016E2  2  20 9F 12     	jsr position_x_inc
0016E5  2  60           	rts
0016E6  2               @jump_left:
0016E6  2  20 03 14     	jsr check_collision_left
0016E9  2  F0 09        	beq @no_collision_left
0016EB  2               @collision_left:
0016EB  2  A9 00        	lda #00
0016ED  2  A0 08        	ldy #Entity::delta_x
0016EF  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
0016F1  2  A6 68        	ldx bSaveX
0016F3  2  60           	rts
0016F4  2               @no_collision_left:
0016F4  2  20 BF 12     	jsr position_x_dec
0016F7  2  A6 68        	ldx bSaveX
0016F9  2  60           	rts
0016FA  2               
0016FA  2               @apex:
0016FA  2  A0 01            ldy #Entity::status
0016FC  2  A9 06        	lda #STATUS_JUMPING_IDLE
0016FE  2  91 08        	sta (r3),y
001700  2               
001700  2  A6 68        	ldx bSaveX
001702  2  60           	rts
001703  2               
001703  2               ;************************************************
001703  2               ; Try to move entity to the right
001703  2               ;	input : X = entity ID
001703  2               ;	return: A = 00 => succeeded to move
001703  2               ;			A = ff => error_right_border
001703  2               ;			A = 02 => error collision on right
001703  2               ;
001703  2               move_right:
001703  2  BD 41 11     	lda indexHI,x
001706  2  85 09        	sta r3H
001708  2  BD 21 11     	lda indexLO,x
00170B  2  85 08        	sta r3L
00170D  2               
00170D  2               	; cannot move if we are at the border
00170D  2  A0 03        	ldy #Entity::levelx + 1
00170F  2  B1 08        	lda (r3), y
001711  2  C9 01        	cmp #>(LEVEL_WIDTH - 32)
001713  2  D0 0B        	bne @not_border
001715  2               
001715  2  A0 02        	ldy #Entity::levelx
001717  2  B1 08        	lda (r3), y
001719  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
00171B  2  D0 03        	bne @not_border
00171D  2               
00171D  2               @failed_border:
00171D  2  A9 FF        	lda #$ff
00171F  2  60           	rts
001720  2               
001720  2               @not_border:
001720  2  A0 0E        	ldy #Entity::collision_addr
001722  2  B1 08        	lda (r3), y
001724  2  85 02        	sta r0L
001726  2  C8           	iny
001727  2  B1 08        	lda (r3), y
001729  2  85 03        	sta r0H
00172B  2               
00172B  2  20 D3 13     	jsr Entities::check_collision_right
00172E  2  AA           	tax
00172F  2  F0 02        	beq @no_collision						; block is collision on the right  and there is no slope on the right
001731  2  8A           	txa
001732  2  60           	rts										; return the collision tile code
001733  2               
001733  2               @no_collision:
001733  2               	; set direction vector
001733  2  A0 08        	ldy #Entity::delta_x
001735  2  A9 01        	lda #01
001737  2  91 08        	sta (r3),y
001739  2               
001739  2               	; move the entity in the level
001739  2  20 9F 12     	jsr Entities::position_x_inc
00173C  2  20 11 12     	jsr Entities::get_collision_map
00173F  2               
00173F  2               	; activate physics engine
00173F  2  A0 0B        	ldy #Entity::bFlags
001741  2  B1 08        	lda (r3),y
001743  2  09 01        	ora #(EntityFlags::physics)
001745  2  91 08        	sta (r3),y
001747  2               
001747  2  A9 00        	lda #00
001749  2  60           	rts
00174A  2               
00174A  2               ;************************************************
00174A  2               ; Try to move entity to the left
00174A  2               ;	input : X = entity ID
00174A  2               ;	return: A = 00 => succeeded to move
00174A  2               ;			A = ff => error_right_border
00174A  2               ;			A = 02 => error collision on right
00174A  2               ;
00174A  2               move_left:
00174A  2  BD 41 11     	lda indexHI,x
00174D  2  85 09        	sta r3H
00174F  2  BD 21 11     	lda indexLO,x
001752  2  85 08        	sta r3L
001754  2               
001754  2               	; cannot move if we are at the left border
001754  2  A0 03        	ldy #Entity::levelx + 1
001756  2  B1 08        	lda (r3), y
001758  2  D0 08        	bne @not_border
00175A  2  88           	dey
00175B  2  B1 08        	lda (r3), y
00175D  2  D0 03        	bne @not_border
00175F  2               
00175F  2               @failed_border:
00175F  2  A9 FF        	lda #$ff
001761  2  60           	rts
001762  2               
001762  2               @not_border:
001762  2  A0 0E        	ldy #Entity::collision_addr
001764  2  B1 08        	lda (r3), y
001766  2  85 02        	sta r0L
001768  2  C8           	iny
001769  2  B1 08        	lda (r3), y
00176B  2  85 03        	sta r0H
00176D  2               
00176D  2  20 03 14     	jsr Entities::check_collision_left
001770  2  AA           	tax
001771  2  F0 02        	beq @no_collision
001773  2  8A           	txa										; block is collision on the left  and there is no slope on the right
001774  2  60           	rts										; return the collision tile code
001775  2               
001775  2               @no_collision:
001775  2               	; set direction vector LEFT
001775  2  A0 08        	ldy #Entity::delta_x
001777  2  A9 FF        	lda #$ff
001779  2  91 08        	sta (r3),y
00177B  2               
00177B  2               	; move the entity in the level
00177B  2  20 BF 12     	jsr Entities::position_x_dec
00177E  2  20 11 12     	jsr Entities::get_collision_map
001781  2               
001781  2               	; activate physics engine
001781  2  A0 0B        	ldy #Entity::bFlags
001783  2  B1 08        	lda (r3),y
001785  2  09 01        	ora #(EntityFlags::physics)
001787  2  91 08        	sta (r3),y
001789  2               
001789  2  A9 00        	lda #00
00178B  2  60           	rts
00178C  2               
00178C  2               .endscope
00178C  2               
00178C  1               .include "objects.asm"
00178C  2               ;-----------------------------------------------------------------------------
00178C  2               ;/////////////////////////////////////////////////////////////////////////////
00178C  2               ;           start OBJECT code
00178C  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00178C  2               ;-----------------------------------------------------------------------------
00178C  2               
00178C  2               .scope Objects
00178C  2               
00178C  2               OBJECT_ZP = $0060	    ; memory reserved for objects
00178C  2               
00178C  2  00 00        objects_map: .word 0
00178E  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
001790  2               
001790  2               .enum Attribute
001790  2                   GRAB = 1
001790  2               .endenum
001790  2               
001790  2               .struct Object
001790  2               	entity		.tag Entity
001790  2                   imageID     .byte   ; ID of the image in the spritesheet
001790  2                   attribute   .byte
001790  2               .endstruct
001790  2               
001790  2               ;************************************************
001790  2               ; init the object data of the level
001790  2               ;
001790  2               init:
001790  2                   ; load the list of objects at the end of the previous load
001790  2  AD 10 08         lda current_load
001793  2  8D 8C 17         sta objects_map
001796  2  AD 11 08         lda current_load + 1
001799  2  8D 8D 17         sta objects_map + 1
00179C  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
0017A0  2  A0 00 20 BA  
0017A4  2  FF A9 0B A2  
0017BF  2               
0017BF  2                   ; load the sprites  of objects at the end of the previous vload
0017BF  2  AD 12 08         lda Vera::vram_load
0017C2  2  8D 8E 17         sta objects_sprites
0017C5  2  AD 13 08         lda Vera::vram_load + 1
0017C8  2  8D 8F 17         sta objects_sprites + 1
0017CB  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
0017CF  2  A0 00 20 BA  
0017D3  2  FF A9 0C A2  
0017EE  2               
0017EE  2                   ; add each available sprites on screen
0017EE  2  AD 8C 17         lda objects_map
0017F1  2  85 08            sta r3L
0017F3  2  AD 8D 17         lda objects_map + 1
0017F6  2  85 09            sta r3H
0017F8  2               
0017F8  2  B2 08            lda (r3)
0017FA  2  85 31            sta $31     ; number of objects
0017FC  2  64 32            stz $32     ; object #0
0017FE  2               
0017FE  2  E6 08            inc r3L
001800  2               
001800  2               @loop:
001800  2                   ; get a free sprite
001800  2  20 BE 0C         jsr Sprite::new
001803  2  8A               txa
001804  2  92 08            sta (r3)
001806  2               
001806  2                   ; register the entity
001806  2  A5 08            lda r3L
001808  2  A4 09            ldy r3H
00180A  2  20 81 11         jsr Entities::register
00180D  2               
00180D  2                   ; load the first object
00180D  2  AD 8E 17     	lda objects_sprites
001810  2  85 02        	sta r0L
001812  2  AD 8F 17     	lda objects_sprites + 1
001815  2  85 03        	sta r0H
001817  2  20 58 0D         jsr Sprite::vram_to_16_5
00181A  2  A5 04            lda r1L
00181C  2  85 02            sta r0L
00181E  2  A5 05            lda r1H
001820  2  85 03            sta r0H
001822  2               
001822  2  B2 08        	lda (r3)                        ; sprite id
001824  2  A8               tay
001825  2  A9 10           	lda #%00010000					; collision mask 1
001827  2  A2 50           	ldx #%01010000					; 16x16 sprite
001829  2  20 FB 0C     	jsr Sprite::load
00182C  2               
00182C  2                   ; display the object
00182C  2  B2 08        	lda (r3)                        ; sprite id
00182E  2  A8               tay
00182F  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
001831  2  20 86 0D     	jsr Sprite::display
001834  2               
001834  2  A0 0B        	ldy #Entity::bFlags
001836  2  A9 07        	lda #(EntityFlags::physics | EntityFlags::moved | EntityFlags::colission_map_changed)
001838  2  91 08        	sta (r3),y	                    ; force screen position and size to be recomputed
00183A  2  20 D2 11         jsr Entities::set_position
00183D  2               
00183D  2                   ; last object ?
00183D  2  C6 31            dec $31
00183F  2  F0 11            beq @return
001841  2               
001841  2                   ; move to the next object
001841  2  18               clc
001842  2  A5 08            lda r3L
001844  2  69 12            adc #.sizeof(Object)
001846  2  85 08            sta r3L
001848  2  A5 09            lda r3H
00184A  2  69 00            adc #00
00184C  2  85 09            sta r3H
00184E  2               
00184E  2  E6 32            inc $32                     ; object #next
001850  2  80 AE            bra @loop
001852  2               
001852  2               @return:
001852  2  60               rts
001853  2               
001853  2               ;************************************************
001853  2               ; change  position of the sprite (level view) => (screen view)
001853  2               ;   input: X = index of the object
001853  2               ;   output: r3 = pointer to the object
001853  2               ;
001853  2               set_position_index:
001853  2  AD 8E 11         lda Entities::get_pointer
001856  2               
001856  2               ;************************************************
001856  2               ; change position of all sprites when the layer moves (level view) => (screen view)
001856  2               ;
001856  2               fix_positions:
001856  2  AD 8C 17         lda objects_map
001859  2  85 08            sta r3L
00185B  2  AD 8D 17         lda objects_map + 1
00185E  2  85 09            sta r3H
001860  2               
001860  2  B2 08            lda (r3)
001862  2  85 31            sta $31     ; number of objects
001864  2  64 32            stz $32
001866  2  E6 08            inc r3L
001868  2               
001868  2               @loop:
001868  2                   ; position the first object
001868  2  20 D2 11         jsr Entities::set_position
00186B  2               
00186B  2                   ; last object ?
00186B  2  E6 32            inc $32
00186D  2  C6 31            dec $31
00186F  2  F0 0F            beq @return
001871  2               
001871  2                   ; move to the next object
001871  2  18               clc
001872  2  A5 08            lda r3L
001874  2  69 12            adc #.sizeof(Object)
001876  2  85 08            sta r3L
001878  2  A5 09            lda r3H
00187A  2  69 00            adc #00
00187C  2  85 09            sta r3H
00187E  2               
00187E  2  80 E8            bra @loop
001880  2               
001880  2               @return:
001880  2  60               rts
001881  2               
001881  2               ;************************************************
001881  2               ; find the object with a sprite ID
001881  2               ;   input: A = spriteID
001881  2               ;   output: (r3) start of the address of the objects
001881  2               ;           Y = memory index of the start of the object, $FF if no object
001881  2               ;
001881  2               get_by_spriteID:
001881  2  85 60            sta OBJECT_ZP
001883  2               
001883  2  AD 8C 17         lda objects_map
001886  2  85 08            sta r3L
001888  2  AD 8D 17         lda objects_map + 1
00188B  2  85 09            sta r3H
00188D  2               
00188D  2  B2 08            lda (r3)            ; number of objects
00188F  2  AA               tax
001890  2  E6 08            inc r3L             ; move to the first object
001892  2               
001892  2  A0 00            ldy #00
001894  2               @loop:
001894  2  B1 08            lda (r3), y
001896  2  C5 60            cmp OBJECT_ZP
001898  2  F0 0A            beq @found
00189A  2               
00189A  2                   ; last object ?
00189A  2  CA               dex
00189B  2  F0 08            beq @no_object
00189D  2               
00189D  2                   ; move to the next object
00189D  2  98               tya
00189E  2  18               clc
00189F  2  69 12            adc #.sizeof(Object)
0018A1  2  A8               tay
0018A2  2  80 F0            bra @loop
0018A4  2               
0018A4  2               @found:
0018A4  2  60               rts
0018A5  2               
0018A5  2               @no_object:
0018A5  2  A0 FF            ldy #$ff
0018A7  2  60               rts
0018A8  2               
0018A8  2               .endscope
0018A8  2               
0018A8  1               .include "layers.asm"
0018A8  2               ;-----------------------------------------------------------------------------
0018A8  2               ;/////////////////////////////////////////////////////////////////////////////
0018A8  2               ; START Layers code
0018A8  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0018A8  2               ;-----------------------------------------------------------------------------
0018A8  2               
0018A8  2               .scope Layers
0018A8  2               
0018A8  2               LAYERS_ZP = $0055
0018A8  2               wHScroll = LAYERS_ZP
0018A8  2               wVScroll = LAYERS_ZP + 2
0018A8  2               bDirty = LAYERS_ZP + 4
0018A8  2               
0018A8  2               HSCROLL = 0
0018A8  2               VSCROLL = 2
0018A8  2               
0018A8  2               ;************************************************
0018A8  2               ; init layers module
0018A8  2               ;
0018A8  2               init:
0018A8  2  64 55        	stz wHScroll
0018AA  2  64 56        	stz wHScroll + 1
0018AC  2               
0018AC  2  64 57        	stz wVScroll
0018AE  2  64 58        	stz wVScroll + 1
0018B0  2               
0018B0  2  64 59        	stz bDirty
0018B2  2  60           	rts
0018B3  2               
0018B3  2               ;************************************************
0018B3  2               ; set layer1 X position
0018B3  2               ; input: X = xLO
0018B3  2               ;		 Y = xHI
0018B3  2               set_x:
0018B3  2               	; is a real change requested ?
0018B3  2  C4 56        	cpy wHScroll + 1
0018B5  2  D0 05        	bne @dirty
0018B7  2  E4 55        	cpx wHScroll
0018B9  2  D0 01        	bne @dirty
0018BB  2  60           	rts
0018BC  2               @dirty:
0018BC  2  86 55        	stx wHScroll
0018BE  2  8E 37 9F     	stx VERA_L1_hscrolllo
0018C1  2  84 56        	sty wHScroll + 1
0018C3  2  8C 38 9F     	sty VERA_L1_hscrollhi
0018C6  2               
0018C6  2  A9 01        	lda #01
0018C8  2  85 59        	sta bDirty
0018CA  2  60           	rts
0018CB  2               
0018CB  2               ;************************************************
0018CB  2               ; set layer1 y position
0018CB  2               ; input: X = yLO
0018CB  2               ;		 Y = yHI
0018CB  2               set_y:
0018CB  2               	; is a real change requested ?
0018CB  2  C4 58        	cpy wVScroll + 1
0018CD  2  D0 05        	bne @dirty
0018CF  2  E4 57        	cpx wVScroll
0018D1  2  D0 01        	bne @dirty
0018D3  2  60           	rts
0018D4  2               @dirty:
0018D4  2  86 57        	stx wVScroll
0018D6  2  8E 39 9F     	stx VERA_L1_vscrolllo
0018D9  2  84 58        	sty wVScroll + 1
0018DB  2  8C 3A 9F     	sty VERA_L1_vscrollhi
0018DE  2               
0018DE  2  A9 01        	lda #01
0018E0  2  85 59        	sta bDirty
0018E2  2  60           	rts
0018E3  2               
0018E3  2               ;************************************************
0018E3  2               ; increase layer scrolling with a 8bits limit
0018E3  2               ;	X: : 0 = horizontal
0018E3  2               ;	   : 2 = vertical
0018E3  2               ;	Y: limit
0018E3  2               ;
0018E3  2               scroll_inc_8:
0018E3  2  84 02        	sty r0L
0018E5  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
0018E8  2  C5 02        	cmp r0L
0018EA  2  F0 0F        	beq @noscroll
0018EC  2               @scrollinc:
0018EC  2  1A           	inc
0018ED  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
0018F0  2  D0 03        	bne @scrolled
0018F2  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
0018F5  2               @scrolled:
0018F5  2               	; fix the objects position now that the layers scrolled
0018F5  2  20 56 18     	jsr Objects::fix_positions
0018F8  2  A9 01        	lda #01		; clear ZERO => scrolled
0018FA  2  60           	rts
0018FB  2               @noscroll:
0018FB  2  A9 00        	lda #00		; set ZERO => noscroll
0018FD  2  60           	rts
0018FE  2               
0018FE  2               ;************************************************
0018FE  2               ; increase layer scrolling with a 16bits limit
0018FE  2               ;	X: : 0 = horizontal
0018FE  2               ;	   : 2 = vertical
0018FE  2               ;	r0L: limit
0018FE  2               ;
0018FE  2               scroll_inc_16:
0018FE  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001901  2  C5 02        	cmp r0L
001903  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
001905  2  A8           	tay
001906  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
001909  2  C5 03        	cmp r0H
00190B  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
00190D  2  98           	tya
00190E  2               @scrollinc:
00190E  2  1A           	inc
00190F  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001912  2  D0 03        	bne @scrolled
001914  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
001917  2               @scrolled:
001917  2               	; fix the objects position now that the layers scrolled
001917  2  20 56 18     	jsr Objects::fix_positions
00191A  2  A9 01        	lda #01	; clear ZERO => scrolled
00191C  2  60           	rts
00191D  2               @noscroll:
00191D  2  A9 00        	lda #00	; set ZERO => noscroll
00191F  2  60           	rts
001920  2               
001920  2               ; increase a layer scroll offset but do NOT overlap
001920  2               .macro VSCROLL_INC direction,limit
001920  2               .if limit > 255
001920  2               	LOAD_r0 limit
001920  2               	ldx #direction
001920  2               	jsr Layers::scroll_inc_16
001920  2               .else
001920  2               	ldy #limit
001920  2               	ldx #direction
001920  2               	jsr Layers::scroll_inc_8
001920  2               .endif
001920  2               .endmacro
001920  2               
001920  2               ;
001920  2               ;
001920  2               ; decrease a layer scroll offset
001920  2               ;	X : 0 = horizontal
001920  2               ;	  : 2 = vertical
001920  2               ;
001920  2               scroll_dec:
001920  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001923  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
001925  2  3A           	dec
001926  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001929  2  80 0E        	bra @scrolled
00192B  2               @scrollHI:
00192B  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
00192E  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
001930  2  3A           	dec
001931  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001934  2  88           	dey
001935  2  98           	tya
001936  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
001939  2               
001939  2               @scrolled:
001939  2               	; fix the objects position now that the layers scrolled
001939  2  20 82 12     	jsr Entities::fix_positions
00193C  2  A9 01        	lda #01		; clear ZERO => scrolled
00193E  2  60           	rts
00193F  2               
00193F  2               @noscroll:
00193F  2  A9 00        	lda #00		; set ZERO => noscroll
001941  2  60           	rts
001942  2               
001942  2               ;************************************************
001942  2               ; refresh layers
001942  2               ;		layer 0 : scrolling to be half of the layer1 scrolling
001942  2               ;		entities : screen position = entity position - layers1 position
001942  2               ;
001942  2               update:
001942  2  A5 59        	lda bDirty
001944  2  F0 1D        	beq @return
001946  2               
001946  2  A5 56        	lda wHScroll + 1		; layer0 hScroll is layer 1 / 2
001948  2  4A           	lsr
001949  2  8D 31 9F     	sta VERA_L0_hscrollhi
00194C  2  A5 55        	lda wHScroll
00194E  2  6A           	ror
00194F  2  8D 30 9F     	sta VERA_L0_hscrolllo
001952  2               
001952  2  A5 58        	lda wVScroll + 1		; layer0 hScroll is layer 1 / 2
001954  2  4A           	lsr
001955  2  8D 33 9F     	sta VERA_L0_vscrollhi
001958  2  A5 57        	lda wVScroll
00195A  2  6A           	ror
00195B  2  8D 32 9F     	sta VERA_L0_vscrolllo
00195E  2               
00195E  2               	; fix the objects position now that the layers scrolled
00195E  2  20 82 12     	jsr Entities::fix_positions
001961  2               
001961  2               	; clear dirty flag
001961  2  64 59        	stz bDirty
001963  2               @return:
001963  2  60           	rts
001964  2               .endscope
001964  2               
001964  1               .include "player.asm"
001964  2               ;-----------------------------------------------------------------------------
001964  2               ;/////////////////////////////////////////////////////////////////////////////
001964  2               ; START player code
001964  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001964  2               ;-----------------------------------------------------------------------------
001964  2               
001964  2               PLAYER_SPRITE_ANIMATION = 3
001964  2               
001964  2               JUMP_LO_TICKS = 10
001964  2               JUMP_HI_TICKS = 2
001964  2               FALL_LO_TICKS = 8
001964  2               FALL_HI_TICKS = 2
001964  2               
001964  2               PLAYER_ZP = $0050
001964  2               
001964  2               PNG_SPRITES_LINES = 5
001964  2               PNG_SPRITES_COLUMNS = 3
001964  2               
001964  2               .enum
001964  2               	STATUS_WALKING_IDLE
001964  2               	STATUS_WALKING
001964  2               	STATUS_CLIMBING
001964  2               	STATUS_CLIMBING_IDLE
001964  2               	STATUS_FALLING
001964  2               	STATUS_JUMPING
001964  2               	STATUS_JUMPING_IDLE
001964  2               	STATUS_PUSHING
001964  2               .endenum
001964  2               
001964  2               .enum
001964  2               	SITTING_NO_SLOP
001964  2               	SITTING_ON_SLOPE
001964  2               	SITTING_ABOVE_SLOPE
001964  2               .endenum
001964  2               
001964  2               .struct PLAYER
001964  2               	entity			.tag Entity
001964  2               	animation_tick	.byte
001964  2               	frameID 		.byte	; current animation loop start
001964  2               	frame 			.byte	; current frame
001964  2               	frameDirection 	.byte 	; direction of the animation
001964  2               	flip 			.byte
001964  2               	grab_object		.word	; address of the object currently grabbed
001964  2               	vera_bitmaps    .res 	(2 * 3 * 5)	; 9 words to store vera bitmaps address
001964  2               .endstruct
001964  2               
001964  2               .macro m_status value
001964  2               	lda #(value)
001964  2               	sta player0 + PLAYER::entity + Entity::status
001964  2               .endmacro
001964  2               
001964  2               .scope Player
001964  2               
001964  2               .macro SET_SPRITE id, frameval
001964  2               	lda #id
001964  2               	sta player0 + PLAYER::frameID
001964  2               	lda #frameval
001964  2               	sta player0 + PLAYER::frame
001964  2               	jsr set_bitmap
001964  2               .endmacro
001964  2               
001964  2               ;************************************************
001964  2               ; player sprites status
001964  2               ;
001964  2               .enum Sprites
001964  2               	FRONT = 0
001964  2               	LEFT = FRONT + PNG_SPRITES_COLUMNS
001964  2               	CLIMB = LEFT + PNG_SPRITES_COLUMNS
001964  2               	HANG = CLIMB + PNG_SPRITES_COLUMNS
001964  2               	PUSH = HANG + PNG_SPRITES_COLUMNS
001964  2               .endenum
001964  2               
001964  2               WIDTH = 16
001964  2               HEIGHT = 32
001964  2               
001964  2               ;************************************************
001964  2               ; local variables
001964  2               ;
001964  2               
001964  2  00           ladders: .byte 0
001965  2  00           test_right_left: .byte 0
001966  2               
001966  2               ;************************************************
001966  2               ; init the player data
001966  2               ;
001966  2               init:
001966  2  A2 00        	ldx #00
001968  2  A9 B0        	lda #<player0
00196A  2  85 08        	sta r3L
00196C  2  A0 21        	ldy #>player0
00196E  2  84 09        	sty r3H
001970  2  20 81 11     	jsr Entities::register
001973  2               
001973  2  20 A3 11     	jsr Entities::init
001976  2               
001976  2  A9 0A        	lda #10
001978  2  A0 10        	ldy #PLAYER::animation_tick
00197A  2  91 08        	sta (r3), y
00197C  2  A9 03        	lda #Player::Sprites::LEFT
00197E  2  A0 11        	ldy #PLAYER::frameID
001980  2  91 08        	sta (r3), y
001982  2  A9 00        	lda #00
001984  2  A0 12        	ldy #PLAYER::frame
001986  2  91 08        	sta (r3), y
001988  2  A9 01        	lda #1
00198A  2  A0 13        	ldy #PLAYER::frameDirection
00198C  2  91 08        	sta (r3), y
00198E  2  A9 00        	lda #00
001990  2  A0 14        	ldy #PLAYER::flip
001992  2  91 08        	sta (r3), y
001994  2               
001994  2               	; player sprite is 32x32, but collision box is 16x32
001994  2  A0 09        	ldy #Entity::bWidth
001996  2  A9 10        	lda #Player::WIDTH
001998  2  91 08        	sta (r3), y
00199A  2  A0 0A        	ldy #Entity::bHeight
00199C  2  A9 20        	lda #Player::HEIGHT
00199E  2  91 08        	sta (r3), y
0019A0  2               
0019A0  2               	; player collision box is shifted by (8,0) pixels compared to sprite top-left corner
0019A0  2  A9 08        	lda #08
0019A2  2  A0 0C        	ldy #Entity::bXOffset
0019A4  2  91 08        	sta (r3), y
0019A6  2  A9 00        	lda #00
0019A8  2  A0 0D        	ldy #Entity::bYOffset
0019AA  2  91 08        	sta (r3), y
0019AC  2               
0019AC  2               	; load sprites data at the end of the tiles
0019AC  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (::VRAM_tiles + tiles * tile_size)
0019B0  2  A0 00 20 BA  
0019B4  2  FF A9 0B A2  
0019CD  2               
0019CD  2  AD C7 21     	lda player0 + PLAYER::vera_bitmaps
0019D0  2  85 02        	sta r0L
0019D2  2  AD C8 21     	lda player0 + PLAYER::vera_bitmaps+1
0019D5  2  85 03        	sta r0H
0019D7  2               
0019D7  2  B2 08        	lda (r3)
0019D9  2  A8           	tay
0019DA  2  A9 10        	lda #%00010000					; collision mask 1
0019DC  2  A2 A0        	ldx #%10100000					; 32x32 sprite
0019DE  2  20 FB 0C     	jsr Sprite::load
0019E1  2               
0019E1  2  A9 08        	lda #08
0019E3  2  85 02        	sta r0L
0019E5  2  A9 00        	lda #00
0019E7  2  85 03        	sta r0H
0019E9  2  A9 0F        	lda #15
0019EB  2  85 04        	sta r1L
0019ED  2  A9 1F        	lda #31
0019EF  2  85 05        	sta r1H
0019F1  2               
0019F1  2  B2 08        	lda (r3)
0019F3  2  A8           	tay
0019F4  2  20 43 0D     	jsr Sprite::set_aabb			; collision box (8,0) -> (24, 32)
0019F7  2               
0019F7  2               	; turn sprite 0 on
0019F7  2  B2 08        	lda (r3)
0019F9  2  A8           	tay
0019FA  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0019FC  2  20 86 0D     	jsr Sprite::display
0019FF  2               
0019FF  2               	; register the vera simplified memory 12:5
0019FF  2  A0 0F        	ldy #(PNG_SPRITES_COLUMNS * PNG_SPRITES_LINES)
001A01  2  84 50        	sty PLAYER_ZP
001A03  2  A0 17        	ldy #PLAYER::vera_bitmaps
001A05  2  A9 00 85 04  	LOAD_r1 (::VRAM_tiles + tiles * tile_size)
001A09  2  A9 41 85 05  
001A0D  2               
001A0D  2               @loop:
001A0D  2               	; load full VERA memory (12:0) into R0
001A0D  2  A5 04        	lda r1L
001A0F  2  85 02        	sta r0L
001A11  2  A5 05        	lda r1H
001A13  2  85 03        	sta r0H
001A15  2               
001A15  2               	; convert full addr to vera mode (bit shiting >> 5)
001A15  2  A5 03        	lda r0H
001A17  2  4A           	lsr
001A18  2  66 02        	ror r0L
001A1A  2  4A           	lsr
001A1B  2  66 02        	ror r0L
001A1D  2  4A           	lsr
001A1E  2  66 02        	ror r0L
001A20  2  4A           	lsr
001A21  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
001A23  2  4A           	lsr
001A24  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
001A26  2               
001A26  2               	; store 12:5 into our cache
001A26  2  91 08        	sta (r3), y
001A28  2  C8           	iny
001A29  2  A5 02        	lda r0L
001A2B  2  91 08        	sta (r3), y
001A2D  2  C8           	iny
001A2E  2               
001A2E  2               	; increase the vram (+4 r1H = +1024 r1)
001A2E  2  18           	clc
001A2F  2  A5 05        	lda r1H
001A31  2  69 04        	adc #4
001A33  2  85 05        	sta r1H
001A35  2               
001A35  2  C6 50        	dec PLAYER_ZP
001A37  2  D0 D4        	bne @loop
001A39  2               
001A39  2               	; set first bitmap
001A39  2  20 3D 1A     	jsr set_bitmap
001A3C  2  60           	rts
001A3D  2               
001A3D  2               ;************************************************
001A3D  2               ; change the player bitmap
001A3D  2               ;
001A3D  2               set_bitmap:
001A3D  2  18           	clc
001A3E  2  AD C2 21     	lda player0 + PLAYER::frame
001A41  2  6D C1 21     	adc player0 + PLAYER::frameID
001A44  2  0A           	asl						; convert sprite index to work position
001A45  2  AA           	tax
001A46  2               
001A46  2               	; extract the vera bitmap address in vera format (12:5 bits)
001A46  2  BD C7 21     	lda player0 + PLAYER::vera_bitmaps, x
001A49  2  85 03        	sta r0H
001A4B  2  BD C8 21     	lda player0 + PLAYER::vera_bitmaps + 1, x
001A4E  2  85 02        	sta r0L
001A50  2               
001A50  2  AC B0 21     	ldy player0 + PLAYER::entity + Entity::spriteID
001A53  2  20 74 0D     	jsr Sprite::set_bitmap
001A56  2  60           	rts
001A57  2               
001A57  2               ;************************************************
001A57  2               ; move layers if the player sprite reached the screen boundaries
001A57  2               ;
001A57  2               check_scroll_layers:
001A57  2               	; distance from layer border to sprite absolute position
001A57  2  38           	sec
001A58  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001A5B  2  E5 55        	sbc Layers::wHScroll
001A5D  2  85 02        	sta r0L
001A5F  2  AD B3 21     	lda player0 + PLAYER::entity + Entity::levelx + 1
001A62  2  E5 56        	sbc Layers::wHScroll + 1
001A64  2  85 03        	sta r0H									; r0 = dx = level.x - layer.x
001A66  2               
001A66  2  D0 26        	bne @check_right						; dx > 256, no need to check left
001A68  2               @check_left:
001A68  2  A5 02        	lda r0L
001A6A  2  C9 40        	cmp #64
001A6C  2  B0 20        	bcs @check_right						; dx > 96 and dx < 256, no need to check left
001A6E  2               	; are we on far left of the layer ?
001A6E  2  A5 56        	lda Layers::wHScroll + 1
001A70  2  D0 04        	bne @scroll_layer_left					; H_SCROLL > 256, scroll layer
001A72  2  A5 55        	lda Layers::wHScroll
001A74  2  F0 0F        	beq @set_x_0							; H_SCROLL == 0 => NO horizontal scroll
001A76  2               @scroll_layer_left:
001A76  2  38           	sec
001A77  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001A7A  2  E9 40        	sbc #64
001A7C  2  AA           	tax
001A7D  2  AD B3 21     	lda player0 + PLAYER::entity + Entity::levelx + 1
001A80  2  E9 00        	sbc #00
001A82  2  A8           	tay
001A83  2  80 04        	bra @fix_layer_0_x
001A85  2               @set_x_0:
001A85  2  A2 00        	ldx #00
001A87  2  A0 00        	ldy #00
001A89  2               @fix_layer_0_x:
001A89  2  20 B3 18     	jsr Layers::set_x
001A8C  2  80 21        	bra @check_top
001A8E  2               
001A8E  2               @check_right:
001A8E  2  A5 02        	lda r0L
001A90  2  C9 F1        	cmp #<(SCREEN_WIDTH - 63 - Player::WIDTH)		; remove the width of the sprite
001A92  2  90 1B        	bcc @check_top							; dx < 320 - 96, no need to check right
001A94  2               	; are we on far right of the layer ?
001A94  2  A5 55        	lda Layers::wHScroll
001A96  2  C9 BF        	cmp #(32*16-320 - 1)
001A98  2  B0 0F        	bcs @set_x_max							; H_SCROLL > 192 (512 - 320) => force max
001A9A  2               
001A9A  2  38           	sec
001A9B  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001A9E  2  E9 F0        	sbc #<(320 - 64 - Player::WIDTH)
001AA0  2  AA           	tax
001AA1  2  AD B3 21     	lda player0 + PLAYER::entity + Entity::levelx + 1
001AA4  2  E9 00        	sbc #>(320 - 64 - Player::WIDTH)
001AA6  2  A8           	tay
001AA7  2  80 E0        	bra @fix_layer_0_x
001AA9  2               @set_x_max:
001AA9  2  A2 C0        	ldx #<(32*16-320)
001AAB  2  A0 00        	ldy #>(32*16-320)
001AAD  2  80 DA        	bra @fix_layer_0_x
001AAF  2               
001AAF  2               @check_top:
001AAF  2               	; distance from layer border to sprite absolute position
001AAF  2  38           	sec
001AB0  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001AB3  2  E5 57        	sbc Layers::wVScroll
001AB5  2  85 02        	sta r0L
001AB7  2  AD B5 21     	lda player0 + PLAYER::entity + Entity::levely + 1
001ABA  2  E5 58        	sbc Layers::wVScroll + 1
001ABC  2  85 03        	sta r0H									; r0 = dy = level.y - layer.y
001ABE  2               
001ABE  2  D0 25        	bne @check_bottom						; dy > 256, no need to check top
001AC0  2               @check_top_1:
001AC0  2  A5 02        	lda r0L
001AC2  2  C9 20        	cmp #Player::HEIGHT
001AC4  2  B0 1F        	bcs @check_bottom						; dy > 96 and dy < 256, check bottom
001AC6  2               @move_y:
001AC6  2               	; are we on far top of the layer ?
001AC6  2  A5 58        	lda Layers::wVScroll + 1
001AC8  2  D0 04        	bne @scroll_layer_top					; V_SCROLL > 256, scroll layer
001ACA  2  A5 57        	lda Layers::wVScroll
001ACC  2  F0 0F        	beq @set_y_0							; V_SCROLL == 0 => NO vertical scroll
001ACE  2               @scroll_layer_top:
001ACE  2  38           	sec
001ACF  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001AD2  2  E9 20        	sbc #Player::HEIGHT
001AD4  2  AA           	tax
001AD5  2  AD B5 21     	lda player0 + PLAYER::entity + Entity::levely + 1
001AD8  2  E9 00        	sbc #00
001ADA  2  A8           	tay
001ADB  2  80 04        	bra @fix_layer_0_y
001ADD  2               @set_y_0:
001ADD  2  A2 00        	ldx #00
001ADF  2  A0 00        	ldy #00
001AE1  2               @fix_layer_0_y:
001AE1  2  20 CB 18     	jsr Layers::set_y
001AE4  2  60           	rts
001AE5  2               
001AE5  2               @check_bottom:
001AE5  2  A5 02        	lda r0L
001AE7  2  C9 B0        	cmp #<(240 - Player::HEIGHT * 2)
001AE9  2  B0 01        	bcs @scroll_bottom
001AEB  2  60           	rts										; dy < 144, no need to check vertical
001AEC  2               @scroll_bottom:
001AEC  2               	; are we on far bottom of the layer ?
001AEC  2  A5 58        	lda Layers::wVScroll + 1
001AEE  2  F0 06        	beq @scroll_layer_bottom				; V_SCROLL < 256, scroll layer
001AF0  2  A5 57        	lda Layers::wVScroll
001AF2  2  C9 0F        	cmp #<(32*16-240 - 1)
001AF4  2  B0 0F        	bcs @set_y_max							; V_SCROLL == 512-240 => NO vertical scroll
001AF6  2               @scroll_layer_bottom:
001AF6  2  38           	sec
001AF7  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001AFA  2  E9 B0        	sbc #<(240 - Player::HEIGHT*2)
001AFC  2  AA           	tax
001AFD  2  AD B5 21     	lda player0 + PLAYER::entity + Entity::levely + 1
001B00  2  E9 00        	sbc #>(240 - Player::HEIGHT*2)
001B02  2  A8           	tay
001B03  2  80 DC        	bra @fix_layer_0_y
001B05  2               @set_y_max:
001B05  2  A2 10        	ldx #<(32*16-240)
001B07  2  A0 01        	ldy #>(32*16-240)
001B09  2  80 D6        	bra @fix_layer_0_y
001B0B  2               
001B0B  2               ;************************************************
001B0B  2               ; hide the current sprite
001B0B  2               ;
001B0B  2               hide1:
001B0B  2  DB           	stp
001B0C  2  18           	clc
001B0D  2  AD C2 21     	lda player0 + PLAYER::frame
001B10  2  6D C1 21     	adc player0 + PLAYER::frameID
001B13  2  A8           	tay		; sprite index
001B14  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
001B16  2  20 86 0D     	jsr Sprite::display			; turn current sprite off
001B19  2  60           	rts
001B1A  2               
001B1A  2               ;************************************************
001B1A  2               ; Animate the player if needed
001B1A  2               ;
001B1A  2               animate:
001B1A  2  AD B1 21     	lda player0 + PLAYER::entity + Entity::status
001B1D  2  C9 00        	cmp #STATUS_WALKING_IDLE
001B1F  2  F0 37        	beq @end
001B21  2  C9 04        	cmp #STATUS_FALLING
001B23  2  F0 33        	beq @end
001B25  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
001B27  2  F0 2F        	beq @end
001B29  2               
001B29  2  CE C0 21     	dec player0 + PLAYER::animation_tick
001B2C  2  D0 2A        	bne @end
001B2E  2               
001B2E  2  A9 0A        	lda #10
001B30  2  8D C0 21     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001B33  2               
001B33  2  18           	clc
001B34  2  AD C2 21     	lda player0 + PLAYER::frame
001B37  2  6D C3 21     	adc player0 + PLAYER::frameDirection
001B3A  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
001B3C  2  C9 03        	cmp #3
001B3E  2  F0 0B        	beq @set_sprite_anim_decrease
001B40  2  80 10        	bra @set_sprite_on
001B42  2               @set_sprite_anim_increase:
001B42  2  A9 01        	lda #01
001B44  2  8D C3 21     	sta player0 + PLAYER::frameDirection
001B47  2  A9 00        	lda #0
001B49  2  80 07        	bra @set_sprite_on
001B4B  2               @set_sprite_anim_decrease:
001B4B  2  A9 FF        	lda #$ff
001B4D  2  8D C3 21     	sta player0 + PLAYER::frameDirection
001B50  2  A9 02        	lda #2
001B52  2               @set_sprite_on:
001B52  2  8D C2 21     	sta player0 + PLAYER::frame	; turn next sprite on
001B55  2  20 3D 1A     	jsr Player::set_bitmap
001B58  2               @end:
001B58  2  60           	rts
001B59  2               
001B59  2               ;************************************************
001B59  2               ; force player status to be idle
001B59  2               ;
001B59  2               set_idle:
001B59  2  AD B1 21     	lda player0 + PLAYER::entity + Entity::status
001B5C  2  C9 01        	cmp #STATUS_WALKING
001B5E  2  F0 06        	beq @set_idle_walking
001B60  2  C9 02        	cmp #STATUS_CLIMBING
001B62  2  F0 08        	beq @set_idle_climbing
001B64  2  60           	rts							; keep the current value
001B65  2               @set_idle_jump:
001B65  2  60           	rts
001B66  2               @set_idle_walking:
001B66  2  A9 00 8D B1  	m_status STATUS_WALKING_IDLE
001B6A  2  21           
001B6B  2  60           	rts
001B6C  2               @set_idle_climbing:
001B6C  2  A9 03 8D B1  	m_status STATUS_CLIMBING_IDLE
001B70  2  21           
001B71  2  60           	rts
001B72  2               
001B72  2               ;************************************************
001B72  2               ; status to ignore while moving
001B72  2               ;
001B72  2               ignore_move_request:
001B72  2  00           	.byte	00	;	STATUS_WALKING_IDLE
001B73  2  00           	.byte	00	;	STATUS_WALKING
001B74  2  02           	.byte	02	;	STATUS_CLIMBING
001B75  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
001B76  2  01           	.byte	01	;	STATUS_FALLING
001B77  2  01           	.byte	01	;	STATUS_JUMPING
001B78  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
001B79  2               
001B79  2               ;************************************************
001B79  2               ; Try to move player to the right, walk up if facing a slope
001B79  2               ;
001B79  2               move_right:
001B79  2               	; only move if the status is compatible
001B79  2  AC B1 21     	ldy player0 + PLAYER::entity + Entity::status
001B7C  2  B9 72 1B     	lda ignore_move_request, y
001B7F  2  F0 08        	beq @walk_right					; if 0 => can move
001B81  2  C9 02        	cmp #02
001B83  2  F0 01        	beq :+							; if 2 => has to climb
001B85  2  60           	rts								; else block the move
001B86  2               :
001B86  2  4C 14 1C     	jmp @climb_right
001B89  2               
001B89  2               @walk_right:
001B89  2  A2 00        	ldx #00
001B8B  2  20 03 17     	jsr Entities::move_right
001B8E  2  F0 1A        	beq @set_walking_sprite
001B90  2  C9 FF        	cmp #$ff
001B92  2  D0 01        	bne @blocked_not_border
001B94  2  60           	rts							; reached right border
001B95  2               
001B95  2               @blocked_not_border:
001B95  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001B98  2  85 02        	sta r0L
001B9A  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001B9D  2  85 03        	sta r0H
001B9F  2               
001B9F  2  20 10 15     	jsr Entities::if_on_slop
001BA2  2  D0 01        	bne @no_collision
001BA4  2  60           	rts							; blocked by tile
001BA5  2               
001BA5  2               @no_collision:
001BA5  2  A9 01        	lda #01
001BA7  2  8D B8 21     	sta player0 + PLAYER::entity + Entity::delta_x
001BAA  2               
001BAA  2               @set_walking_sprite:
001BAA  2  A9 01        	lda #SPRITE_FLIP_H
001BAC  2  8D C4 21     	sta player0 + PLAYER::flip
001BAF  2  AC B0 21     	ldy player0 + PLAYER::entity + Entity::spriteID
001BB2  2  20 34 0E     	jsr Sprite::set_flip				; force sprite to look right
001BB5  2               
001BB5  2  A9 01 8D B1  	m_status STATUS_WALKING
001BB9  2  21           
001BBA  2               
001BBA  2               	;change player sprite
001BBA  2  A9 03        	lda #Player::Sprites::LEFT
001BBC  2  CD C1 21     	cmp player0 + PLAYER::frameID
001BBF  2  F0 08        	beq @check_slope
001BC1  2               
001BC1  2  A9 03        	lda #Player::Sprites::LEFT
001BC3  2  8D C1 21     	sta player0 + PLAYER::frameID
001BC6  2  20 3D 1A     	jsr set_bitmap
001BC9  2               
001BC9  2               @check_slope:
001BC9  2               	; if sitting on a slop
001BC9  2  20 10 15     	jsr Entities::if_on_slop
001BCC  2  D0 08        	bne @move_slop
001BCE  2               
001BCE  2               	; TODO ///////////////////////
001BCE  2  20 11 12     	jsr Entities::get_collision_map
001BD1  2  20 DB 14     	jsr Entities::if_above_slop			; check if NOW were are above a slope
001BD4  2  F0 3D        	beq @set_position
001BD6  2               	; TODO \\\\\\\\\\\\\\\\\\\\\\\\\\
001BD6  2               
001BD6  2               @move_slop:
001BD6  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001BD8  2  F0 26        	beq @move_y_up
001BDA  2               @try_move_y_dow:
001BDA  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001BDD  2  29 0F        	and #%00001111
001BDF  2  D0 1A        	bne @move_y_down
001BE1  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001BE4  2  85 02        	sta r0L
001BE6  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001BE9  2  85 03        	sta r0H
001BEB  2  A5 06        	lda r2L
001BED  2  18           	clc
001BEE  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
001BF0  2  A8           	tay
001BF1  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
001BF3  2  A8           	tay
001BF4  2  B9 A5 20     	lda tiles_attributes,y
001BF7  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001BF9  2  D0 7F        	bne @return							; do not change Y if the tile below the player is a solid one
001BFB  2               @move_y_down:
001BFB  2  20 E1 12     	jsr Entities::position_y_inc
001BFE  2  80 13        	bra @set_position
001C00  2               @move_y_up:
001C00  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001C03  2  29 0F        	and #%00001111
001C05  2  C9 08        	cmp #08
001C07  2  D0 07        	bne :+
001C09  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001C0C  2  29 0F        	and #%00001111
001C0E  2  F0 03        	beq @return1						; if x%8 == 0, y MUST be equal 0, or increase
001C10  2               :
001C10  2  20 01 13     	jsr Entities::position_y_dec
001C13  2               
001C13  2               @set_position:
001C13  2               @return1:
001C13  2  60           	rts
001C14  2               
001C14  2               @climb_right:
001C14  2  20 D3 13     	jsr Entities::check_collision_right
001C17  2  F0 05        	beq @climb_right_1
001C19  2  C9 04        	cmp #TILE_SOLID_LADER
001C1B  2  F0 01        	beq @climb_right_1
001C1D  2  60           	rts
001C1E  2               @climb_right_1:
001C1E  2  20 23 13     	jsr Entities::bbox_coverage
001C21  2               
001C21  2  A2 01        	ldx #01
001C23  2  A0 00        	ldy #00
001C25  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001C28  2  29 0F        	and #%00001111
001C2A  2  F0 01        	beq @get_tile
001C2C  2  E8           	inx								; if x%8 <> 0, test 2 tiles
001C2D  2               @get_tile:
001C2D  2  B1 02        	lda (r0),y
001C2F  2  F0 0E        	beq @no_grab					; no tile on right
001C31  2  85 31        	sta $31
001C33  2  84 30        	sty $30
001C35  2  A8           	tay
001C36  2  B9 A5 20     	lda tiles_attributes,y
001C39  2  89 08        	bit #TILE_ATTR::GRABBING
001C3B  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
001C3D  2  A4 30        	ldy $30
001C3F  2               @no_grab:							; test the tile on the right on next line
001C3F  2  C8           	iny
001C40  2  CA           	dex
001C41  2  D0 EA        	bne @get_tile
001C43  2  80 23        	bra @climb_right_drop			; no grab tile on the right of the player
001C45  2               @climb_right_2:
001C45  2  A5 31        	lda $31							; tile index with grab attribute
001C47  2  C9 05        	cmp #TILE_LEDGE
001C49  2  D0 04        	bne @set_climb_sprite
001C4B  2               @set_hang_sprite:
001C4B  2  A9 09        	lda #Player::Sprites::HANG
001C4D  2  80 02        	bra @next
001C4F  2               @set_climb_sprite:
001C4F  2  A9 06        	lda #Player::Sprites::CLIMB
001C51  2               @next:
001C51  2  8D C1 21     	sta player0 + PLAYER::frameID
001C54  2  20 3D 1A     	jsr set_bitmap
001C57  2  A9 02 8D B1  	m_status STATUS_CLIMBING
001C5B  2  21           
001C5C  2  20 9F 12     	jsr Entities::position_x_inc		; move the player sprite, if the
001C5F  2               	;TODO ///////////////////////
001C5F  2  AD BB 21     	lda player0 + PLAYER::entity + Entity::bFlags
001C62  2  09 01        	ora #(EntityFlags::physics)
001C64  2  8D BB 21     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001C67  2               	;TODO ///////////////////////
001C67  2  60           	rts
001C68  2               @climb_right_drop:
001C68  2  A9 01 8D B1  	m_status STATUS_WALKING
001C6C  2  21           
001C6D  2  A9 03 8D C1  	SET_SPRITE Player::Sprites::LEFT, 1
001C71  2  21 A9 01 8D  
001C75  2  C2 21 20 3D  
001C7A  2               
001C7A  2               @return:
001C7A  2  60           	rts
001C7B  2               
001C7B  2               ;************************************************
001C7B  2               ; try to move the player to the left
001C7B  2               ;
001C7B  2               move_left:
001C7B  2               	; only move if the status is compatible
001C7B  2  AC B1 21     	ldy player0 + PLAYER::entity + Entity::status
001C7E  2  B9 72 1B     	lda ignore_move_request, y
001C81  2  F0 08        	beq @walk_left					; if 0 => can move
001C83  2  C9 02        	cmp #02
001C85  2  D0 01        	bne :+							; if 2 => has to climb
001C87  2  60           	rts								; else block the move
001C88  2               :
001C88  2  4C 16 1D     	jmp @climb_left
001C8B  2               
001C8B  2               @walk_left:
001C8B  2               	; try move from the parent class Entity
001C8B  2  A2 00        	ldx #00
001C8D  2  20 4A 17     	jsr Entities::move_left
001C90  2  F0 1A        	beq @set_walking_sprite
001C92  2  C9 FF        	cmp #$ff
001C94  2  D0 01        	bne @blocked_not_border
001C96  2  60           	rts								; reached right border
001C97  2               
001C97  2               @blocked_not_border:
001C97  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001C9A  2  85 02        	sta r0L
001C9C  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001C9F  2  85 03        	sta r0H
001CA1  2               
001CA1  2  20 10 15     	jsr Entities::if_on_slop
001CA4  2  D0 01        	bne @no_collision				; ignore right collision left if on a slope
001CA6  2  60           	rts								; blocked by tile
001CA7  2               
001CA7  2               @no_collision:
001CA7  2  A9 FF        	lda #$ff
001CA9  2  8D B8 21     	sta player0 + PLAYER::entity + Entity::delta_x
001CAC  2               
001CAC  2               @set_walking_sprite:
001CAC  2  A9 00        	lda #SPRITE_FLIP_NONE
001CAE  2  8D C4 21     	sta player0 + PLAYER::flip
001CB1  2  AC B0 21     	ldy player0 + PLAYER::entity + Entity::spriteID
001CB4  2  20 34 0E     	jsr Sprite::set_flip				; force sprite to loop right
001CB7  2               
001CB7  2  A9 01 8D B1  	m_status STATUS_WALKING
001CBB  2  21           
001CBC  2               
001CBC  2  A9 03        	lda #Player::Sprites::LEFT
001CBE  2  CD C1 21     	cmp player0 + PLAYER::frameID
001CC1  2  F0 08        	beq @check_slop
001CC3  2               
001CC3  2               	;change player sprite
001CC3  2  A9 03        	lda #Player::Sprites::LEFT
001CC5  2  8D C1 21     	sta player0 + PLAYER::frameID
001CC8  2  20 3D 1A     	jsr set_bitmap
001CCB  2               
001CCB  2               @check_slop:
001CCB  2  20 10 15     	jsr Entities::if_on_slop
001CCE  2  D0 08        	bne @move_slop
001CD0  2               
001CD0  2               	; TODO ///////////////////////
001CD0  2  20 11 12     	jsr Entities::get_collision_map
001CD3  2  20 DB 14     	jsr Entities::if_above_slop			; check if NOW were are above a slope
001CD6  2  F0 3D        	beq @set_position
001CD8  2               	; TODO \\\\\\\\\\\\\\\\\\\\\\\\\\
001CD8  2               
001CD8  2               @move_slop:
001CD8  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001CDA  2  F0 26        	beq @move_y_up
001CDC  2               @try_move_y_dow:
001CDC  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001CDF  2  29 0F        	and #%00001111
001CE1  2  D0 1A        	bne @move_y_down
001CE3  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001CE6  2  85 02        	sta r0L
001CE8  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001CEB  2  85 03        	sta r0H
001CED  2  A5 06        	lda r2L
001CEF  2  18           	clc
001CF0  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
001CF2  2  A8           	tay
001CF3  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
001CF5  2  A8           	tay
001CF6  2  B9 A5 20     	lda tiles_attributes,y
001CF9  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001CFB  2  D0 18        	bne @set_position					; do not change Y if the tile below the player is a solid one
001CFD  2               @move_y_down:
001CFD  2  20 E1 12     	jsr Entities::position_y_inc
001D00  2  80 13        	bra @set_position
001D02  2               @move_y_up:
001D02  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001D05  2  29 0F        	and #%00001111
001D07  2  C9 08        	cmp #08
001D09  2  D0 07        	bne :+
001D0B  2  AD B4 21     	lda player0 + PLAYER::entity + Entity::levely
001D0E  2  29 0F        	and #%00001111
001D10  2  F0 03        	beq @return							; if x%8 == 0, y MUST be equal 0, or increase
001D12  2               :
001D12  2  20 01 13     	jsr Entities::position_y_dec
001D15  2               
001D15  2               @set_position:
001D15  2               @return:
001D15  2  60           	rts
001D16  2               
001D16  2               @climb_left:
001D16  2  20 03 14     	jsr Entities::check_collision_left
001D19  2  F0 01        	beq @climb_left_1
001D1B  2  60           	rts								; collision on left, block the move
001D1C  2               @climb_left_1:
001D1C  2  20 23 13     	jsr Entities::bbox_coverage				; what tiles is the player covering
001D1F  2               
001D1F  2  A2 01        	ldx #01
001D21  2  A0 00        	ldy #00
001D23  2  AD B2 21     	lda player0 + PLAYER::entity + Entity::levelx
001D26  2  29 0F        	and #%00001111
001D28  2  F0 01        	beq @get_tile
001D2A  2  E8           	inx								; if x%8 <> 0, test 2 tiles
001D2B  2               @get_tile:
001D2B  2  B1 02        	lda (r0),y
001D2D  2  F0 0E        	beq @no_grab					; no tile on right
001D2F  2  85 31        	sta $31
001D31  2  84 30        	sty $30
001D33  2  A8           	tay
001D34  2  B9 A5 20     	lda tiles_attributes,y
001D37  2  89 08        	bit #TILE_ATTR::GRABBING
001D39  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
001D3B  2  A4 30        	ldy $30
001D3D  2               @no_grab:							; test the tile on the left on next line
001D3D  2  C8           	iny
001D3E  2  CA           	dex
001D3F  2  D0 EA        	bne @get_tile
001D41  2  80 23        	bra @climb_left_drop			; no grab tile on the right of the player
001D43  2               @climb_left_2:
001D43  2  A5 31        	lda $31							; tile index with grab attribute
001D45  2  C9 05        	cmp #TILE_LEDGE
001D47  2  D0 04        	bne @set_climb_sprite
001D49  2               @set_hang_sprite:
001D49  2  A9 09        	lda #Player::Sprites::HANG
001D4B  2  80 02        	bra @next
001D4D  2               @set_climb_sprite:
001D4D  2  A9 06        	lda #Player::Sprites::CLIMB
001D4F  2               @next:
001D4F  2  8D C1 21     	sta player0 + PLAYER::frameID
001D52  2  20 3D 1A     	jsr set_bitmap
001D55  2  A9 02 8D B1  	m_status STATUS_CLIMBING
001D59  2  21           
001D5A  2  20 BF 12     	jsr Entities::position_x_dec		; move the player sprite, if the
001D5D  2               	;TODO ///////////////////////
001D5D  2  AD BB 21     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001D60  2  09 01        	ora #(EntityFlags::physics)
001D62  2  8D BB 21     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001D65  2               	;TODO ///////////////////////
001D65  2  60           	rts
001D66  2               @climb_left_drop:					; no ladder to stick to
001D66  2  A9 01 8D B1  	m_status STATUS_WALKING
001D6A  2  21           
001D6B  2  A9 03 8D C1  	SET_SPRITE Player::Sprites::LEFT, 1
001D6F  2  21 A9 01 8D  
001D73  2  C2 21 20 3D  
001D78  2  60           	rts
001D79  2               
001D79  2               ;************************************************
001D79  2               ; try to move the player down (crouch, hide, move down a ladder)
001D79  2               ;
001D79  2               move_down:
001D79  2               	; r3 = *player
001D79  2  A9 B0        	lda #<player0
001D7B  2  85 08        	sta r3L
001D7D  2  A9 21        	lda #>player0
001D7F  2  85 09        	sta r3H
001D81  2               
001D81  2  AD B1 21     	lda player0 + PLAYER::entity + Entity::status
001D84  2  C9 04        	cmp #STATUS_FALLING
001D86  2  D0 01        	bne @try_move_down						; cannot move when falling
001D88  2  60           	rts
001D89  2               
001D89  2               @try_move_down:
001D89  2               	; custom collision down
001D89  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001D8C  2  85 02        	sta r0L
001D8E  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001D91  2  85 03        	sta r0H
001D93  2               
001D93  2  20 23 13     	jsr Entities::bbox_coverage
001D96  2  8E 64 19     	stx ladders						; width of the player in tiles = number of ladders to find below
001D99  2  A5 06        	lda r2L
001D9B  2  18           	clc
001D9C  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001D9E  2  A8           	tay
001D9F  2               
001D9F  2               @test_colum:
001D9F  2  B1 02        	lda (r0L),y
001DA1  2  C9 04        	cmp #TILE_SOLID_LADER
001DA3  2  D0 05        	bne @check_solid_ground
001DA5  2               @ladder_down:
001DA5  2  CE 64 19     	dec ladders
001DA8  2  80 0C        	bra @next_column
001DAA  2               @check_solid_ground:
001DAA  2  84 30        	sty $30
001DAC  2  A8           	tay
001DAD  2  B9 A5 20     	lda tiles_attributes,y
001DB0  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001DB2  2  D0 4A        	bne @cannot_move_down
001DB4  2  A4 30        	ldy $30
001DB6  2               @next_column:
001DB6  2  CA           	dex
001DB7  2  F0 03        	beq @end
001DB9  2  C8           	iny
001DBA  2  80 E3        	bra @test_colum
001DBC  2               @end:
001DBC  2               
001DBC  2  AD 64 19     	lda ladders
001DBF  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
001DC1  2               
001DC1  2               	; if there player is covering ANY ladders (accros the boundingbox)
001DC1  2  A4 06        	ldy r2L
001DC3  2               @check_line:							; already climbing down is player grabbing no ladder
001DC3  2  A6 05        	ldx r1H
001DC5  2               @check_row:
001DC5  2  B1 02        	lda (r0L),y
001DC7  2  C9 04        	cmp #TILE_SOLID_LADER
001DC9  2  F0 12        	beq @move_down
001DCB  2  C8           	iny
001DCC  2  CA           	dex
001DCD  2  D0 F6        	bne @check_row
001DCF  2  C6 04        	dec r1L
001DD1  2  F0 2B        	beq @cannot_move_down
001DD3  2               
001DD3  2  98           	tya
001DD4  2  18           	clc
001DD5  2  69 20        	adc #LEVEL_TILES_WIDTH
001DD7  2  38           	sec
001DD8  2  E5 05        	sbc r1H
001DDA  2  A8           	tay
001DDB  2  80 E6        	bra @check_line
001DDD  2               
001DDD  2               @move_down:
001DDD  2  20 E1 12     	jsr Entities::position_y_inc		; move down the ladder
001DE0  2               	;TODO ///////////////////////
001DE0  2  AD BB 21     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001DE3  2  09 01        	ora #(EntityFlags::physics)
001DE5  2  8D BB 21     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001DE8  2               	;TODO ///////////////////////
001DE8  2               
001DE8  2  A9 02 8D B1  	m_status STATUS_CLIMBING
001DEC  2  21           
001DED  2               
001DED  2  A9 06        	lda #Player::Sprites::CLIMB
001DEF  2  CD C1 21     	cmp player0 + PLAYER::frameID
001DF2  2  D0 01        	bne @change_sprite
001DF4  2  60           	rts
001DF5  2               
001DF5  2               @change_sprite:
001DF5  2               	;change player sprite
001DF5  2  A9 06        	lda #Player::Sprites::CLIMB
001DF7  2  8D C1 21     	sta player0 + PLAYER::frameID
001DFA  2  20 3D 1A     	jsr set_bitmap
001DFD  2  60           	rts
001DFE  2               
001DFE  2               @cannot_move_down:
001DFE  2  A9 00        	lda #STATUS_WALKING_IDLE
001E00  2  8D B1 21     	sta player0 + PLAYER::entity + Entity::status
001E03  2  A9 01        	lda #01
001E05  2  8D C2 21     	sta player0 + PLAYER::frame
001E08  2  20 3D 1A     	jsr set_bitmap
001E0B  2  9C B8 21     	stz player0 + PLAYER::entity + Entity::delta_x
001E0E  2  60           	rts
001E0F  2               
001E0F  2               ;************************************************
001E0F  2               ; try to move the player up (move up a ladder)
001E0F  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
001E0F  2               ;	modify: r0, r1, r2
001E0F  2               ;
001E0F  2               move_up:
001E0F  2               	; r3 = *player
001E0F  2  A9 B0        	lda #<player0
001E11  2  85 08        	sta r3L
001E13  2  A9 21        	lda #>player0
001E15  2  85 09        	sta r3H
001E17  2               
001E17  2  AD B1 21     	lda player0 + PLAYER::entity + Entity::status
001E1A  2  C9 04        	cmp #STATUS_FALLING
001E1C  2  D0 01        	bne @try_move_up				; cannot move when falling
001E1E  2  60           	rts
001E1F  2               @try_move_up:
001E1F  2               	; custom collision up
001E1F  2  20 23 13     	jsr Entities::bbox_coverage
001E22  2  A4 06        	ldy r2L
001E24  2  8E 64 19     	stx ladders						; width of the player in tiles = number of ladders to find below
001E27  2               
001E27  2               	; check the situation ABOVE the player
001E27  2  38           	sec
001E28  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001E2B  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001E2D  2  85 02        	sta r0L
001E2F  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001E32  2  E9 00        	sbc #0
001E34  2  85 03        	sta r0H
001E36  2               
001E36  2               	; if there the right numbers of ladder tiles above the player
001E36  2               @test_colum:
001E36  2  B1 02        	lda (r0L),y
001E38  2  C9 04        	cmp #TILE_SOLID_LADER
001E3A  2  D0 05        	bne @check_solid_ceiling
001E3C  2  CE 64 19     	dec ladders
001E3F  2  80 0C        	bra @next_column
001E41  2               @check_solid_ceiling:
001E41  2  84 30        	sty $30
001E43  2  A8           	tay
001E44  2  B9 A5 20     	lda tiles_attributes,y
001E47  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001E49  2  D0 54        	bne @cannot_move_up
001E4B  2  A4 30        	ldy $30
001E4D  2               @next_column:
001E4D  2  CA           	dex
001E4E  2  F0 03        	beq @end
001E50  2  C8           	iny
001E51  2  80 E3        	bra @test_colum
001E53  2               @end:
001E53  2               
001E53  2  AD 64 19     	lda ladders
001E56  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001E58  2               
001E58  2               	; if there player is covering ANY LADER (accros the boundingbox)
001E58  2  AD BE 21     	lda player0 + PLAYER::entity + Entity::collision_addr
001E5B  2  85 02        	sta r0L
001E5D  2  AD BF 21     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001E60  2  85 03        	sta r0H
001E62  2               
001E62  2  A4 06        	ldy r2L
001E64  2               @check_line:							; already climbing up is player grabbing no ladder
001E64  2  A6 05        	ldx r1H
001E66  2               @check_row:
001E66  2  B1 02        	lda (r0L),y
001E68  2  C9 04        	cmp #TILE_SOLID_LADER
001E6A  2  F0 12        	beq @climb_down
001E6C  2  C8           	iny
001E6D  2  CA           	dex
001E6E  2  D0 F6        	bne @check_row
001E70  2  C6 04        	dec r1L
001E72  2  F0 2B        	beq @cannot_move_up
001E74  2               
001E74  2  98           	tya
001E75  2  18           	clc
001E76  2  69 20        	adc #LEVEL_TILES_WIDTH
001E78  2  38           	sec
001E79  2  E5 05        	sbc r1H
001E7B  2  A8           	tay
001E7C  2  80 E6        	bra @check_line
001E7E  2               
001E7E  2               @climb_down:
001E7E  2  20 01 13     	jsr Entities::position_y_dec		; move up the ladder
001E81  2               	;TODO ///////////////////////
001E81  2  AD BB 21     	lda player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001E84  2  09 01        	ora #(EntityFlags::physics)
001E86  2  8D BB 21     	sta player0 + PLAYER::entity + Entity::bFlags	; activate physics engine
001E89  2               	;TODO ///////////////////////
001E89  2               
001E89  2  A9 02 8D B1  	m_status STATUS_CLIMBING
001E8D  2  21           
001E8E  2               
001E8E  2  A9 06        	lda #Player::Sprites::CLIMB
001E90  2  CD C1 21     	cmp player0 + PLAYER::frameID
001E93  2  D0 01        	bne @set_sprite
001E95  2  60           	rts
001E96  2               @set_sprite:						;change player sprite
001E96  2  A9 06        	lda #Player::Sprites::CLIMB
001E98  2  8D C1 21     	sta player0 + PLAYER::frameID
001E9B  2  20 3D 1A     	jsr set_bitmap
001E9E  2  60           	rts
001E9F  2               
001E9F  2               @cannot_move_up:
001E9F  2  A9 00        	lda #STATUS_WALKING_IDLE
001EA1  2  8D B1 21     	sta player0 + PLAYER::entity + Entity::status
001EA4  2  60           	rts
001EA5  2               
001EA5  2               ;************************************************
001EA5  2               ; jump
001EA5  2               ;	input: A = delta X value
001EA5  2               ;
001EA5  2               jump:
001EA5  2  AA           	tax
001EA6  2               
001EA6  2               	; r3 = *player
001EA6  2  A9 B0        	lda #<player0
001EA8  2  85 08        	sta r3L
001EAA  2  A9 21        	lda #>player0
001EAC  2  85 09        	sta r3H
001EAE  2               
001EAE  2  AC B1 21         ldy player0 + PLAYER::entity + Entity::status
001EB1  2  B9 72 1B     	lda ignore_move_request,y
001EB4  2  D0 1F        	bne @return
001EB6  2  8E B8 21     	stx player0 + PLAYER::entity + Entity::delta_x
001EB9  2               
001EB9  2               	; ensure there is no ceiling over the player
001EB9  2  20 91 14     	jsr Entities::check_collision_up
001EBC  2  D0 17        	bne @return
001EBE  2               
001EBE  2  A9 0A        	lda #JUMP_LO_TICKS
001EC0  2  8D B6 21     	sta player0 + PLAYER::entity + Entity::falling_ticks	; decrease  HI every 10 refresh
001EC3  2  A9 02        	lda #JUMP_HI_TICKS
001EC5  2  8D B7 21     	sta player0 + PLAYER::entity + Entity::falling_ticks	+ 1
001EC8  2               
001EC8  2               
001EC8  2  A0 0B        	ldy #Entity::bFlags
001ECA  2  B1 08        	lda (r3),y
001ECC  2  09 01        	ora #EntityFlags::physics
001ECE  2  91 08        	sta (r3),y						; engage physics engine for that entity
001ED0  2               
001ED0  2  A9 05 8D B1  	m_status STATUS_JUMPING
001ED4  2  21           
001ED5  2               @return:
001ED5  2  60           	rts
001ED6  2               
001ED6  2               ;************************************************
001ED6  2               ; grab the object if front of the player, if there is an object
001ED6  2               ;
001ED6  2               grab_object:
001ED6  2  AD C4 21     	lda player0 + PLAYER::flip
001ED9  2  D0 04        	bne @right
001EDB  2               @left:
001EDB  2  A9 0A        	lda #(02 | 08)
001EDD  2  80 02        	bra @cont
001EDF  2               @right:
001EDF  2  A9 06        	lda #(02 | 04)
001EE1  2               @cont:
001EE1  2  AE B0 21     	ldx player0 + PLAYER::entity + Entity::spriteID
001EE4  2  20 5A 0F     	jsr Sprite::precheck_collision	; get the frameID in Y
001EE7  2  30 3C        	bmi @return						; no object
001EE9  2               
001EE9  2  20 81 18     	jsr Objects::get_by_spriteID	; find the object that has frameID Y
001EEC  2  C0 FF        	cpy #$ff
001EEE  2  F0 35        	beq @return						; no object with this ID
001EF0  2               
001EF0  2  98           	tya
001EF1  2  69 10        	adc #Objects::Object::imageID
001EF3  2  98           	tya
001EF4  2  B1 08        	lda (r3), y
001EF6  2  89 01        	bit #Objects::Attribute::GRAB
001EF8  2  F0 2B        	beq @return						; object cannot be grabbed
001EFA  2               
001EFA  2  84 50        	sty PLAYER_ZP					; save the pointer to the grabbed object
001EFC  2  18           	clc
001EFD  2  A5 08        	lda r3L
001EFF  2  65 50        	adc PLAYER_ZP
001F01  2  8D C5 21     	sta player0 + PLAYER::grab_object
001F04  2  A5 09        	lda r3H
001F06  2  69 00        	adc #00
001F08  2  8D C6 21     	sta player0 + PLAYER::grab_object + 1
001F0B  2               
001F0B  2  A9 0C        	lda #Player::Sprites::PUSH
001F0D  2  8D C1 21     	sta player0 + PLAYER::frameID
001F10  2  9C C2 21     	stz player0 + PLAYER::frame
001F13  2  A9 0A        	lda #10
001F15  2  8D C0 21     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001F18  2  A9 01        	lda #01
001F1A  2  8D C3 21     	sta player0 + PLAYER::frameDirection
001F1D  2  20 3D 1A     	jsr set_bitmap
001F20  2               
001F20  2  A9 07 8D B1  	m_status STATUS_PUSHING
001F24  2  21           
001F25  2               
001F25  2               @return:
001F25  2  60           	rts
001F26  2               
001F26  2               ;************************************************
001F26  2               ; release the object the player is moving
001F26  2               ;
001F26  2               release_object:
001F26  2  9C C5 21     	stz player0 + PLAYER::grab_object
001F29  2  9C C6 21     	stz player0 + PLAYER::grab_object + 1
001F2C  2  A9 00 8D B1  	m_status STATUS_WALKING_IDLE
001F30  2  21           
001F31  2               
001F31  2  A9 03        	lda #Player::Sprites::LEFT
001F33  2  8D C1 21     	sta player0 + PLAYER::frameID
001F36  2  9C C2 21     	stz player0 + PLAYER::frame
001F39  2  A9 0A        	lda #10
001F3B  2  8D C0 21     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001F3E  2  A9 01        	lda #01
001F40  2  8D C3 21     	sta player0 + PLAYER::frameDirection
001F43  2  20 3D 1A     	jsr set_bitmap
001F46  2               
001F46  2  60           	rts
001F47  2               
001F47  2               .endscope
001F47  2               
001F47  1               
001F47  1               ;-----------------------------------------------------------------------------
001F47  1               ;/////////////////////////////////////////////////////////////////////////////
001F47  1               ; main code
001F47  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001F47  1               ;-----------------------------------------------------------------------------
001F47  1               
001F47  1  00 00        objects: .word 0
001F49  1               
001F49  1               start:
001F49  1               	; 320x240
001F49  1  A9 40        	lda #64
001F4B  1  8D 2A 9F     	sta veradchscale
001F4E  1  8D 2B 9F     	sta veradcvscale
001F51  1               
001F51  1               	; activate layer0
001F51  1  A9 71        	lda #%01110001
001F53  1               ;	and #(255-VERA_LAYER0)
001F53  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
001F53  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
001F56  1               
001F56  1  20 A8 18     	jsr Layers::init
001F59  1               
001F59  1               	;---------------------------------
001F59  1               	; load tiles file into vram
001F59  1               	;---------------------------------
001F59  1  20 45 08     	jsr Tiles::load_static
001F5C  1               
001F5C  1               	;---------------------------------
001F5C  1               	;---------------------------------
001F5C  1               	; load tilemaps into vram
001F5C  1               	;---------------------------------
001F5C  1  20 53 10     	jsr Tilemap::load
001F5F  1               
001F5F  1               	; load animated tiles into ram
001F5F  1               	;---------------------------------
001F5F  1  20 8F 08     	jsr Tiles::load_anim
001F62  1               
001F62  1               	;---------------------------------
001F62  1               	; load sprite 0,1,2 into vram
001F62  1               	;---------------------------------
001F62  1               load_sprites:
001F62  1               	; prepare VERA sprites
001F62  1  20 6A 0C     	jsr Sprite::init_addr_table
001F65  1               
001F65  1  A9 00 85 02  	LOAD_r0 (::VRAM_tiles + tiles * tile_size)	; base for the sprites
001F69  1  A9 41 85 03  
001F6D  1  20 66 19     	jsr Player::init
001F70  1               
001F70  1               	;---------------------------------
001F70  1               	; load objects list into ram
001F70  1               	;---------------------------------
001F70  1  20 90 17     	jsr Objects::init
001F73  1               
001F73  1  20 52 12     	jsr Entities::update				; place all entitieson on screen
001F76  1               setirq:
001F76  1                  ; backup default RAM IRQ vector
001F76  1  AD 14 03        lda IRQVec
001F79  1  8D A2 20        sta default_irq_vector
001F7C  1  AD 15 03        lda IRQVec+1
001F7F  1  8D A3 20        sta default_irq_vector+1
001F82  1               
001F82  1                  ; overwrite RAM IRQ vector with custom handler address
001F82  1  78              sei ; disable IRQ while vector is changing
001F83  1  A9 9A           lda #<custom_irq_handler
001F85  1  8D 14 03        sta IRQVec
001F88  1  A9 1F           lda #>custom_irq_handler
001F8A  1  8D 15 03        sta IRQVec+1
001F8D  1  AD 26 9F        lda veraien
001F90  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001F92  1  8D 26 9F        sta veraien
001F95  1  58              cli ; enable IRQ now that vector is properly set
001F96  1               
001F96  1               mainloop:
001F96  1  CB           	wai
001F97  1  80 FD        	bra mainloop
001F99  1               
001F99  1  60           	rts
001F9A  1               
001F9A  1               ;-----------------------------------------------------------------------------
001F9A  1               ;/////////////////////////////////////////////////////////////////////////////
001F9A  1               ; deal with IRQ"s
001F9A  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001F9A  1               ;-----------------------------------------------------------------------------
001F9A  1               custom_irq_handler:
001F9A  1  AD 27 9F     	lda veraisr
001F9D  1  AA           	tax
001F9E  1  29 04        	and #VERA_SPRCOL_BIT
001FA0  1  F0 0B        	beq @check_vsync
001FA2  1               
001FA2  1               @sprite_collision:
001FA2  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
001FA5  1  8A           	txa
001FA6  1  4A           	lsr
001FA7  1  4A           	lsr
001FA8  1  4A           	lsr
001FA9  1  4A           	lsr								; extract the collision mask (4:7)
001FAA  1  20 AB 0E     	jsr Sprite::register_collision
001FAD  1               
001FAD  1               @check_vsync:
001FAD  1  8A           	txa
001FAE  1  29 01        	and #VERA_VSYNC_BIT
001FB0  1  F0 6B        	beq @continue
001FB2  1               
001FB2  1               @frame_update:
001FB2  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001FB5  1               
001FB5  1               	;---------------------------------
001FB5  1               	; animate sprite
001FB5  1               	;---------------------------------
001FB5  1  20 1A 1B     	jsr Player::animate
001FB8  1               
001FB8  1               	;---------------------------------
001FB8  1               	; swap animated tiles
001FB8  1               	;---------------------------------
001FB8  1  20 39 09     	jsr Tiles::animate
001FBB  1               
001FBB  1               	;---------------------------------
001FBB  1               	; sprite collisions management
001FBB  1               	;---------------------------------
001FBB  1  20 32 0F     	jsr Sprite::check_irq_collision
001FBE  1               
001FBE  1               	;---------------------------------
001FBE  1               	; check keyboard
001FBE  1               	;---------------------------------
001FBE  1               @check_keyboard:
001FBE  1               	; get fake-joystick data from keyboard
001FBE  1  A9 00        	lda #0
001FC0  1  20 56 FF     	jsr joystick_get
001FC3  1  8D AC 20     	sta joystick_data
001FC6  1  8E AD 20     	stx joystick_data + 1
001FC9  1               
001FC9  1               	; get real joystick data
001FC9  1  A9 01        	lda #1
001FCB  1  20 56 FF     	jsr joystick_get
001FCE  1  C0 00        	cpy #0
001FD0  1  D0 0D        	bne @check_buttons
001FD2  1               
001FD2  1               	; if there is a joystick, mix the data
001FD2  1  2D AC 20     	and joystick_data
001FD5  1  8D AC 20     	sta joystick_data
001FD8  1               
001FD8  1  8A           	txa
001FD9  1  2D AD 20     	and joystick_data + 1
001FDC  1  8D AD 20     	sta joystick_data + 1
001FDF  1               
001FDF  1               @check_buttons:
001FDF  1               	; check button A press/release
001FDF  1  4D AF 20     	eor joystick_data_old + 1
001FE2  1               
001FE2  1  89 80        	bit #JOY_A
001FE4  1  F0 0F        	beq @save_data				; no change for the A
001FE6  1               
001FE6  1  AD AD 20     	lda joystick_data + 1
001FE9  1  89 80        	bit #JOY_A
001FEB  1  F0 05        	beq @grab
001FED  1               @release:
001FED  1  20 26 1F     	jsr Player::release_object
001FF0  1  80 03        	bra @save_data
001FF2  1               @grab:
001FF2  1  20 D6 1E     	jsr Player::grab_object
001FF5  1               @save_data:
001FF5  1  AD AD 20     	lda joystick_data + 1
001FF8  1  8D AF 20     	sta joystick_data_old + 1
001FFB  1               
001FFB  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001FFB  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001FFB  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001FFB  1               ;
001FFB  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001FFB  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001FFB  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001FFB  1               ;  .Y, byte 2:
001FFB  1               ;              $00 = joystick present
001FFB  1               ;              $FF = joystick not present
001FFB  1               
001FFB  1               @other_check:
001FFB  1  AD AC 20     	lda joystick_data
001FFE  1               
001FFE  1  89 81        	bit #(JOY_RIGHT|JOY_B)
002000  1  F0 27        	beq @jump_right
002002  1  89 82        	bit #(JOY_LEFT|JOY_B)
002004  1  F0 2A        	beq @jump_left
002006  1  89 01        	bit #JOY_RIGHT
002008  1  F0 32        	beq @joystick_right
00200A  1  89 02        	bit #JOY_LEFT
00200C  1  F0 29        	beq @joystick_left
00200E  1  89 04        	bit #JOY_DOWN
002010  1  F0 34        	beq @movedown
002012  1  89 08        	bit #JOY_UP
002014  1  F0 2B        	beq @moveup
002016  1  89 80        	bit #JOY_B
002018  1  F0 31        	beq @jump
00201A  1               
00201A  1  20 59 1B     	jsr Player::set_idle
00201D  1               
00201D  1               @continue:
00201D  1  20 42 19     	jsr Layers::update					; refresh layers if needed
002020  1  20 52 12     	jsr Entities::update				; place all entities on on screen
002023  1  20 57 1A     	jsr Player::check_scroll_layers
002026  1               
002026  1               	; continue to default IRQ handler
002026  1  6C A2 20     	jmp (default_irq_vector)
002029  1               	; RTI will happen after jump
002029  1               
002029  1               @jump_right:
002029  1  A9 01        	lda #$01					; jump right
00202B  1  20 A5 1E     	jsr Player::jump
00202E  1  80 ED        	bra @continue
002030  1               
002030  1               @jump_left:
002030  1  A9 FF        	lda #$ff					; jump left
002032  1  20 A5 1E     	jsr Player::jump
002035  1  80 E6        	bra @continue
002037  1               
002037  1               @joystick_left:
002037  1  20 7B 1C     	jsr Player::move_left
00203A  1  80 E1        	bra @continue
00203C  1               
00203C  1               @joystick_right:
00203C  1  20 79 1B     	jsr Player::move_right
00203F  1  80 DC        	bra @continue
002041  1               
002041  1               @moveup:
002041  1  20 0F 1E     	jsr Player::move_up
002044  1  80 D7        	bra @continue
002046  1               
002046  1               @movedown:
002046  1  20 79 1D     	jsr Player::move_down
002049  1  80 D2        	bra @continue
00204B  1               
00204B  1               @jump:
00204B  1  A9 00        	lda #0				; jump up
00204D  1  20 A5 1E     	jsr Player::jump
002050  1  80 CB        	bra @continue
002052  1               
002052  1               .segment "DATA"
002052  1               .include "tilemap.inc"
002052  2               map:
002052  2  20 20        	.byte 32,32
002054  2  6C 65 76 65  fslevel: .literal "level.bin"
002058  2  6C 2E 62 69  
00205C  2  6E           
00205D  2               fslevel_end:
00205D  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
002061  2  65 72 79 2E  
002065  2  62 69 6E     
002068  2               fsbackground_end:
002068  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
00206C  2  69 73 69 6F  
002070  2  6E 2E 62 69  
002075  2               fscollision_end:
002075  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
002079  2  63 74 73 2E  
00207D  2  62 69 6E     
002080  2               fsobjects_end:
002080  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
002084  2  74 65 73 31  
002088  2  2E 62 69 6E  
00208C  2               fssprites1_end:
00208C  2               tileset:
00208C  2  10 10        	.byte 16,16
00208E  2               tiles = 49
00208E  2               tile_size = 256
00208E  2  74 69 6C 65  fstile: .literal "tiles.bin"
002092  2  73 2E 62 69  
002096  2  6E           
002097  2               fstileend:
002097  2               
002097  1               .include "sprite.inc"
002097  2  73 70 72 69  fssprite:	.literal "sprites.bin"
00209B  2  74 65 73 2E  
00209F  2  62 69 6E     
0020A2  2               fsspriteend:
0020A2  2               sprites = 15
0020A2  2               sprite_size = 1024
0020A2  2               
0020A2  1               
0020A2  1  00 00        default_irq_vector: .addr 0
0020A4  1  00           trigger_debug: .byte 0
0020A5  1               tiles_attributes:
0020A5  1  00           	.byte %00000000	;	TILE_NO_COLLISION
0020A6  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
0020A7  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
0020A8  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
0020A9  1  09           	.byte %00001001	;	TILE_SOLID_LADER
0020AA  1  09           	.byte %00001001	;	TILE_LEDGE
0020AB  1  01           	.byte TILE_ATTR::SOLID_GROUND	;	TILE_FLOOR
0020AC  1               
0020AC  1               .segment "BSS"
0020AC  1  00 00        	joystick_data: .byte 0, 0
0020AE  1  00 00        	joystick_data_old: .byte 0, 0
0020B0  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
0020B4  1  xx xx xx xx  
0020B8  1  xx xx xx xx  
0021B0  1  xx xx xx xx  	player0: .tag PLAYER
0021B4  1  xx xx xx xx  
0021B8  1  xx xx xx xx  
0021B0  1               
