ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 69 1D        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               VERA_L0_vscrolllo	= verareg+$12
000810  2               VERA_L0_vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               ; set the tilebase for the layer
000810  2               .macro VTILEBASE layer,addr
000810  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000810  2               	and #VERA_TILEBASE_CLEAR_ADR
000810  2               	ora #(addr >> 9)
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define size of tiles for layer
000810  2               .macro VTILEMODE layer, mode
000810  2               	lda veral0tilebase + layer * 7
000810  2               	and #VERA_CLEAR_TILE_SIZE
000810  2               	ora #mode
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               
000810  2               ; define number of tiles in the map
000810  2               .macro VCONFIG_TILES layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_TILES
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define number of colors for the map
000810  2               .macro VCONFIG_DEPTH layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_DEPTH
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; set the mapbase for the layer
000810  2               .macro VMAPBASE layer,addr
000810  2                   lda #(addr >> 9)         ; store 2 last bits
000810  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               JOY_A		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               .include "tiles.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Tiles code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .enum TILE_ATTR
000839  2               	SOLID_GROUND = 1
000839  2               	SOLID_WALL = 2
000839  2               	SOLID_CEILING = 4
000839  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000839  2               .endenum
000839  2               
000839  2               
000839  2               .scope Tiles
000839  2               
000839  2               ;animated_tiles_map
000839  2               ;   nb_animated_tiles
000839  2               ;   tile[0]
000839  2               ;        tick,
000839  2               ;        nb_frames
000839  2               ;        current_frame
000839  2               ;        @frame[0][0]
000839  2               ;        nb_tiles
000839  2               ;        @addr_tiles_list[0]
000839  2               ;   tile[1]
000839  2               ;   ....
000839  2               ;   tile[nb_animated_tiles-1]
000839  2               ;   frame[t0][0]: duration, tile_index
000839  2               ;   frame[t0][1]
000839  2               ;   .....
000839  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
000839  2               ;   frame[t1][0]: duration, tile_index
000839  2               ;   frame[t1][1]
000839  2               ;   .....
000839  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][0]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
000839  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
000839  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
000839  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
000839  2               
000839  2               .struct ANIMATED_TILES
000839  2                   nb_animated_tiles   .byte
000839  2               
000839  2                   .struct ANIMATED_TILE
000839  2                       tick            .byte   ; number of 18ms frames until next animation
000839  2                       nb_frames       .byte
000839  2                       current_frame   .byte
000839  2                       addr_frames  .addr   ; offset of the list of animation
000839  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
000839  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
000839  2                   .endstruct
000839  2               .endstruct
000839  2               
000839  2               .struct FRAME
000839  2                   duration    .byte
000839  2                   tile_index  .byte
000839  2               .endstruct
000839  2               
000839  2               animated_tiles_map = HIMEM + $400
000839  2               animated_tiles = HIMEM + $400 + 1
000839  2               
000839  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
00083D  2  73 61 6E 69  
000841  2  2E 62 69 6E  
000845  2               fsanimated_tiles_end:
000845  2               
000845  2               ;-----------------------------------------
000845  2               ; load static tiles
000845  2               ;
000845  2               load_static:
000845  2  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), ::VRAM_tiles
000849  2  A0 00 20 BA  
00084D  2  FF A9 09 A2  
000866  2  AD 2F 9F 29  	VTILEBASE 0, ::VRAM_tiles
00086A  2  03 09 08 8D  
00086E  2  2F 9F        
000870  2  AD 36 9F 29  	VTILEBASE 1, ::VRAM_tiles
000874  2  03 09 08 8D  
000878  2  36 9F        
00087A  2  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
00087E  2  FC 09 03 8D  
000882  2  2F 9F        
000884  2  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000888  2  FC 09 03 8D  
00088C  2  36 9F        
00088E  2  60               rts
00088F  2               
00088F  2               ;-----------------------------------------
00088F  2               ; load and fix the animated tiles data
00088F  2               ;
00088F  2               load_anim:
00088F  2  A9 00        	lda #0
000891  2  85 00        	sta $00
000893  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
000897  2  A0 00 20 BA  
00089B  2  FF A9 0C A2  
0008B4  2               
0008B4  2                   ; convert offsets in the data structure to memory addr
0008B4  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008B7  2  A2 00            ldx #0
0008B9  2               
0008B9  2               @next_tile:
0008B9  2  18               clc
0008BA  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008BD  2  69 00            adc #<animated_tiles_map
0008BF  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008C2  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008C5  2  69 A4            adc #>animated_tiles_map
0008C7  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008CA  2               
0008CA  2  18               clc
0008CB  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008CE  2  69 00            adc #<animated_tiles_map
0008D0  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008D3  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008D6  2  69 A4            adc #>animated_tiles_map
0008D8  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008DB  2               
0008DB  2  88               dey
0008DC  2  F0 07            beq @convert_tileslist_addr
0008DE  2               
0008DE  2  8A               txa
0008DF  2  18               clc
0008E0  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
0008E2  2  AA               tax
0008E3  2  80 D4            bra @next_tile
0008E5  2               
0008E5  2               @convert_tileslist_addr:
0008E5  2                   ; convert tilemap offset into vera offset
0008E5  2                   ; convert offsets in the data structure to memory addr
0008E5  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008E8  2  A2 00            ldx #0
0008EA  2               @next_tile1:
0008EA  2                   ; setup the listf of memory offset in vera memory
0008EA  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008ED  2  85 02            sta r0L
0008EF  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008F2  2  85 03            sta r0H
0008F4  2               
0008F4  2  5A               phy
0008F5  2  DA               phx
0008F6  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
0008F9  2  AA               tax
0008FA  2  A0 00            ldy #00
0008FC  2               
0008FC  2               @loop_tiles:
0008FC  2  18               clc
0008FD  2  B1 02            lda (r0),y
0008FF  2  69 00            adc #<VRAM_layer1_map
000901  2  91 02            sta (r0),y
000903  2  C8               iny
000904  2               
000904  2  B1 02            lda (r0),y
000906  2  69 08            adc #>VRAM_layer1_map
000908  2  91 02            sta (r0),y
00090A  2  C8               iny
00090B  2               
00090B  2  CA               dex
00090C  2  D0 EE            bne @loop_tiles
00090E  2  FA               plx
00090F  2  7A               ply
000910  2               
000910  2  88               dey
000911  2  F0 07            beq @init
000913  2               
000913  2  8A               txa
000914  2  18               clc
000915  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000917  2  AA               tax
000918  2  80 D0            bra @next_tile1
00091A  2               
00091A  2               @init:
00091A  2                   ; init the timers
00091A  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00091D  2  A2 00            ldx #0
00091F  2               
00091F  2               @next_tile2:
00091F  2                   ; setup the list of frames
00091F  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000922  2  85 02            sta r0L
000924  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
000927  2  85 03            sta r0H
000929  2               
000929  2                   ; save new frame duration in the timer
000929  2  B2 02            lda (r0)
00092B  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
00092E  2               
00092E  2  88               dey
00092F  2  F0 07            beq @return
000931  2               
000931  2  8A               txa
000932  2  18               clc
000933  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000935  2  AA               tax
000936  2  80 E7            bra @next_tile2
000938  2               
000938  2               @return:
000938  2  60               rts
000939  2               
000939  2               ;-----------------------------------------
000939  2               ; parse the animated tiles to update
000939  2               ;
000939  2               animate:
000939  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00093C  2  A2 00            ldx #0
00093E  2               
00093E  2               @next_tile:
00093E  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000941  2  D0 03            bne :+
000943  2  20 51 09         jsr next_frame
000946  2               :
000946  2  88               dey
000947  2  F0 07            beq @return
000949  2               
000949  2  8A               txa
00094A  2  18               clc
00094B  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00094D  2  AA               tax
00094E  2  80 EE            bra @next_tile
000950  2               
000950  2               @return:
000950  2  60               rts
000951  2               
000951  2               ;-----------------------------------------
000951  2               ; move to the next frame of an animated tile
000951  2               ; update tiles on the tilemap
000951  2               ; input X : offset of the anim_tile structure
000951  2               ;
000951  2               next_frame:
000951  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
000954  2  1A               inc
000955  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
000958  2  D0 02            bne :+
00095A  2  A9 00            lda #00         ; roll back to 0
00095C  2               :
00095C  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
00095F  2  DA               phx
000960  2  5A               phy
000961  2               
000961  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
000962  2  A8               tay         ; Y = current animation frame
000963  2               
000963  2                   ; setup the list of frames
000963  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000966  2  85 02            sta r0L
000968  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00096B  2  85 03            sta r0H
00096D  2               
00096D  2  B1 02            lda (r0), y         ; save new frame duration in the timer
00096F  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000972  2  C8               iny
000973  2  B1 02            lda (r0), y
000975  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
000977  2               
000977  2                   ; setup the listf of memory offset in vera memory
000977  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00097A  2  85 02            sta r0L
00097C  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
00097F  2  85 03            sta r0H
000981  2               
000981  2                   ; push all tiles in vera memory
000981  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
000984  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
000985  2  3A               dec         ; start at the end
000986  2  A8               tay
000987  2               
000987  2  A6 30            ldx $30
000989  2               
000989  2               @next_tile_index:
000989  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
000989  2               
000989  2  A9 00        	lda #0
00098B  2  8D 25 9F     	sta veractl
00098E  2  A9 02          	lda #(^VRAM_layer1_map + 2)
000990  2  8D 22 9F     	sta verahi
000993  2  B1 02            lda (r0), y
000995  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
000998  2  88               dey
000999  2  B1 02            lda (r0), y
00099B  2  8D 20 9F     	sta veralo
00099E  2  88               dey
00099F  2  8E 23 9F         stx veradat
0009A2  2               
0009A2  2  10 E5            bpl @next_tile_index
0009A4  2               
0009A4  2  7A               ply
0009A5  2  FA               plx
0009A6  2  60               rts
0009A7  2               .endscope
0009A7  2               
0009A7  1               .include "sprites.asm"
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               ;/////////////////////////////////////////////////////////////////////////////
0009A7  2               ; START Sprite code
0009A7  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               
0009A7  2               .struct VSPRITE
0009A7  2               	address125 .byte
0009A7  2               	mode_xxx_address1613 .byte
0009A7  2               	x70 .byte
0009A7  2               	x98 .byte
0009A7  2               	y70 .byte
0009A7  2               	y98 .byte
0009A7  2               	collision_zdepth_vflip_hflip .byte
0009A7  2               	height_width_offset .byte
0009A7  2               .endstruct
0009A7  2               
0009A7  2               .scope Sprite
0009A7  2               
0009A7  2               SPRITES_ZP = $0070	; memory reserved for Sprites
0009A7  2               
0009A7  2               ;-----------------------------------------
0009A7  2               ; sprites components collections
0009A7  2               MAX_SPRITES = 32
0009A7  2               
0009A7  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
0009AB  2  xx xx xx xx  
0009AF  2  xx xx xx xx  
0009C7  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
0009CB  2  xx xx xx xx  
0009CF  2  xx xx xx xx  
0009E7  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
0009EB  2  xx xx xx xx  
0009EF  2  xx xx xx xx  
000A07  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
000A0B  2  xx xx xx xx  
000A0F  2  xx xx xx xx  
000A27  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
000A2B  2  xx xx xx xx  
000A2F  2  xx xx xx xx  
000A47  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
000A4B  2  xx xx xx xx  
000A4F  2  xx xx xx xx  
000A67  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
000A6B  2  xx xx xx xx  
000A6F  2  xx xx xx xx  
000A87  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
000A8B  2  xx xx xx xx  
000A8F  2  xx xx xx xx  
000AA7  2  xx xx xx xx  sprites_aabb_x: .res MAX_SPRITES	; collision box INSIDE the sprite top-left corner
000AAB  2  xx xx xx xx  
000AAF  2  xx xx xx xx  
000AC7  2  xx xx xx xx  sprites_aabb_y: .res MAX_SPRITES
000ACB  2  xx xx xx xx  
000ACF  2  xx xx xx xx  
000AE7  2  xx xx xx xx  sprites_aabb_w: .res MAX_SPRITES	; collision box INSIDE the sprite height/width
000AEB  2  xx xx xx xx  
000AEF  2  xx xx xx xx  
000B07  2  xx xx xx xx  sprites_aabb_h: .res MAX_SPRITES
000B0B  2  xx xx xx xx  
000B0F  2  xx xx xx xx  
000B27  2  xx xx xx xx  sprites_collision_callback: .res (MAX_SPRITES * 2)
000B2B  2  xx xx xx xx  
000B2F  2  xx xx xx xx  
000B67  2               
000B67  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
000B6B  2  xx xx xx xx  
000B6F  2  xx xx xx xx  
000C67  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000C68  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000C6A  2               
000C6A  2               ;************************************************
000C6A  2               ;  init sprites manager
000C6A  2               ; create a table with the VERA @addr for each sprite
000C6A  2               ;
000C6A  2               init_addr_table:
000C6A  2               	; clear the sprites components
000C6A  2  A6 20        	ldx MAX_SPRITES
000C6C  2  CA           	dex
000C6D  2               :
000C6D  2  9E A7 09     	stz sprites_xL,x
000C70  2  9E C7 09     	stz sprites_xH,x
000C73  2  9E E7 09     	stz sprites_yL,x
000C76  2  9E 07 0A     	stz sprites_yH,x
000C79  2  9E E7 0A     	stz sprites_aabb_w,x
000C7C  2  9E 07 0B     	stz sprites_aabb_h,x
000C7F  2  9E A7 0A     	stz sprites_aabb_x,x
000C82  2  9E C7 0A     	stz sprites_aabb_y,x
000C85  2  CA           	dex
000C86  2  10 E5        	bpl :-
000C88  2               
000C88  2               	; activate sprite colisions
000C88  2               	;lda veraien
000C88  2               	;ora #VERA_SPRCOL_BIT
000C88  2               	;sta veraien
000C88  2               
000C88  2               	; all sprites are availble but ZERO (reserved player)
000C88  2  A2 FF        	ldx #$ff
000C8A  2               :
000C8A  2  9E 67 0B     	stz sprites,X
000C8D  2  CA           	dex
000C8E  2  D0 FA        	bne :-
000C90  2  A9 01        	lda #01
000C92  2  8D 67 0B     	sta sprites
000C95  2               
000C95  2               	; start of the sprites in VERA memory
000C95  2  A9 00        	lda #<vram_sprd
000C97  2  85 02        	sta r0L
000C99  2  A9 FC        	lda #>vram_sprd
000C9B  2  85 03        	sta r0H
000C9D  2               
000C9D  2  A2 80        	ldx #128
000C9F  2  A0 00        	ldy #0
000CA1  2                @loop:
000CA1  2  A5 03        	lda r0H
000CA3  2  99 C9 1E     	sta sprites_table,y
000CA6  2  C8           	iny
000CA7  2  A5 02        	lda r0L
000CA9  2  99 C9 1E     	sta sprites_table,y
000CAC  2  C8           	iny
000CAD  2               
000CAD  2  18           	clc
000CAE  2  A5 02        	lda r0L
000CB0  2  69 08        	adc #8
000CB2  2  85 02        	sta r0L
000CB4  2  A5 03        	lda r0H
000CB6  2  69 00        	adc #0
000CB8  2  85 03        	sta r0H	; move to next sprite
000CBA  2               
000CBA  2  CA           	dex
000CBB  2  D0 E4        	bne @loop
000CBD  2               
000CBD  2  60           	rts
000CBE  2               
000CBE  2               ;************************************************
000CBE  2               ; get a new available vera sprite
000CBE  2               ;	output: X = index of the vera sprite
000CBE  2               ;			0 = no sprite available
000CBE  2               ;
000CBE  2               new:
000CBE  2  A2 01        	ldx #$01
000CC0  2               :
000CC0  2  BD 67 0B     	lda sprites,x
000CC3  2  F0 03        	beq @return
000CC5  2  E8           	inx
000CC6  2  D0 F8        	bne :-
000CC8  2               @return:
000CC8  2  A9 01        	lda #01
000CCA  2  9D 67 0B     	sta sprites,x
000CCD  2               
000CCD  2               	; count activated sprites
000CCD  2  EC 67 0C     	cpx nb_sprites
000CD0  2  90 03        	bcc :+
000CD2  2               
000CD2  2  EE 67 0C     	inc nb_sprites
000CD5  2               :
000CD5  2  60           	rts
000CD6  2               
000CD6  2               ;
000CD6  2               ; the the VERA memory pointer to sprite Y + attribute X
000CD6  2               ;	Y = sprite index
000CD6  2               ;	X = attribute offset
000CD6  2               ;
000CD6  2               vram:
000CD6  2  DA           	phx			; save X on the stack
000CD7  2               
000CD7  2  98           	tya			; index of the sprite
000CD8  2  0A           	asl
000CD9  2  A8           	tay			; index of the address of the sprite (y*2)
000CDA  2               
000CDA  2  A9 00        	lda #0
000CDC  2  8D 25 9F     	sta veractl
000CDF  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000CE1  2  8D 22 9F     	sta verahi
000CE4  2  B9 C9 1E     	lda sprites_table, y
000CE7  2  8D 21 9F     	sta veramid
000CEA  2  C8           	iny
000CEB  2  BA           	tsx
000CEC  2  BD 01 01     	lda $0101,x	; reload X from the stack
000CEF  2  79 C9 1E     	adc sprites_table, y
000CF2  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000CF5  2  FA           	plx
000CF6  2  60           	rts
000CF7  2               
000CF7  2               ;************************************************
000CF7  2               ; configure the sprite
000CF7  2               ;	input: 	A = sprite collision mask
000CF7  2               ;			Y = sprite index
000CF7  2               ;		   	X = sprite size :
000CF7  2               ;		   	r0 = vram @ of the sprite data
000CF7  2               ;
000CF7  2  07 0F 1F 3F  sprites_size: .byte 7, 15, 31, 63	; count byte 0 as a byte, so width is not "8" pixel nut "0" + "7" pixels
000CFB  2               
000CFB  2               load:
000CFB  2  86 70        	stx SPRITES_ZP
000CFD  2  85 72        	sta SPRITES_ZP + 2
000CFF  2  84 73        	sty SPRITES_ZP + 3
000D01  2  20 74 0D     	jsr set_bitmap
000D04  2               
000D04  2  9C 23 9F     	stz veradat					; x = 0
000D07  2  9C 23 9F     	stz veradat
000D0A  2  9C 23 9F     	stz veradat					; y = 0
000D0D  2  9C 23 9F     	stz veradat
000D10  2  A5 72        	lda SPRITES_ZP + 2			; load collision mask
000D12  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000D14  2  8D 23 9F     	sta veradat
000D17  2  A5 70        	lda SPRITES_ZP				; 32x32 sprite
000D19  2  8D 23 9F     	sta veradat
000D1C  2               
000D1C  2  4A           	lsr
000D1D  2  4A           	lsr
000D1E  2  4A           	lsr
000D1F  2  4A           	lsr
000D20  2  85 70        	sta SPRITES_ZP				; focus on sprite_height, sprite_width
000D22  2               
000D22  2  A4 73        	ldy SPRITES_ZP + 3			; sprite index
000D24  2               
000D24  2  29 03        	and #%00000011				; sprite_width
000D26  2  AA           	tax
000D27  2  BD F7 0C     	lda sprites_size,x
000D2A  2  99 E7 0A     	sta sprites_aabb_w, y		; store width in pixels in the sprite attribute
000D2D  2  A9 00        	lda #00
000D2F  2  99 A7 0A     	sta sprites_aabb_x, y		; default collision box starts (0,0)
000D32  2               
000D32  2  A5 70        	lda SPRITES_ZP
000D34  2  4A           	lsr
000D35  2  4A           	lsr							; sprite_height
000D36  2  AA           	tax
000D37  2  BD F7 0C     	lda sprites_size,x
000D3A  2  99 07 0B     	sta sprites_aabb_h, y		; store height in pixels in the sprite attribute
000D3D  2  A9 00        	lda #00
000D3F  2  99 C7 0A     	sta sprites_aabb_y, y		; default collision box starts (0,0)
000D42  2               
000D42  2  60           	rts
000D43  2               
000D43  2               ;************************************************
000D43  2               ; set the collision box of the sprite
000D43  2               ;	input y = sprite index
000D43  2               ;		r0L = top-left corner X
000D43  2               ;		r0H = top-left corner Y
000D43  2               ;		r1L = width
000D43  2               ;		r1H = height
000D43  2               ;
000D43  2               set_aabb:
000D43  2  A5 02        	lda r0L
000D45  2  99 A7 0A     	sta sprites_aabb_x,y
000D48  2  A5 03        	lda r0H
000D4A  2  99 C7 0A     	sta sprites_aabb_y,y
000D4D  2  A5 04        	lda r1L
000D4F  2  99 E7 0A     	sta sprites_aabb_w,y
000D52  2  A5 05        	lda r1H
000D54  2  99 07 0B     	sta sprites_aabb_h,y
000D57  2  60           	rts
000D58  2               
000D58  2               ;************************************************
000D58  2               ; configure full veram memory (16:0) into optimized one (12:5)
000D58  2               ;	input: r0 = vram @ of the sprite data
000D58  2               ;	output: r1
000D58  2               ;
000D58  2               vram_to_16_5:
000D58  2               	; load full VERA memory (12:0) into R0
000D58  2  A5 02        	lda r0L
000D5A  2  85 04        	sta r1L
000D5C  2  A5 03        	lda r0H
000D5E  2  85 05        	sta r1H
000D60  2               
000D60  2               	; convert full addr to vera mode (bit shiting >> 5)
000D60  2  A5 05        	lda r1H
000D62  2  4A           	lsr
000D63  2  66 04        	ror r1L
000D65  2  4A           	lsr
000D66  2  66 04        	ror r1L
000D68  2  4A           	lsr
000D69  2  66 04        	ror r1L
000D6B  2  4A           	lsr
000D6C  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D6E  2  4A           	lsr
000D6F  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D71  2  85 05        	sta r1H
000D73  2  60           	rts
000D74  2               
000D74  2               ;************************************************
000D74  2               ; change the address of the bitmap for the sprite
000D74  2               ;	Y = sprite index
000D74  2               ;	r0 = vera memory (12:5)
000D74  2               ;
000D74  2               set_bitmap:
000D74  2  A2 00        	ldx #VSPRITE::address125
000D76  2  20 D6 0C     	jsr vram			; set very pointer to the address of the bitmap
000D79  2               
000D79  2  A5 02        	lda r0L
000D7B  2  8D 23 9F     	sta veradat
000D7E  2  A5 03        	lda r0H
000D80  2  09 80        	ora #$80						; M = 8 bits
000D82  2  8D 23 9F     	sta veradat
000D85  2               
000D85  2  60           	rts
000D86  2               
000D86  2               ;************************************************
000D86  2               ; change the display byte for a sprite
000D86  2               ;	Y = sprite index
000D86  2               ;	X = display value to set
000D86  2               ;
000D86  2               display:
000D86  2  86 02        	stx r0L		; save X for later
000D88  2  84 03        	sty r0H
000D8A  2               
000D8A  2               	; set vram memory on the X sprite
000D8A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D8C  2  20 D6 0C     	jsr vram
000D8F  2  AD 23 9F     	lda veradat
000D92  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000D94  2  05 02        	ora r0L
000D96  2  85 02        	sta r0L
000D98  2               
000D98  2  A4 03        	ldy r0H
000D9A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D9C  2  20 D6 0C     	jsr vram
000D9F  2               
000D9F  2  A5 02        	lda r0L
000DA1  2  8D 23 9F     	sta veradat
000DA4  2  60           	rts
000DA5  2               
000DA5  2               ;************************************************
000DA5  2               ; define position of sprite
000DA5  2               ;	Y = sprite index
000DA5  2               ;	r0 = addr of word X & word Y
000DA5  2               ;
000DA5  2               position:
000DA5  2               	; set vram memory on the X sprite
000DA5  2  84 70        	sty SPRITES_ZP
000DA7  2  A2 02        	ldx #VSPRITE::x70
000DA9  2  20 D6 0C     	jsr vram
000DAC  2  A6 70        	ldx SPRITES_ZP
000DAE  2               
000DAE  2  A0 01        	ldy #1
000DB0  2  18           	clc
000DB1  2  B2 02        	lda (r0L)				; X low => vera X
000DB3  2  8D 23 9F     	sta veradat
000DB6  2  7D A7 0A     	adc sprites_aabb_x, x	; X + aabb.x => collision box.x
000DB9  2  9D A7 09     	sta sprites_xL, x
000DBC  2  B1 02        	lda (r0L),y				; X high => vera X hight
000DBE  2  8D 23 9F     	sta veradat
000DC1  2  69 00        	adc #00
000DC3  2  9D C7 09     	sta sprites_xH, x		; X + aabbx.x => collision box.x
000DC6  2               
000DC6  2  18           	clc
000DC7  2  BD A7 09     	lda sprites_xL, x
000DCA  2  7D E7 0A     	adc sprites_aabb_w, x
000DCD  2  9D 27 0A     	sta sprites_x1L, x
000DD0  2  BD C7 09     	lda sprites_xH, x
000DD3  2  69 00        	adc #0
000DD5  2  9D 47 0A     	sta sprites_x1H, x		;X1 = x + aabb.x + aabb.w
000DD8  2               
000DD8  2  18           	clc
000DD9  2  C8           	iny
000DDA  2  B1 02        	lda (r0L),y
000DDC  2  8D 23 9F     	sta veradat				; Y low => vera
000DDF  2  7D C7 0A     	adc sprites_aabb_y, x
000DE2  2  9D E7 09     	sta sprites_yL, x		; Y + aabb.y => collision box.y
000DE5  2  C8           	iny
000DE6  2  B1 02        	lda (r0L),y
000DE8  2  8D 23 9F     	sta veradat				; Y heigh  => vera Y high
000DEB  2  69 00        	adc #0
000DED  2  9D 07 0A     	sta sprites_yH, x		; Y + aabb.y => collision box.y
000DF0  2               
000DF0  2  18           	clc
000DF1  2  BD E7 09     	lda sprites_yL, x
000DF4  2  7D 07 0B     	adc sprites_aabb_h, x
000DF7  2  9D 67 0A     	sta sprites_y1L, x
000DFA  2  BD 07 0A     	lda sprites_yH, x
000DFD  2  69 00        	adc #00
000DFF  2  9D 87 0A     	sta sprites_y1H, x		; Y1 = y + aabb.y + aabb.h
000E02  2               
000E02  2  60           	rts
000E03  2               
000E03  2               ;************************************************
000E03  2               ; Change the flipping of a sprite
000E03  2               ;	Y = sprite index
000E03  2               ;	A = value to set
000E03  2               ;
000E03  2               set_flip:
000E03  2  85 70        	sta SPRITES_ZP
000E05  2  84 71        	sty SPRITES_ZP + 1
000E07  2               
000E07  2               	; set vram memory on the X sprite
000E07  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E09  2  20 D6 0C     	jsr vram
000E0C  2               
000E0C  2  AD 23 9F     	lda veradat				;get current value
000E0F  2  29 FC        	and #SPRITE_FLIP_CLEAR
000E11  2  05 70        	ora SPRITES_ZP			; change only the flip value
000E13  2  85 70        	sta SPRITES_ZP
000E15  2               
000E15  2  A4 71        	ldy SPRITES_ZP + 1
000E17  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E19  2  20 D6 0C     	jsr vram
000E1C  2  A5 70        	lda SPRITES_ZP
000E1E  2  8D 23 9F     	sta veradat
000E21  2  60           	rts
000E22  2               
000E22  2               ;************************************************
000E22  2               ; register sprites collision
000E22  2               ; input: A = collision mask
000E22  2               ;
000E22  2               register_collision:
000E22  2  EE 68 0C     	inc collisions
000E25  2  8D 69 0C     	sta collisions + 1
000E28  2  60           	rts
000E29  2               
000E29  2               ;************************************************
000E29  2               ; Axis Aligned Bounding Box collision between 2 sprites
000E29  2               ; input: X = index of sprite 1
000E29  2               ;		 Y = index of sprite 2
000E29  2               ; return: Z = no collision
000E29  2               ;
000E29  2               aabb_collision:
000E29  2  BD C7 09     	lda sprites_xH, x
000E2C  2  D9 47 0A     	cmp sprites_x1H, y
000E2F  2  90 02        	bcc :+
000E31  2  D0 49        	bne @false
000E33  2               :
000E33  2  BD A7 09     	lda sprites_xL, x
000E36  2  D9 27 0A     	cmp sprites_x1L, y
000E39  2  90 02        	bcc :+
000E3B  2  D0 3F        	bne @false
000E3D  2               :						; s(x).left_x <= s(y).right_x
000E3D  2               
000E3D  2  B9 C7 09     	lda sprites_xH, y
000E40  2  DD 47 0A     	cmp sprites_x1H, x
000E43  2  90 02        	bcc :+
000E45  2  D0 35        	bne @false
000E47  2               :
000E47  2  B9 A7 09     	lda sprites_xL, y
000E4A  2  DD 27 0A     	cmp sprites_x1L, x
000E4D  2  90 02        	bcc :+
000E4F  2  D0 2B        	bne @false
000E51  2               :						; AND s(y).left_x <= s(x).right_x
000E51  2               
000E51  2  BD 07 0A     	lda sprites_yH, x
000E54  2  D9 87 0A     	cmp sprites_y1H, y
000E57  2  90 02        	bcc :+
000E59  2  D0 21        	bne @false
000E5B  2               :
000E5B  2  BD E7 09     	lda sprites_yL, x
000E5E  2  D9 67 0A     	cmp sprites_y1L, y
000E61  2  90 02        	bcc :+
000E63  2  D0 17        	bne @false
000E65  2               :						; AND s(x).bottom_y <= s(y).top_y
000E65  2               
000E65  2  B9 07 0A     	lda sprites_yH, y
000E68  2  DD 87 0A     	cmp sprites_y1H, x
000E6B  2  90 02        	bcc :+
000E6D  2  D0 0D        	bne @false
000E6F  2               :
000E6F  2  B9 E7 09     	lda sprites_yL, y
000E72  2  DD 67 0A     	cmp sprites_y1L, x
000E75  2  90 02        	bcc :+
000E77  2  D0 03        	bne @false
000E79  2               :						; AND s(y).bottom_y <= s(x).top_y
000E79  2               
000E79  2               @true:
000E79  2  A9 01        	lda #01
000E7B  2  60           	rts
000E7C  2               @false:
000E7C  2  A9 00        	lda #00
000E7E  2  60           	rts
000E7F  2               
000E7F  2               ;************************************************
000E7F  2               ; after a collision IRQ, test all sprites to find colliding ones
000E7F  2               ; return: a = no collision
000E7F  2               ;
000E7F  2               find_colliding:
000E7F  2  AD 67 0C     	lda nb_sprites
000E82  2  3A           	dec
000E83  2  85 70        	sta SPRITES_ZP
000E85  2  3A           	dec
000E86  2  85 71        	sta SPRITES_ZP + 1
000E88  2               
000E88  2               @inner_loop:
000E88  2  A6 70        	ldx SPRITES_ZP
000E8A  2  A4 71        	ldy SPRITES_ZP + 1
000E8C  2  20 29 0E     	jsr aabb_collision
000E8F  2  D0 15        	bne @found
000E91  2               
000E91  2  C6 71        	dec SPRITES_ZP + 1
000E93  2  30 02        	bmi @try_next
000E95  2  80 F1        	bra @inner_loop
000E97  2               
000E97  2               @try_next:
000E97  2  A5 70        	lda SPRITES_ZP
000E99  2  3A           	dec
000E9A  2  F0 07        	beq @not_found
000E9C  2  85 70        	sta SPRITES_ZP			; start comparison end - 1
000E9E  2  3A           	dec						; compare with start - 1 unless < 0
000E9F  2  85 71        	sta SPRITES_ZP + 1
000EA1  2  80 E5        	bra @inner_loop
000EA3  2               
000EA3  2               @not_found:
000EA3  2  A9 00        	lda #00
000EA5  2  60           	rts
000EA6  2               @found:
000EA6  2  A9 01        	lda #01
000EA8  2  60           	rts
000EA9  2               
000EA9  2               ;************************************************
000EA9  2               ; manage collisions after a collision IRQ
000EA9  2               ;
000EA9  2               check_irq_collision:
000EA9  2  AD 68 0C     	lda collisions
000EAC  2  F0 06        	beq @return
000EAE  2               
000EAE  2  9C 68 0C     	stz collisions		; clear the collision flag
000EB1  2               
000EB1  2  20 7F 0E     	jsr find_colliding
000EB4  2               
000EB4  2               @return:
000EB4  2  60           	rts
000EB5  2               
000EB5  2               ;************************************************
000EB5  2               ; check if sprite X collides with any of the others
000EB5  2               ; input : X = sprite index to test
000EB5  2               ; return: a = index of sprite in collision or $FF if no collision
000EB5  2               ;
000EB5  2               check_collision:
000EB5  2  86 70        	stx SPRITES_ZP
000EB7  2  AD 67 0C     	lda nb_sprites
000EBA  2  3A           	dec
000EBB  2  F0 11        	beq @no_collision		; if there is only 1 sprite, no_collision
000EBD  2  A8           	tay						; start with the last sprite
000EBE  2               @loop:
000EBE  2  C4 70        	cpy SPRITES_ZP
000EC0  2  F0 05        	beq @next				; ignore the input sprite
000EC2  2  20 29 0E     	jsr aabb_collision
000EC5  2  D0 05        	bne @collision
000EC7  2               @next:
000EC7  2  88           	dey
000EC8  2  30 04        	bmi @no_collision		; 0 has to be taked care off
000ECA  2  80 F2        	bra @loop
000ECC  2               
000ECC  2               @collision:
000ECC  2  98           	tya						; store index of the colliding sprite
000ECD  2  60           	rts
000ECE  2               
000ECE  2               @no_collision:
000ECE  2  A9 FF        	lda #$ff
000ED0  2  60           	rts
000ED1  2               
000ED1  2               ;************************************************
000ED1  2               ; simulate a sprite movement and check collision
000ED1  2               ;	input A = vertical (1) / horizontal (2)
000ED1  2               ;			  plus (4) / minus (8)
000ED1  2               ;		  X = sprite index
000ED1  2               ; 	return: a = index of colliding sprite, $ff if no collision
000ED1  2               ;
000ED1  2               precheck_collision:
000ED1  2  85 72        	sta SPRITES_ZP + 2
000ED3  2  86 73        	stx SPRITES_ZP + 3
000ED5  2               
000ED5  2  89 01        	bit #01
000ED7  2  D0 5D        	bne @vertical
000ED9  2  89 08        	bit #08
000EDB  2  D0 2D        	bne @horizontal_minus
000EDD  2               
000EDD  2               @horizontal_plus:
000EDD  2               	; save current X, X1 and add the delta
000EDD  2  18           	clc
000EDE  2  BD A7 09     	lda sprites_xL, x
000EE1  2  85 75        	sta SPRITES_ZP + 5
000EE3  2  69 01        	adc #01
000EE5  2  9D A7 09     	sta sprites_xL, x
000EE8  2               
000EE8  2  BD C7 09     	lda sprites_xH, x
000EEB  2  85 76        	sta SPRITES_ZP + 6
000EED  2  69 00        	adc #00
000EEF  2  9D C7 09     	sta sprites_xH, x
000EF2  2               @horizontal_plus_width:
000EF2  2  18           	clc
000EF3  2  BD 27 0A     	lda sprites_x1L, x
000EF6  2  85 77        	sta SPRITES_ZP + 7
000EF8  2  69 01        	adc #01
000EFA  2  9D 27 0A     	sta sprites_x1L, x
000EFD  2               
000EFD  2  BD 47 0A     	lda sprites_x1H, x
000F00  2  85 78        	sta SPRITES_ZP + 8
000F02  2  69 00        	adc #00
000F04  2  9D 47 0A     	sta sprites_x1H, x
000F07  2  4C 90 0F     	jmp @test
000F0A  2               
000F0A  2               @horizontal_minus:
000F0A  2  38           	sec
000F0B  2  BD A7 09     	lda sprites_xL, x
000F0E  2  85 75        	sta SPRITES_ZP + 5
000F10  2  E9 01        	sbc #01
000F12  2  9D A7 09     	sta sprites_xL, x
000F15  2               
000F15  2  BD C7 09     	lda sprites_xH, x
000F18  2  85 76        	sta SPRITES_ZP + 6
000F1A  2  E9 00        	sbc #00
000F1C  2  9D C7 09     	sta sprites_xH, x
000F1F  2               @horizontal_minus_width:
000F1F  2  38           	sec
000F20  2  BD 27 0A     	lda sprites_x1L, x
000F23  2  85 77        	sta SPRITES_ZP + 7
000F25  2  E9 01        	sbc #01
000F27  2  9D 27 0A     	sta sprites_x1L, x
000F2A  2               
000F2A  2  BD 47 0A     	lda sprites_x1H, x
000F2D  2  85 78        	sta SPRITES_ZP + 8
000F2F  2  E9 00        	sbc #00
000F31  2  9D 47 0A     	sta sprites_x1H, x
000F34  2  80 5A        	bra @test
000F36  2               
000F36  2               @vertical:
000F36  2  89 08        	bit #08
000F38  2  D0 2C        	bne @vertical_minus
000F3A  2               @vertical_plus:
000F3A  2               	; save current Y, Y1 and add delta
000F3A  2  18           	clc
000F3B  2  BD E7 09     	lda sprites_yL, x
000F3E  2  85 75        	sta SPRITES_ZP + 5
000F40  2  69 01        	adc #01
000F42  2  9D E7 09     	sta sprites_yL, x
000F45  2               
000F45  2  BD 07 0A     	lda sprites_yH, x
000F48  2  85 76        	sta SPRITES_ZP + 6
000F4A  2  69 00        	adc #00
000F4C  2  9D 07 0A     	sta sprites_yH, x
000F4F  2               
000F4F  2  18           	clc
000F50  2  BD 67 0A     	lda sprites_y1L, x
000F53  2  85 77        	sta SPRITES_ZP + 7
000F55  2  69 01        	adc #01
000F57  2  9D 67 0A     	sta sprites_y1L, x
000F5A  2               
000F5A  2  BD 87 0A     	lda sprites_y1H, x
000F5D  2  85 78        	sta SPRITES_ZP + 8
000F5F  2  69 00        	adc #00
000F61  2  9D 87 0A     	sta sprites_y1H, x
000F64  2  80 2A        	bra @test
000F66  2               @vertical_minus:
000F66  2               	; save current Y, Y1 and add delta
000F66  2  38           	sec
000F67  2  BD E7 09     	lda sprites_yL, x
000F6A  2  85 75        	sta SPRITES_ZP + 5
000F6C  2  E9 01        	sbc #01
000F6E  2  9D E7 09     	sta sprites_yL, x
000F71  2               
000F71  2  BD 07 0A     	lda sprites_yH, x
000F74  2  85 76        	sta SPRITES_ZP + 6
000F76  2  E9 00        	sbc #00
000F78  2  9D 07 0A     	sta sprites_yH, x
000F7B  2               
000F7B  2  38           	sec
000F7C  2  BD 67 0A     	lda sprites_y1L, x
000F7F  2  85 77        	sta SPRITES_ZP + 7
000F81  2  69 01        	adc #01
000F83  2  9D 67 0A     	sta sprites_y1L, x
000F86  2               
000F86  2  BD 87 0A     	lda sprites_y1H, x
000F89  2  85 78        	sta SPRITES_ZP + 8
000F8B  2  E9 00        	sbc #00
000F8D  2  9D 87 0A     	sta sprites_y1H, x
000F90  2               
000F90  2               @test:
000F90  2  20 B5 0E     	jsr check_collision
000F93  2  85 74        	sta SPRITES_ZP + 4		; save the result
000F95  2               
000F95  2               @restore:
000F95  2               	; and restore the data
000F95  2  A6 73        	ldx SPRITES_ZP + 3
000F97  2  A5 72        	lda SPRITES_ZP + 2
000F99  2  89 02        	bit #02
000F9B  2  F0 16        	beq @vertical_restore
000F9D  2               @horizontal_restore:
000F9D  2  A5 75        	lda SPRITES_ZP + 5
000F9F  2  9D A7 09     	sta sprites_xL, x
000FA2  2  A5 76        	lda SPRITES_ZP + 6
000FA4  2  9D C7 09     	sta sprites_xH, x
000FA7  2  A5 77        	lda SPRITES_ZP + 7
000FA9  2  9D 27 0A     	sta sprites_x1L, x
000FAC  2  A5 78        	lda SPRITES_ZP + 8
000FAE  2  9D C7 09     	sta sprites_xH, x
000FB1  2  80 14        	bra @return
000FB3  2               
000FB3  2               @vertical_restore:
000FB3  2  A5 75        	lda SPRITES_ZP + 5
000FB5  2  9D E7 09     	sta sprites_yL, x
000FB8  2  A5 76        	lda SPRITES_ZP + 6
000FBA  2  9D 07 0A     	sta sprites_yH, x
000FBD  2  A5 77        	lda SPRITES_ZP + 7
000FBF  2  9D 67 0A     	sta sprites_y1L, x
000FC2  2  A5 78        	lda SPRITES_ZP + 8
000FC4  2  9D 07 0A     	sta sprites_yH, x
000FC7  2               
000FC7  2               @return:
000FC7  2  A5 74        	lda SPRITES_ZP + 4	; result of the collision
000FC9  2  60           	rts
000FCA  2               
000FCA  2               .endscope
000FCA  2               
000FCA  1               .include "tilemap.asm"
000FCA  2               ;-----------------------------------------------------------------------------
000FCA  2               ;/////////////////////////////////////////////////////////////////////////////
000FCA  2               ; START Tilemap code
000FCA  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000FCA  2               ;-----------------------------------------------------------------------------
000FCA  2               
000FCA  2               .scope Tilemap
000FCA  2               
000FCA  2               COLLISION_MAP = HIMEM
000FCA  2               
000FCA  2               ;************************************************
000FCA  2               ; load the layers and the collision map
000FCA  2               ;
000FCA  2               load:
000FCA  2               	; load tilemap into layer 0
000FCA  2  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
000FCE  2  0F 09 00 8D  
000FD2  2  2D 9F        
000FD4  2  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
000FD8  2  0F 09 03 8D  
000FDC  2  2D 9F        
000FDE  2  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
000FE2  2  9F           
000FE3  2  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
000FE7  2  A0 00 20 BA  
000FEB  2  FF A9 0B A2  
001004  2               
001004  2               	; load tilemap into layer 1
001004  2  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
001008  2  0F 09 00 8D  
00100C  2  34 9F        
00100E  2  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
001012  2  0F 09 03 8D  
001016  2  34 9F        
001018  2  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
00101C  2  9F           
00101D  2  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
001021  2  A0 00 20 BA  
001025  2  FF A9 09 A2  
00103E  2               
00103E  2               	; load collisionmap into ram
00103E  2  A9 00        	lda #0
001040  2  85 00        	sta $00
001042  2  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), COLLISION_MAP
001046  2  A0 00 20 BA  
00104A  2  FF A9 0D A2  
001063  2               
001063  2               
001063  2  60               rts
001064  2               
001064  2               ;************************************************
001064  2               ; convert (x,y) position into a collision memory address
001064  2               ;	input: r0  = X
001064  2               ;            r1 = Y
001064  2               ;	output : r0
001064  2               ;
001064  2               get_collision_addr:
001064  2  A5 02        	lda r0L
001066  2  29 F0        	and #%11110000
001068  2  0A           	asl
001069  2  26 03        	rol r0H
00106B  2  85 02        	sta r0L 					; r0 = first tile of the tilemap in the row
00106D  2               								; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
00106D  2               
00106D  2  A5 05            lda r1H
00106F  2  4A           	lsr
001070  2  66 04        	ror r1L
001072  2  4A           	lsr
001073  2  66 04        	ror r1L
001075  2  4A           	lsr
001076  2  66 04        	ror r1L
001078  2  4A           	lsr
001079  2  66 04        	ror r1L
00107B  2  85 05        	sta r1H 					; r1 = tile X in the row
00107D  2               								; sprite X /16 (convert to tile X)
00107D  2               
00107D  2  18           	clc
00107E  2  A5 02        	lda r0L
001080  2  65 04        	adc r1L
001082  2  85 02        	sta r0L
001084  2  A5 03        	lda r0H
001086  2  65 05        	adc r1H
001088  2  85 03        	sta r0H						; r0 = tile position in the tilemap
00108A  2               
00108A  2  18           	clc
00108B  2  A5 02        	lda r0L
00108D  2  69 00        	adc #<COLLISION_MAP
00108F  2  85 02        	sta r0L						; r0 = tile position in the memory tilemap
001091  2  A5 03        	lda r0H
001093  2  69 A0        	adc #>COLLISION_MAP
001095  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
001097  2  60           	rts
001098  2               
001098  2               .endscope
001098  2               
001098  1               .include "entities.asm"
001098  2               ;-----------------------------------------------------------------------------
001098  2               ;/////////////////////////////////////////////////////////////////////////////
001098  2               ;           start ENTITY code
001098  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001098  2               ;-----------------------------------------------------------------------------
001098  2               
001098  2               .struct Entity
001098  2                   spriteID    .byte   ; ID of the vera sprite
001098  2               	status		.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
001098  2                   levelx      .word   ; level position
001098  2                   levely      .word
001098  2                   px          .word   ; screen position
001098  2                   py          .word
001098  2               	falling_ticks .word	; ticks since the player is falling (thing t in gravity)
001098  2               	delta_x		.byte	; when driving by phisics, original delta_x value
001098  2               	bPhysics	.byte	; physics engine has to be activated or not
001098  2               	collision_addr	.word	; cached @ of the collision equivalent of the center of the player
001098  2               .endstruct
001098  2               
001098  2               ENTITY_ZP = $0065
001098  2               
001098  2               .scope Entities
001098  2               
001098  2               ; pointers to entites
001098  2  00 00 00 00  indexLO:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
00109C  2  00 00 00 00  
0010A0  2  00 00 00 00  
0010B8  2  00 00 00 00  indexHI:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0010BC  2  00 00 00 00  
0010C0  2  00 00 00 00  
0010D8  2  00 00 00 00  indexUse:	.word $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
0010DC  2  00 00 00 00  
0010E0  2  00 00 00 00  
0010F8  2               
0010F8  2               ;************************************************
0010F8  2               ; add an entity
0010F8  2               ;   input: a = lo-byte of entity address
0010F8  2               ;		   y = hi-byte
0010F8  2               ;			x = entityID
0010F8  2               register:
0010F8  2               	.ifdef DEBUG
0010F8  2               	cpx .sizeof(indexLO)
0010F8  2               	bcs :+
0010F8  2               	stp				; detect out of bound
0010F8  2               :
0010F8  2               	.endif
0010F8  2  9D 98 10     	sta indexLO,x
0010FB  2  98           	tya
0010FC  2  9D B8 10     	sta indexHI,x
0010FF  2               
0010FF  2  A9 01        	lda #01
001101  2  9D D8 10     	sta indexUse,x	; entitie is activate
001104  2  60           	rts
001105  2               
001105  2               ;************************************************
001105  2               ; init all attributes of an entity
001105  2               ;   input: X = entityID
001105  2               ;	output: r3 = entity address
001105  2               ;
001105  2               get_pointer:
001105  2               	.ifdef DEBUG
001105  2               	cpx .sizeof(indexLO)
001105  2               	bcs :+
001105  2               	stp				; detect out of bound
001105  2               :
001105  2               	lda indexUse, x
001105  2               	bne :+
001105  2               	stp				; detect inactive entities
001105  2               :
001105  2               	.endif
001105  2  BD 98 10     	lda indexLO, x
001108  2  85 08        	sta r3
00110A  2  BD B8 10     	lda indexHI, x
00110D  2  85 08        	sta r3
00110F  2  60           	rts
001110  2               
001110  2               ;************************************************
001110  2               ; init all attributes of an entity
001110  2               ;   input: X = entityID
001110  2               ;
001110  2               initIndex:
001110  2               	.ifdef DEBUG
001110  2               	cpx .sizeof(indexLO)
001110  2               	bcs :+
001110  2               	stp				; detect out of bound
001110  2               :
001110  2               	lda indexUse, x
001110  2               	bne :+
001110  2               	stp				; detect inactive entities
001110  2               :
001110  2               	.endif
001110  2  BD 98 10     	lda indexLO, x
001113  2  85 08        	sta r3
001115  2  BD B8 10     	lda indexHI, x
001118  2  85 08        	sta r3
00111A  2               
00111A  2               	; pass through
00111A  2               
00111A  2               ;************************************************
00111A  2               ; init all attributes of an entity
00111A  2               ;   input: R3 = start of the object
00111A  2               ;
00111A  2               init:
00111A  2               	.ifdef DEBUG
00111A  2               	cmp r3H
00111A  2               	bne :+
00111A  2               	cmp r3L
00111A  2               	bne :+
00111A  2               
00111A  2               	stp				; detect NULL pointer
00111A  2               :
00111A  2               	.endif
00111A  2               
00111A  2  A9 00            lda #00
00111C  2  A0 00            ldy #Entity::spriteID
00111E  2  91 08        	sta (r3), y
001120  2  A0 01            ldy #Entity::status
001122  2  A9 00        	lda #STATUS_WALKING_IDLE
001124  2  91 08        	sta (r3), y
001126  2  A9 00            lda #00
001128  2  A0 0A            ldy #Entity::falling_ticks
00112A  2  91 08        	sta (r3),y
00112C  2  C8               iny
00112D  2  91 08        	sta (r3),y
00112F  2  C8               iny
001130  2  91 08        	sta (r3),y 	; delta_x
001132  2  A0 06            ldy #Entity::px
001134  2  91 08        	sta (r3),y
001136  2  C8               iny
001137  2  91 08        	sta (r3),y
001139  2  A0 08            ldy #Entity::py
00113B  2  91 08        	sta (r3),y
00113D  2  C8               iny
00113E  2  91 08        	sta (r3),y
001140  2  A0 02            ldy #Entity::levelx
001142  2  91 08        	sta (r3),y
001144  2  C8               iny
001145  2  91 08        	sta (r3),y
001147  2  A0 04            ldy #Entity::levely
001149  2  91 08        	sta (r3),y
00114B  2  C8               iny
00114C  2  91 08        	sta (r3),y
00114E  2  A9 01        	lda #01
001150  2  A0 0D        	ldy #Entity::bPhysics
001152  2  91 08        	sta (r3),y 	; bPhysics = TRUE upon creation
001154  2  60               rts
001155  2               
001155  2               ;************************************************
001155  2               ; change  position of the sprite (level view) => (screen view)
001155  2               ;   input: R3 = start of the object
001155  2               ;
001155  2               set_position:
001155  2  84 65        	sty ENTITY_ZP			; save Y
001157  2               
001157  2                   ; screenX = levelX - layer1_scroll_x
001157  2  A0 02            ldy #(Entity::levelx)
001159  2  38               sec
00115A  2  B1 08            lda (r3), y
00115C  2  ED 37 9F         sbc VERA_L1_hscrolllo
00115F  2  85 02            sta r0L
001161  2  C8               iny
001162  2  B1 08            lda (r3), y
001164  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
001167  2  85 03            sta r0H
001169  2               
001169  2                   ; screenY = levelY - layer1_scroll_y
001169  2  A0 04            ldy #(Entity::levely)
00116B  2  38               sec
00116C  2  B1 08            lda (r3), y
00116E  2  ED 39 9F         sbc VERA_L1_vscrolllo
001171  2  85 04            sta r1L
001173  2  C8               iny
001174  2  B1 08            lda (r3), y
001176  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
001179  2  85 05            sta r1H
00117B  2               
00117B  2                   ; save the screen positions in the object
00117B  2  A0 06            ldy #(Entity::px)
00117D  2  A5 02            lda r0L
00117F  2  91 08            sta (r3), y
001181  2  C8               iny
001182  2  A5 03            lda r0H
001184  2  91 08            sta (r3), y
001186  2               
001186  2  A0 08            ldy #(Entity::py)
001188  2  A5 04            lda r1L
00118A  2  91 08            sta (r3), y
00118C  2  C8               iny
00118D  2  A5 05            lda r1H
00118F  2  91 08            sta (r3), y
001191  2               
001191  2                   ; get the sprite ID
001191  2  B2 08        	lda (r3)                        ; sprite id
001193  2  A8               tay
001194  2               
001194  2                   ; adresse of the and px, py attributes
001194  2  18               clc
001195  2  A5 08            lda r3L
001197  2  69 06            adc #(Entity::px)
001199  2  85 02            sta r0L
00119B  2  A5 09            lda r3H
00119D  2  69 00            adc #00
00119F  2  85 03            sta r0H
0011A1  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
0011A4  2               
0011A4  2  A4 65        	ldy ENTITY_ZP		; restore Y
0011A6  2  60               rts
0011A7  2               
0011A7  2               ;************************************************
0011A7  2               ; set position using an screen relative value
0011A7  2               ;   input:  r3 = address of entity
0011A7  2               ;
0011A7  2               position:
0011A7  2  18           	clc
0011A8  2  A5 08        	lda r3L
0011AA  2  69 06        	adc #Entity::px
0011AC  2  85 02        	sta r0L
0011AE  2  A5 09        	lda r3H
0011B0  2  69 00        	adc #00
0011B2  2  85 03        	sta r0H
0011B4  2  B2 08        	lda (r3)						; spriteID
0011B6  2  A8           	tay
0011B7  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
0011BA  2  60           	rts
0011BB  2               
0011BB  2               ;************************************************
0011BB  2               ; change screen position of all entities when the layer moves (level view) => (screen view)
0011BB  2               ;
0011BB  2               fix_positions:
0011BB  2  A2 00        	ldx #00
0011BD  2               
0011BD  2               @loop:
0011BD  2  BD D8 10     	lda indexUse,x
0011C0  2  F0 0D        	beq @next
0011C2  2               
0011C2  2  BD B8 10     	lda indexHI,x
0011C5  2  85 09        	sta r3H
0011C7  2  BD 98 10     	lda indexLO,x
0011CA  2  85 08        	sta r3L
0011CC  2               
0011CC  2  20 55 11         jsr Entities::set_position
0011CF  2               
0011CF  2               @next:
0011CF  2  E8           	inx
0011D0  2  E0 20        	cpx #(.sizeof(indexLO))
0011D2  2  D0 E9            bne @loop
0011D4  2               
0011D4  2               @return:
0011D4  2  60               rts
0011D5  2               
0011D5  2               ;************************************************
0011D5  2               ; increase entity X position
0011D5  2               ;   input: R3 = start of the object
0011D5  2               ;
0011D5  2               position_x_inc:
0011D5  2               	; move the absolute position levelx + 1
0011D5  2  A0 02        	ldy #Entity::levelx
0011D7  2  B1 08            lda (r3),y
0011D9  2  1A               inc
0011DA  2  91 08            sta (r3),y
0011DC  2  D0 06            bne :+
0011DE  2  C8               iny
0011DF  2  B1 08            lda (r3),y
0011E1  2  1A               inc
0011E2  2  91 08            sta (r3),y
0011E4  2               :
0011E4  2               
0011E4  2  A0 06        	ldy #Entity::px
0011E6  2  B1 08            lda (r3),y
0011E8  2  1A               inc
0011E9  2  91 08            sta (r3),y
0011EB  2  D0 06            bne :+
0011ED  2  C8               iny
0011EE  2  B1 08        	lda (r3),y
0011F0  2  1A           	inc
0011F1  2  91 08        	sta (r3),y
0011F3  2               :
0011F3  2  60           	rts
0011F4  2               
0011F4  2               ;************************************************
0011F4  2               ; decrease entity X position
0011F4  2               ;   input: R3 = start of the object
0011F4  2               ;
0011F4  2               position_x_dec:
0011F4  2  A0 02        	ldy #Entity::levelx
0011F6  2  B1 08            lda (r3),y
0011F8  2  3A               dec
0011F9  2  91 08            sta (r3),y
0011FB  2  C9 FF            cmp #$ff
0011FD  2  D0 06            bne :+
0011FF  2  C8               iny
001200  2  B1 08            lda (r3),y
001202  2  3A               dec
001203  2  91 08            sta (r3),y
001205  2               :
001205  2               
001205  2  A0 06        	ldy #Entity::px
001207  2  B1 08            lda (r3),y
001209  2  3A               dec
00120A  2  91 08            sta (r3),y
00120C  2  C9 FF            cmp #$ff
00120E  2  D0 06            bne :+
001210  2  C8               iny
001211  2  B1 08        	lda (r3),y
001213  2  3A           	dec
001214  2  91 08        	sta (r3),y
001216  2               :
001216  2  60           	rts
001217  2               
001217  2               ;************************************************
001217  2               ; increase entity Y position
001217  2               ;   input: R3 = start of the object
001217  2               ;
001217  2               position_y_inc:
001217  2               	; move the absolute position levelx + 1
001217  2  A0 04        	ldy #Entity::levely
001219  2  B1 08            lda (r3),y
00121B  2  1A               inc
00121C  2  91 08            sta (r3),y
00121E  2  D0 06            bne :+
001220  2  C8               iny
001221  2  B1 08            lda (r3),y
001223  2  1A               inc
001224  2  91 08            sta (r3),y
001226  2               :
001226  2               
001226  2  A0 08        	ldy #Entity::py
001228  2  B1 08            lda (r3),y
00122A  2  1A               inc
00122B  2  91 08            sta (r3),y
00122D  2  D0 06            bne :+
00122F  2  C8               iny
001230  2  B1 08        	lda (r3),y
001232  2  1A           	inc
001233  2  91 08        	sta (r3),y
001235  2               :
001235  2  60           	rts
001236  2               
001236  2               ;************************************************
001236  2               ; decrease entity X position
001236  2               ;   input: R3 = start of the object
001236  2               ;
001236  2               position_y_dec:
001236  2  A0 04        	ldy #Entity::levely
001238  2  B1 08            lda (r3),y
00123A  2  3A               dec
00123B  2  91 08            sta (r3),y
00123D  2  C9 FF            cmp #$ff
00123F  2  D0 06            bne :+
001241  2  C8               iny
001242  2  B1 08            lda (r3),y
001244  2  3A               dec
001245  2  91 08            sta (r3),y
001247  2               :
001247  2               
001247  2  A0 08        	ldy #Entity::py
001249  2  B1 08            lda (r3),y
00124B  2  3A               dec
00124C  2  91 08            sta (r3),y
00124E  2  C9 FF            cmp #$ff
001250  2  D0 06            bne :+
001252  2  C8               iny
001253  2  B1 08        	lda (r3),y
001255  2  3A           	dec
001256  2  91 08        	sta (r3),y
001258  2               :
001258  2  60           	rts
001259  2               
001259  2               ;************************************************
001259  2               ;	compute the number of tiles covered by the boundingbox
001259  2               ; input: r3 pointer to entity
001259  2               ; output: r1L : number of tiles height
001259  2               ;			X = r1H : number of tiles width
001259  2               ;			Y = r2L : index of the first tile to test
001259  2               ;
001259  2               bbox_coverage:
001259  2               	; X = how many column of tiles to test
001259  2  A0 02            ldy #Entity::levelx
00125B  2  B1 08        	lda (r3),y
00125D  2  29 0F        	and #%00001111
00125F  2  C9 08        	cmp #8
001261  2  F0 0C        	beq @one_tile
001263  2  30 14        	bmi @two_tiles_straight				; if X < 8, test as if int
001265  2               @two_tiles_right:
001265  2  A2 02        	ldx #02								; test 2 column ( y % 16 <> 0)
001267  2  86 05        	stx r1H
001269  2  A0 01        	ldy #01								; starting on row +1
00126B  2  84 06        	sty r2L
00126D  2  80 12        	bra @test_lines
00126F  2               @one_tile:
00126F  2  A2 01        	ldx #01								; test 1 column ( y % 16  == 8)
001271  2  86 05        	stx r1H
001273  2  A0 01        	ldy #01								; starting on row +1
001275  2  84 06        	sty r2L
001277  2  80 08        	bra @test_lines
001279  2               @two_tiles_straight:
001279  2  A2 02        	ldx #02								; test 2 columns ( y % 16 == 0)
00127B  2  86 05        	stx r1H
00127D  2  A0 00        	ldy #00								; test on row  0 ( x % 16 != 0)
00127F  2  84 06        	sty r2L
001281  2               
001281  2               @test_lines:
001281  2               	; X = how many lines of tiles to test
001281  2  A0 04            ldy #Entity::levely
001283  2  B1 08        	lda (r3),y
001285  2  29 0F        	and #%00001111
001287  2  D0 05        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
001289  2               @yint:
001289  2  A9 02        	lda #02					; test 2 lines ( y % 16 == 0)
00128B  2  85 04        	sta r1L
00128D  2  60           	rts
00128E  2               @yfloat:
00128E  2  A9 03        	lda #03					; test 3 rows ( y % 16 <> 0)
001290  2  85 04        	sta r1L
001292  2  60           	rts
001293  2               
001293  2               ;************************************************
001293  2               ; check collision on the height
001293  2               ; input: r3 pointer to entity
001293  2               ; return:;	A = vaule of the collision
001293  2               ;	        ZERO = no collision
001293  2               ;
001293  2               check_collision_height:
001293  2               	; only test if we are 'centered'
001293  2  A0 02            ldy #Entity::levelx
001295  2  B1 08        	lda (r3),y
001297  2  29 0F        	and #%00001111
001299  2  C9 08        	cmp #08
00129B  2  D0 35        	bne @no_collision
00129D  2               
00129D  2  A0 0E            ldy #Entity::collision_addr
00129F  2  B1 08        	lda (r3),y
0012A1  2  85 02        	sta r0L
0012A3  2  C8               iny
0012A4  2  B1 08        	lda (r3),y
0012A6  2  85 03        	sta r0H
0012A8  2               
0012A8  2  20 59 12     	jsr bbox_coverage
0012AB  2  A6 04        	ldx r1L				; tiles height
0012AD  2  A5 06        	lda r2L
0012AF  2  18           	clc
0012B0  2  65 6A        	adc ENTITY_ZP + 5
0012B2  2  A8           	tay
0012B3  2               
0012B3  2               @test_line:
0012B3  2  B1 02        	lda (r0L),y
0012B5  2  F0 11        	beq @test_next_line
0012B7  2               
0012B7  2               	; some tiles are not real collision
0012B7  2  84 30        	sty $30
0012B9  2  A8           	tay
0012BA  2  B9 BF 1E     	lda tiles_attributes,y
0012BD  2  89 02        	bit #TILE_ATTR::SOLID_WALL
0012BF  2  F0 05        	beq @test_next_line1
0012C1  2  A4 30        	ldy $30
0012C3  2  B1 02        	lda (r0L),y
0012C5  2  60           	rts
0012C6  2               
0012C6  2               @test_next_line1:
0012C6  2  A4 30        	ldy $30
0012C8  2               
0012C8  2               @test_next_line:
0012C8  2  CA           	dex
0012C9  2  F0 07        	beq @no_collision
0012CB  2  98           	tya
0012CC  2  18           	clc
0012CD  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
0012CF  2  A8           	tay
0012D0  2  80 E1        	bra @test_line					; LADDERS can be traversed
0012D2  2               
0012D2  2               @no_collision:						; force a no collision
0012D2  2  A9 00        	lda #00
0012D4  2               @return:
0012D4  2  60           	rts
0012D5  2               
0012D5  2               ;************************************************
0012D5  2               ; check collision on the right
0012D5  2               ; input: r3 pointer to entity
0012D5  2               ; output: A = value of the collision, or 00/01 for sprites
0012D5  2               ;			ZERO = no collision
0012D5  2               ;
0012D5  2               check_collision_right:
0012D5  2  A9 01        	lda #$01
0012D7  2  85 6A        	sta ENTITY_ZP + 5
0012D9  2  20 93 12     	jsr check_collision_height
0012DC  2  D0 11        	bne @return						; if tile collision, return the tile value
0012DE  2               
0012DE  2  B2 08        	lda (r3)
0012E0  2  AA               tax
0012E1  2  A9 06        	lda #(02 | 04)
0012E3  2  A0 01        	ldy #01
0012E5  2  20 D1 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right, if a=$ff => nocollision
0012E8  2  30 03        	bmi @no_collision
0012EA  2  A9 01        	lda #01
0012EC  2  60           	rts
0012ED  2               
0012ED  2               @no_collision:
0012ED  2  A9 00        	lda #00
0012EF  2               @return:
0012EF  2  60           	rts
0012F0  2               
0012F0  2               ;************************************************
0012F0  2               ; check collision on the left
0012F0  2               ; input: r3 pointer to entity
0012F0  2               ; output: A = value of the collision, or 00/01 for sprites
0012F0  2               ;			ZERO = no collision
0012F0  2               ;
0012F0  2               check_collision_left:
0012F0  2  A9 FF        	lda #$ff
0012F2  2  85 6A        	sta ENTITY_ZP + 5
0012F4  2  20 93 12     	jsr check_collision_height
0012F7  2  D0 11        	bne @return
0012F9  2               
0012F9  2  B2 08        	lda (r3)
0012FB  2  AA               tax
0012FC  2  A9 0A        	lda #(02 | 08)
0012FE  2  A0 01        	ldy #01
001300  2  20 D1 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001303  2  30 03        	bmi @no_collision
001305  2  A9 01        	lda #01
001307  2  60           	rts
001308  2               
001308  2               @no_collision:
001308  2  A9 00        	lda #00
00130A  2               @return:
00130A  2  60           	rts
00130B  2               
00130B  2               ;************************************************
00130B  2               ; check collision down
00130B  2               ;	collision surface to test is 16 pixels around the mid X
00130B  2               ; input: r3 pointer to entity
00130B  2               ; output : Z = no collision
00130B  2               ;
00130B  2               check_collision_down:
00130B  2  A0 04            ldy #Entity::levely
00130D  2  B1 08        	lda (r3),y               	; if the player is inbetween 2 tiles there can be no collision
00130F  2  29 0F        	and #%00001111
001311  2  F0 12        	beq @real_test
001313  2               
001313  2               @check_sprites:
001313  2  B2 08            lda (r3)
001315  2  AA               tax
001316  2  A9 05        	lda #(01 | 04)
001318  2  A0 01        	ldy #01
00131A  2  20 D1 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
00131D  2  30 03        	bmi @no_collision
00131F  2  A9 01        	lda #01
001321  2  60           	rts
001322  2               @no_collision:
001322  2  A9 00        	lda #00
001324  2  60           	rts
001325  2               @real_test:
001325  2  A0 0E            ldy #Entity::collision_addr
001327  2  B1 08        	lda (r3),y
001329  2  85 02        	sta r0L
00132B  2  C8               iny
00132C  2  B1 08        	lda (r3),y
00132E  2  85 03        	sta r0H
001330  2               
001330  2  20 59 12     	jsr bbox_coverage
001333  2  A5 06        	lda r2L
001335  2  18           	clc
001336  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001338  2  A8           	tay
001339  2               
001339  2               @test_colum:
001339  2  B1 02        	lda (r0L),y
00133B  2  F0 0C        	beq @next_colum							; empty tile, test the next one
00133D  2               
00133D  2  84 30        	sty $30
00133F  2  A8           	tay
001340  2  B9 BF 1E     	lda tiles_attributes,y
001343  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001345  2  D0 08        	bne @collision							; considere slopes as empty
001347  2  A4 30        	ldy $30
001349  2               
001349  2               @next_colum:
001349  2  CA           	dex
00134A  2  F0 C7        	beq @check_sprites
00134C  2  C8           	iny
00134D  2  80 EA        	bra @test_colum
00134F  2               @collision:
00134F  2  A9 01        	lda #01
001351  2  60           	rts
001352  2               
001352  2               ;************************************************
001352  2               ; check collision up
001352  2               ;	collision surface to test is 16 pixels around the mid X
001352  2               ; input: r3 pointer to entity
001352  2               ;		r0 : @ of current tile the top-left corner of the player sprite
001352  2               ; output : Z = no collision
001352  2               ;
001352  2               check_collision_up:
001352  2  38           	sec
001353  2  A0 0E            ldy #Entity::collision_addr
001355  2  B1 08        	lda (r3),y
001357  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001359  2  85 02        	sta r0L
00135B  2  C8               iny
00135C  2  B1 08        	lda (r3),y
00135E  2  E9 00        	sbc #0
001360  2  85 03        	sta r0H
001362  2               
001362  2               	; X = how many column of tiles to test
001362  2  A0 02            ldy #Entity::levelx
001364  2  B1 08        	lda (r3),y
001366  2  29 0F        	and #%00001111
001368  2  F0 0A        	beq @xint				; if player is not on a multiple of 16 (tile size)
00136A  2               @xfloat:
00136A  2  C9 08        	cmp #8
00136C  2  30 06        	bmi @xint
00136E  2  A2 01        	ldx #1					; test 1 column ( y % 16 <> 0)
001370  2  A0 01        	ldy #1					; starting at colum + 1
001372  2  80 15        	bra @test_colum
001374  2               @xint:
001374  2  A2 02        	ldx #2					; test 2 columns ( y % 16 == 0)
001376  2  A0 00        	ldy #0					; starting at colum
001378  2               
001378  2               @test_y:
001378  2               	; Y = how many tile rows to test
001378  2  84 65            sty ENTITY_ZP
00137A  2  A0 04            ldy #Entity::levely
00137C  2  B1 08        	lda (r3),y
00137E  2  29 0F        	and #%00001111
001380  2  F0 07        	beq @yint				; if player is not on a multiple of 16 (tile size)
001382  2               @yfloat:
001382  2  A5 65        	lda ENTITY_ZP
001384  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; test on (row -1) +1 ( x % 16 != 0) + column
001386  2  A8           	tay
001387  2  80 00        	bra @test_colum
001389  2               @yint:
001389  2               
001389  2               @test_colum:
001389  2  B1 02        	lda (r0L),y							; left side
00138B  2  F0 0C        	beq @next_column
00138D  2               
00138D  2  84 65        	sty ENTITY_ZP
00138F  2  A8           	tay
001390  2  B9 BF 1E     	lda tiles_attributes,y
001393  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001395  2  D0 08        	bne @return1
001397  2  A4 65        	ldy ENTITY_ZP
001399  2               
001399  2               @next_column:
001399  2  CA           	dex
00139A  2  F0 05        	beq @return
00139C  2  C8           	iny
00139D  2  80 EA        	bra @test_colum
00139F  2               @return1:
00139F  2  A9 01        	lda #01
0013A1  2               @return:
0013A1  2  60           	rts
0013A2  2               
0013A2  2               ;************************************************
0013A2  2               ; check if the player feet is ABOVE a slope tile
0013A2  2               ;   input: 	r0 pointer to player position on collision map
0013A2  2               ;			r3 pointer to entity
0013A2  2               ;	        Y = feet position tested (vs r0)
0013A2  2               ;	modify: player_on_slop
0013A2  2               ;	return: Z = slop
0013A2  2               ;
0013A2  2               if_above_slop:
0013A2  2  9C FE 1F     	stz player_on_slop				; no slope
0013A5  2               
0013A5  2  98           	tya
0013A6  2  18           	clc
0013A7  2  69 20        	adc #LEVEL_TILES_WIDTH
0013A9  2  A8           	tay								; test BELOW feet level
0013AA  2  B1 02        	lda (r0),y
0013AC  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0013AE  2  F0 0A        	beq @above_slope
0013B0  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0013B2  2  F0 06        	beq @above_slope
0013B4  2               @no_slope:
0013B4  2  A9 00        	lda #0
0013B6  2  8D FE 1F     	sta player_on_slop
0013B9  2  60           	rts
0013BA  2               @above_slope:
0013BA  2  8D FE 1F     	sta player_on_slop
0013BD  2  60           	rts
0013BE  2               
0013BE  2               ;************************************************
0013BE  2               ; check if the entity base is exactly on a slope tile
0013BE  2               ;   input:  r0 pointer to player position on collision map
0013BE  2               ;			r3 pointer to entity
0013BE  2               ;	modify: player_on_slop
0013BE  2               ;	return: Z = slop
0013BE  2               ;			Y = feet position tested (vs r0)
0013BE  2               ;
0013BE  2               if_on_slop:
0013BE  2  9C FE 1F     	stz player_on_slop				; no slope
0013C1  2               
0013C1  2  20 59 12     	jsr bbox_coverage
0013C4  2               
0013C4  2  18           	clc
0013C5  2  A5 06        	lda r2L
0013C7  2  A6 04        	ldx r1L
0013C9  2  CA           	dex
0013CA  2               :
0013CA  2  69 20        	adc #LEVEL_TILES_WIDTH
0013CC  2  CA           	dex
0013CD  2  D0 FB        	bne :-
0013CF  2  85 67        	sta ENTITY_ZP + 2					; position of the feet tiles
0013D1  2               
0013D1  2  A0 02            ldy #Entity::levelx
0013D3  2  B1 08        	lda (r3),y
0013D5  2  29 0F        	and #%00001111
0013D7  2  C9 08        	cmp #08
0013D9  2  10 02        	bpl :+
0013DB  2  E6 67        	inc ENTITY_ZP + 2
0013DD  2               :
0013DD  2  A4 67            ldy ENTITY_ZP + 2
0013DF  2               	; check if player feet is ON a slop
0013DF  2  B1 02        	lda (r0),y						; test ON feet level
0013E1  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0013E3  2  F0 04        	beq @on_slope
0013E5  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0013E7  2  D0 06        	bne @no_slope
0013E9  2               @on_slope:
0013E9  2  B1 02        	lda (r0),y						; test ON feet level
0013EB  2  8D FE 1F     	sta player_on_slop
0013EE  2  60           	rts
0013EF  2               
0013EF  2               @no_slope:
0013EF  2  A9 00        	lda #0
0013F1  2  8D FE 1F     	sta player_on_slop
0013F4  2  60           	rts
0013F5  2               
0013F5  2               ;************************************************
0013F5  2               ; Handle entity physics when jumping or falling
0013F5  2               ;   input: r3 pointer to entity
0013F5  2               ;
0013F5  2               physics:
0013F5  2  A0 0D        	ldy #Entity::bPhysics
0013F7  2  B1 08        	lda (r3),y
0013F9  2  D0 01        	bne @do_it
0013FB  2  60           	rts
0013FC  2               
0013FC  2               @do_it:
0013FC  2  A0 04        	ldy #Entity::levely
0013FE  2  B1 08        	lda (r3),y
001400  2  85 02        	sta r0L
001402  2  C8           	iny
001403  2  B1 08        	lda (r3),y
001405  2  85 03        	sta r0H												; r0 = sprite absolute position Y in the level
001407  2               
001407  2  A0 02        	ldy #Entity::levelx
001409  2  B1 08        	lda (r3),y
00140B  2  85 04        	sta r1L
00140D  2  C8           	iny
00140E  2  B1 08        	lda (r3),y
001410  2  85 05        	sta r1H												; r1 = sprite absolute position X in the level
001412  2               
001412  2  20 64 10     	jsr Tilemap::get_collision_addr
001415  2               
001415  2               	; cache the collision @
001415  2  A0 0E        	ldy #Entity::collision_addr
001417  2  A5 02        	lda r0L
001419  2  91 08        	sta (r3),y
00141B  2  C8           	iny
00141C  2  A5 03        	lda r0H
00141E  2  91 08        	sta (r3),y
001420  2               
001420  2  A0 01        	ldy #Entity::status
001422  2  B1 08        	lda (r3),y
001424  2  C9 02        	cmp #STATUS_CLIMBING
001426  2  F0 0B        	beq @return1
001428  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
00142A  2  F0 07        	beq @return1
00142C  2  C9 05        	cmp #STATUS_JUMPING
00142E  2  D0 04        	bne @fall
001430  2  4C 28 15     	jmp @jump
001433  2               @return1:
001433  2  60           	rts
001434  2               
001434  2               	;
001434  2               	; deal with gravity driven falling
001434  2               	;
001434  2               @fall:
001434  2               .ifdef DEBUG
001434  2               	CHECK_DEBUG
001434  2               .endif
001434  2  20 0B 13     	jsr check_collision_down
001437  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
001439  2  4C 15 15     	jmp @sit_on_solid				; solid tile below the player that is not a slope
00143C  2               
00143C  2               @check_on_slope:
00143C  2  20 BE 13     	jsr if_on_slop
00143F  2  F0 25        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
001441  2               
001441  2               	; player is on a slope
001441  2               @on_slope:
001441  2  A0 02        	ldy #Entity::levelx
001443  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001445  2  F0 0A        	beq @slope_left
001447  2               @slope_right:
001447  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
001449  2  29 0F        	and #%00001111
00144B  2  49 0F        	eor #%00001111					; X = 0 => Y can go up to 15
00144D  2  85 30        	sta $30
00144F  2  80 08        	bra @slope_y
001451  2               @slope_left:
001451  2  B1 08        	lda (r3),y						; X position defines how far down Y can go
001453  2  29 0F        	and #%00001111
001455  2  85 30        	sta $30
001457  2  80 00        	bra @slope_y
001459  2               @slope_y:
001459  2  A0 04        	ldy #Entity::levely
00145B  2  B1 08        	lda (r3),y
00145D  2  29 0F        	and #%00001111
00145F  2  C5 30        	cmp $30
001461  2  30 03        	bmi @no_collision_down
001463  2  4C 15 15     	jmp @sit_on_solid
001466  2               
001466  2               @no_collision_down:
001466  2               	; if the player is already falling, increase t
001466  2  A0 01        	ldy #Entity::status
001468  2  B1 08        	lda (r3),y
00146A  2  C9 04        	cmp #STATUS_FALLING
00146C  2  F0 0F        	beq @increase_ticks
00146E  2               
00146E  2               	; start the falling timer
00146E  2  A9 04        	lda #STATUS_FALLING
001470  2  91 08        	sta (r3),y
001472  2  A9 08        	lda #FALL_LO_TICKS
001474  2  A0 0A        	ldy #Entity::falling_ticks
001476  2  91 08        	sta (r3),y						; reset t
001478  2  C8           	iny
001479  2  A9 00        	lda #00
00147B  2  91 08        	sta (r3),y
00147D  2               @increase_ticks:
00147D  2  A0 0A        	ldy #Entity::falling_ticks
00147F  2  B1 08        	lda (r3),y									; increase the timer every 10 screen refresh
001481  2  3A           	dec
001482  2  91 08        	sta (r3),y
001484  2  D0 0A        	bne @drive_fall
001486  2  A9 08        	lda #FALL_LO_TICKS
001488  2  91 08        	sta (r3),y
00148A  2  C8           	iny
00148B  2  B1 08        	lda (r3),y
00148D  2  1A           	inc
00148E  2  91 08        	sta (r3),y
001490  2               
001490  2               @drive_fall:
001490  2  A0 0B        	ldy #Entity::falling_ticks + 1
001492  2  B1 08        	lda (r3),y
001494  2  F0 77        	beq @fall_once
001496  2  85 14        	sta r9L
001498  2               
001498  2               	; move the player down #(falling_ticks + 1)
001498  2               @loop_fall:
001498  2  20 17 12     	jsr position_y_inc
00149B  2  20 A7 11     	jsr position					; change position of the bound sprite
00149E  2               
00149E  2               	; refresh the collision addr
00149E  2  A0 04        	ldy #Entity::levely
0014A0  2  B1 08        	lda (r3),y
0014A2  2  85 02        	sta r0L
0014A4  2  C8           	iny
0014A5  2  B1 08        	lda (r3),y
0014A7  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
0014A9  2               
0014A9  2  A0 02        	ldy #Entity::levelx
0014AB  2  B1 08        	lda (r3),y
0014AD  2  85 04        	sta r1L
0014AF  2  C8           	iny
0014B0  2  B1 08        	lda (r3),y
0014B2  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
0014B4  2               
0014B4  2  20 64 10     	jsr Tilemap::get_collision_addr
0014B7  2               
0014B7  2  A0 0E        	ldy #Entity::collision_addr
0014B9  2  A5 02        	lda r0L
0014BB  2  91 08        	sta (r3),y
0014BD  2  C8           	iny
0014BE  2  A5 03        	lda r0H
0014C0  2  91 08        	sta (r3),y
0014C2  2               
0014C2  2               	; test reached solid ground
0014C2  2  20 0B 13     	jsr check_collision_down
0014C5  2  D0 4E        	bne @sit_on_solid
0014C7  2               
0014C7  2               @loop_fall_no_collision:
0014C7  2  C6 14        	dec r9L
0014C9  2  D0 CD        	bne @loop_fall					; take t in count for gravity
0014CB  2               
0014CB  2               @apply_delta_x:
0014CB  2  A0 0C        	ldy #Entity::delta_x
0014CD  2  B1 08        	lda (r3),y
0014CF  2  F0 56        	beq @return						; delta_x == 0 => entity is not moving left or right
0014D1  2  30 1F        	bmi @fall_left					; delta_x < 0 => move left
0014D3  2               
0014D3  2               @fall_right:
0014D3  2               	; cannot move if we are at the right border
0014D3  2  A0 02        	ldy #Entity::levelx
0014D5  2  B1 08        	lda (r3),y
0014D7  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
0014D9  2  D0 07        	bne @test_fall_collision_right
0014DB  2  C8           	iny
0014DC  2  B1 08        	lda (r3),y
0014DE  2  C9 01        	cmp #>(LEVEL_WIDTH - 32)
0014E0  2  F0 05        	beq @fcollision_right			; we are at the level limit
0014E2  2               @test_fall_collision_right:
0014E2  2  20 D5 12     	jsr check_collision_right
0014E5  2  F0 07        	beq @no_fcollision_right
0014E7  2               @fcollision_right:
0014E7  2  A9 00        	lda #00
0014E9  2  A0 0C        	ldy #Entity::delta_x
0014EB  2  91 08        	sta (r3),y						; cancel deltaX to transform to vertical movement
0014ED  2  60           	rts
0014EE  2               @no_fcollision_right:
0014EE  2  20 D5 11     	jsr position_x_inc
0014F1  2  60           	rts
0014F2  2               
0014F2  2               @fall_left:
0014F2  2               	; cannot move if we are at the left border
0014F2  2  A0 03        	ldy #Entity::levelx + 1
0014F4  2  B1 08        	lda (r3),y
0014F6  2  D0 05        	bne @test_fall_collision_left
0014F8  2  88           	dey
0014F9  2  B1 08        	lda (r3),y
0014FB  2  F0 05        	beq @fcollision_left
0014FD  2               @test_fall_collision_left:
0014FD  2  20 F0 12     	jsr check_collision_left
001500  2  F0 07        	beq @no_fcollision_left
001502  2               @fcollision_left:
001502  2  A9 00        	lda #00
001504  2  A0 0C        	ldy #Entity::delta_x
001506  2  91 08        	sta (r3),y				 		; cancel deltaX to transform to vertical movement
001508  2  60           	rts
001509  2               @no_fcollision_left:
001509  2  20 F4 11     	jsr position_x_dec
00150C  2  60           	rts
00150D  2               
00150D  2               @fall_once:
00150D  2  20 17 12     	jsr position_y_inc
001510  2  20 A7 11     	jsr position					; change position of the bound sprite
001513  2  80 B6        	bra @apply_delta_x
001515  2               
001515  2               @sit_on_solid:
001515  2  A0 0D        	ldy #Entity::bPhysics
001517  2  A9 00        	lda #00
001519  2  91 08        	sta (r3),y						; disengage physics engine for that entity
00151B  2               
00151B  2               	; change the status if falling
00151B  2  A0 01        	ldy #Entity::status
00151D  2  B1 08        	lda (r3),y
00151F  2  C9 04        	cmp #STATUS_FALLING
001521  2  D0 04        	bne @return
001523  2  A9 00        	lda #STATUS_WALKING_IDLE
001525  2  91 08        	sta (r3),y
001527  2               
001527  2               @return:
001527  2  60           	rts
001528  2               
001528  2               	;
001528  2               	; deal with gravity driven jumping
001528  2               	;
001528  2               @jump:
001528  2               @decrease_ticks:
001528  2  A0 0A        	ldy #Entity::falling_ticks
00152A  2  B1 08        	lda (r3),y
00152C  2  3A           	dec								 	; decrease  HI every 10 refresh
00152D  2  91 08        	sta (r3),y
00152F  2  D0 0D        	bne @drive_jump
001531  2  C8           	iny
001532  2  B1 08        	lda (r3),y
001534  2  3A           	dec
001535  2  91 08        	sta (r3),y
001537  2  F0 6A        	beq @apex							; reached the apex of the jump
001539  2               
001539  2  A9 0A        	lda #JUMP_LO_TICKS
00153B  2  88           	dey
00153C  2  91 08        	sta (r3),y							; reset t
00153E  2               
00153E  2               @drive_jump:
00153E  2  A0 0B        	ldy #Entity::falling_ticks + 1
001540  2  B1 08        	lda (r3),y
001542  2  85 66        	sta ENTITY_ZP + 1
001544  2               @loop_jump:
001544  2  20 36 12     	jsr position_y_dec
001547  2  20 A7 11     	jsr position					; change position of the bound sprite
00154A  2               
00154A  2               	; refresh the collision address
00154A  2  A0 04        	ldy #Entity::levely
00154C  2  B1 08        	lda (r3),y
00154E  2  85 02        	sta r0L
001550  2  C8           	iny
001551  2  B1 08        	lda (r3),y
001553  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
001555  2               
001555  2  A0 02        	ldy #Entity::levelx
001557  2  B1 08        	lda (r3),y
001559  2  85 04        	sta r1L
00155B  2  C8           	iny
00155C  2  B1 08        	lda (r3),y
00155E  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
001560  2               
001560  2  20 64 10     	jsr Tilemap::get_collision_addr
001563  2               
001563  2  A0 0E        	ldy #Entity::collision_addr
001565  2  A5 02        	lda r0L
001567  2  91 08        	sta (r3),Y
001569  2  C8           	iny
00156A  2  A5 03        	lda r0H
00156C  2  91 08        	sta (r3),Y
00156E  2               
00156E  2  A0 04        	ldy #Entity::levely
001570  2  B1 08        	lda (r3),y
001572  2  29 0F        	and #%00001111
001574  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
001576  2               
001576  2               	; test hit a ceiling
001576  2  20 52 13     	jsr check_collision_up
001579  2  D0 04        	bne @collision_up
00157B  2               @no_collision_up:
00157B  2  C6 66        	dec ENTITY_ZP + 1
00157D  2  D0 C5        	bne @loop_jump						; loop to take t in count for gravity
00157F  2               
00157F  2               @collision_up:
00157F  2  A0 0C        	ldy #Entity::delta_x
001581  2  B1 08        	lda (r3),y					 		; deal with deltax
001583  2  F0 A2        	beq @return
001585  2  30 0E        	bmi @jump_left
001587  2               @jump_right:
001587  2  20 D5 12     	jsr check_collision_right
00158A  2  F0 05        	beq @no_collision_right
00158C  2               @collision_right:
00158C  2  A9 00        	lda #00
00158E  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
001590  2  60           	rts
001591  2               @no_collision_right:
001591  2  20 D5 11     	jsr position_x_inc
001594  2  60           	rts
001595  2               @jump_left:
001595  2  20 F0 12     	jsr check_collision_left
001598  2  F0 05        	beq @no_collision_left
00159A  2               @collision_left:
00159A  2  A9 00        	lda #00
00159C  2  91 08        	sta (r3),y							; cancel deltaX to transform to vertical movement
00159E  2  60           	rts
00159F  2               @no_collision_left:
00159F  2  20 F4 11     	jsr position_x_dec
0015A2  2  60           	rts
0015A3  2               
0015A3  2               @apex:
0015A3  2  A0 01            ldy #Entity::status
0015A5  2  A9 06        	lda #STATUS_JUMPING_IDLE
0015A7  2  91 08        	sta (r3),y
0015A9  2               
0015A9  2  60           	rts
0015AA  2               
0015AA  2               .endscope
0015AA  2               
0015AA  1               .include "objects.asm"
0015AA  2               ;-----------------------------------------------------------------------------
0015AA  2               ;/////////////////////////////////////////////////////////////////////////////
0015AA  2               ;           start OBJECT code
0015AA  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0015AA  2               ;-----------------------------------------------------------------------------
0015AA  2               
0015AA  2               .scope Objects
0015AA  2               
0015AA  2               OBJECT_ZP = $0060	    ; memory reserved for objects
0015AA  2               
0015AA  2  00 00        objects_map: .word 0
0015AC  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
0015AE  2               
0015AE  2               .enum Attribute
0015AE  2                   GRAB = 1
0015AE  2               .endenum
0015AE  2               
0015AE  2               .struct Object
0015AE  2               	entity		.tag Entity
0015AE  2                   imageID     .byte   ; ID of the image in the spritesheet
0015AE  2                   attribute   .byte
0015AE  2               .endstruct
0015AE  2               
0015AE  2               ;************************************************
0015AE  2               ; init the object data of the level
0015AE  2               ;
0015AE  2               init:
0015AE  2                   ; load the list of objects at the end of the previous load
0015AE  2  AD 10 08         lda current_load
0015B1  2  8D AA 15         sta objects_map
0015B4  2  AD 11 08         lda current_load + 1
0015B7  2  8D AB 15         sta objects_map + 1
0015BA  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
0015BE  2  A0 00 20 BA  
0015C2  2  FF A9 0B A2  
0015DD  2               
0015DD  2                   ; load the sprites  of objects at the end of the previous vload
0015DD  2  AD 12 08         lda Vera::vram_load
0015E0  2  8D AC 15         sta objects_sprites
0015E3  2  AD 13 08         lda Vera::vram_load + 1
0015E6  2  8D AD 15         sta objects_sprites + 1
0015E9  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
0015ED  2  A0 00 20 BA  
0015F1  2  FF A9 0C A2  
00160C  2               
00160C  2                   ; add each available sprites on screen
00160C  2  AD AA 15         lda objects_map
00160F  2  85 08            sta r3L
001611  2  AD AB 15         lda objects_map + 1
001614  2  85 09            sta r3H
001616  2               
001616  2  B2 08            lda (r3)
001618  2  85 31            sta $31     ; number of objects
00161A  2  64 32            stz $32     ; object #0
00161C  2               
00161C  2  E6 08            inc r3L
00161E  2               
00161E  2               @loop:
00161E  2                   ; get a free sprite
00161E  2  20 BE 0C         jsr Sprite::new
001621  2  8A               txa
001622  2  92 08            sta (r3)
001624  2               
001624  2                   ; register the entity
001624  2  A5 08            lda r3L
001626  2  A4 09            ldy r3H
001628  2  20 F8 10         jsr Entities::register
00162B  2               
00162B  2                   ; load the first object
00162B  2  AD AC 15     	lda objects_sprites
00162E  2  85 02        	sta r0L
001630  2  AD AD 15     	lda objects_sprites + 1
001633  2  85 03        	sta r0H
001635  2  20 58 0D         jsr Sprite::vram_to_16_5
001638  2  A5 04            lda r1L
00163A  2  85 02            sta r0L
00163C  2  A5 05            lda r1H
00163E  2  85 03            sta r0H
001640  2               
001640  2  B2 08        	lda (r3)                        ; sprite id
001642  2  A8               tay
001643  2  A9 10           	lda #%00010000					; collision mask 1
001645  2  A2 50           	ldx #%01010000					; 16x16 sprite
001647  2  20 FB 0C     	jsr Sprite::load
00164A  2               
00164A  2                   ; display the object
00164A  2  B2 08        	lda (r3)                        ; sprite id
00164C  2  A8               tay
00164D  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
00164F  2  20 86 0D     	jsr Sprite::display
001652  2               
001652  2                   ; position the first object
001652  2  20 55 11         jsr Entities::set_position
001655  2               
001655  2                   ; last object ?
001655  2  C6 31            dec $31
001657  2  F0 11            beq @return
001659  2               
001659  2                   ; move to the next object
001659  2  18               clc
00165A  2  A5 08            lda r3L
00165C  2  69 12            adc #.sizeof(Object)
00165E  2  85 08            sta r3L
001660  2  A5 09            lda r3H
001662  2  69 00            adc #00
001664  2  85 09            sta r3H
001666  2               
001666  2  E6 32            inc $32                     ; object #next
001668  2  80 B4            bra @loop
00166A  2               
00166A  2               @return:
00166A  2  60               rts
00166B  2               
00166B  2               ;************************************************
00166B  2               ; change  position of the sprite (level view) => (screen view)
00166B  2               ;   input: X = index of the object
00166B  2               ;   output: r3 = pointer to the object
00166B  2               ;
00166B  2               set_position_index:
00166B  2  AD 05 11         lda Entities::get_pointer
00166E  2               
00166E  2               ;************************************************
00166E  2               ; change position of all sprites when the layer moves (level view) => (screen view)
00166E  2               ;
00166E  2               fix_positions:
00166E  2  AD AA 15         lda objects_map
001671  2  85 08            sta r3L
001673  2  AD AB 15         lda objects_map + 1
001676  2  85 09            sta r3H
001678  2               
001678  2  B2 08            lda (r3)
00167A  2  85 31            sta $31     ; number of objects
00167C  2  64 32            stz $32
00167E  2  E6 08            inc r3L
001680  2               
001680  2               @loop:
001680  2                   ; position the first object
001680  2  20 55 11         jsr Entities::set_position
001683  2               
001683  2                   ; last object ?
001683  2  E6 32            inc $32
001685  2  C6 31            dec $31
001687  2  F0 0F            beq @return
001689  2               
001689  2                   ; move to the next object
001689  2  18               clc
00168A  2  A5 08            lda r3L
00168C  2  69 12            adc #.sizeof(Object)
00168E  2  85 08            sta r3L
001690  2  A5 09            lda r3H
001692  2  69 00            adc #00
001694  2  85 09            sta r3H
001696  2               
001696  2  80 E8            bra @loop
001698  2               
001698  2               @return:
001698  2  60               rts
001699  2               
001699  2               ;************************************************
001699  2               ; find the object with a sprite ID
001699  2               ;   input: A = spriteID
001699  2               ;   output: (r3) start of the address of the objects
001699  2               ;           Y = memory index of the start of the object, $FF if no object
001699  2               ;
001699  2               get_by_spriteID:
001699  2  85 60            sta OBJECT_ZP
00169B  2               
00169B  2  AD AA 15         lda objects_map
00169E  2  85 08            sta r3L
0016A0  2  AD AB 15         lda objects_map + 1
0016A3  2  85 09            sta r3H
0016A5  2               
0016A5  2  B2 08            lda (r3)            ; number of objects
0016A7  2  AA               tax
0016A8  2  E6 08            inc r3L             ; move to the first object
0016AA  2               
0016AA  2  A0 00            ldy #00
0016AC  2               @loop:
0016AC  2  B1 08            lda (r3), y
0016AE  2  C5 60            cmp OBJECT_ZP
0016B0  2  F0 0A            beq @found
0016B2  2               
0016B2  2                   ; last object ?
0016B2  2  CA               dex
0016B3  2  F0 08            beq @no_object
0016B5  2               
0016B5  2                   ; move to the next object
0016B5  2  98               tya
0016B6  2  18               clc
0016B7  2  69 12            adc #.sizeof(Object)
0016B9  2  A8               tay
0016BA  2  80 F0            bra @loop
0016BC  2               
0016BC  2               @found:
0016BC  2  60               rts
0016BD  2               
0016BD  2               @no_object:
0016BD  2  A0 FF            ldy #$ff
0016BF  2  60               rts
0016C0  2               
0016C0  2               .endscope
0016C0  2               
0016C0  1               .include "layers.asm"
0016C0  2               ;-----------------------------------------------------------------------------
0016C0  2               ;/////////////////////////////////////////////////////////////////////////////
0016C0  2               ; START Layers code
0016C0  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0016C0  2               ;-----------------------------------------------------------------------------
0016C0  2               
0016C0  2               .scope Layers
0016C0  2               
0016C0  2               LAYERS_ZP = $0055
0016C0  2               wHScroll = LAYERS_ZP
0016C0  2               wVScroll = LAYERS_ZP + 2
0016C0  2               bDirty = LAYERS_ZP + 4
0016C0  2               
0016C0  2               HSCROLL = 0
0016C0  2               VSCROLL = 2
0016C0  2               
0016C0  2               ;************************************************
0016C0  2               ; init layers module
0016C0  2               ;
0016C0  2               init:
0016C0  2  64 55        	stz wHScroll
0016C2  2  64 56        	stz wHScroll + 1
0016C4  2               
0016C4  2  64 57        	stz wVScroll
0016C6  2  64 58        	stz wVScroll + 1
0016C8  2               
0016C8  2  64 59        	stz bDirty
0016CA  2  60           	rts
0016CB  2               
0016CB  2               ;************************************************
0016CB  2               ; set layer1 X position
0016CB  2               ; input: X = xLO
0016CB  2               ;		 Y = xHI
0016CB  2               set_x:
0016CB  2               	; is a real change requested ?
0016CB  2  C4 56        	cpy wHScroll + 1
0016CD  2  D0 05        	bne @dirty
0016CF  2  E4 55        	cpx wHScroll
0016D1  2  D0 01        	bne @dirty
0016D3  2  60           	rts
0016D4  2               @dirty:
0016D4  2  86 55        	stx wHScroll
0016D6  2  8E 37 9F     	stx VERA_L1_hscrolllo
0016D9  2  84 56        	sty wHScroll + 1
0016DB  2  8C 38 9F     	sty VERA_L1_hscrollhi
0016DE  2               
0016DE  2  A9 01        	lda #01
0016E0  2  85 59        	sta bDirty
0016E2  2  60           	rts
0016E3  2               
0016E3  2               ;************************************************
0016E3  2               ; set layer1 y position
0016E3  2               ; input: X = yLO
0016E3  2               ;		 Y = yHI
0016E3  2               set_y:
0016E3  2               	; is a real change requested ?
0016E3  2  C4 58        	cpy wVScroll + 1
0016E5  2  D0 05        	bne @dirty
0016E7  2  E4 57        	cpx wVScroll
0016E9  2  D0 01        	bne @dirty
0016EB  2  60           	rts
0016EC  2               @dirty:
0016EC  2  86 57        	stx wVScroll
0016EE  2  8E 39 9F     	stx VERA_L1_vscrolllo
0016F1  2  84 58        	sty wVScroll + 1
0016F3  2  8C 3A 9F     	sty VERA_L1_vscrollhi
0016F6  2               
0016F6  2  A9 01        	lda #01
0016F8  2  85 59        	sta bDirty
0016FA  2  60           	rts
0016FB  2               
0016FB  2               ;************************************************
0016FB  2               ; increase layer scrolling with a 8bits limit
0016FB  2               ;	X: : 0 = horizontal
0016FB  2               ;	   : 2 = vertical
0016FB  2               ;	Y: limit
0016FB  2               ;
0016FB  2               scroll_inc_8:
0016FB  2  84 02        	sty r0L
0016FD  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001700  2  C5 02        	cmp r0L
001702  2  F0 0F        	beq @noscroll
001704  2               @scrollinc:
001704  2  1A           	inc
001705  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001708  2  D0 03        	bne @scrolled
00170A  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00170D  2               @scrolled:
00170D  2               	; fix the objects position now that the layers scrolled
00170D  2  20 6E 16     	jsr Objects::fix_positions
001710  2  A9 01        	lda #01		; clear ZERO => scrolled
001712  2  60           	rts
001713  2               @noscroll:
001713  2  A9 00        	lda #00		; set ZERO => noscroll
001715  2  60           	rts
001716  2               
001716  2               ;************************************************
001716  2               ; increase layer scrolling with a 16bits limit
001716  2               ;	X: : 0 = horizontal
001716  2               ;	   : 2 = vertical
001716  2               ;	r0L: limit
001716  2               ;
001716  2               scroll_inc_16:
001716  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001719  2  C5 02        	cmp r0L
00171B  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
00171D  2  A8           	tay
00171E  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
001721  2  C5 03        	cmp r0H
001723  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
001725  2  98           	tya
001726  2               @scrollinc:
001726  2  1A           	inc
001727  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
00172A  2  D0 03        	bne @scrolled
00172C  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00172F  2               @scrolled:
00172F  2               	; fix the objects position now that the layers scrolled
00172F  2  20 6E 16     	jsr Objects::fix_positions
001732  2  A9 01        	lda #01	; clear ZERO => scrolled
001734  2  60           	rts
001735  2               @noscroll:
001735  2  A9 00        	lda #00	; set ZERO => noscroll
001737  2  60           	rts
001738  2               
001738  2               ; increase a layer scroll offset but do NOT overlap
001738  2               .macro VSCROLL_INC direction,limit
001738  2               .if limit > 255
001738  2               	LOAD_r0 limit
001738  2               	ldx #direction
001738  2               	jsr Layers::scroll_inc_16
001738  2               .else
001738  2               	ldy #limit
001738  2               	ldx #direction
001738  2               	jsr Layers::scroll_inc_8
001738  2               .endif
001738  2               .endmacro
001738  2               
001738  2               ;
001738  2               ;
001738  2               ; decrease a layer scroll offset
001738  2               ;	X : 0 = horizontal
001738  2               ;	  : 2 = vertical
001738  2               ;
001738  2               scroll_dec:
001738  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00173B  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
00173D  2  3A           	dec
00173E  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001741  2  80 0E        	bra @scrolled
001743  2               @scrollHI:
001743  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
001746  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
001748  2  3A           	dec
001749  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
00174C  2  88           	dey
00174D  2  98           	tya
00174E  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
001751  2               
001751  2               @scrolled:
001751  2               	; fix the objects position now that the layers scrolled
001751  2  20 BB 11     	jsr Entities::fix_positions
001754  2  A9 01        	lda #01		; clear ZERO => scrolled
001756  2  60           	rts
001757  2               
001757  2               @noscroll:
001757  2  A9 00        	lda #00		; set ZERO => noscroll
001759  2  60           	rts
00175A  2               
00175A  2               ;************************************************
00175A  2               ; refresh layers
00175A  2               ;		layer 0 : scrolling to be half of the layer1 scrolling
00175A  2               ;		entities : screen position = entity position - layers1 position
00175A  2               ;
00175A  2               update:
00175A  2  A5 59        	lda bDirty
00175C  2  F0 1D        	beq @return
00175E  2               
00175E  2  A5 56        	lda wHScroll + 1		; layer0 hScroll is layer 1 / 2
001760  2  4A           	lsr
001761  2  8D 31 9F     	sta VERA_L0_hscrollhi
001764  2  A5 55        	lda wHScroll
001766  2  6A           	ror
001767  2  8D 30 9F     	sta VERA_L0_hscrolllo
00176A  2               
00176A  2  A5 58        	lda wVScroll + 1		; layer0 hScroll is layer 1 / 2
00176C  2  4A           	lsr
00176D  2  8D 33 9F     	sta VERA_L0_vscrollhi
001770  2  A5 57        	lda wVScroll
001772  2  6A           	ror
001773  2  8D 32 9F     	sta VERA_L0_vscrolllo
001776  2               
001776  2               	; fix the objects position now that the layers scrolled
001776  2  20 BB 11     	jsr Entities::fix_positions
001779  2               
001779  2               	; clear dirty flag
001779  2  64 59        	stz bDirty
00177B  2               @return:
00177B  2  60           	rts
00177C  2               .endscope
00177C  2               
00177C  1               .include "player.asm"
00177C  2               ;-----------------------------------------------------------------------------
00177C  2               ;/////////////////////////////////////////////////////////////////////////////
00177C  2               ; START player code
00177C  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00177C  2               ;-----------------------------------------------------------------------------
00177C  2               
00177C  2               PLAYER_SPRITE_ANIMATION = 3
00177C  2               
00177C  2               JUMP_LO_TICKS = 10
00177C  2               JUMP_HI_TICKS = 2
00177C  2               FALL_LO_TICKS = 8
00177C  2               FALL_HI_TICKS = 2
00177C  2               
00177C  2               PLAYER_ZP = $0050
00177C  2               
00177C  2               PNG_SPRITES_LINES = 5
00177C  2               PNG_SPRITES_COLUMNS = 3
00177C  2               
00177C  2               .enum
00177C  2               	STATUS_WALKING_IDLE
00177C  2               	STATUS_WALKING
00177C  2               	STATUS_CLIMBING
00177C  2               	STATUS_CLIMBING_IDLE
00177C  2               	STATUS_FALLING
00177C  2               	STATUS_JUMPING
00177C  2               	STATUS_JUMPING_IDLE
00177C  2               	STATUS_PUSHING
00177C  2               .endenum
00177C  2               
00177C  2               .enum
00177C  2               	SITTING_NO_SLOP
00177C  2               	SITTING_ON_SLOPE
00177C  2               	SITTING_ABOVE_SLOPE
00177C  2               .endenum
00177C  2               
00177C  2               .struct PLAYER
00177C  2               	entity			.tag Entity
00177C  2               	animation_tick	.byte
00177C  2               	frameID 		.byte	; current animation loop start
00177C  2               	frame 			.byte	; current frame
00177C  2               	frameDirection 	.byte 	; direction of the animation
00177C  2               	flip 			.byte
00177C  2               	grab_object		.word	; address of the object currently grabbed
00177C  2               	vera_bitmaps    .res 	(2 * 3 * 5)	; 9 words to store vera bitmaps address
00177C  2               .endstruct
00177C  2               
00177C  2               .macro m_status value
00177C  2               	lda #(value)
00177C  2               	sta player0 + PLAYER::entity + Entity::status
00177C  2               .endmacro
00177C  2               
00177C  2               .scope Player
00177C  2               
00177C  2               .macro SET_SPRITE id, frameval
00177C  2               	lda #id
00177C  2               	sta player0 + PLAYER::frameID
00177C  2               	lda #frameval
00177C  2               	sta player0 + PLAYER::frame
00177C  2               	jsr set_bitmap
00177C  2               .endmacro
00177C  2               
00177C  2               ;************************************************
00177C  2               ; player sprites status
00177C  2               ;
00177C  2               .enum Sprites
00177C  2               	FRONT = 0
00177C  2               	LEFT = FRONT + PNG_SPRITES_COLUMNS
00177C  2               	CLIMB = LEFT + PNG_SPRITES_COLUMNS
00177C  2               	HANG = CLIMB + PNG_SPRITES_COLUMNS
00177C  2               	PUSH = HANG + PNG_SPRITES_COLUMNS
00177C  2               .endenum
00177C  2               
00177C  2               ;************************************************
00177C  2               ; local variables
00177C  2               ;
00177C  2               
00177C  2  00           ladders: .byte 0
00177D  2  00           test_right_left: .byte 0
00177E  2               
00177E  2               ;************************************************
00177E  2               ; init the player data
00177E  2               ;
00177E  2               init:
00177E  2  A9 C9        	lda #<player0
001780  2  85 08        	sta r3L
001782  2  A9 1F        	lda #>player0
001784  2  85 09        	sta r3H
001786  2               
001786  2  20 1A 11     	jsr Entities::init
001789  2               
001789  2  A9 0A        	lda #10
00178B  2  A0 10        	ldy #PLAYER::animation_tick
00178D  2  91 08        	sta (r3), y
00178F  2  A9 03        	lda #Player::Sprites::LEFT
001791  2  A0 11        	ldy #PLAYER::frameID
001793  2  91 08        	sta (r3), y
001795  2  A9 00        	lda #00
001797  2  A0 12        	ldy #PLAYER::frame
001799  2  91 08        	sta (r3), y
00179B  2  A9 01        	lda #1
00179D  2  A0 13        	ldy #PLAYER::frameDirection
00179F  2  91 08        	sta (r3), y
0017A1  2  A9 00        	lda #00
0017A3  2  A0 14        	ldy #PLAYER::flip
0017A5  2  91 08        	sta (r3), y
0017A7  2               
0017A7  2               	; load sprites data at the end of the tiles
0017A7  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (::VRAM_tiles + tiles * tile_size)
0017AB  2  A0 00 20 BA  
0017AF  2  FF A9 0B A2  
0017C8  2               
0017C8  2  AD E0 1F     	lda player0 + PLAYER::vera_bitmaps
0017CB  2  85 02        	sta r0L
0017CD  2  AD E1 1F     	lda player0 + PLAYER::vera_bitmaps+1
0017D0  2  85 03        	sta r0H
0017D2  2               
0017D2  2  B2 08        	lda (r3)
0017D4  2  A8           	tay
0017D5  2  A9 10        	lda #%00010000					; collision mask 1
0017D7  2  A2 A0        	ldx #%10100000					; 32x32 sprite
0017D9  2  20 FB 0C     	jsr Sprite::load
0017DC  2               
0017DC  2  A9 08        	lda #08
0017DE  2  85 02        	sta r0L
0017E0  2  A9 00        	lda #00
0017E2  2  85 03        	sta r0H
0017E4  2  A9 0F        	lda #15
0017E6  2  85 04        	sta r1L
0017E8  2  A9 1F        	lda #31
0017EA  2  85 05        	sta r1H
0017EC  2               
0017EC  2  B2 08        	lda (r3)
0017EE  2  A8           	tay
0017EF  2  20 43 0D     	jsr Sprite::set_aabb			; collision box (8,0) -> (24, 32)
0017F2  2               
0017F2  2               	; turn sprite 0 on
0017F2  2  B2 08        	lda (r3)
0017F4  2  A8           	tay
0017F5  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0017F7  2  20 86 0D     	jsr Sprite::display
0017FA  2               
0017FA  2               	; register the vera simplified memory 12:5
0017FA  2  A0 0F        	ldy #(PNG_SPRITES_COLUMNS * PNG_SPRITES_LINES)
0017FC  2  84 50        	sty PLAYER_ZP
0017FE  2  A0 17        	ldy #PLAYER::vera_bitmaps
001800  2  A9 00 85 04  	LOAD_r1 (::VRAM_tiles + tiles * tile_size)
001804  2  A9 41 85 05  
001808  2               
001808  2               @loop:
001808  2               	; load full VERA memory (12:0) into R0
001808  2  A5 04        	lda r1L
00180A  2  85 02        	sta r0L
00180C  2  A5 05        	lda r1H
00180E  2  85 03        	sta r0H
001810  2               
001810  2               	; convert full addr to vera mode (bit shiting >> 5)
001810  2  A5 03        	lda r0H
001812  2  4A           	lsr
001813  2  66 02        	ror r0L
001815  2  4A           	lsr
001816  2  66 02        	ror r0L
001818  2  4A           	lsr
001819  2  66 02        	ror r0L
00181B  2  4A           	lsr
00181C  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
00181E  2  4A           	lsr
00181F  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
001821  2               
001821  2               	; store 12:5 into our cache
001821  2  91 08        	sta (r3), y
001823  2  C8           	iny
001824  2  A5 02        	lda r0L
001826  2  91 08        	sta (r3), y
001828  2  C8           	iny
001829  2               
001829  2               	; increase the vram (+4 r1H = +1024 r1)
001829  2  18           	clc
00182A  2  A5 05        	lda r1H
00182C  2  69 04        	adc #4
00182E  2  85 05        	sta r1H
001830  2               
001830  2  C6 50        	dec PLAYER_ZP
001832  2  D0 D4        	bne @loop
001834  2               
001834  2               	; set first bitmap
001834  2  20 44 18     	jsr set_bitmap
001837  2  60           	rts
001838  2               
001838  2               ;************************************************
001838  2               ; force the current player sprite at its position
001838  2               ;
001838  2               position_set:
001838  2  A9 C9        	lda #<player0
00183A  2  85 08        	sta r3L
00183C  2  A9 1F        	lda #>player0
00183E  2  85 09        	sta r3H
001840  2  20 55 11     	jsr Entities::set_position
001843  2  60           	rts
001844  2               
001844  2               ;************************************************
001844  2               ; change the player bitmap
001844  2               ;
001844  2               set_bitmap:
001844  2  18           	clc
001845  2  AD DB 1F     	lda player0 + PLAYER::frame
001848  2  6D DA 1F     	adc player0 + PLAYER::frameID
00184B  2  0A           	asl						; convert sprite index to work position
00184C  2  AA           	tax
00184D  2               
00184D  2               	; extract the vera bitmap address in vera format (12:5 bits)
00184D  2  BD E0 1F     	lda player0 + PLAYER::vera_bitmaps, x
001850  2  85 03        	sta r0H
001852  2  BD E1 1F     	lda player0 + PLAYER::vera_bitmaps + 1, x
001855  2  85 02        	sta r0L
001857  2               
001857  2  AC C9 1F     	ldy player0 + PLAYER::entity + Entity::spriteID
00185A  2  20 74 0D     	jsr Sprite::set_bitmap
00185D  2  60           	rts
00185E  2               
00185E  2               ;************************************************
00185E  2               ; move layers if the player sprite reached the screen boundaries
00185E  2               ;
00185E  2               check_scroll_layers:
00185E  2               	; distance from layer border to sprite absolute position
00185E  2  38           	sec
00185F  2  AD CB 1F     	lda player0 + PLAYER::entity + Entity::levelx
001862  2  E5 55        	sbc Layers::wHScroll
001864  2  85 02        	sta r0L
001866  2  AD CC 1F     	lda player0 + PLAYER::entity + Entity::levelx + 1
001869  2  E5 56        	sbc Layers::wHScroll + 1
00186B  2  85 03        	sta r0H									; r0 = dx = level.x - layer.x
00186D  2               
00186D  2  D0 26        	bne @check_right						; dx > 256, no need to check left
00186F  2               @check_left:
00186F  2  A5 02        	lda r0L
001871  2  C9 40        	cmp #64
001873  2  B0 20        	bcs @check_right						; dx > 96 and dx < 256, no need to check left
001875  2               	; are we on far left of the layer ?
001875  2  A5 56        	lda Layers::wHScroll + 1
001877  2  D0 04        	bne @scroll_layer_left					; H_SCROLL > 256, scroll layer
001879  2  A5 55        	lda Layers::wHScroll
00187B  2  F0 0F        	beq @set_x_0							; H_SCROLL == 0 => NO horizontal scroll
00187D  2               @scroll_layer_left:
00187D  2  38           	sec
00187E  2  AD CB 1F     	lda player0 + PLAYER::entity + Entity::levelx
001881  2  E9 40        	sbc #64
001883  2  AA           	tax
001884  2  AD CC 1F     	lda player0 + PLAYER::entity + Entity::levelx + 1
001887  2  E9 00        	sbc #00
001889  2  A8           	tay
00188A  2  80 04        	bra @fix_layer_0_x
00188C  2               @set_x_0:
00188C  2  A2 00        	ldx #00
00188E  2  A0 00        	ldy #00
001890  2               @fix_layer_0_x:
001890  2  20 CB 16     	jsr Layers::set_x
001893  2  80 21        	bra @check_top
001895  2               
001895  2               @check_right:
001895  2  A5 02        	lda r0L
001897  2  C9 E1        	cmp #<(SCREEN_WIDTH - 63 - 32)			; remove the width of the sprite
001899  2  90 1B        	bcc @check_top							; dx < 320 - 96, no need to check right
00189B  2               	; are we on far right of the layer ?
00189B  2  A5 55        	lda Layers::wHScroll
00189D  2  C9 BF        	cmp #(32*16-320 - 1)
00189F  2  B0 0F        	bcs @set_x_max							; H_SCROLL > 192 (512 - 320) => force max
0018A1  2               
0018A1  2  38           	sec
0018A2  2  AD CB 1F     	lda player0 + PLAYER::entity + Entity::levelx
0018A5  2  E9 E0        	sbc #<(320-64 - 32)
0018A7  2  AA           	tax
0018A8  2  AD CC 1F     	lda player0 + PLAYER::entity + Entity::levelx + 1
0018AB  2  E9 00        	sbc #>(320-64 - 32)
0018AD  2  A8           	tay
0018AE  2  80 E0        	bra @fix_layer_0_x
0018B0  2               @set_x_max:
0018B0  2  A2 C0        	ldx #<(32*16-320)
0018B2  2  A0 00        	ldy #>(32*16-320)
0018B4  2  80 DA        	bra @fix_layer_0_x
0018B6  2               
0018B6  2               @check_top:
0018B6  2               	; distance from layer border to sprite absolute position
0018B6  2  38           	sec
0018B7  2  AD CD 1F     	lda player0 + PLAYER::entity + Entity::levely
0018BA  2  E5 57        	sbc Layers::wVScroll
0018BC  2  85 02        	sta r0L
0018BE  2  AD CE 1F     	lda player0 + PLAYER::entity + Entity::levely + 1
0018C1  2  E5 58        	sbc Layers::wVScroll + 1
0018C3  2  85 03        	sta r0H									; r0 = dy = level.y - layer.y
0018C5  2               
0018C5  2  D0 25        	bne @check_bottom						; dy > 256, no need to check top
0018C7  2               @check_top_1:
0018C7  2  A5 02        	lda r0L
0018C9  2  C9 20        	cmp #32
0018CB  2  B0 1F        	bcs @check_bottom						; dy > 96 and dy < 256, check bottom
0018CD  2               @move_y:
0018CD  2               	; are we on far top of the layer ?
0018CD  2  A5 58        	lda Layers::wVScroll + 1
0018CF  2  D0 04        	bne @scroll_layer_top					; V_SCROLL > 256, scroll layer
0018D1  2  A5 57        	lda Layers::wVScroll
0018D3  2  F0 0F        	beq @set_y_0							; V_SCROLL == 0 => NO vertical scroll
0018D5  2               @scroll_layer_top:
0018D5  2  38           	sec
0018D6  2  AD CD 1F     	lda player0 + PLAYER::entity + Entity::levely
0018D9  2  E9 20        	sbc #32
0018DB  2  AA           	tax
0018DC  2  AD CE 1F     	lda player0 + PLAYER::entity + Entity::levely + 1
0018DF  2  E9 00        	sbc #00
0018E1  2  A8           	tay
0018E2  2  80 04        	bra @fix_layer_0_y
0018E4  2               @set_y_0:
0018E4  2  A2 00        	ldx #00
0018E6  2  A0 00        	ldy #00
0018E8  2               @fix_layer_0_y:
0018E8  2  20 E3 16     	jsr Layers::set_y
0018EB  2  60           	rts
0018EC  2               
0018EC  2               @check_bottom:
0018EC  2  A5 02        	lda r0L
0018EE  2  C9 B0        	cmp #<(240 - 64)
0018F0  2  B0 01        	bcs @scroll_bottom
0018F2  2  60           	rts										; dy < 144, no need to check vertical
0018F3  2               @scroll_bottom:
0018F3  2               	; are we on far bottom of the layer ?
0018F3  2  A5 58        	lda Layers::wVScroll + 1
0018F5  2  F0 06        	beq @scroll_layer_bottom				; V_SCROLL < 256, scroll layer
0018F7  2  A5 57        	lda Layers::wVScroll
0018F9  2  C9 0F        	cmp #<(32*16-240 - 1)
0018FB  2  B0 0F        	bcs @set_y_max							; V_SCROLL == 512-240 => NO vertical scroll
0018FD  2               @scroll_layer_bottom:
0018FD  2  38           	sec
0018FE  2  AD CD 1F     	lda player0 + PLAYER::entity + Entity::levely
001901  2  E9 B0        	sbc #<(240-64)
001903  2  AA           	tax
001904  2  AD CE 1F     	lda player0 + PLAYER::entity + Entity::levely + 1
001907  2  E9 00        	sbc #>(240-64)
001909  2  A8           	tay
00190A  2  80 DC        	bra @fix_layer_0_y
00190C  2               @set_y_max:
00190C  2  A2 10        	ldx #<(32*16-240)
00190E  2  A0 01        	ldy #>(32*16-240)
001910  2  80 D6        	bra @fix_layer_0_y
001912  2               
001912  2               ;************************************************
001912  2               ; hide the current sprite
001912  2               ;
001912  2               hide1:
001912  2  DB           	stp
001913  2  18           	clc
001914  2  AD DB 1F     	lda player0 + PLAYER::frame
001917  2  6D DA 1F     	adc player0 + PLAYER::frameID
00191A  2  A8           	tay		; sprite index
00191B  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
00191D  2  20 86 0D     	jsr Sprite::display			; turn current sprite off
001920  2  60           	rts
001921  2               
001921  2               ;************************************************
001921  2               ; Animate the player if needed
001921  2               ;
001921  2               animate:
001921  2  AD CA 1F     	lda player0 + PLAYER::entity + Entity::status
001924  2  C9 00        	cmp #STATUS_WALKING_IDLE
001926  2  F0 3A        	beq @end
001928  2  C9 04        	cmp #STATUS_FALLING
00192A  2  F0 36        	beq @end
00192C  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
00192E  2  F0 32        	beq @end
001930  2               
001930  2  CE D9 1F     	dec player0 + PLAYER::animation_tick
001933  2  D0 2D        	bne @end
001935  2               
001935  2  A9 0A        	lda #10
001937  2  8D D9 1F     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
00193A  2               
00193A  2  18           	clc
00193B  2  AD DB 1F     	lda player0 + PLAYER::frame
00193E  2  6D DC 1F     	adc player0 + PLAYER::frameDirection
001941  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
001943  2  C9 03        	cmp #3
001945  2  F0 0B        	beq @set_sprite_anim_decrease
001947  2  80 10        	bra @set_sprite_on
001949  2               @set_sprite_anim_increase:
001949  2  A9 01        	lda #01
00194B  2  8D DC 1F     	sta player0 + PLAYER::frameDirection
00194E  2  A9 00        	lda #0
001950  2  80 07        	bra @set_sprite_on
001952  2               @set_sprite_anim_decrease:
001952  2  A9 FF        	lda #$ff
001954  2  8D DC 1F     	sta player0 + PLAYER::frameDirection
001957  2  A9 02        	lda #2
001959  2               @set_sprite_on:
001959  2  8D DB 1F     	sta player0 + PLAYER::frame	; turn next sprite on
00195C  2  20 44 18     	jsr Player::set_bitmap
00195F  2  20 38 18     	jsr Player::position_set
001962  2               @end:
001962  2  60           	rts
001963  2               
001963  2               ;************************************************
001963  2               ; force player status to be idle
001963  2               ;
001963  2               set_idle:
001963  2  AD CA 1F     	lda player0 + PLAYER::entity + Entity::status
001966  2  C9 01        	cmp #STATUS_WALKING
001968  2  F0 06        	beq @set_idle_walking
00196A  2  C9 02        	cmp #STATUS_CLIMBING
00196C  2  F0 08        	beq @set_idle_climbing
00196E  2  60           	rts							; keep the current value
00196F  2               @set_idle_jump:
00196F  2  60           	rts
001970  2               @set_idle_walking:
001970  2  A9 00 8D CA  	m_status STATUS_WALKING_IDLE
001974  2  1F           
001975  2  60           	rts
001976  2               @set_idle_climbing:
001976  2  A9 03 8D CA  	m_status STATUS_CLIMBING_IDLE
00197A  2  1F           
00197B  2  60           	rts
00197C  2               
00197C  2               ;************************************************
00197C  2               ; Handle player physics when jumping or falling
00197C  2               ;
00197C  2               physics:
00197C  2               	; r3 = *player
00197C  2  A9 C9        	lda #<player0
00197E  2  85 08        	sta r3L
001980  2  A9 1F        	lda #>player0
001982  2  85 09        	sta r3H
001984  2               
001984  2  20 F5 13     	jsr Entities::physics
001987  2               	; TODO ////////////////////////////////////
001987  2  20 5E 18     	jsr check_scroll_layers
00198A  2  20 38 18     	jsr position_set
00198D  2               	;TODO ////////////////////////////////////
00198D  2               
00198D  2  60           	rts
00198E  2               
00198E  2               ;************************************************
00198E  2               ; status to ignore while moving
00198E  2               ;
00198E  2               ignore_move_request:
00198E  2  00           	.byte	00	;	STATUS_WALKING_IDLE
00198F  2  00           	.byte	00	;	STATUS_WALKING
001990  2  02           	.byte	02	;	STATUS_CLIMBING
001991  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
001992  2  01           	.byte	01	;	STATUS_FALLING
001993  2  01           	.byte	01	;	STATUS_JUMPING
001994  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
001995  2               
001995  2               ;************************************************
001995  2               ; Try to move player to the right, walk up if facing a slope
001995  2               ;
001995  2               move_right:
001995  2               	; r3 = *player
001995  2  A9 C9        	lda #<player0
001997  2  85 08        	sta r3L
001999  2  A9 1F        	lda #>player0
00199B  2  85 09        	sta r3H
00199D  2               
00199D  2               	; cannot move if we are at the border
00199D  2  AD CB 1F     	lda player0 + PLAYER::entity + Entity::levelx
0019A0  2  AE CC 1F     	ldx player0 + PLAYER::entity + Entity::levelx + 1
0019A3  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
0019A5  2  D0 05        	bne @not_border
0019A7  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
0019A9  2  D0 01        	bne @not_border					; we are at the level limit
0019AB  2               @return2:
0019AB  2  60           	rts
0019AC  2               
0019AC  2               @not_border:
0019AC  2  AC CA 1F     	ldy player0 + PLAYER::entity + Entity::status
0019AF  2  B9 8E 19     	lda ignore_move_request, y
0019B2  2  F0 07        	beq @walk_right					; if 0 => can move
0019B4  2  C9 02        	cmp #02
0019B6  2  D0 F3        	bne @return2				; if 2 => has to climb
0019B8  2  4C 39 1A     	jmp @climb_right					; else block the move
0019BB  2               
0019BB  2               @walk_right:
0019BB  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
0019BE  2  85 02        	sta r0L
0019C0  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
0019C3  2  85 03        	sta r0H
0019C5  2               
0019C5  2  20 BE 13     	jsr Entities::if_on_slop
0019C8  2  D0 0A        	bne @no_collision
0019CA  2               
0019CA  2  20 A2 13     	jsr Entities::if_above_slop
0019CD  2  D0 05        	bne @no_collision
0019CF  2               
0019CF  2  20 D5 12     	jsr Entities::check_collision_right
0019D2  2  D0 64        	bne @return1					; block is collision on the right  and there is no slope on the right
0019D4  2               
0019D4  2               @no_collision:
0019D4  2  A9 01        	lda #01
0019D6  2  8D D5 1F     	sta player0 + PLAYER::entity + Entity::delta_x
0019D9  2               
0019D9  2               @set_walking_sprite:
0019D9  2  A9 01        	lda #SPRITE_FLIP_H
0019DB  2  8D DD 1F     	sta player0 + PLAYER::flip
0019DE  2  AC C9 1F     	ldy player0 + PLAYER::entity + Entity::spriteID
0019E1  2  20 03 0E     	jsr Sprite::set_flip				; force sprite to look right
0019E4  2               
0019E4  2  A9 01 8D CA  	m_status STATUS_WALKING
0019E8  2  1F           
0019E9  2               
0019E9  2               	;change player sprite
0019E9  2  A9 03        	lda #Player::Sprites::LEFT
0019EB  2  CD DA 1F     	cmp player0 + PLAYER::frameID
0019EE  2  F0 08        	beq @move_x
0019F0  2               
0019F0  2  A9 03        	lda #Player::Sprites::LEFT
0019F2  2  8D DA 1F     	sta player0 + PLAYER::frameID
0019F5  2  20 44 18     	jsr set_bitmap
0019F8  2               
0019F8  2               @move_x:
0019F8  2  20 D5 11     	jsr Entities::position_x_inc		; move the player in the level, and the screen layers and sprite
0019FB  2               
0019FB  2               	; if sitting on a slop
0019FB  2  AD FE 1F     	lda player_on_slop
0019FE  2  F0 2D        	beq @set_position
001A00  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001A02  2  F0 26        	beq @move_y_up
001A04  2               @try_move_y_dow:
001A04  2  AD CD 1F     	lda player0 + PLAYER::entity + Entity::levely
001A07  2  29 0F        	and #%00001111
001A09  2  D0 1A        	bne @move_y_down
001A0B  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001A0E  2  85 02        	sta r0L
001A10  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001A13  2  85 03        	sta r0H
001A15  2  A5 06        	lda r2L
001A17  2  18           	clc
001A18  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
001A1A  2  A8           	tay
001A1B  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
001A1D  2  A8           	tay
001A1E  2  B9 BF 1E     	lda tiles_attributes,y
001A21  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001A23  2  D0 73        	bne @return							; do not change Y if the tile below the player is a solid one
001A25  2               @move_y_down:
001A25  2  20 17 12     	jsr Entities::position_y_inc
001A28  2  80 03        	bra @set_position
001A2A  2               @move_y_up:
001A2A  2  20 36 12     	jsr Entities::position_y_dec
001A2D  2               
001A2D  2               @set_position:
001A2D  2               	;TODO ///////////////////////
001A2D  2  20 5E 18     	jsr check_scroll_layers
001A30  2  20 38 18     	jsr position_set
001A33  2  A9 01        	lda #01
001A35  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001A38  2               	;TODO ///////////////////////
001A38  2               @return1:
001A38  2  60           	rts
001A39  2               
001A39  2               @climb_right:
001A39  2  20 D5 12     	jsr Entities::check_collision_right
001A3C  2  F0 05        	beq @climb_right_1
001A3E  2  C9 04        	cmp #TILE_SOLID_LADER
001A40  2  F0 01        	beq @climb_right_1
001A42  2  60           	rts
001A43  2               @climb_right_1:
001A43  2  20 59 12     	jsr Entities::bbox_coverage
001A46  2  A4 06        	ldy r2L
001A48  2               @get_tile:
001A48  2  B1 02        	lda (r0),y
001A4A  2  F0 0E        	beq @no_grab					; no tile on right
001A4C  2  85 31        	sta $31
001A4E  2  84 30        	sty $30
001A50  2  A8           	tay
001A51  2  B9 BF 1E     	lda tiles_attributes,y
001A54  2  89 08        	bit #TILE_ATTR::GRABBING
001A56  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
001A58  2  A4 30        	ldy $30
001A5A  2               @no_grab:							; test the tile on the right on next line
001A5A  2  C8           	iny
001A5B  2  CA           	dex
001A5C  2  D0 EA        	bne @get_tile
001A5E  2  80 26        	bra @climb_right_drop			; no grab tile on the right of the player
001A60  2               @climb_right_2:
001A60  2  A5 31        	lda $31							; tile index with grab attribute
001A62  2  C9 05        	cmp #TILE_LEDGE
001A64  2  D0 04        	bne @set_climb_sprite
001A66  2               @set_hang_sprite:
001A66  2  A9 09        	lda #Player::Sprites::HANG
001A68  2  80 02        	bra @next
001A6A  2               @set_climb_sprite:
001A6A  2  A9 06        	lda #Player::Sprites::CLIMB
001A6C  2               @next:
001A6C  2  8D DA 1F     	sta player0 + PLAYER::frameID
001A6F  2  20 44 18     	jsr set_bitmap
001A72  2  A9 02 8D CA  	m_status STATUS_CLIMBING
001A76  2  1F           
001A77  2  20 D5 11     	jsr Entities::position_x_inc		; move the player sprite, if the
001A7A  2               	;TODO ///////////////////////
001A7A  2  20 5E 18     	jsr check_scroll_layers
001A7D  2  20 38 18     	jsr position_set
001A80  2  A9 01        	lda #01
001A82  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001A85  2               	;TODO ///////////////////////
001A85  2  60           	rts
001A86  2               @climb_right_drop:
001A86  2  A9 01 8D CA  	m_status STATUS_WALKING
001A8A  2  1F           
001A8B  2  A9 03 8D DA  	SET_SPRITE Player::Sprites::LEFT, 1
001A8F  2  1F A9 01 8D  
001A93  2  DB 1F 20 44  
001A98  2               
001A98  2               @return:
001A98  2  60           	rts
001A99  2               
001A99  2               ;************************************************
001A99  2               ; try to move the player to the left
001A99  2               ;
001A99  2               move_left:
001A99  2               	; r3 = *player
001A99  2  A9 C9        	lda #<player0
001A9B  2  85 08        	sta r3L
001A9D  2  A9 1F        	lda #>player0
001A9F  2  85 09        	sta r3H
001AA1  2               
001AA1  2               	; cannot move if we are at the left border
001AA1  2  AE CC 1F     	ldx player0 + PLAYER::entity + Entity::levelx + 1
001AA4  2  D0 06        	bne @not_border
001AA6  2  AD CB 1F     	lda player0 + PLAYER::entity + Entity::levelx
001AA9  2  D0 01        	bne @not_border
001AAB  2               @return1:
001AAB  2  60           	rts
001AAC  2               
001AAC  2               @not_border:
001AAC  2               	; cannot move if we are in frozen status
001AAC  2  AC CA 1F     	ldy player0 + PLAYER::entity + Entity::status
001AAF  2  B9 8E 19     	lda ignore_move_request, y
001AB2  2  F0 07        	beq @walk_left					; if 0 => can move
001AB4  2  C9 02        	cmp #02
001AB6  2  D0 F3        	bne @return1				; if 2 => has to climb
001AB8  2  4C 39 1B     	jmp @climb_left				; else block the move
001ABB  2               
001ABB  2               @walk_left:
001ABB  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001ABE  2  85 02        	sta r0L
001AC0  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001AC3  2  85 03        	sta r0H
001AC5  2               
001AC5  2  20 BE 13     	jsr Entities::if_on_slop
001AC8  2  D0 0A        	bne @no_collision				; ignore right collision left if on a slope
001ACA  2               
001ACA  2  20 A2 13     	jsr Entities::if_above_slop
001ACD  2  D0 05        	bne @no_collision
001ACF  2               
001ACF  2  20 F0 12     	jsr Entities::check_collision_left
001AD2  2  D0 64        	bne @return						; block is collision on the right  and there is no slope on the right
001AD4  2               
001AD4  2               @no_collision:
001AD4  2  A9 FF        	lda #$ff
001AD6  2  8D D5 1F     	sta player0 + PLAYER::entity + Entity::delta_x
001AD9  2               
001AD9  2               @set_walking_sprite:
001AD9  2  A9 00        	lda #SPRITE_FLIP_NONE
001ADB  2  8D DD 1F     	sta player0 + PLAYER::flip
001ADE  2  AC C9 1F     	ldy player0 + PLAYER::entity + Entity::spriteID
001AE1  2  20 03 0E     	jsr Sprite::set_flip				; force sprite to loop right
001AE4  2               
001AE4  2  A9 01 8D CA  	m_status STATUS_WALKING
001AE8  2  1F           
001AE9  2               
001AE9  2  A9 03        	lda #Player::Sprites::LEFT
001AEB  2  CD DA 1F     	cmp player0 + PLAYER::frameID
001AEE  2  F0 08        	beq @move_x
001AF0  2               
001AF0  2               	;change player sprite
001AF0  2  A9 03        	lda #Player::Sprites::LEFT
001AF2  2  8D DA 1F     	sta player0 + PLAYER::frameID
001AF5  2  20 44 18     	jsr set_bitmap
001AF8  2               
001AF8  2               @move_x:
001AF8  2  20 F4 11     	jsr Entities::position_x_dec
001AFB  2  AD FE 1F     	lda player_on_slop				; if walking a slop also increase Y
001AFE  2  F0 2D        	beq @set_position
001B00  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001B02  2  F0 26        	beq @move_y_up
001B04  2               @try_move_y_dow:
001B04  2  AD CD 1F     	lda player0 + PLAYER::entity + Entity::levely
001B07  2  29 0F        	and #%00001111
001B09  2  D0 1A        	bne @move_y_down
001B0B  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001B0E  2  85 02        	sta r0L
001B10  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001B13  2  85 03        	sta r0H
001B15  2  A5 06        	lda r2L
001B17  2  18           	clc
001B18  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
001B1A  2  A8           	tay
001B1B  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
001B1D  2  A8           	tay
001B1E  2  B9 BF 1E     	lda tiles_attributes,y
001B21  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001B23  2  D0 08        	bne @set_position					; do not change Y if the tile below the player is a solid one
001B25  2               @move_y_down:
001B25  2  20 17 12     	jsr Entities::position_y_inc
001B28  2  80 03        	bra @set_position
001B2A  2               @move_y_up:
001B2A  2  20 36 12     	jsr Entities::position_y_dec
001B2D  2               
001B2D  2               @set_position:
001B2D  2               	;TODO ///////////////////////
001B2D  2  20 5E 18     	jsr check_scroll_layers
001B30  2  20 38 18     	jsr position_set
001B33  2  A9 01        	lda #01
001B35  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001B38  2               	;TODO ///////////////////////
001B38  2               
001B38  2               @return:
001B38  2  60           	rts
001B39  2               
001B39  2               @climb_left:
001B39  2  20 F0 12     	jsr Entities::check_collision_left
001B3C  2  F0 01        	beq @climb_left_1
001B3E  2  60           	rts								; collision on left, block the move
001B3F  2               @climb_left_1:
001B3F  2  20 59 12     	jsr Entities::bbox_coverage				; what tiles is the player covering
001B42  2  A4 06        	ldy r2L
001B44  2               @get_tile:
001B44  2  B1 02        	lda (r0),y
001B46  2  F0 0E        	beq @no_grab					; no tile on right
001B48  2  85 31        	sta $31
001B4A  2  84 30        	sty $30
001B4C  2  A8           	tay
001B4D  2  B9 BF 1E     	lda tiles_attributes,y
001B50  2  89 08        	bit #TILE_ATTR::GRABBING
001B52  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
001B54  2  A4 30        	ldy $30
001B56  2               @no_grab:							; test the tile on the left on next line
001B56  2  C8           	iny
001B57  2  CA           	dex
001B58  2  D0 EA        	bne @get_tile
001B5A  2  80 26        	bra @climb_left_drop			; no grab tile on the right of the player
001B5C  2               @climb_left_2:
001B5C  2  A5 31        	lda $31							; tile index with grab attribute
001B5E  2  C9 05        	cmp #TILE_LEDGE
001B60  2  D0 04        	bne @set_climb_sprite
001B62  2               @set_hang_sprite:
001B62  2  A9 09        	lda #Player::Sprites::HANG
001B64  2  80 02        	bra @next
001B66  2               @set_climb_sprite:
001B66  2  A9 06        	lda #Player::Sprites::CLIMB
001B68  2               @next:
001B68  2  8D DA 1F     	sta player0 + PLAYER::frameID
001B6B  2  20 44 18     	jsr set_bitmap
001B6E  2  A9 02 8D CA  	m_status STATUS_CLIMBING
001B72  2  1F           
001B73  2  20 F4 11     	jsr Entities::position_x_dec		; move the player sprite, if the
001B76  2               	;TODO ///////////////////////
001B76  2  20 5E 18     	jsr check_scroll_layers
001B79  2  20 38 18     	jsr position_set
001B7C  2  A9 01        	lda #01
001B7E  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001B81  2               	;TODO ///////////////////////
001B81  2  60           	rts
001B82  2               @climb_left_drop:					; no ladder to stick to
001B82  2  A9 01 8D CA  	m_status STATUS_WALKING
001B86  2  1F           
001B87  2  A9 03 8D DA  	SET_SPRITE Player::Sprites::LEFT, 1
001B8B  2  1F A9 01 8D  
001B8F  2  DB 1F 20 44  
001B94  2  60           	rts
001B95  2               
001B95  2               ;************************************************
001B95  2               ; try to move the player down (crouch, hide, move down a ladder)
001B95  2               ;
001B95  2               move_down:
001B95  2               	; r3 = *player
001B95  2  A9 C9        	lda #<player0
001B97  2  85 08        	sta r3L
001B99  2  A9 1F        	lda #>player0
001B9B  2  85 09        	sta r3H
001B9D  2               
001B9D  2  AD CA 1F     	lda player0 + PLAYER::entity + Entity::status
001BA0  2  C9 04        	cmp #STATUS_FALLING
001BA2  2  D0 01        	bne @try_move_down						; cannot move when falling
001BA4  2  60           	rts
001BA5  2               
001BA5  2               @try_move_down:
001BA5  2               	; custom collision down
001BA5  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001BA8  2  85 02        	sta r0L
001BAA  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001BAD  2  85 03        	sta r0H
001BAF  2               
001BAF  2  20 59 12     	jsr Entities::bbox_coverage
001BB2  2  8E 7C 17     	stx ladders						; width of the player in tiles = number of ladders to find below
001BB5  2  A5 06        	lda r2L
001BB7  2  18           	clc
001BB8  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001BBA  2  A8           	tay
001BBB  2               
001BBB  2               @test_colum:
001BBB  2  B1 02        	lda (r0L),y
001BBD  2  C9 04        	cmp #TILE_SOLID_LADER
001BBF  2  D0 05        	bne @check_solid_ground
001BC1  2               @ladder_down:
001BC1  2  CE 7C 17     	dec ladders
001BC4  2  80 0C        	bra @next_column
001BC6  2               @check_solid_ground:
001BC6  2  84 30        	sty $30
001BC8  2  A8           	tay
001BC9  2  B9 BF 1E     	lda tiles_attributes,y
001BCC  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001BCE  2  D0 4D        	bne @cannot_move_down
001BD0  2  A4 30        	ldy $30
001BD2  2               @next_column:
001BD2  2  CA           	dex
001BD3  2  F0 03        	beq @end
001BD5  2  C8           	iny
001BD6  2  80 E3        	bra @test_colum
001BD8  2               @end:
001BD8  2               
001BD8  2  AD 7C 17     	lda ladders
001BDB  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
001BDD  2               
001BDD  2               	; if there player is covering ANY ladders (accros the boundingbox)
001BDD  2  A4 06        	ldy r2L
001BDF  2               @check_line:							; already climbing down is player grabbing no ladder
001BDF  2  A6 05        	ldx r1H
001BE1  2               @check_row:
001BE1  2  B1 02        	lda (r0L),y
001BE3  2  C9 04        	cmp #TILE_SOLID_LADER
001BE5  2  F0 12        	beq @move_down
001BE7  2  C8           	iny
001BE8  2  CA           	dex
001BE9  2  D0 F6        	bne @check_row
001BEB  2  C6 04        	dec r1L
001BED  2  F0 2E        	beq @cannot_move_down
001BEF  2               
001BEF  2  98           	tya
001BF0  2  18           	clc
001BF1  2  69 20        	adc #LEVEL_TILES_WIDTH
001BF3  2  38           	sec
001BF4  2  E5 05        	sbc r1H
001BF6  2  A8           	tay
001BF7  2  80 E6        	bra @check_line
001BF9  2               
001BF9  2               @move_down:
001BF9  2  20 17 12     	jsr Entities::position_y_inc		; move down the ladder
001BFC  2               	;TODO ///////////////////////
001BFC  2  20 5E 18     	jsr check_scroll_layers
001BFF  2  20 38 18     	jsr position_set
001C02  2  A9 01        	lda #01
001C04  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001C07  2               	;TODO ///////////////////////
001C07  2               
001C07  2  A9 02 8D CA  	m_status STATUS_CLIMBING
001C0B  2  1F           
001C0C  2               
001C0C  2  A9 06        	lda #Player::Sprites::CLIMB
001C0E  2  CD DA 1F     	cmp player0 + PLAYER::frameID
001C11  2  D0 01        	bne @change_sprite
001C13  2  60           	rts
001C14  2               
001C14  2               @change_sprite:
001C14  2               	;change player sprite
001C14  2  A9 06        	lda #Player::Sprites::CLIMB
001C16  2  8D DA 1F     	sta player0 + PLAYER::frameID
001C19  2  20 44 18     	jsr set_bitmap
001C1C  2  60           	rts
001C1D  2               
001C1D  2               @cannot_move_down:
001C1D  2  A9 00        	lda #STATUS_WALKING_IDLE
001C1F  2  8D CA 1F     	sta player0 + PLAYER::entity + Entity::status
001C22  2  A9 01        	lda #01
001C24  2  8D DB 1F     	sta player0 + PLAYER::frame
001C27  2  20 44 18     	jsr set_bitmap
001C2A  2  9C D5 1F     	stz player0 + PLAYER::entity + Entity::delta_x
001C2D  2  60           	rts
001C2E  2               
001C2E  2               ;************************************************
001C2E  2               ; try to move the player up (move up a ladder)
001C2E  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
001C2E  2               ;	modify: r0, r1, r2
001C2E  2               ;
001C2E  2               move_up:
001C2E  2               	; r3 = *player
001C2E  2  A9 C9        	lda #<player0
001C30  2  85 08        	sta r3L
001C32  2  A9 1F        	lda #>player0
001C34  2  85 09        	sta r3H
001C36  2               
001C36  2  AD CA 1F     	lda player0 + PLAYER::entity + Entity::status
001C39  2  C9 04        	cmp #STATUS_FALLING
001C3B  2  D0 01        	bne @try_move_up				; cannot move when falling
001C3D  2  60           	rts
001C3E  2               @try_move_up:
001C3E  2               	; custom collision up
001C3E  2  20 59 12     	jsr Entities::bbox_coverage
001C41  2  A4 06        	ldy r2L
001C43  2  8E 7C 17     	stx ladders						; width of the player in tiles = number of ladders to find below
001C46  2               
001C46  2               	; check the situation ABOVE the player
001C46  2  38           	sec
001C47  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001C4A  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001C4C  2  85 02        	sta r0L
001C4E  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001C51  2  E9 00        	sbc #0
001C53  2  85 03        	sta r0H
001C55  2               
001C55  2               	; if there the right numbers of ladder tiles above the player
001C55  2               @test_colum:
001C55  2  B1 02        	lda (r0L),y
001C57  2  C9 04        	cmp #TILE_SOLID_LADER
001C59  2  D0 05        	bne @check_solid_ceiling
001C5B  2  CE 7C 17     	dec ladders
001C5E  2  80 0C        	bra @next_column
001C60  2               @check_solid_ceiling:
001C60  2  84 30        	sty $30
001C62  2  A8           	tay
001C63  2  B9 BF 1E     	lda tiles_attributes,y
001C66  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001C68  2  D0 57        	bne @cannot_move_up
001C6A  2  A4 30        	ldy $30
001C6C  2               @next_column:
001C6C  2  CA           	dex
001C6D  2  F0 03        	beq @end
001C6F  2  C8           	iny
001C70  2  80 E3        	bra @test_colum
001C72  2               @end:
001C72  2               
001C72  2  AD 7C 17     	lda ladders
001C75  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001C77  2               
001C77  2               	; if there player is covering ANY LADER (accros the boundingbox)
001C77  2  AD D7 1F     	lda player0 + PLAYER::entity + Entity::collision_addr
001C7A  2  85 02        	sta r0L
001C7C  2  AD D8 1F     	lda player0 + PLAYER::entity + Entity::collision_addr + 1
001C7F  2  85 03        	sta r0H
001C81  2               
001C81  2  A4 06        	ldy r2L
001C83  2               @check_line:							; already climbing up is player grabbing no ladder
001C83  2  A6 05        	ldx r1H
001C85  2               @check_row:
001C85  2  B1 02        	lda (r0L),y
001C87  2  C9 04        	cmp #TILE_SOLID_LADER
001C89  2  F0 12        	beq @climb_down
001C8B  2  C8           	iny
001C8C  2  CA           	dex
001C8D  2  D0 F6        	bne @check_row
001C8F  2  C6 04        	dec r1L
001C91  2  F0 2E        	beq @cannot_move_up
001C93  2               
001C93  2  98           	tya
001C94  2  18           	clc
001C95  2  69 20        	adc #LEVEL_TILES_WIDTH
001C97  2  38           	sec
001C98  2  E5 05        	sbc r1H
001C9A  2  A8           	tay
001C9B  2  80 E6        	bra @check_line
001C9D  2               
001C9D  2               @climb_down:
001C9D  2  20 36 12     	jsr Entities::position_y_dec		; move up the ladder
001CA0  2               	;TODO ///////////////////////
001CA0  2  20 5E 18     	jsr check_scroll_layers
001CA3  2  20 38 18     	jsr position_set
001CA6  2  A9 01        	lda #01
001CA8  2  8D D6 1F     	sta player0 + PLAYER::entity + Entity::bPhysics	; activate physics engine
001CAB  2               	;TODO ///////////////////////
001CAB  2               
001CAB  2  A9 02 8D CA  	m_status STATUS_CLIMBING
001CAF  2  1F           
001CB0  2               
001CB0  2  A9 06        	lda #Player::Sprites::CLIMB
001CB2  2  CD DA 1F     	cmp player0 + PLAYER::frameID
001CB5  2  D0 01        	bne @set_sprite
001CB7  2  60           	rts
001CB8  2               @set_sprite:						;change player sprite
001CB8  2  A9 06        	lda #Player::Sprites::CLIMB
001CBA  2  8D DA 1F     	sta player0 + PLAYER::frameID
001CBD  2  20 44 18     	jsr set_bitmap
001CC0  2  60           	rts
001CC1  2               
001CC1  2               @cannot_move_up:
001CC1  2  A9 00        	lda #STATUS_WALKING_IDLE
001CC3  2  8D CA 1F     	sta player0 + PLAYER::entity + Entity::status
001CC6  2  60           	rts
001CC7  2               
001CC7  2               ;************************************************
001CC7  2               ; jump
001CC7  2               ;	input: A = delta X value
001CC7  2               ;
001CC7  2               jump:
001CC7  2  AA           	tax
001CC8  2               
001CC8  2               	; r3 = *player
001CC8  2  A9 C9        	lda #<player0
001CCA  2  85 08        	sta r3L
001CCC  2  A9 1F        	lda #>player0
001CCE  2  85 09        	sta r3H
001CD0  2               
001CD0  2  AC CA 1F         ldy player0 + PLAYER::entity + Entity::status
001CD3  2  B9 8E 19     	lda ignore_move_request,y
001CD6  2  D0 1D        	bne @return
001CD8  2  8E D5 1F     	stx player0 + PLAYER::entity + Entity::delta_x
001CDB  2               
001CDB  2               	; ensure there is no ceiling over the player
001CDB  2  20 52 13     	jsr Entities::check_collision_up
001CDE  2  D0 15        	bne @return
001CE0  2               
001CE0  2  A9 0A        	lda #JUMP_LO_TICKS
001CE2  2  8D D3 1F     	sta player0 + PLAYER::entity + Entity::falling_ticks	; decrease  HI every 10 refresh
001CE5  2  A9 02        	lda #JUMP_HI_TICKS
001CE7  2  8D D4 1F     	sta player0 + PLAYER::entity + Entity::falling_ticks	+ 1
001CEA  2               
001CEA  2  A0 0D        	ldy #Entity::bPhysics
001CEC  2  A9 01        	lda #01
001CEE  2  91 08        	sta (r3),y						; engage physics engine for that entity
001CF0  2               
001CF0  2  A9 05 8D CA  	m_status STATUS_JUMPING
001CF4  2  1F           
001CF5  2               @return:
001CF5  2  60           	rts
001CF6  2               
001CF6  2               ;************************************************
001CF6  2               ; grab the object if front of the player, if there is an object
001CF6  2               ;
001CF6  2               grab_object:
001CF6  2  AD DD 1F     	lda player0 + PLAYER::flip
001CF9  2  D0 04        	bne @right
001CFB  2               @left:
001CFB  2  A9 0A        	lda #(02 | 08)
001CFD  2  80 02        	bra @cont
001CFF  2               @right:
001CFF  2  A9 06        	lda #(02 | 04)
001D01  2               @cont:
001D01  2  AE C9 1F     	ldx player0 + PLAYER::entity + Entity::spriteID
001D04  2  20 D1 0E     	jsr Sprite::precheck_collision	; get the frameID in Y
001D07  2  30 3C        	bmi @return						; no object
001D09  2               
001D09  2  20 99 16     	jsr Objects::get_by_spriteID	; find the object that has frameID Y
001D0C  2  C0 FF        	cpy #$ff
001D0E  2  F0 35        	beq @return						; no object with this ID
001D10  2               
001D10  2  98           	tya
001D11  2  69 10        	adc #Objects::Object::imageID
001D13  2  98           	tya
001D14  2  B1 08        	lda (r3), y
001D16  2  89 01        	bit #Objects::Attribute::GRAB
001D18  2  F0 2B        	beq @return						; object cannot be grabbed
001D1A  2               
001D1A  2  84 50        	sty PLAYER_ZP					; save the pointer to the grabbed object
001D1C  2  18           	clc
001D1D  2  A5 08        	lda r3L
001D1F  2  65 50        	adc PLAYER_ZP
001D21  2  8D DE 1F     	sta player0 + PLAYER::grab_object
001D24  2  A5 09        	lda r3H
001D26  2  69 00        	adc #00
001D28  2  8D DF 1F     	sta player0 + PLAYER::grab_object + 1
001D2B  2               
001D2B  2  A9 0C        	lda #Player::Sprites::PUSH
001D2D  2  8D DA 1F     	sta player0 + PLAYER::frameID
001D30  2  9C DB 1F     	stz player0 + PLAYER::frame
001D33  2  A9 0A        	lda #10
001D35  2  8D D9 1F     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001D38  2  A9 01        	lda #01
001D3A  2  8D DC 1F     	sta player0 + PLAYER::frameDirection
001D3D  2  20 44 18     	jsr set_bitmap
001D40  2               
001D40  2  A9 07 8D CA  	m_status STATUS_PUSHING
001D44  2  1F           
001D45  2               
001D45  2               @return:
001D45  2  60           	rts
001D46  2               
001D46  2               ;************************************************
001D46  2               ; release the object the player is moving
001D46  2               ;
001D46  2               release_object:
001D46  2  9C DE 1F     	stz player0 + PLAYER::grab_object
001D49  2  9C DF 1F     	stz player0 + PLAYER::grab_object + 1
001D4C  2  A9 00 8D CA  	m_status STATUS_WALKING_IDLE
001D50  2  1F           
001D51  2               
001D51  2  A9 03        	lda #Player::Sprites::LEFT
001D53  2  8D DA 1F     	sta player0 + PLAYER::frameID
001D56  2  9C DB 1F     	stz player0 + PLAYER::frame
001D59  2  A9 0A        	lda #10
001D5B  2  8D D9 1F     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
001D5E  2  A9 01        	lda #01
001D60  2  8D DC 1F     	sta player0 + PLAYER::frameDirection
001D63  2  20 44 18     	jsr set_bitmap
001D66  2               
001D66  2  60           	rts
001D67  2               
001D67  2               .endscope
001D67  2               
001D67  1               
001D67  1               ;-----------------------------------------------------------------------------
001D67  1               ;/////////////////////////////////////////////////////////////////////////////
001D67  1               ; main code
001D67  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001D67  1               ;-----------------------------------------------------------------------------
001D67  1               
001D67  1  00 00        objects: .word 0
001D69  1               
001D69  1               start:
001D69  1               	; 320x240
001D69  1  A9 40        	lda #64
001D6B  1  8D 2A 9F     	sta veradchscale
001D6E  1  8D 2B 9F     	sta veradcvscale
001D71  1               
001D71  1               	; activate layer0
001D71  1  A9 71        	lda #%01110001
001D73  1               ;	and #(255-VERA_LAYER0)
001D73  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
001D73  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
001D76  1               
001D76  1  20 C0 16     	jsr Layers::init
001D79  1               
001D79  1               	;---------------------------------
001D79  1               	; load tiles file into vram
001D79  1               	;---------------------------------
001D79  1  20 45 08     	jsr Tiles::load_static
001D7C  1               
001D7C  1               	;---------------------------------
001D7C  1               	;---------------------------------
001D7C  1               	; load tilemaps into vram
001D7C  1               	;---------------------------------
001D7C  1  20 CA 0F     	jsr Tilemap::load
001D7F  1               
001D7F  1               	; load animated tiles into ram
001D7F  1               	;---------------------------------
001D7F  1  20 8F 08     	jsr Tiles::load_anim
001D82  1               
001D82  1               	;---------------------------------
001D82  1               	; load sprite 0,1,2 into vram
001D82  1               	;---------------------------------
001D82  1               load_sprites:
001D82  1               	; prepare VERA sprites
001D82  1  20 6A 0C     	jsr Sprite::init_addr_table
001D85  1               
001D85  1  A9 00 85 02  	LOAD_r0 (::VRAM_tiles + tiles * tile_size)	; base for the sprites
001D89  1  A9 41 85 03  
001D8D  1  20 7E 17     	jsr Player::init
001D90  1               
001D90  1               	;---------------------------------
001D90  1               	; load objects list into ram
001D90  1               	;---------------------------------
001D90  1  20 AE 15     	jsr Objects::init
001D93  1               
001D93  1               setirq:
001D93  1                  ; backup default RAM IRQ vector
001D93  1  AD 14 03        lda IRQVec
001D96  1  8D BC 1E        sta default_irq_vector
001D99  1  AD 15 03        lda IRQVec+1
001D9C  1  8D BD 1E        sta default_irq_vector+1
001D9F  1               
001D9F  1                  ; overwrite RAM IRQ vector with custom handler address
001D9F  1  78              sei ; disable IRQ while vector is changing
001DA0  1  A9 B7           lda #<custom_irq_handler
001DA2  1  8D 14 03        sta IRQVec
001DA5  1  A9 1D           lda #>custom_irq_handler
001DA7  1  8D 15 03        sta IRQVec+1
001DAA  1  AD 26 9F        lda veraien
001DAD  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001DAF  1  8D 26 9F        sta veraien
001DB2  1  58              cli ; enable IRQ now that vector is properly set
001DB3  1               
001DB3  1               mainloop:
001DB3  1  CB           	wai
001DB4  1  80 FD        	bra mainloop
001DB6  1               
001DB6  1  60           	rts
001DB7  1               
001DB7  1               ;-----------------------------------------------------------------------------
001DB7  1               ;/////////////////////////////////////////////////////////////////////////////
001DB7  1               ; deal with IRQ"s
001DB7  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001DB7  1               ;-----------------------------------------------------------------------------
001DB7  1               custom_irq_handler:
001DB7  1  AD 27 9F     	lda veraisr
001DBA  1  AA           	tax
001DBB  1  29 04        	and #VERA_SPRCOL_BIT
001DBD  1  F0 0B        	beq @check_vsync
001DBF  1               
001DBF  1               @sprite_collision:
001DBF  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
001DC2  1  8A           	txa
001DC3  1  4A           	lsr
001DC4  1  4A           	lsr
001DC5  1  4A           	lsr
001DC6  1  4A           	lsr								; extract the collision mask (4:7)
001DC7  1  20 22 0E     	jsr Sprite::register_collision
001DCA  1               
001DCA  1               @check_vsync:
001DCA  1  8A           	txa
001DCB  1  29 01        	and #VERA_VSYNC_BIT
001DCD  1  F0 6E        	beq @continue
001DCF  1               
001DCF  1               @frame_update:
001DCF  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001DD2  1               
001DD2  1               	;---------------------------------
001DD2  1               	; animate sprite
001DD2  1               	;---------------------------------
001DD2  1  20 21 19     	jsr Player::animate
001DD5  1               
001DD5  1               	;---------------------------------
001DD5  1               	; swap animated tiles
001DD5  1               	;---------------------------------
001DD5  1  20 39 09     	jsr Tiles::animate
001DD8  1               
001DD8  1               	;---------------------------------
001DD8  1               	; sprite collisions management
001DD8  1               	;---------------------------------
001DD8  1  20 A9 0E     	jsr Sprite::check_irq_collision
001DDB  1               
001DDB  1               	;---------------------------------
001DDB  1               	; player physics
001DDB  1               	;---------------------------------
001DDB  1  20 7C 19     	jsr Player::physics
001DDE  1               
001DDE  1               	;---------------------------------
001DDE  1               	; check keyboard
001DDE  1               	;---------------------------------
001DDE  1               @check_keyboard:
001DDE  1               	; get fake-joystick data from keyboard
001DDE  1  A9 00        	lda #0
001DE0  1  20 56 FF     	jsr joystick_get
001DE3  1  8D C5 1E     	sta joystick_data
001DE6  1  8E C6 1E     	stx joystick_data + 1
001DE9  1               
001DE9  1               	; get real joystick data
001DE9  1  A9 01        	lda #1
001DEB  1  20 56 FF     	jsr joystick_get
001DEE  1  C0 00        	cpy #0
001DF0  1  D0 0D        	bne @check_buttons
001DF2  1               
001DF2  1               	; if there is a joystick, mix the data
001DF2  1  2D C5 1E     	and joystick_data
001DF5  1  8D C5 1E     	sta joystick_data
001DF8  1               
001DF8  1  8A           	txa
001DF9  1  2D C6 1E     	and joystick_data + 1
001DFC  1  8D C6 1E     	sta joystick_data + 1
001DFF  1               
001DFF  1               @check_buttons:
001DFF  1               	; check button A press/release
001DFF  1  4D C8 1E     	eor joystick_data_old + 1
001E02  1               
001E02  1  89 80        	bit #JOY_A
001E04  1  F0 0F        	beq @save_data				; no change for the A
001E06  1               
001E06  1  AD C6 1E     	lda joystick_data + 1
001E09  1  89 80        	bit #JOY_A
001E0B  1  F0 05        	beq @grab
001E0D  1               @release:
001E0D  1  20 46 1D     	jsr Player::release_object
001E10  1  80 03        	bra @save_data
001E12  1               @grab:
001E12  1  20 F6 1C     	jsr Player::grab_object
001E15  1               @save_data:
001E15  1  AD C6 1E     	lda joystick_data + 1
001E18  1  8D C8 1E     	sta joystick_data_old + 1
001E1B  1               
001E1B  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001E1B  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001E1B  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001E1B  1               ;
001E1B  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001E1B  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001E1B  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001E1B  1               ;  .Y, byte 2:
001E1B  1               ;              $00 = joystick present
001E1B  1               ;              $FF = joystick not present
001E1B  1               
001E1B  1               @other_check:
001E1B  1  AD C5 1E     	lda joystick_data
001E1E  1               
001E1E  1  89 81        	bit #(JOY_RIGHT|JOY_B)
001E20  1  F0 21        	beq @jump_right
001E22  1  89 82        	bit #(JOY_LEFT|JOY_B)
001E24  1  F0 24        	beq @jump_left
001E26  1  89 01        	bit #JOY_RIGHT
001E28  1  F0 2C        	beq @joystick_right
001E2A  1  89 02        	bit #JOY_LEFT
001E2C  1  F0 23        	beq @joystick_left
001E2E  1  89 04        	bit #JOY_DOWN
001E30  1  F0 2E        	beq @movedown
001E32  1  89 08        	bit #JOY_UP
001E34  1  F0 25        	beq @moveup
001E36  1  89 80        	bit #JOY_B
001E38  1  F0 2B        	beq @jump
001E3A  1               
001E3A  1  20 63 19     	jsr Player::set_idle
001E3D  1               
001E3D  1               @continue:
001E3D  1               	; refresh layers if needed
001E3D  1  20 5A 17     	jsr Layers::update
001E40  1               
001E40  1               	; continue to default IRQ handler
001E40  1  6C BC 1E     	jmp (default_irq_vector)
001E43  1               	; RTI will happen after jump
001E43  1               
001E43  1               @jump_right:
001E43  1  A9 01        	lda #$01					; jump right
001E45  1  20 C7 1C     	jsr Player::jump
001E48  1  80 F3        	bra @continue
001E4A  1               
001E4A  1               @jump_left:
001E4A  1  A9 FF        	lda #$ff					; jump left
001E4C  1  20 C7 1C     	jsr Player::jump
001E4F  1  80 EC        	bra @continue
001E51  1               
001E51  1               @joystick_left:
001E51  1  20 99 1A     	jsr Player::move_left
001E54  1  80 E7        	bra @continue
001E56  1               
001E56  1               @joystick_right:
001E56  1  20 95 19     	jsr Player::move_right
001E59  1  80 E2        	bra @continue
001E5B  1               
001E5B  1               @moveup:
001E5B  1  20 2E 1C     	jsr Player::move_up
001E5E  1  80 DD        	bra @continue
001E60  1               
001E60  1               @movedown:
001E60  1  20 95 1B     	jsr Player::move_down
001E63  1  80 D8        	bra @continue
001E65  1               
001E65  1               @jump:
001E65  1  A9 00        	lda #0				; jump up
001E67  1  20 C7 1C     	jsr Player::jump
001E6A  1  80 D1        	bra @continue
001E6C  1               
001E6C  1               .segment "DATA"
001E6C  1               .include "tilemap.inc"
001E6C  2               map:
001E6C  2  20 20        	.byte 32,32
001E6E  2  6C 65 76 65  fslevel: .literal "level.bin"
001E72  2  6C 2E 62 69  
001E76  2  6E           
001E77  2               fslevel_end:
001E77  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001E7B  2  65 72 79 2E  
001E7F  2  62 69 6E     
001E82  2               fsbackground_end:
001E82  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001E86  2  69 73 69 6F  
001E8A  2  6E 2E 62 69  
001E8F  2               fscollision_end:
001E8F  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
001E93  2  63 74 73 2E  
001E97  2  62 69 6E     
001E9A  2               fsobjects_end:
001E9A  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
001E9E  2  74 65 73 31  
001EA2  2  2E 62 69 6E  
001EA6  2               fssprites1_end:
001EA6  2               tileset:
001EA6  2  10 10        	.byte 16,16
001EA8  2               tiles = 49
001EA8  2               tile_size = 256
001EA8  2  74 69 6C 65  fstile: .literal "tiles.bin"
001EAC  2  73 2E 62 69  
001EB0  2  6E           
001EB1  2               fstileend:
001EB1  2               
001EB1  1               .include "sprite.inc"
001EB1  2  73 70 72 69  fssprite:	.literal "sprites.bin"
001EB5  2  74 65 73 2E  
001EB9  2  62 69 6E     
001EBC  2               fsspriteend:
001EBC  2               sprites = 15
001EBC  2               sprite_size = 1024
001EBC  2               
001EBC  1               
001EBC  1  00 00        default_irq_vector: .addr 0
001EBE  1  00           trigger_debug: .byte 0
001EBF  1               tiles_attributes:
001EBF  1  00           	.byte %00000000	;	TILE_NO_COLLISION
001EC0  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
001EC1  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
001EC2  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
001EC3  1  09           	.byte %00001001	;	TILE_SOLID_LADER
001EC4  1  09           	.byte %00001001	;	TILE_LEDGE
001EC5  1               
001EC5  1               .segment "BSS"
001EC5  1  00 00        	joystick_data: .byte 0, 0
001EC7  1  00 00        	joystick_data_old: .byte 0, 0
001EC9  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
001ECD  1  xx xx xx xx  
001ED1  1  xx xx xx xx  
001FC9  1  xx xx xx xx  	player0: .tag PLAYER
001FCD  1  xx xx xx xx  
001FD1  1  xx xx xx xx  
001FFE  1  00           	player_on_slop: .byte 0
001FFE  1               
