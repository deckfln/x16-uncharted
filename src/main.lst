ca65 V2.19 - Git e4f01a2
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C D6 1A        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               VERA_L1_vscrolllo	= verareg+$19
000810  2               VERA_L1_vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               VERA_LINE_BIT        = $04
000810  2               VERA_SPRCOL_BIT        = $04
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               ; set the tilebase for the layer
000810  2               .macro VTILEBASE layer,addr
000810  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000810  2               	and #VERA_TILEBASE_CLEAR_ADR
000810  2               	ora #(addr >> 9)
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define size of tiles for layer
000810  2               .macro VTILEMODE layer, mode
000810  2               	lda veral0tilebase + layer * 7
000810  2               	and #VERA_CLEAR_TILE_SIZE
000810  2               	ora #mode
000810  2               	sta veral0tilebase + layer * 7
000810  2               .endmacro
000810  2               
000810  2               
000810  2               ; define number of tiles in the map
000810  2               .macro VCONFIG_TILES layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_TILES
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; define number of colors for the map
000810  2               .macro VCONFIG_DEPTH layer,mode
000810  2               	lda veral0config + layer * 7
000810  2               	and #VERA_CONFIG_CLEAR_DEPTH
000810  2               	ora #mode
000810  2               	sta veral0config + layer * 7
000810  2               .endmacro
000810  2               
000810  2               ; set the mapbase for the layer
000810  2               .macro VMAPBASE layer,addr
000810  2                   lda #(addr >> 9)         ; store 2 last bits
000810  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               .enum
000810  1               	TILE_NO_COLLISION
000810  1               	TILE_SOLID_GROUND
000810  1               	TILE_SOLD_SLOP_LEFT
000810  1               	TILE_SOLD_SLOP_RIGHT
000810  1               	TILE_SOLID_LADER
000810  1               	TILE_LEDGE
000810  1               .endenum
000810  1               
000810  1               .macro SET_DEBUG
000810  1               	inc trigger_debug
000810  1               .endmacro
000810  1               
000810  1               .macro CHECK_DEBUG
000810  1               	pha
000810  1               	lda trigger_debug
000810  1               	beq @no_debug
000810  1               	dec trigger_debug
000810  1               	stp
000810  1               @no_debug:
000810  1               	pla
000810  1               .endmacro
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1  00 00        current_load: .word 0		; end of the last memory load
000812  1               
000812  1               .macro LOAD_FILE filename, length, ram
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx #<ram
000812  1               	ldy #>ram
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .macro LOAD_FILE_NEXT filename, length
000812  1               	lda #1
000812  1               	ldx #8
000812  1               	ldy #0
000812  1               	jsr SETLFS
000812  1               	lda #length
000812  1               	ldx #<filename
000812  1               	ldy #>filename
000812  1               	jsr SETNAM
000812  1               	lda #0
000812  1               	ldx current_load
000812  1               	ldy current_load + 1
000812  1               	jsr LOAD
000812  1               	stx current_load
000812  1               	sty current_load + 1
000812  1               .endmacro
000812  1               
000812  1               .scope Vera
000812  1               
000812  1  00 00        vram_load: .word 0		; end of the last memory load
000814  1               
000814  1               .macro VLOAD_FILE filename, length, vram
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^vram + 2)
000814  1               	ldx #<vram
000814  1               	ldy #>vram
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               .macro VLOAD_FILE_NEXT filename, length
000814  1               	lda #1
000814  1               	ldx #8
000814  1               	ldy #0
000814  1               	jsr SETLFS
000814  1               	lda #length
000814  1               	ldx #<filename
000814  1               	ldy #>filename
000814  1               	jsr SETNAM
000814  1               	lda #(^Vera::vram_load + 2)
000814  1               	ldx Vera::vram_load
000814  1               	ldy Vera::vram_load + 1
000814  1               	jsr LOAD
000814  1               	stx Vera::vram_load
000814  1               	sty Vera::vram_load + 1
000814  1               .endmacro
000814  1               
000814  1               ;
000814  1               ; copy from rom to vram
000814  1               ;	r0 : from
000814  1               ;	r1 : to (first 16 bites)
000814  1               ;   	y : vera bank (0, 1)
000814  1               ;	X: blocks
000814  1               ;
000814  1               vcopy:
000814  1  A9 00        	lda #0
000816  1  8D 25 9F     	sta veractl
000819  1  98           	tya
00081A  1  09 10        	ora #$10
00081C  1  8D 22 9F     	sta verahi
00081F  1  A5 05        	lda r1H
000821  1  8D 21 9F     	sta veramid
000824  1  A5 04        	lda r1L
000826  1  8D 20 9F     	sta veralo
000829  1               
000829  1               @loop:
000829  1  A0 00            ldy #0
00082B  1               @loop1tile:
00082B  1  B1 02        	lda (r0),y                         	; read from tiles data
00082D  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
000830  1  C8               iny
000831  1  D0 F8            bne @loop1tile
000833  1               
000833  1  E6 03        	inc r0H
000835  1  CA           	dex
000836  1  D0 F1        	bne @loop
000838  1  60           	rts
000839  1               .endscope
000839  1               
000839  1               .include "tiles.asm"
000839  2               ;-----------------------------------------------------------------------------
000839  2               ;/////////////////////////////////////////////////////////////////////////////
000839  2               ; START Tiles code
000839  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000839  2               ;-----------------------------------------------------------------------------
000839  2               
000839  2               .enum TILE_ATTR
000839  2               	SOLID_GROUND = 1
000839  2               	SOLID_WALL = 2
000839  2               	SOLID_CEILING = 4
000839  2               	GRABBING = 8			; player can grab the tile (ladder, ledge, rope)
000839  2               .endenum
000839  2               
000839  2               
000839  2               .scope Tiles
000839  2               
000839  2               ;animated_tiles_map
000839  2               ;   nb_animated_tiles
000839  2               ;   tile[0]
000839  2               ;        tick,
000839  2               ;        nb_frames
000839  2               ;        current_frame
000839  2               ;        @frame[0][0]
000839  2               ;        nb_tiles
000839  2               ;        @addr_tiles_list[0]
000839  2               ;   tile[1]
000839  2               ;   ....
000839  2               ;   tile[nb_animated_tiles-1]
000839  2               ;   frame[t0][0]: duration, tile_index
000839  2               ;   frame[t0][1]
000839  2               ;   .....
000839  2               ;   frame[t0][ tile[0].nb_frames - 1 ]
000839  2               ;   frame[t1][0]: duration, tile_index
000839  2               ;   frame[t1][1]
000839  2               ;   .....
000839  2               ;   frame[t1][ tile[1].nb_frames - 1 ]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][0]
000839  2               ;   .....
000839  2               ;   frame[tnb_animated_tiles-1][ tile[nb_animated_tiles-1].nb_frames - 1 ]
000839  2               ;   addr_tiles_list[0] : tile[0].nb_tiles word
000839  2               ;   addr_tiles_list[1] : tile[1].nb_tiles word
000839  2               ;   addr_tiles_list[nb_animated_times -1] : tile[1].nb_tiles word
000839  2               
000839  2               .struct ANIMATED_TILES
000839  2                   nb_animated_tiles   .byte
000839  2               
000839  2                   .struct ANIMATED_TILE
000839  2                       tick            .byte   ; number of 18ms frames until next animation
000839  2                       nb_frames       .byte
000839  2                       current_frame   .byte
000839  2                       addr_frames  .addr   ; offset of the list of animation
000839  2                       nb_tiles        .byte   ; numner of tiles on the tilemap
000839  2                       addr_tiles_list      .addr   ; offset of the list of tiles on the tilemap
000839  2                   .endstruct
000839  2               .endstruct
000839  2               
000839  2               .struct FRAME
000839  2                   duration    .byte
000839  2                   tile_index  .byte
000839  2               .endstruct
000839  2               
000839  2               animated_tiles_map = HIMEM + $400
000839  2               animated_tiles = HIMEM + $400 + 1
000839  2               
000839  2  74 69 6C 65  fsanimated_tiles: .literal "tilesani.bin"
00083D  2  73 61 6E 69  
000841  2  2E 62 69 6E  
000845  2               fsanimated_tiles_end:
000845  2               
000845  2               ;-----------------------------------------
000845  2               ; load static tiles
000845  2               ;
000845  2               load_static:
000845  2  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), ::VRAM_tiles
000849  2  A0 00 20 BA  
00084D  2  FF A9 09 A2  
000866  2  AD 2F 9F 29  	VTILEBASE 0, ::VRAM_tiles
00086A  2  03 09 08 8D  
00086E  2  2F 9F        
000870  2  AD 36 9F 29  	VTILEBASE 1, ::VRAM_tiles
000874  2  03 09 08 8D  
000878  2  36 9F        
00087A  2  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
00087E  2  FC 09 03 8D  
000882  2  2F 9F        
000884  2  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000888  2  FC 09 03 8D  
00088C  2  36 9F        
00088E  2  60               rts
00088F  2               
00088F  2               ;-----------------------------------------
00088F  2               ; load and fix the animated tiles data
00088F  2               ;
00088F  2               load:
00088F  2  A9 00        	lda #0
000891  2  85 00        	sta $00
000893  2  A9 01 A2 08  	LOAD_FILE fsanimated_tiles, (fsanimated_tiles_end-fsanimated_tiles), animated_tiles_map
000897  2  A0 00 20 BA  
00089B  2  FF A9 0C A2  
0008B4  2               
0008B4  2                   ; convert offsets in the data structure to memory addr
0008B4  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008B7  2  A2 00            ldx #0
0008B9  2               
0008B9  2               @next_tile:
0008B9  2  18               clc
0008BA  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008BD  2  69 00            adc #<animated_tiles_map
0008BF  2  9D 04 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
0008C2  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008C5  2  69 A4            adc #>animated_tiles_map
0008C7  2  9D 05 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
0008CA  2               
0008CA  2  18               clc
0008CB  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008CE  2  69 00            adc #<animated_tiles_map
0008D0  2  9D 07 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008D3  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008D6  2  69 A4            adc #>animated_tiles_map
0008D8  2  9D 08 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008DB  2               
0008DB  2  88               dey
0008DC  2  F0 07            beq @convert_tileslist_addr
0008DE  2               
0008DE  2  8A               txa
0008DF  2  18               clc
0008E0  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
0008E2  2  AA               tax
0008E3  2  80 D4            bra @next_tile
0008E5  2               
0008E5  2               @convert_tileslist_addr:
0008E5  2                   ; convert tilemap offset into vera offset
0008E5  2                   ; convert offsets in the data structure to memory addr
0008E5  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
0008E8  2  A2 00            ldx #0
0008EA  2               @next_tile1:
0008EA  2                   ; setup the listf of memory offset in vera memory
0008EA  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
0008ED  2  85 02            sta r0L
0008EF  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
0008F2  2  85 03            sta r0H
0008F4  2               
0008F4  2  5A               phy
0008F5  2  DA               phx
0008F6  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
0008F9  2  AA               tax
0008FA  2  A0 00            ldy #00
0008FC  2               
0008FC  2               @loop_tiles:
0008FC  2  18               clc
0008FD  2  B1 02            lda (r0),y
0008FF  2  69 00            adc #<VRAM_layer1_map
000901  2  91 02            sta (r0),y
000903  2  C8               iny
000904  2               
000904  2  B1 02            lda (r0),y
000906  2  69 08            adc #>VRAM_layer1_map
000908  2  91 02            sta (r0),y
00090A  2  C8               iny
00090B  2               
00090B  2  CA               dex
00090C  2  D0 EE            bne @loop_tiles
00090E  2  FA               plx
00090F  2  7A               ply
000910  2               
000910  2  88               dey
000911  2  F0 07            beq @init
000913  2               
000913  2  8A               txa
000914  2  18               clc
000915  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000917  2  AA               tax
000918  2  80 D0            bra @next_tile1
00091A  2               
00091A  2               @init:
00091A  2                   ; init the timers
00091A  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00091D  2  A2 00            ldx #0
00091F  2               
00091F  2               @next_tile2:
00091F  2                   ; setup the list of frames
00091F  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000922  2  85 02            sta r0L
000924  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
000927  2  85 03            sta r0H
000929  2               
000929  2                   ; save new frame duration in the timer
000929  2  B2 02            lda (r0)
00092B  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
00092E  2               
00092E  2  88               dey
00092F  2  F0 07            beq @return
000931  2               
000931  2  8A               txa
000932  2  18               clc
000933  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
000935  2  AA               tax
000936  2  80 E7            bra @next_tile2
000938  2               
000938  2               @return:
000938  2  60               rts
000939  2               
000939  2               ;-----------------------------------------
000939  2               ; parse the animated tiles to update
000939  2               ;
000939  2               animate:
000939  2  AC 00 A4         ldy animated_tiles_map + ANIMATED_TILES::nb_animated_tiles
00093C  2  A2 00            ldx #0
00093E  2               
00093E  2               @next_tile:
00093E  2  DE 01 A4         dec animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000941  2  D0 03            bne :+
000943  2  20 51 09         jsr next_frame
000946  2               :
000946  2  88               dey
000947  2  F0 07            beq @return
000949  2               
000949  2  8A               txa
00094A  2  18               clc
00094B  2  69 08            adc #.sizeof(ANIMATED_TILES::ANIMATED_TILE)
00094D  2  AA               tax
00094E  2  80 EE            bra @next_tile
000950  2               
000950  2               @return:
000950  2  60               rts
000951  2               
000951  2               ;-----------------------------------------
000951  2               ; move to the next frame of an animated tile
000951  2               ; update tiles on the tilemap
000951  2               ; input X : offset of the anim_tile structure
000951  2               ;
000951  2               next_frame:
000951  2  BD 03 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
000954  2  1A               inc
000955  2  DD 02 A4         cmp animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_frames, x
000958  2  D0 02            bne :+
00095A  2  A9 00            lda #00         ; roll back to 0
00095C  2               :
00095C  2  9D 03 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::current_frame, x
00095F  2  DA               phx
000960  2  5A               phy
000961  2               
000961  2  0A               asl         ; the are 2 bytes per frame, so multiply the index by 2
000962  2  A8               tay         ; Y = current animation frame
000963  2               
000963  2                   ; setup the list of frames
000963  2  BD 04 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames, x
000966  2  85 02            sta r0L
000968  2  BD 05 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_frames + 1, x
00096B  2  85 03            sta r0H
00096D  2               
00096D  2  B1 02            lda (r0), y         ; save new frame duration in the timer
00096F  2  9D 01 A4         sta animated_tiles + ANIMATED_TILES::ANIMATED_TILE::tick, x
000972  2  C8               iny
000973  2  B1 02            lda (r0), y
000975  2  85 30            sta $30                 ; X = index of the new tile to store in VERA memory
000977  2               
000977  2                   ; setup the listf of memory offset in vera memory
000977  2  BD 07 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list, x
00097A  2  85 02            sta r0L
00097C  2  BD 08 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::addr_tiles_list + 1, x
00097F  2  85 03            sta r0H
000981  2               
000981  2                   ; push all tiles in vera memory
000981  2  BD 06 A4         lda animated_tiles + ANIMATED_TILES::ANIMATED_TILE::nb_tiles, x
000984  2  0A               asl         ; number of tiles in the list * 2 (these are addr)
000985  2  3A               dec         ; start at the end
000986  2  A8               tay
000987  2               
000987  2  A6 30            ldx $30
000989  2               
000989  2               @next_tile_index:
000989  2                   ; set the vera memory (as we start from the end of the list, vera gigh is first)
000989  2               
000989  2  A9 00        	lda #0
00098B  2  8D 25 9F     	sta veractl
00098E  2  A9 02          	lda #(^VRAM_layer1_map + 2)
000990  2  8D 22 9F     	sta verahi
000993  2  B1 02            lda (r0), y
000995  2  8D 21 9F     	sta veramid	                ; vera = $1fc00 + sprite index (X) * 8
000998  2  88               dey
000999  2  B1 02            lda (r0), y
00099B  2  8D 20 9F     	sta veralo
00099E  2  88               dey
00099F  2  8E 23 9F         stx veradat
0009A2  2               
0009A2  2  10 E5            bpl @next_tile_index
0009A4  2               
0009A4  2  7A               ply
0009A5  2  FA               plx
0009A6  2  60               rts
0009A7  2               .endscope
0009A7  2               
0009A7  1               .include "sprites.asm"
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               ;/////////////////////////////////////////////////////////////////////////////
0009A7  2               ; START Sprite code
0009A7  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
0009A7  2               ;-----------------------------------------------------------------------------
0009A7  2               
0009A7  2               .struct VSPRITE
0009A7  2               	address125 .byte
0009A7  2               	mode_xxx_address1613 .byte
0009A7  2               	x70 .byte
0009A7  2               	x98 .byte
0009A7  2               	y70 .byte
0009A7  2               	y98 .byte
0009A7  2               	collision_zdepth_vflip_hflip .byte
0009A7  2               	height_width_offset .byte
0009A7  2               .endstruct
0009A7  2               
0009A7  2               .scope Sprite
0009A7  2               
0009A7  2               SPRITES_ZP = $0070	; memory reserved for Sprites
0009A7  2               
0009A7  2               ;-----------------------------------------
0009A7  2               ; sprites components collections
0009A7  2               MAX_SPRITES = 32
0009A7  2               
0009A7  2  xx xx xx xx  sprites_xL: .res MAX_SPRITES
0009AB  2  xx xx xx xx  
0009AF  2  xx xx xx xx  
0009C7  2  xx xx xx xx  sprites_xH: .res MAX_SPRITES
0009CB  2  xx xx xx xx  
0009CF  2  xx xx xx xx  
0009E7  2  xx xx xx xx  sprites_yL: .res MAX_SPRITES
0009EB  2  xx xx xx xx  
0009EF  2  xx xx xx xx  
000A07  2  xx xx xx xx  sprites_yH: .res MAX_SPRITES
000A0B  2  xx xx xx xx  
000A0F  2  xx xx xx xx  
000A27  2  xx xx xx xx  sprites_x1L: .res MAX_SPRITES
000A2B  2  xx xx xx xx  
000A2F  2  xx xx xx xx  
000A47  2  xx xx xx xx  sprites_x1H: .res MAX_SPRITES
000A4B  2  xx xx xx xx  
000A4F  2  xx xx xx xx  
000A67  2  xx xx xx xx  sprites_y1L: .res MAX_SPRITES
000A6B  2  xx xx xx xx  
000A6F  2  xx xx xx xx  
000A87  2  xx xx xx xx  sprites_y1H: .res MAX_SPRITES
000A8B  2  xx xx xx xx  
000A8F  2  xx xx xx xx  
000AA7  2  xx xx xx xx  sprites_aabb_x: .res MAX_SPRITES	; collision box INSIDE the sprite top-left corner
000AAB  2  xx xx xx xx  
000AAF  2  xx xx xx xx  
000AC7  2  xx xx xx xx  sprites_aabb_y: .res MAX_SPRITES
000ACB  2  xx xx xx xx  
000ACF  2  xx xx xx xx  
000AE7  2  xx xx xx xx  sprites_aabb_w: .res MAX_SPRITES	; collision box INSIDE the sprite height/width
000AEB  2  xx xx xx xx  
000AEF  2  xx xx xx xx  
000B07  2  xx xx xx xx  sprites_aabb_h: .res MAX_SPRITES
000B0B  2  xx xx xx xx  
000B0F  2  xx xx xx xx  
000B27  2  xx xx xx xx  sprites_collision_callback: .res (MAX_SPRITES * 2)
000B2B  2  xx xx xx xx  
000B2F  2  xx xx xx xx  
000B67  2               
000B67  2  xx xx xx xx  sprites: .res 256		; store VRAM 12:5 address of each of the 128 sprites
000B6B  2  xx xx xx xx  
000B6F  2  xx xx xx xx  
000C67  2  01           nb_sprites: .byte 1		; 1 reserved for the player
000C68  2  00 00        collisions: .word 0		; L = collision happened, H = collision mask
000C6A  2               
000C6A  2               ;************************************************
000C6A  2               ;  init sprites manager
000C6A  2               ; create a table with the VERA @addr for each sprite
000C6A  2               ;
000C6A  2               init_addr_table:
000C6A  2               	; clear the sprites components
000C6A  2  A6 20        	ldx MAX_SPRITES
000C6C  2  CA           	dex
000C6D  2               :
000C6D  2  9E A7 09     	stz sprites_xL,x
000C70  2  9E C7 09     	stz sprites_xH,x
000C73  2  9E E7 09     	stz sprites_yL,x
000C76  2  9E 07 0A     	stz sprites_yH,x
000C79  2  9E E7 0A     	stz sprites_aabb_w,x
000C7C  2  9E 07 0B     	stz sprites_aabb_h,x
000C7F  2  9E A7 0A     	stz sprites_aabb_x,x
000C82  2  9E C7 0A     	stz sprites_aabb_y,x
000C85  2  CA           	dex
000C86  2  10 E5        	bpl :-
000C88  2               
000C88  2               	; activate sprite colisions
000C88  2               	;lda veraien
000C88  2               	;ora #VERA_SPRCOL_BIT
000C88  2               	;sta veraien
000C88  2               
000C88  2               	; all sprites are availble but ZERO (reserved player)
000C88  2  A2 FF        	ldx #$ff
000C8A  2               :
000C8A  2  9E 67 0B     	stz sprites,X
000C8D  2  CA           	dex
000C8E  2  D0 FA        	bne :-
000C90  2  A9 01        	lda #01
000C92  2  8D 67 0B     	sta sprites
000C95  2               
000C95  2               	; start of the sprites in VERA memory
000C95  2  A9 00        	lda #<vram_sprd
000C97  2  85 02        	sta r0L
000C99  2  A9 FC        	lda #>vram_sprd
000C9B  2  85 03        	sta r0H
000C9D  2               
000C9D  2  A2 80        	ldx #128
000C9F  2  A0 00        	ldy #0
000CA1  2                @loop:
000CA1  2  A5 03        	lda r0H
000CA3  2  99 07 1C     	sta sprites_table,y
000CA6  2  C8           	iny
000CA7  2  A5 02        	lda r0L
000CA9  2  99 07 1C     	sta sprites_table,y
000CAC  2  C8           	iny
000CAD  2               
000CAD  2  18           	clc
000CAE  2  A5 02        	lda r0L
000CB0  2  69 08        	adc #8
000CB2  2  85 02        	sta r0L
000CB4  2  A5 03        	lda r0H
000CB6  2  69 00        	adc #0
000CB8  2  85 03        	sta r0H	; move to next sprite
000CBA  2               
000CBA  2  CA           	dex
000CBB  2  D0 E4        	bne @loop
000CBD  2               
000CBD  2  60           	rts
000CBE  2               
000CBE  2               ;************************************************
000CBE  2               ; get a new available vera sprite
000CBE  2               ;	output: X = index of the vera sprite
000CBE  2               ;			0 = no sprite available
000CBE  2               ;
000CBE  2               new:
000CBE  2  A2 01        	ldx #$01
000CC0  2               :
000CC0  2  BD 67 0B     	lda sprites,x
000CC3  2  F0 03        	beq @return
000CC5  2  E8           	inx
000CC6  2  D0 F8        	bne :-
000CC8  2               @return:
000CC8  2  A9 01        	lda #01
000CCA  2  9D 67 0B     	sta sprites,x
000CCD  2               
000CCD  2               	; count activated sprites
000CCD  2  EC 67 0C     	cpx nb_sprites
000CD0  2  90 03        	bcc :+
000CD2  2               
000CD2  2  EE 67 0C     	inc nb_sprites
000CD5  2               :
000CD5  2  60           	rts
000CD6  2               
000CD6  2               ;
000CD6  2               ; the the VERA memory pointer to sprite Y + attribute X
000CD6  2               ;	Y = sprite index
000CD6  2               ;	X = attribute offset
000CD6  2               ;
000CD6  2               vram:
000CD6  2  DA           	phx			; save X on the stack
000CD7  2               
000CD7  2  98           	tya			; index of the sprite
000CD8  2  0A           	asl
000CD9  2  A8           	tay			; index of the address of the sprite (y*2)
000CDA  2               
000CDA  2  A9 00        	lda #0
000CDC  2  8D 25 9F     	sta veractl
000CDF  2  A9 11        	lda #<(vram_sprd >> 16) | $10
000CE1  2  8D 22 9F     	sta verahi
000CE4  2  B9 07 1C     	lda sprites_table, y
000CE7  2  8D 21 9F     	sta veramid
000CEA  2  C8           	iny
000CEB  2  BA           	tsx
000CEC  2  BD 01 01     	lda $0101,x	; reload X from the stack
000CEF  2  79 07 1C     	adc sprites_table, y
000CF2  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
000CF5  2  FA           	plx
000CF6  2  60           	rts
000CF7  2               
000CF7  2               ;************************************************
000CF7  2               ; configure the sprite
000CF7  2               ;	input: 	A = sprite collision mask
000CF7  2               ;			Y = sprite index
000CF7  2               ;		   	X = sprite size :
000CF7  2               ;		   	r0 = vram @ of the sprite data
000CF7  2               ;
000CF7  2  07 0F 1F 3F  sprites_size: .byte 7, 15, 31, 63	; count byte 0 as a byte, so width is not "8" pixel nut "0" + "7" pixels
000CFB  2               
000CFB  2               load:
000CFB  2  86 70        	stx SPRITES_ZP
000CFD  2  85 72        	sta SPRITES_ZP + 2
000CFF  2  84 73        	sty SPRITES_ZP + 3
000D01  2  20 74 0D     	jsr set_bitmap
000D04  2               
000D04  2  9C 23 9F     	stz veradat					; x = 0
000D07  2  9C 23 9F     	stz veradat
000D0A  2  9C 23 9F     	stz veradat					; y = 0
000D0D  2  9C 23 9F     	stz veradat
000D10  2  A5 72        	lda SPRITES_ZP + 2			; load collision mask
000D12  2  09 00        	ora #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
000D14  2  8D 23 9F     	sta veradat
000D17  2  A5 70        	lda SPRITES_ZP				; 32x32 sprite
000D19  2  8D 23 9F     	sta veradat
000D1C  2               
000D1C  2  4A           	lsr
000D1D  2  4A           	lsr
000D1E  2  4A           	lsr
000D1F  2  4A           	lsr
000D20  2  85 70        	sta SPRITES_ZP				; focus on sprite_height, sprite_width
000D22  2               
000D22  2  A4 73        	ldy SPRITES_ZP + 3			; sprite index
000D24  2               
000D24  2  29 03        	and #%00000011				; sprite_width
000D26  2  AA           	tax
000D27  2  BD F7 0C     	lda sprites_size,x
000D2A  2  99 E7 0A     	sta sprites_aabb_w, y		; store width in pixels in the sprite attribute
000D2D  2  A9 00        	lda #00
000D2F  2  99 A7 0A     	sta sprites_aabb_x, y		; default collision box starts (0,0)
000D32  2               
000D32  2  A5 70        	lda SPRITES_ZP
000D34  2  4A           	lsr
000D35  2  4A           	lsr							; sprite_height
000D36  2  AA           	tax
000D37  2  BD F7 0C     	lda sprites_size,x
000D3A  2  99 07 0B     	sta sprites_aabb_h, y		; store height in pixels in the sprite attribute
000D3D  2  A9 00        	lda #00
000D3F  2  99 C7 0A     	sta sprites_aabb_y, y		; default collision box starts (0,0)
000D42  2               
000D42  2  60           	rts
000D43  2               
000D43  2               ;************************************************
000D43  2               ; set the collision box of the sprite
000D43  2               ;	input y = sprite index
000D43  2               ;		r0L = top-left corner X
000D43  2               ;		r0H = top-left corner Y
000D43  2               ;		r1L = width
000D43  2               ;		r1H = height
000D43  2               ;
000D43  2               set_aabb:
000D43  2  A5 02        	lda r0L
000D45  2  99 A7 0A     	sta sprites_aabb_x,y
000D48  2  A5 03        	lda r0H
000D4A  2  99 C7 0A     	sta sprites_aabb_y,y
000D4D  2  A5 04        	lda r1L
000D4F  2  99 E7 0A     	sta sprites_aabb_w,y
000D52  2  A5 05        	lda r1H
000D54  2  99 07 0B     	sta sprites_aabb_h,y
000D57  2  60           	rts
000D58  2               
000D58  2               ;************************************************
000D58  2               ; configure full veram memory (16:0) into optimized one (12:5)
000D58  2               ;	input: r0 = vram @ of the sprite data
000D58  2               ;	output: r1
000D58  2               ;
000D58  2               vram_to_16_5:
000D58  2               	; load full VERA memory (12:0) into R0
000D58  2  A5 02        	lda r0L
000D5A  2  85 04        	sta r1L
000D5C  2  A5 03        	lda r0H
000D5E  2  85 05        	sta r1H
000D60  2               
000D60  2               	; convert full addr to vera mode (bit shiting >> 5)
000D60  2  A5 05        	lda r1H
000D62  2  4A           	lsr
000D63  2  66 04        	ror r1L
000D65  2  4A           	lsr
000D66  2  66 04        	ror r1L
000D68  2  4A           	lsr
000D69  2  66 04        	ror r1L
000D6B  2  4A           	lsr
000D6C  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D6E  2  4A           	lsr
000D6F  2  66 04        	ror r1L						; bit shift 4x 16 bits vera memory
000D71  2  85 05        	sta r1H
000D73  2  60           	rts
000D74  2               
000D74  2               ;************************************************
000D74  2               ; change the address of the bitmap for the sprite
000D74  2               ;	Y = sprite index
000D74  2               ;	r0 = vera memory (12:5)
000D74  2               ;
000D74  2               set_bitmap:
000D74  2  A2 00        	ldx #VSPRITE::address125
000D76  2  20 D6 0C     	jsr vram			; set very pointer to the address of the bitmap
000D79  2               
000D79  2  A5 02        	lda r0L
000D7B  2  8D 23 9F     	sta veradat
000D7E  2  A5 03        	lda r0H
000D80  2  09 80        	ora #$80						; M = 8 bits
000D82  2  8D 23 9F     	sta veradat
000D85  2               
000D85  2  60           	rts
000D86  2               
000D86  2               ;************************************************
000D86  2               ; change the display byte for a sprite
000D86  2               ;	Y = sprite index
000D86  2               ;	X = display value to set
000D86  2               ;
000D86  2               display:
000D86  2  86 02        	stx r0L		; save X for later
000D88  2  84 03        	sty r0H
000D8A  2               
000D8A  2               	; set vram memory on the X sprite
000D8A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D8C  2  20 D6 0C     	jsr vram
000D8F  2  AD 23 9F     	lda veradat
000D92  2  29 F3        	and #(<~SPRITE_ZDEPTH_TOP)
000D94  2  05 02        	ora r0L
000D96  2  85 02        	sta r0L
000D98  2               
000D98  2  A4 03        	ldy r0H
000D9A  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000D9C  2  20 D6 0C     	jsr vram
000D9F  2               
000D9F  2  A5 02        	lda r0L
000DA1  2  8D 23 9F     	sta veradat
000DA4  2  60           	rts
000DA5  2               
000DA5  2               ;************************************************
000DA5  2               ; define position of sprite
000DA5  2               ;	Y = sprite index
000DA5  2               ;	r0 = addr of word X & word Y
000DA5  2               ;
000DA5  2               position:
000DA5  2               	; set vram memory on the X sprite
000DA5  2  5A           	phy
000DA6  2  A2 02        	ldx #VSPRITE::x70
000DA8  2  20 D6 0C     	jsr vram
000DAB  2  FA           	plx
000DAC  2               
000DAC  2  A0 01        	ldy #1
000DAE  2  18           	clc
000DAF  2  B2 02        	lda (r0L)				; X low => vera X
000DB1  2  8D 23 9F     	sta veradat
000DB4  2  7D A7 0A     	adc sprites_aabb_x, x	; X + aabb.x => collision box.x
000DB7  2  9D A7 09     	sta sprites_xL, x
000DBA  2  B1 02        	lda (r0L),y				; X high => vera X hight
000DBC  2  8D 23 9F     	sta veradat
000DBF  2  69 00        	adc #00
000DC1  2  9D C7 09     	sta sprites_xH, x		; X + aabbx.x => collision box.x
000DC4  2               
000DC4  2  18           	clc
000DC5  2  BD A7 09     	lda sprites_xL, x
000DC8  2  7D E7 0A     	adc sprites_aabb_w, x
000DCB  2  9D 27 0A     	sta sprites_x1L, x
000DCE  2  BD C7 09     	lda sprites_xH, x
000DD1  2  69 00        	adc #0
000DD3  2  9D 47 0A     	sta sprites_x1H, x		;X1 = x + aabb.x + aabb.w
000DD6  2               
000DD6  2  18           	clc
000DD7  2  C8           	iny
000DD8  2  B1 02        	lda (r0L),y
000DDA  2  8D 23 9F     	sta veradat				; Y low => vera
000DDD  2  7D C7 0A     	adc sprites_aabb_y, x
000DE0  2  9D E7 09     	sta sprites_yL, x		; Y + aabb.y => collision box.y
000DE3  2  C8           	iny
000DE4  2  B1 02        	lda (r0L),y
000DE6  2  8D 23 9F     	sta veradat				; Y heigh  => vera Y high
000DE9  2  69 00        	adc #0
000DEB  2  9D 07 0A     	sta sprites_yH, x		; Y + aabb.y => collision box.y
000DEE  2               
000DEE  2  18           	clc
000DEF  2  BD E7 09     	lda sprites_yL, x
000DF2  2  7D 07 0B     	adc sprites_aabb_h, x
000DF5  2  9D 67 0A     	sta sprites_y1L, x
000DF8  2  BD 07 0A     	lda sprites_yH, x
000DFB  2  69 00        	adc #00
000DFD  2  9D 87 0A     	sta sprites_y1H, x		; Y1 = y + aabb.y + aabb.h
000E00  2               
000E00  2  60           	rts
000E01  2               
000E01  2               ;************************************************
000E01  2               ; Change the flipping of a sprite
000E01  2               ;	Y = sprite index
000E01  2               ;	A = value to set
000E01  2               ;
000E01  2               set_flip:
000E01  2  85 70        	sta SPRITES_ZP
000E03  2  84 71        	sty SPRITES_ZP + 1
000E05  2               
000E05  2               	; set vram memory on the X sprite
000E05  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E07  2  20 D6 0C     	jsr vram
000E0A  2               
000E0A  2  AD 23 9F     	lda veradat				;get current value
000E0D  2  29 FC        	and #SPRITE_FLIP_CLEAR
000E0F  2  05 70        	ora SPRITES_ZP			; change only the flip value
000E11  2  85 70        	sta SPRITES_ZP
000E13  2               
000E13  2  A4 71        	ldy SPRITES_ZP + 1
000E15  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000E17  2  20 D6 0C     	jsr vram
000E1A  2  A5 70        	lda SPRITES_ZP
000E1C  2  8D 23 9F     	sta veradat
000E1F  2  60           	rts
000E20  2               
000E20  2               ;************************************************
000E20  2               ; register sprites collision
000E20  2               ; input: A = collision mask
000E20  2               ;
000E20  2               register_collision:
000E20  2  EE 68 0C     	inc collisions
000E23  2  8D 69 0C     	sta collisions + 1
000E26  2  60           	rts
000E27  2               
000E27  2               ;************************************************
000E27  2               ; Axis Aligned Bounding Box collision between 2 sprites
000E27  2               ; input: X = index of sprite 1
000E27  2               ;		 Y = index of sprite 2
000E27  2               ; return: Z = no collision
000E27  2               ;
000E27  2               aabb_collision:
000E27  2  BD C7 09     	lda sprites_xH, x
000E2A  2  D9 47 0A     	cmp sprites_x1H, y
000E2D  2  90 02        	bcc :+
000E2F  2  D0 49        	bne @false
000E31  2               :
000E31  2  BD A7 09     	lda sprites_xL, x
000E34  2  D9 27 0A     	cmp sprites_x1L, y
000E37  2  90 02        	bcc :+
000E39  2  D0 3F        	bne @false
000E3B  2               :						; s(x).left_x <= s(y).right_x
000E3B  2               
000E3B  2  B9 C7 09     	lda sprites_xH, y
000E3E  2  DD 47 0A     	cmp sprites_x1H, x
000E41  2  90 02        	bcc :+
000E43  2  D0 35        	bne @false
000E45  2               :
000E45  2  B9 A7 09     	lda sprites_xL, y
000E48  2  DD 27 0A     	cmp sprites_x1L, x
000E4B  2  90 02        	bcc :+
000E4D  2  D0 2B        	bne @false
000E4F  2               :						; AND s(y).left_x <= s(x).right_x
000E4F  2               
000E4F  2  BD 07 0A     	lda sprites_yH, x
000E52  2  D9 87 0A     	cmp sprites_y1H, y
000E55  2  90 02        	bcc :+
000E57  2  D0 21        	bne @false
000E59  2               :
000E59  2  BD E7 09     	lda sprites_yL, x
000E5C  2  D9 67 0A     	cmp sprites_y1L, y
000E5F  2  90 02        	bcc :+
000E61  2  D0 17        	bne @false
000E63  2               :						; AND s(x).bottom_y <= s(y).top_y
000E63  2               
000E63  2  B9 07 0A     	lda sprites_yH, y
000E66  2  DD 87 0A     	cmp sprites_y1H, x
000E69  2  90 02        	bcc :+
000E6B  2  D0 0D        	bne @false
000E6D  2               :
000E6D  2  B9 E7 09     	lda sprites_yL, y
000E70  2  DD 67 0A     	cmp sprites_y1L, x
000E73  2  90 02        	bcc :+
000E75  2  D0 03        	bne @false
000E77  2               :						; AND s(y).bottom_y <= s(x).top_y
000E77  2               
000E77  2               @true:
000E77  2  A9 01        	lda #01
000E79  2  60           	rts
000E7A  2               @false:
000E7A  2  A9 00        	lda #00
000E7C  2  60           	rts
000E7D  2               
000E7D  2               ;************************************************
000E7D  2               ; after a collision IRQ, test all sprites to find colliding ones
000E7D  2               ; return: a = no collision
000E7D  2               ;
000E7D  2               find_colliding:
000E7D  2  AD 67 0C     	lda nb_sprites
000E80  2  3A           	dec
000E81  2  85 70        	sta SPRITES_ZP
000E83  2  3A           	dec
000E84  2  85 71        	sta SPRITES_ZP + 1
000E86  2               
000E86  2               @inner_loop:
000E86  2  A6 70        	ldx SPRITES_ZP
000E88  2  A4 71        	ldy SPRITES_ZP + 1
000E8A  2  20 27 0E     	jsr aabb_collision
000E8D  2  D0 15        	bne @found
000E8F  2               
000E8F  2  C6 71        	dec SPRITES_ZP + 1
000E91  2  30 02        	bmi @try_next
000E93  2  80 F1        	bra @inner_loop
000E95  2               
000E95  2               @try_next:
000E95  2  A5 70        	lda SPRITES_ZP
000E97  2  3A           	dec
000E98  2  F0 07        	beq @not_found
000E9A  2  85 70        	sta SPRITES_ZP			; start comparison end - 1
000E9C  2  3A           	dec						; compare with start - 1 unless < 0
000E9D  2  85 71        	sta SPRITES_ZP + 1
000E9F  2  80 E5        	bra @inner_loop
000EA1  2               
000EA1  2               @not_found:
000EA1  2  A9 00        	lda #00
000EA3  2  60           	rts
000EA4  2               @found:
000EA4  2  A9 01        	lda #01
000EA6  2  60           	rts
000EA7  2               
000EA7  2               ;************************************************
000EA7  2               ; manage collisions after a collision IRQ
000EA7  2               ;
000EA7  2               check_irq_collision:
000EA7  2  AD 68 0C     	lda collisions
000EAA  2  F0 06        	beq @return
000EAC  2               
000EAC  2  9C 68 0C     	stz collisions		; clear the collision flag
000EAF  2               
000EAF  2  20 7D 0E     	jsr find_colliding
000EB2  2               
000EB2  2               @return:
000EB2  2  60           	rts
000EB3  2               
000EB3  2               ;************************************************
000EB3  2               ; check if sprite X collides with any of the others
000EB3  2               ; input : X = sprite index to test
000EB3  2               ; return: a = index of sprite in collision
000EB3  2               ;
000EB3  2               check_collision:
000EB3  2  86 70        	stx SPRITES_ZP
000EB5  2  AD 67 0C     	lda nb_sprites
000EB8  2  3A           	dec
000EB9  2  F0 10        	beq @no_collision		; if there is only 1 sprite, no_collision
000EBB  2  A8           	tay						; start with the last sprite
000EBC  2               @loop:
000EBC  2  C4 70        	cpy SPRITES_ZP
000EBE  2  F0 05        	beq @next				; ignore the input sprite
000EC0  2  20 27 0E     	jsr aabb_collision
000EC3  2  D0 05        	bne @collision
000EC5  2               @next:
000EC5  2  88           	dey
000EC6  2  30 03        	bmi @no_collision		; 0 has to be taked care off
000EC8  2  80 F2        	bra @loop
000ECA  2               
000ECA  2               @collision:
000ECA  2  60           	rts
000ECB  2               
000ECB  2               @no_collision:
000ECB  2  A9 00        	lda #00
000ECD  2  60           	rts
000ECE  2               
000ECE  2               ;************************************************
000ECE  2               ; simulate a sprite movement and check collision
000ECE  2               ;	input A = vertical (1) / horizontal (2)
000ECE  2               ;			  plus (4) / minus (8)
000ECE  2               ;		  X = sprite index
000ECE  2               ;
000ECE  2               precheck_collision:
000ECE  2  85 72        	sta SPRITES_ZP + 2
000ED0  2  86 73        	stx SPRITES_ZP + 3
000ED2  2               
000ED2  2  89 01        	bit #01
000ED4  2  D0 5D        	bne @vertical
000ED6  2  89 08        	bit #08
000ED8  2  D0 2D        	bne @horizontal_minus
000EDA  2               
000EDA  2               @horizontal_plus:
000EDA  2               	; save current X, X1 and add the delta
000EDA  2  18           	clc
000EDB  2  BD A7 09     	lda sprites_xL, x
000EDE  2  85 75        	sta SPRITES_ZP + 5
000EE0  2  69 01        	adc #01
000EE2  2  9D A7 09     	sta sprites_xL, x
000EE5  2               
000EE5  2  BD C7 09     	lda sprites_xH, x
000EE8  2  85 76        	sta SPRITES_ZP + 6
000EEA  2  69 00        	adc #00
000EEC  2  9D C7 09     	sta sprites_xH, x
000EEF  2               @horizontal_plus_width:
000EEF  2  18           	clc
000EF0  2  BD 27 0A     	lda sprites_x1L, x
000EF3  2  85 77        	sta SPRITES_ZP + 7
000EF5  2  65 74        	adc SPRITES_ZP + 4
000EF7  2  9D 27 0A     	sta sprites_x1L, x
000EFA  2               
000EFA  2  BD 47 0A     	lda sprites_x1H, x
000EFD  2  85 78        	sta SPRITES_ZP + 8
000EFF  2  69 00        	adc #00
000F01  2  9D 47 0A     	sta sprites_x1H, x
000F04  2  4C 8D 0F     	jmp @test
000F07  2               
000F07  2               @horizontal_minus:
000F07  2  38           	sec
000F08  2  BD A7 09     	lda sprites_xL, x
000F0B  2  85 75        	sta SPRITES_ZP + 5
000F0D  2  E9 01        	sbc #01
000F0F  2  9D A7 09     	sta sprites_xL, x
000F12  2               
000F12  2  BD C7 09     	lda sprites_xH, x
000F15  2  85 76        	sta SPRITES_ZP + 6
000F17  2  E9 00        	sbc #00
000F19  2  9D C7 09     	sta sprites_xH, x
000F1C  2               @horizontal_minus_width:
000F1C  2  38           	sec
000F1D  2  BD 27 0A     	lda sprites_x1L, x
000F20  2  85 77        	sta SPRITES_ZP + 7
000F22  2  E9 01        	sbc #01
000F24  2  9D 27 0A     	sta sprites_x1L, x
000F27  2               
000F27  2  BD 47 0A     	lda sprites_x1H, x
000F2A  2  85 78        	sta SPRITES_ZP + 8
000F2C  2  E9 00        	sbc #00
000F2E  2  9D 47 0A     	sta sprites_x1H, x
000F31  2  80 5A        	bra @test
000F33  2               
000F33  2               @vertical:
000F33  2  89 08        	bit #08
000F35  2  D0 2C        	bne @vertical_minus
000F37  2               @vertical_plus:
000F37  2               	; save current Y, Y1 and add delta
000F37  2  18           	clc
000F38  2  BD E7 09     	lda sprites_yL, x
000F3B  2  85 75        	sta SPRITES_ZP + 5
000F3D  2  69 01        	adc #01
000F3F  2  9D E7 09     	sta sprites_yL, x
000F42  2               
000F42  2  BD 07 0A     	lda sprites_yH, x
000F45  2  85 76        	sta SPRITES_ZP + 6
000F47  2  69 00        	adc #00
000F49  2  9D 07 0A     	sta sprites_yH, x
000F4C  2               
000F4C  2  18           	clc
000F4D  2  BD 67 0A     	lda sprites_y1L, x
000F50  2  85 77        	sta SPRITES_ZP + 7
000F52  2  69 01        	adc #01
000F54  2  9D 67 0A     	sta sprites_y1L, x
000F57  2               
000F57  2  BD 87 0A     	lda sprites_y1H, x
000F5A  2  85 78        	sta SPRITES_ZP + 8
000F5C  2  69 00        	adc #00
000F5E  2  9D 87 0A     	sta sprites_y1H, x
000F61  2  80 2A        	bra @test
000F63  2               @vertical_minus:
000F63  2               	; save current Y, Y1 and add delta
000F63  2  38           	sec
000F64  2  BD E7 09     	lda sprites_yL, x
000F67  2  85 75        	sta SPRITES_ZP + 5
000F69  2  E9 01        	sbc #01
000F6B  2  9D E7 09     	sta sprites_yL, x
000F6E  2               
000F6E  2  BD 07 0A     	lda sprites_yH, x
000F71  2  85 76        	sta SPRITES_ZP + 6
000F73  2  E9 00        	sbc #00
000F75  2  9D 07 0A     	sta sprites_yH, x
000F78  2               
000F78  2  38           	sec
000F79  2  BD 67 0A     	lda sprites_y1L, x
000F7C  2  85 77        	sta SPRITES_ZP + 7
000F7E  2  69 01        	adc #01
000F80  2  9D 67 0A     	sta sprites_y1L, x
000F83  2               
000F83  2  BD 87 0A     	lda sprites_y1H, x
000F86  2  85 78        	sta SPRITES_ZP + 8
000F88  2  E9 00        	sbc #00
000F8A  2  9D 87 0A     	sta sprites_y1H, x
000F8D  2               
000F8D  2               @test:
000F8D  2  20 B3 0E     	jsr check_collision
000F90  2  85 74        	sta SPRITES_ZP + 4		; save the result
000F92  2               
000F92  2               @restore:
000F92  2               	; and restore the data
000F92  2  A6 73        	ldx SPRITES_ZP + 3
000F94  2  A5 72        	lda SPRITES_ZP + 2
000F96  2  89 02        	bit #02
000F98  2  F0 16        	beq @vertical_restore
000F9A  2               @horizontal_restore:
000F9A  2  A5 75        	lda SPRITES_ZP + 5
000F9C  2  9D A7 09     	sta sprites_xL, x
000F9F  2  A5 76        	lda SPRITES_ZP + 6
000FA1  2  9D C7 09     	sta sprites_xH, x
000FA4  2  A5 77        	lda SPRITES_ZP + 7
000FA6  2  9D 27 0A     	sta sprites_x1L, x
000FA9  2  A5 78        	lda SPRITES_ZP + 8
000FAB  2  9D C7 09     	sta sprites_xH, x
000FAE  2  80 14        	bra @return
000FB0  2               
000FB0  2               @vertical_restore:
000FB0  2  A5 75        	lda SPRITES_ZP + 5
000FB2  2  9D E7 09     	sta sprites_yL, x
000FB5  2  A5 76        	lda SPRITES_ZP + 6
000FB7  2  9D 07 0A     	sta sprites_yH, x
000FBA  2  A5 77        	lda SPRITES_ZP + 7
000FBC  2  9D 67 0A     	sta sprites_y1L, x
000FBF  2  A5 78        	lda SPRITES_ZP + 8
000FC1  2  9D 07 0A     	sta sprites_yH, x
000FC4  2               
000FC4  2               @return:
000FC4  2  A5 74        	lda SPRITES_ZP + 4	; result of the collision
000FC6  2  60           	rts
000FC7  2               
000FC7  2               .endscope
000FC7  2               
000FC7  1               .include "objects.asm"
000FC7  2               ;-----------------------------------------------------------------------------
000FC7  2               ;/////////////////////////////////////////////////////////////////////////////
000FC7  2               ;           start OBJECT code
000FC7  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000FC7  2               ;-----------------------------------------------------------------------------
000FC7  2               
000FC7  2               .scope Objects
000FC7  2               
000FC7  2  00 00        objects_map: .word 0
000FC9  2  00 00        objects_sprites: .word 0    ; vera memory of the start of the sprites
000FCB  2               
000FCB  2               .struct Object
000FCB  2                   spriteID    .byte   ; ID of the vera sprite
000FCB  2                   imageID     .byte   ; ID of the image in the spritesheet
000FCB  2                   levelx      .word   ; level position
000FCB  2                   levely      .word
000FCB  2                   px          .word   ; screen position
000FCB  2                   py          .word
000FCB  2               .endstruct
000FCB  2               
000FCB  2               ;************************************************
000FCB  2               ; init the object data of the level
000FCB  2               ;
000FCB  2               init:
000FCB  2                   ; load the list of objects at the end of the previous load
000FCB  2  AD 10 08         lda current_load
000FCE  2  8D C7 0F         sta objects_map
000FD1  2  AD 11 08         lda current_load + 1
000FD4  2  8D C8 0F         sta objects_map + 1
000FD7  2  A9 01 A2 08  	LOAD_FILE_NEXT fsobjects, (fsobjects_end-fsobjects)
000FDB  2  A0 00 20 BA  
000FDF  2  FF A9 0B A2  
000FFA  2               
000FFA  2                   ; load the sprites  of objects at the end of the previous vload
000FFA  2  AD 12 08         lda Vera::vram_load
000FFD  2  8D C9 0F         sta objects_sprites
001000  2  AD 13 08         lda Vera::vram_load + 1
001003  2  8D CA 0F         sta objects_sprites + 1
001006  2  A9 01 A2 08  	VLOAD_FILE_NEXT fssprites1, (fssprites1_end-fssprites1)
00100A  2  A0 00 20 BA  
00100E  2  FF A9 0C A2  
001029  2               
001029  2                   ; add each available sprites on screen
001029  2  AD C7 0F         lda objects_map
00102C  2  85 08            sta r3L
00102E  2  AD C8 0F         lda objects_map + 1
001031  2  85 09            sta r3H
001033  2               
001033  2  B2 08            lda (r3)
001035  2  85 31            sta $31     ; number of objects
001037  2  64 32            stz $32     ; object #0
001039  2               
001039  2  E6 08            inc r3L
00103B  2               
00103B  2               @loop:
00103B  2                   ; get a free sprite
00103B  2  20 BE 0C         jsr Sprite::new
00103E  2  8A               txa
00103F  2  92 08            sta (r3)
001041  2               
001041  2                   ; load the first object
001041  2  AD C9 0F     	lda objects_sprites
001044  2  85 02        	sta r0L
001046  2  AD CA 0F     	lda objects_sprites + 1
001049  2  85 03        	sta r0H
00104B  2  20 58 0D         jsr Sprite::vram_to_16_5
00104E  2  A5 04            lda r1L
001050  2  85 02            sta r0L
001052  2  A5 05            lda r1H
001054  2  85 03            sta r0H
001056  2               
001056  2  B2 08        	lda (r3)                        ; sprite id
001058  2  A8               tay
001059  2  A9 10           	lda #%00010000					; collision mask 1
00105B  2  A2 50           	ldx #%01010000					; 16x16 sprite
00105D  2  20 FB 0C     	jsr Sprite::load
001060  2               
001060  2                   ; display the object
001060  2  B2 08        	lda (r3)                        ; sprite id
001062  2  A8               tay
001063  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
001065  2  20 86 0D     	jsr Sprite::display
001068  2               
001068  2                   ; position the first object
001068  2  20 A1 10         jsr set_position_r3
00106B  2               
00106B  2                   ; last object ?
00106B  2  C6 31            dec $31
00106D  2  F0 11            beq @return
00106F  2               
00106F  2                   ; move to the next object
00106F  2  18               clc
001070  2  A5 08            lda r3L
001072  2  69 0A            adc #.sizeof(Object)
001074  2  85 08            sta r3L
001076  2  A5 09            lda r3H
001078  2  69 00            adc #00
00107A  2  85 09            sta r3H
00107C  2               
00107C  2  E6 32            inc $32                     ; object #next
00107E  2  80 BB            bra @loop
001080  2               
001080  2               @return:
001080  2  60               rts
001081  2               
001081  2               ;************************************************
001081  2               ; change  position of the sprite (level view) => (screen view)
001081  2               ;   input: X = index of the object
001081  2               ;
001081  2               set_position_index:
001081  2  AD C7 0F         lda objects_map
001084  2  85 08            sta r3L
001086  2  AD C8 0F         lda objects_map + 1
001089  2  85 09            sta r3H
00108B  2  E6 08            inc r3L
00108D  2               
00108D  2  E0 00            cpx #00                 ; ignore object 0
00108F  2  F0 10            beq @next
001091  2               
001091  2               @mult:
001091  2  18               clc
001092  2  A5 08            lda r3L
001094  2  69 0A            adc #.sizeof(Object)
001096  2  85 08            sta r3L
001098  2  A5 09            lda r3H
00109A  2  69 00            adc #00
00109C  2  85 09            sta r3H
00109E  2  CA               dex
00109F  2  D0 F0            bne @mult               ; r2 = objects_map + X*sizeof(Object)
0010A1  2               
0010A1  2               @next:
0010A1  2               
0010A1  2               ;************************************************
0010A1  2               ; change  position of the sprite (level view) => (screen view)
0010A1  2               ;   input: R3 = start of the object
0010A1  2               ;
0010A1  2               set_position_r3:
0010A1  2                   ; screenX = levelX - layer1_scroll_x
0010A1  2  A0 02            ldy #Object::levelx
0010A3  2  38               sec
0010A4  2  B1 08            lda (r3), y
0010A6  2  ED 37 9F         sbc VERA_L1_hscrolllo
0010A9  2  85 02            sta r0L
0010AB  2  C8               iny
0010AC  2  B1 08            lda (r3), y
0010AE  2  ED 38 9F         sbc VERA_L1_hscrolllo + 1
0010B1  2  85 03            sta r0H
0010B3  2               
0010B3  2                   ; screenY = levelY - layer1_scroll_y
0010B3  2  A0 04            ldy #Object::levely
0010B5  2  38               sec
0010B6  2  B1 08            lda (r3), y
0010B8  2  ED 39 9F         sbc VERA_L1_vscrolllo
0010BB  2  85 04            sta r1L
0010BD  2  C8               iny
0010BE  2  B1 08            lda (r3), y
0010C0  2  ED 3A 9F         sbc VERA_L1_vscrolllo + 1
0010C3  2  85 05            sta r1H
0010C5  2               
0010C5  2                   ; save the screen positions in the object
0010C5  2  A0 06            ldy #Object::px
0010C7  2  A5 02            lda r0L
0010C9  2  91 08            sta (r3), Y
0010CB  2  C8               iny
0010CC  2  A5 03            lda r0H
0010CE  2  91 08            sta (r3), Y
0010D0  2               
0010D0  2  A0 08            ldy #Object::py
0010D2  2  A5 04            lda r1L
0010D4  2  91 08            sta (r3), Y
0010D6  2  C8               iny
0010D7  2  A5 05            lda r1H
0010D9  2  91 08            sta (r3), Y
0010DB  2               
0010DB  2                   ; set the player position
0010DB  2  B2 08        	lda (r3)                        ; sprite id
0010DD  2  A8               tay
0010DE  2               
0010DE  2                   ; adresse of thepx, py attributes
0010DE  2  18               clc
0010DF  2  A5 08            lda r3L
0010E1  2  69 06            adc #Object::px
0010E3  2  85 02            sta r0L
0010E5  2  A5 09            lda r3H
0010E7  2  69 00            adc #00
0010E9  2  85 03            sta r0H
0010EB  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
0010EE  2               
0010EE  2  60               rts
0010EF  2               
0010EF  2               ;************************************************
0010EF  2               ; change position of all sprites when the layer moves (level view) => (screen view)
0010EF  2               ;
0010EF  2               fix_positions:
0010EF  2  AD C7 0F         lda objects_map
0010F2  2  85 08            sta r3L
0010F4  2  AD C8 0F         lda objects_map + 1
0010F7  2  85 09            sta r3H
0010F9  2               
0010F9  2  B2 08            lda (r3)
0010FB  2  85 31            sta $31     ; number of objects
0010FD  2  64 32            stz $32
0010FF  2  E6 08            inc r3L
001101  2               
001101  2               @loop:
001101  2                   ; position the first object
001101  2  20 A1 10         jsr set_position_r3
001104  2               
001104  2                   ; last object ?
001104  2  E6 32            inc $32
001106  2  C6 31            dec $31
001108  2  F0 0F            beq @return
00110A  2               
00110A  2                   ; move to the next object
00110A  2  18               clc
00110B  2  A5 08            lda r3L
00110D  2  69 0A            adc #.sizeof(Object)
00110F  2  85 08            sta r3L
001111  2  A5 09            lda r3H
001113  2  69 00            adc #00
001115  2  85 09            sta r3H
001117  2               
001117  2  80 E8            bra @loop
001119  2               
001119  2               @return:
001119  2  60               rts
00111A  2               
00111A  2               .endscope
00111A  2               
00111A  1               .include "layers.asm"
00111A  2               ;-----------------------------------------------------------------------------
00111A  2               ;/////////////////////////////////////////////////////////////////////////////
00111A  2               ; START Layers code
00111A  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00111A  2               ;-----------------------------------------------------------------------------
00111A  2               
00111A  2               .scope Layers
00111A  2               
00111A  2               HSCROLL = 0
00111A  2               VSCROLL = 2
00111A  2               
00111A  2               ;************************************************
00111A  2               ; increase layer scrolling with a 8bits limit
00111A  2               ;	X: : 0 = horizontal
00111A  2               ;	   : 2 = vertical
00111A  2               ;	Y: limit
00111A  2               ;
00111A  2               scroll_inc_8:
00111A  2  84 02        	sty r0L
00111C  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00111F  2  C5 02        	cmp r0L
001121  2  F0 0F        	beq @noscroll
001123  2               @scrollinc:
001123  2  1A           	inc
001124  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001127  2  D0 03        	bne @scrolled
001129  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00112C  2               @scrolled:
00112C  2               	; fix the objects position now that the layers scrolled
00112C  2  20 EF 10     	jsr Objects::fix_positions
00112F  2  A9 01        	lda #01		; clear ZERO => scrolled
001131  2  60           	rts
001132  2               @noscroll:
001132  2  A9 00        	lda #00		; set ZERO => noscroll
001134  2  60           	rts
001135  2               
001135  2               ;************************************************
001135  2               ; increase layer scrolling with a 16bits limit
001135  2               ;	X: : 0 = horizontal
001135  2               ;	   : 2 = vertical
001135  2               ;	r0L: limit
001135  2               ;
001135  2               scroll_inc_16:
001135  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001138  2  C5 02        	cmp r0L
00113A  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
00113C  2  A8           	tay
00113D  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
001140  2  C5 03        	cmp r0H
001142  2  F0 10        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
001144  2  98           	tya
001145  2               @scrollinc:
001145  2  1A           	inc
001146  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001149  2  D0 03        	bne @scrolled
00114B  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
00114E  2               @scrolled:
00114E  2               	; fix the objects position now that the layers scrolled
00114E  2  20 EF 10     	jsr Objects::fix_positions
001151  2  A9 01        	lda #01	; clear ZERO => scrolled
001153  2  60           	rts
001154  2               @noscroll:
001154  2  A9 00        	lda #00	; set ZERO => noscroll
001156  2  60           	rts
001157  2               
001157  2               ; increase a layer scroll offset but do NOT overlap
001157  2               .macro VSCROLL_INC direction,limit
001157  2               .if limit > 255
001157  2               	LOAD_r0 limit
001157  2               	ldx #direction
001157  2               	jsr Layers::scroll_inc_16
001157  2               .else
001157  2               	ldy #limit
001157  2               	ldx #direction
001157  2               	jsr Layers::scroll_inc_8
001157  2               .endif
001157  2               .endmacro
001157  2               
001157  2               ;
001157  2               ;
001157  2               ; decrease a layer scroll offset
001157  2               ;	X : 0 = horizontal
001157  2               ;	  : 2 = vertical
001157  2               ;
001157  2               scroll_dec:
001157  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00115A  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
00115C  2  3A           	dec
00115D  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
001160  2  80 0E        	bra @scrolled
001162  2               @scrollHI:
001162  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
001165  2  F0 0F        	beq @noscroll		; 0000 => no scrolling
001167  2  3A           	dec
001168  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
00116B  2  88           	dey
00116C  2  98           	tya
00116D  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
001170  2               
001170  2               @scrolled:
001170  2               	; fix the objects position now that the layers scrolled
001170  2  20 EF 10     	jsr Objects::fix_positions
001173  2  A9 01        	lda #01		; clear ZERO => scrolled
001175  2  60           	rts
001176  2               
001176  2               @noscroll:
001176  2  A9 00        	lda #00		; set ZERO => noscroll
001178  2  60           	rts
001179  2               
001179  2               ;
001179  2               ; force layer0 scrolling to be half of the layer1 scrolling
001179  2               ;
001179  2               scroll_l0:
001179  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
00117C  2  4A           	lsr
00117D  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
001180  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
001183  2  6A           	ror
001184  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
001187  2  60           	rts
001188  2               .endscope
001188  2               
001188  1               .include "tilemap.asm"
001188  2               ;-----------------------------------------------------------------------------
001188  2               ;/////////////////////////////////////////////////////////////////////////////
001188  2               ; START Tilemap code
001188  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001188  2               ;-----------------------------------------------------------------------------
001188  2               
001188  2               .scope Tilemap
001188  2               
001188  2               COLLISION_MAP = HIMEM
001188  2               
001188  2               ;************************************************
001188  2               ; load the layers and the collision map
001188  2               ;
001188  2               load:
001188  2               	; load tilemap into layer 0
001188  2  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
00118C  2  0F 09 00 8D  
001190  2  2D 9F        
001192  2  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
001196  2  0F 09 03 8D  
00119A  2  2D 9F        
00119C  2  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
0011A0  2  9F           
0011A1  2  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
0011A5  2  A0 00 20 BA  
0011A9  2  FF A9 0B A2  
0011C2  2               
0011C2  2               	; load tilemap into layer 1
0011C2  2  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
0011C6  2  0F 09 00 8D  
0011CA  2  34 9F        
0011CC  2  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
0011D0  2  0F 09 03 8D  
0011D4  2  34 9F        
0011D6  2  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
0011DA  2  9F           
0011DB  2  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
0011DF  2  A0 00 20 BA  
0011E3  2  FF A9 09 A2  
0011FC  2               
0011FC  2               	; load collisionmap into ram
0011FC  2  A9 00        	lda #0
0011FE  2  85 00        	sta $00
001200  2  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), COLLISION_MAP
001204  2  A0 00 20 BA  
001208  2  FF A9 0D A2  
001221  2               
001221  2               
001221  2  60               rts
001222  2               
001222  2               ;************************************************
001222  2               ; convert (x,y) position into a collision memory address
001222  2               ;	input: r0  = X
001222  2               ;            r1 = Y
001222  2               ;	output : r0
001222  2               ;
001222  2               get_collision_addr:
001222  2  A5 02        	lda r0L
001224  2  29 F0        	and #%11110000
001226  2  0A           	asl
001227  2  26 03        	rol r0H
001229  2  85 02        	sta r0L 					; r0 = first tile of the tilemap in the row
00122B  2               								; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
00122B  2               
00122B  2  A5 05            lda r1H
00122D  2  4A           	lsr
00122E  2  66 04        	ror r1L
001230  2  4A           	lsr
001231  2  66 04        	ror r1L
001233  2  4A           	lsr
001234  2  66 04        	ror r1L
001236  2  4A           	lsr
001237  2  66 04        	ror r1L
001239  2  85 05        	sta r1H 					; r1 = tile X in the row
00123B  2               								; sprite X /16 (convert to tile X)
00123B  2               
00123B  2  18           	clc
00123C  2  A5 02        	lda r0L
00123E  2  65 04        	adc r1L
001240  2  85 02        	sta r0L
001242  2  A5 03        	lda r0H
001244  2  65 05        	adc r1H
001246  2  85 03        	sta r0H						; r0 = tile position in the tilemap
001248  2               
001248  2  18           	clc
001249  2  A5 02        	lda r0L
00124B  2  69 00        	adc #<COLLISION_MAP
00124D  2  85 02        	sta r0L						; r0 = tile position in the memory tilemap
00124F  2  A5 03        	lda r0H
001251  2  69 A0        	adc #>COLLISION_MAP
001253  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
001255  2  60           	rts
001256  2               
001256  2               .endscope
001256  2               
001256  1               .include "player.asm"
001256  2               ;-----------------------------------------------------------------------------
001256  2               ;/////////////////////////////////////////////////////////////////////////////
001256  2               ; START player code
001256  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001256  2               ;-----------------------------------------------------------------------------
001256  2               
001256  2               PLAYER_SPRITE_ANIMATION = 3
001256  2               
001256  2               JUMP_LO_TICKS = 10
001256  2               JUMP_HI_TICKS = 2
001256  2               FALL_LO_TICKS = 8
001256  2               FALL_HI_TICKS = 2
001256  2               
001256  2               .enum
001256  2               	STATUS_WALKING_IDLE
001256  2               	STATUS_WALKING
001256  2               	STATUS_CLIMBING
001256  2               	STATUS_CLIMBING_IDLE
001256  2               	STATUS_FALLING
001256  2               	STATUS_JUMPING
001256  2               	STATUS_JUMPING_IDLE
001256  2               .endenum
001256  2               
001256  2               .enum
001256  2               	SITTING_NO_SLOP
001256  2               	SITTING_ON_SLOPE
001256  2               	SITTING_ABOVE_SLOPE
001256  2               .endenum
001256  2               
001256  2               .struct PLAYER
001256  2               	sprite			.byte	; sprite index
001256  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
001256  2               	falling_ticks	.word	; ticks since the player is fllaing (thing t in gravity)
001256  2               	delta_x			.byte	; when driving by phisics, original delta_x value
001256  2               	animation_tick	.byte
001256  2               	spriteID 		.byte	; current animation loop start
001256  2               	spriteAnim 		.byte	; current frame
001256  2               	spriteAnimDirection .byte ; direction of the animation
001256  2               	px 				.word	; relative X & Y on screen
001256  2               	py 				.word
001256  2               	levelx			.word	; absolute X & Y in the level
001256  2               	levely			.word
001256  2               	flip 			.byte
001256  2               	collision_addr	.word	; cached @ of the collision equivalent of the center of the player
001256  2               	vera_bitmaps    .res 	2*12	; 9 words to store vera bitmaps address
001256  2               .endstruct
001256  2               
001256  2               .macro m_status value
001256  2               	lda #(value)
001256  2               	sta player0 + PLAYER::status
001256  2               .endmacro
001256  2               
001256  2               .scope Player
001256  2               
001256  2               .macro SET_SPRITE id, frame
001256  2               	lda #id
001256  2               	sta player0 + PLAYER::spriteID
001256  2               	lda #frame
001256  2               	sta player0 + PLAYER::spriteAnim
001256  2               	jsr set_bitmap
001256  2               .endmacro
001256  2               
001256  2               ;************************************************
001256  2               ; player sprites status
001256  2               ;
001256  2               .enum Sprites
001256  2               	FRONT = 0
001256  2               	LEFT = 3
001256  2               	CLIMB = 6
001256  2               	HANG = 9
001256  2               .endenum
001256  2               
001256  2               ;************************************************
001256  2               ; local variables
001256  2               ;
001256  2               
001256  2  00           player_on_slop: .byte 0
001257  2  00           ladders: .byte 0
001258  2  00           test_right_left: .byte 0
001259  2               
001259  2               ;************************************************
001259  2               ; init the player data
001259  2               ;
001259  2               init:
001259  2  9C 07 1D     	stz player0 + PLAYER::sprite
00125C  2  A9 0A        	lda #10
00125E  2  8D 0C 1D     	sta player0 + PLAYER::animation_tick
001261  2  A9 00        	lda #STATUS_WALKING_IDLE
001263  2  8D 08 1D     	sta player0 + PLAYER::status
001266  2  9C 09 1D     	stz player0 + PLAYER::falling_ticks
001269  2  9C 0A 1D     	stz player0 + PLAYER::falling_ticks + 1
00126C  2  A9 03        	lda #Player::Sprites::LEFT
00126E  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001271  2  9C 0E 1D     	stz player0 + PLAYER::spriteAnim
001274  2  A9 01        	lda #1
001276  2  8D 0F 1D     	sta player0 + PLAYER::spriteAnimDirection
001279  2  9C 10 1D     	stz player0 + PLAYER::px
00127C  2  9C 11 1D     	stz player0 + PLAYER::px+1
00127F  2  9C 12 1D     	stz player0 + PLAYER::py
001282  2  9C 13 1D     	stz player0 + PLAYER::py+1
001285  2  9C 14 1D     	stz player0 + PLAYER::levelx
001288  2  9C 15 1D     	stz player0 + PLAYER::levelx+1
00128B  2  9C 16 1D     	stz player0 + PLAYER::levely
00128E  2  9C 17 1D     	stz player0 + PLAYER::levely+1
001291  2  9C 18 1D     	stz player0 + PLAYER::flip
001294  2               
001294  2               	; load sprites data at the end of the tiles
001294  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (::VRAM_tiles + tiles * tile_size)
001298  2  A0 00 20 BA  
00129C  2  FF A9 0B A2  
0012B5  2               
0012B5  2  AD 1B 1D     	lda player0 + PLAYER::vera_bitmaps
0012B8  2  85 02        	sta r0L
0012BA  2  AD 1C 1D     	lda player0 + PLAYER::vera_bitmaps+1
0012BD  2  85 03        	sta r0H
0012BF  2               
0012BF  2  AC 07 1D     	ldy player0 + PLAYER::sprite
0012C2  2  A9 10        	lda #%00010000					; collision mask 1
0012C4  2  A2 A0        	ldx #%10100000					; 32x32 sprite
0012C6  2  20 FB 0C     	jsr Sprite::load
0012C9  2               
0012C9  2  A9 08        	lda #08
0012CB  2  85 02        	sta r0L
0012CD  2  A9 00        	lda #00
0012CF  2  85 03        	sta r0H
0012D1  2  A9 0F        	lda #15
0012D3  2  85 04        	sta r1L
0012D5  2  A9 1F        	lda #31
0012D7  2  85 05        	sta r1H
0012D9  2  AC 07 1D     	ldy player0 + PLAYER::sprite
0012DC  2  20 43 0D     	jsr Sprite::set_aabb			; collision box (8,0) -> (24, 32)
0012DF  2               
0012DF  2               	; turn sprite 0 on
0012DF  2  AC 07 1D     	ldy player0 + PLAYER::sprite
0012E2  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0012E4  2  20 86 0D     	jsr Sprite::display
0012E7  2               
0012E7  2               	; register the vera simplified memory 12:5
0012E7  2  A2 00        	ldx #0
0012E9  2  A0 0C        	ldy #(3*4)
0012EB  2  A9 00 85 04  	LOAD_r1 (::VRAM_tiles + tiles * tile_size)
0012EF  2  A9 41 85 05  
0012F3  2               
0012F3  2               @loop:
0012F3  2               	; load full VERA memory (12:0) into R0
0012F3  2  A5 04        	lda r1L
0012F5  2  85 02        	sta r0L
0012F7  2  A5 05        	lda r1H
0012F9  2  85 03        	sta r0H
0012FB  2               
0012FB  2               	; convert full addr to vera mode (bit shiting >> 5)
0012FB  2  A5 03        	lda r0H
0012FD  2  4A           	lsr
0012FE  2  66 02        	ror r0L
001300  2  4A           	lsr
001301  2  66 02        	ror r0L
001303  2  4A           	lsr
001304  2  66 02        	ror r0L
001306  2  4A           	lsr
001307  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
001309  2  4A           	lsr
00130A  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
00130C  2               
00130C  2               	; store 12:5 into our cache
00130C  2  9D 1B 1D     	sta player0 + PLAYER::vera_bitmaps, x
00130F  2  E8           	inx
001310  2  A5 02        	lda r0L
001312  2  9D 1B 1D     	sta player0 + PLAYER::vera_bitmaps, x
001315  2  E8           	inx
001316  2               
001316  2               	; increase the vram (+4 r1H = +1024 r1)
001316  2  18           	clc
001317  2  A5 05        	lda r1H
001319  2  69 04        	adc #4
00131B  2  85 05        	sta r1H
00131D  2               
00131D  2  88           	dey
00131E  2  D0 D3        	bne @loop
001320  2               
001320  2               	; set first bitmap
001320  2  20 33 13     	jsr set_bitmap
001323  2  60           	rts
001324  2               
001324  2               ;************************************************
001324  2               ; force the current player sprite at its position
001324  2               ;
001324  2               position_set:
001324  2  AC 07 1D     	ldy player0 + PLAYER::sprite
001327  2  A9 10 85 02  	LOAD_r0 (player0 + PLAYER::px)
00132B  2  A9 1D 85 03  
00132F  2  20 A5 0D     	jsr Sprite::position			; set position of the sprite
001332  2  60           	rts
001333  2               
001333  2               ;************************************************
001333  2               ; change the player bitmap
001333  2               ;
001333  2               set_bitmap:
001333  2  18           	clc
001334  2  AD 0E 1D     	lda player0 + PLAYER::spriteAnim
001337  2  6D 0D 1D     	adc player0 + PLAYER::spriteID
00133A  2  0A           	asl						; convert sprite index to work position
00133B  2  AA           	tax
00133C  2               
00133C  2               	; extract the vera bitmap address in vera format (12:5 bits)
00133C  2  BD 1B 1D     	lda player0 + PLAYER::vera_bitmaps, x
00133F  2  85 03        	sta r0H
001341  2  BD 1C 1D     	lda player0 + PLAYER::vera_bitmaps + 1, x
001344  2  85 02        	sta r0L
001346  2               
001346  2  AC 07 1D     	ldy player0 + PLAYER::sprite
001349  2  20 74 0D     	jsr Sprite::set_bitmap
00134C  2  60           	rts
00134D  2               
00134D  2               ;************************************************
00134D  2               ; increase player X position
00134D  2               ;	modify r0
00134D  2               ;
00134D  2               position_x_inc:
00134D  2               	; move the absolute position levelx + 1
00134D  2  AD 14 1D     	lda player0 + PLAYER::levelx
001350  2  AE 15 1D     	ldx player0 + PLAYER::levelx + 1
001353  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
001355  2  D0 04        	bne @incLOW1
001357  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
001359  2  F0 48        	beq @no_move						; we are at the level limit
00135B  2               @incLOW1:
00135B  2  1A           	inc
00135C  2  8D 14 1D     	sta player0 + PLAYER::levelx
00135F  2  D0 04        	bne @inc_screen_x
001361  2               @incHi:
001361  2  E8           	inx
001362  2  8E 15 1D     	stx player0 + PLAYER::levelx + 1
001365  2               
001365  2               @inc_screen_x:
001365  2               	; distance from layer border to sprite absolute position
001365  2  38           	sec
001366  2  AD 14 1D     	lda player0 + PLAYER::levelx
001369  2  ED 37 9F     	sbc VERA_L1_hscrolllo
00136C  2  85 02        	sta r0L
00136E  2  AD 15 1D     	lda player0 + PLAYER::levelx + 1
001371  2  ED 38 9F     	sbc VERA_L1_hscrollhi
001374  2  85 03        	sta r0H
001376  2               
001376  2  D0 17        	bne @move_sprite_upper
001378  2  A6 03        	ldx r0H
00137A  2  A5 02        	lda r0L
00137C  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
00137E  2  90 19        	bcc @move_sprite
001380  2               
001380  2               @move_layers:
001380  2               	; keep the sprite onscreen 224, for level 224->416
001380  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
001384  2  20 1A 11     
001387  2  F0 06        	beq @move_sprite_upper
001389  2  A2 00        	ldx #Layers::HSCROLL
00138B  2  20 79 11     	jsr Layers::scroll_l0
00138E  2  60           	rts
00138F  2               
00138F  2               @move_sprite_upper:
00138F  2  AD 10 1D     	lda player0 + PLAYER::px
001392  2  AE 11 1D     	ldx player0 + PLAYER::px + 1
001395  2  1A           	inc
001396  2  D0 01        	bne @move_sprite
001398  2  E8           	inx
001399  2               
001399  2               @move_sprite:
001399  2  8D 10 1D     	sta player0 + PLAYER::px
00139C  2  8E 11 1D     	stx player0 + PLAYER::px + 1
00139F  2  20 24 13     	jsr Player::position_set
0013A2  2  60           	rts
0013A3  2               
0013A3  2               @no_move:
0013A3  2  60           	rts
0013A4  2               
0013A4  2               ;************************************************
0013A4  2               ; decrease player position X unless at 0
0013A4  2               ;
0013A4  2               position_x_dec:
0013A4  2               	; move the absolute position levelx + 1
0013A4  2  AD 14 1D     	lda player0 + PLAYER::levelx
0013A7  2  D0 05        	bne @decLOW
0013A9  2  AE 15 1D     	ldx player0 + PLAYER::levelx + 1
0013AC  2  F0 49        	beq @no_move						; we are at Y == 0
0013AE  2               @decLOW:
0013AE  2  3A           	dec
0013AF  2  8D 14 1D     	sta player0 + PLAYER::levelx
0013B2  2  C9 FF        	cmp #$ff
0013B4  2  D0 04        	bne @dec_screen_x
0013B6  2               @decHi:
0013B6  2  CA           	dex
0013B7  2  8E 15 1D     	stx player0 + PLAYER::levelx + 1
0013BA  2               
0013BA  2               @dec_screen_x:
0013BA  2               	; distance from layer border to sprite absolute position
0013BA  2  38           	sec
0013BB  2  AD 14 1D     	lda player0 + PLAYER::levelx
0013BE  2  ED 37 9F     	sbc VERA_L1_hscrolllo
0013C1  2  85 02        	sta r0L
0013C3  2  AD 15 1D     	lda player0 + PLAYER::levelx + 1
0013C6  2  ED 38 9F     	sbc VERA_L1_hscrollhi
0013C9  2  85 03        	sta r0H
0013CB  2               
0013CB  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
0013CD  2               
0013CD  2  A5 02        	lda r0L
0013CF  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
0013D1  2  C9 40        	cmp #64
0013D3  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
0013D5  2               
0013D5  2               @move_layers:
0013D5  2               	; keep the sprite onscreen 224, for level 224->416
0013D5  2  A2 00        	ldx #Layers::HSCROLL
0013D7  2  20 57 11     	jsr Layers::scroll_dec
0013DA  2  F0 06        	beq @move_sprite_lower
0013DC  2  A2 00        	ldx #Layers::HSCROLL
0013DE  2  20 79 11     	jsr Layers::scroll_l0
0013E1  2  60           	rts
0013E2  2               
0013E2  2               @move_sprite_lower:
0013E2  2  AD 10 1D     	lda player0 + PLAYER::px
0013E5  2  AE 11 1D     	ldx player0 + PLAYER::px + 1
0013E8  2  3A           	dec
0013E9  2  C9 FF        	cmp #$ff
0013EB  2  D0 01        	bne @move_sprite
0013ED  2  CA           	dex
0013EE  2               
0013EE  2               @move_sprite:
0013EE  2  8D 10 1D     	sta player0 + PLAYER::px
0013F1  2  8E 11 1D     	stx player0 + PLAYER::px + 1
0013F4  2  20 24 13     	jsr Player::position_set
0013F7  2               
0013F7  2               @no_move:
0013F7  2  60           	rts
0013F8  2               
0013F8  2               ;************************************************
0013F8  2               ; increase player Y position
0013F8  2               ;
0013F8  2               position_y_inc:
0013F8  2               	; move the absolute position levelx + 1
0013F8  2  AD 16 1D     	lda player0 + PLAYER::levely
0013FB  2  AE 17 1D     	ldx player0 + PLAYER::levely + 1
0013FE  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
001400  2  D0 04        	bne @incLOW1
001402  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
001404  2  F0 4E        	beq @no_move						; we are at the level limit
001406  2               @incLOW1:
001406  2  1A           	inc
001407  2  8D 16 1D     	sta player0 + PLAYER::levely
00140A  2  D0 04        	bne @inc_screen_y
00140C  2               @incHi:
00140C  2  E8           	inx
00140D  2  8E 17 1D     	stx player0 + PLAYER::levely + 1
001410  2               
001410  2               @inc_screen_y:
001410  2               	; distance from layer border to sprite absolute position
001410  2  38           	sec
001411  2  AD 16 1D     	lda player0 + PLAYER::levely
001414  2  ED 39 9F     	sbc VERA_L1_vscrolllo
001417  2  85 02        	sta r0L
001419  2  AD 17 1D     	lda player0 + PLAYER::levely + 1
00141C  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
00141F  2  85 03        	sta r0H
001421  2               
001421  2  D0 1D        	bne @move_sprite_upper
001423  2  A6 03        	ldx r0H
001425  2  A5 02        	lda r0L
001427  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
001429  2  90 1F        	bcc @move_sprite
00142B  2               
00142B  2               @move_layers:
00142B  2               	; keep the sprite onscreen 224, for level 224->416
00142B  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
00142F  2  A9 01 85 03  
001433  2  A2 02 20 35  
001438  2  F0 06        	beq @move_sprite_upper
00143A  2  A2 02        	ldx #Layers::VSCROLL
00143C  2  20 79 11     	jsr Layers::scroll_l0
00143F  2  60           	rts
001440  2               
001440  2               @move_sprite_upper:
001440  2  AD 12 1D     	lda player0 + PLAYER::py
001443  2  AE 13 1D     	ldx player0 + PLAYER::py + 1
001446  2  1A           	inc
001447  2  D0 01        	bne @move_sprite
001449  2  E8           	inx
00144A  2               
00144A  2               @move_sprite:
00144A  2  8D 12 1D     	sta player0 + PLAYER::py
00144D  2  8E 13 1D     	stx player0 + PLAYER::py + 1
001450  2  20 24 13     	jsr Player::position_set
001453  2  60           	rts
001454  2               
001454  2               @no_move:
001454  2  60           	rts
001455  2               
001455  2               ;;
001455  2  AD 12 1D     	lda player0 + PLAYER::py
001458  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
00145A  2  F0 09        	beq @moveleftP0
00145C  2  1A           	inc
00145D  2  8D 12 1D     	sta player0 + PLAYER::py
001460  2  D0 03        	bne @moveleftP0
001462  2  EE 13 1D     	inc player0 + PLAYER::py + 1
001465  2               @moveleftP0:
001465  2  20 24 13     	jsr Player::position_set
001468  2  60           	rts
001469  2               
001469  2               ;************************************************
001469  2               ; decrease player position X unless at 0
001469  2               ;
001469  2               position_y_dec:
001469  2               	; move the absolute position levelx + 1
001469  2  AD 16 1D     	lda player0 + PLAYER::levely
00146C  2  D0 05        	bne @decLOW
00146E  2  AE 17 1D     	ldx player0 + PLAYER::levely + 1
001471  2  F0 49        	beq @no_move						; we are at Y == 0
001473  2               @decLOW:
001473  2  3A           	dec
001474  2  8D 16 1D     	sta player0 + PLAYER::levely
001477  2  C9 FF        	cmp #$ff
001479  2  D0 04        	bne @dec_screen_y
00147B  2               @decHi:
00147B  2  CA           	dex
00147C  2  8E 17 1D     	stx player0 + PLAYER::levely + 1
00147F  2               
00147F  2               @dec_screen_y:
00147F  2               	; distance from layer border to sprite absolute position
00147F  2  38           	sec
001480  2  AD 16 1D     	lda player0 + PLAYER::levely
001483  2  ED 39 9F     	sbc VERA_L1_vscrolllo
001486  2  85 02        	sta r0L
001488  2  AD 17 1D     	lda player0 + PLAYER::levely + 1
00148B  2  ED 3A 9F     	sbc VERA_L1_vscrollhi
00148E  2  85 03        	sta r0H
001490  2               
001490  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
001492  2               
001492  2  A5 02        	lda r0L
001494  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
001496  2  C9 20        	cmp #32
001498  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
00149A  2               
00149A  2               @move_layers:
00149A  2               	; keep the sprite onscreen 224, for level 224->416
00149A  2  A2 02        	ldx #Layers::VSCROLL
00149C  2  20 57 11     	jsr Layers::scroll_dec
00149F  2  F0 06        	beq @move_sprite_lower
0014A1  2  A2 02        	ldx #Layers::VSCROLL
0014A3  2  20 79 11     	jsr Layers::scroll_l0
0014A6  2  60           	rts
0014A7  2               
0014A7  2               @move_sprite_lower:
0014A7  2  AD 12 1D     	lda player0 + PLAYER::py
0014AA  2  AE 13 1D     	ldx player0 + PLAYER::py + 1
0014AD  2  3A           	dec
0014AE  2  C9 FF        	cmp #$ff
0014B0  2  D0 01        	bne @move_sprite
0014B2  2  CA           	dex
0014B3  2               
0014B3  2               @move_sprite:
0014B3  2  8D 12 1D     	sta player0 + PLAYER::py
0014B6  2  8E 13 1D     	stx player0 + PLAYER::py + 1
0014B9  2  20 24 13     	jsr Player::position_set
0014BC  2               
0014BC  2               @no_move:
0014BC  2  60           	rts
0014BD  2               
0014BD  2               ;************************************************
0014BD  2               ; hide the current sprite
0014BD  2               ;
0014BD  2               hide1:
0014BD  2  DB           	stp
0014BE  2  18           	clc
0014BF  2  AD 0E 1D     	lda player0 + PLAYER::spriteAnim
0014C2  2  6D 0D 1D     	adc player0 + PLAYER::spriteID
0014C5  2  A8           	tay		; sprite index
0014C6  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
0014C8  2  20 86 0D     	jsr Sprite::display			; turn current sprite off
0014CB  2  60           	rts
0014CC  2               
0014CC  2               ;************************************************
0014CC  2               ; Animate the player if needed
0014CC  2               ;
0014CC  2               animate:
0014CC  2  AD 08 1D     	lda player0 + PLAYER::status
0014CF  2  C9 00        	cmp #STATUS_WALKING_IDLE
0014D1  2  F0 3A        	beq @end
0014D3  2  C9 04        	cmp #STATUS_FALLING
0014D5  2  F0 36        	beq @end
0014D7  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
0014D9  2  F0 32        	beq @end
0014DB  2               
0014DB  2  CE 0C 1D     	dec player0 + PLAYER::animation_tick
0014DE  2  D0 2D        	bne @end
0014E0  2               
0014E0  2  A9 0A        	lda #10
0014E2  2  8D 0C 1D     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
0014E5  2               
0014E5  2  18           	clc
0014E6  2  AD 0E 1D     	lda player0 + PLAYER::spriteAnim
0014E9  2  6D 0F 1D     	adc player0 + PLAYER::spriteAnimDirection
0014EC  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
0014EE  2  C9 03        	cmp #3
0014F0  2  F0 0B        	beq @set_sprite_anim_decrease
0014F2  2  80 10        	bra @set_sprite_on
0014F4  2               @set_sprite_anim_increase:
0014F4  2  A9 01        	lda #01
0014F6  2  8D 0F 1D     	sta player0 + PLAYER::spriteAnimDirection
0014F9  2  A9 00        	lda #0
0014FB  2  80 07        	bra @set_sprite_on
0014FD  2               @set_sprite_anim_decrease:
0014FD  2  A9 FF        	lda #$ff
0014FF  2  8D 0F 1D     	sta player0 + PLAYER::spriteAnimDirection
001502  2  A9 02        	lda #2
001504  2               @set_sprite_on:
001504  2  8D 0E 1D     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
001507  2  20 33 13     	jsr Player::set_bitmap
00150A  2  20 24 13     	jsr Player::position_set
00150D  2               @end:
00150D  2  60           	rts
00150E  2               
00150E  2               ;************************************************
00150E  2               ; force player status to be idle
00150E  2               ;
00150E  2               set_idle:
00150E  2  AD 08 1D     	lda player0 + PLAYER::status
001511  2  C9 01        	cmp #STATUS_WALKING
001513  2  F0 06        	beq @set_idle_walking
001515  2  C9 02        	cmp #STATUS_CLIMBING
001517  2  F0 08        	beq @set_idle_climbing
001519  2  60           	rts							; keep the current value
00151A  2               @set_idle_jump:
00151A  2  60           	rts
00151B  2               @set_idle_walking:
00151B  2  A9 00 8D 08  	m_status STATUS_WALKING_IDLE
00151F  2  1D           
001520  2  60           	rts
001521  2               @set_idle_climbing:
001521  2  A9 03 8D 08  	m_status STATUS_CLIMBING_IDLE
001525  2  1D           
001526  2  60           	rts
001527  2               
001527  2               ;************************************************
001527  2               ; check if the player sits on a solid tile
001527  2               ;
001527  2               physics:
001527  2  AD 16 1D     	lda player0 + PLAYER::levely		; sprite screen position
00152A  2  85 02        	sta r0L
00152C  2  AD 17 1D     	lda player0 + PLAYER::levely + 1
00152F  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
001531  2               
001531  2  AD 14 1D     	lda player0 + PLAYER::levelx		; sprite screen position
001534  2  85 04        	sta r1L
001536  2  AD 15 1D     	lda player0 + PLAYER::levelx + 1
001539  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
00153B  2               
00153B  2  20 22 12     	jsr Tilemap::get_collision_addr
00153E  2  A5 02 8D 19  	SAVE_r0 player0 + PLAYER::collision_addr	; cache the collision @
001542  2  1D A5 03 8D  
001546  2  1A 1D        
001548  2               
001548  2  AD 08 1D     	lda player0 + PLAYER::status
00154B  2  C9 02        	cmp #STATUS_CLIMBING
00154D  2  F0 0B        	beq @return1
00154F  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
001551  2  F0 07        	beq @return1
001553  2  C9 05        	cmp #STATUS_JUMPING
001555  2  D0 04        	bne @fall
001557  2  4C 13 16     	jmp @jump
00155A  2               @return1:
00155A  2  60           	rts
00155B  2               
00155B  2               	;
00155B  2               	; deal with gravity driven falling
00155B  2               	;
00155B  2               @fall:
00155B  2               .ifdef DEBUG
00155B  2               	CHECK_DEBUG
00155B  2               .endif
00155B  2  20 20 17     	jsr check_collision_down
00155E  2  F0 03        	beq @check_on_slope				; no solid tile below the player, still check if the player is ON a slope
001560  2  4C 06 16     	jmp @sit_on_solid				; solid tile below the player that is not a slope
001563  2               
001563  2               @check_on_slope:
001563  2  20 B4 17     	jsr check_player_on_slop
001566  2  F0 23        	beq @no_collision_down			; not ON a slope, and not ABOVE a solid tile => fall
001568  2               
001568  2               @on_slope:
001568  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
00156A  2  F0 0B        	beq @slope_left
00156C  2               @slope_right:
00156C  2  AD 14 1D     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
00156F  2  29 0F        	and #%00001111
001571  2  49 0F        	eor #%00001111					; X = 0 => Y can go up to 15
001573  2  85 30        	sta $30
001575  2  80 09        	bra @slope_y
001577  2               @slope_left:
001577  2  AD 14 1D     	lda player0 + PLAYER::levelx	; X position defines how far down Y can go
00157A  2  29 0F        	and #%00001111
00157C  2  85 30        	sta $30
00157E  2  80 00        	bra @slope_y
001580  2               @slope_y:
001580  2  AD 16 1D     	lda player0 + PLAYER::levely
001583  2  29 0F        	and #%00001111
001585  2  C5 30        	cmp $30
001587  2  30 02        	bmi @no_collision_down
001589  2  80 7B        	bra @sit_on_solid
00158B  2               
00158B  2               @no_collision_down:
00158B  2               	; if the player is already falling, increase t
00158B  2  AD 08 1D     	lda player0 + PLAYER::status
00158E  2  C9 04        	cmp #STATUS_FALLING
001590  2  F0 0D        	beq @increase_ticks
001592  2               
001592  2               	; let the player fall
001592  2  A9 04        	lda #STATUS_FALLING
001594  2  8D 08 1D     	sta player0 + PLAYER::status
001597  2  A9 08        	lda #FALL_LO_TICKS
001599  2  8D 09 1D     	sta player0 + PLAYER::falling_ticks	; reset t
00159C  2  9C 0A 1D     	stz player0 + PLAYER::falling_ticks + 1
00159F  2               @increase_ticks:
00159F  2  CE 09 1D     	dec player0 + PLAYER::falling_ticks	; increase HI every 10 refresh
0015A2  2  D0 08        	bne @drive_fall
0015A4  2  A9 08        	lda #FALL_LO_TICKS
0015A6  2  8D 09 1D     	sta player0 + PLAYER::falling_ticks	; reset t
0015A9  2  EE 0A 1D     	inc player0 + PLAYER::falling_ticks + 1
0015AC  2               
0015AC  2               @drive_fall:
0015AC  2  AD 0A 1D     	lda player0 + PLAYER::falling_ticks + 1
0015AF  2  F0 50        	beq @fall_once
0015B1  2  85 14        	sta r9L
0015B3  2               @loop_fall:
0015B3  2  20 F8 13     	jsr position_y_inc
0015B6  2               
0015B6  2               	; refresh the collision addre
0015B6  2  AD 16 1D     	lda player0 + PLAYER::levely		; sprite screen position
0015B9  2  85 02        	sta r0L
0015BB  2  AD 17 1D     	lda player0 + PLAYER::levely + 1
0015BE  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
0015C0  2               
0015C0  2  AD 14 1D     	lda player0 + PLAYER::levelx		; sprite screen position
0015C3  2  85 04        	sta r1L
0015C5  2  AD 15 1D     	lda player0 + PLAYER::levelx + 1
0015C8  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
0015CA  2               
0015CA  2  20 22 12     	jsr Tilemap::get_collision_addr
0015CD  2  A5 02 8D 19  	SAVE_r0 player0 + PLAYER::collision_addr
0015D1  2  1D A5 03 8D  
0015D5  2  1A 1D        
0015D7  2               
0015D7  2               	; test reached solid ground
0015D7  2  20 20 17     	jsr check_collision_down
0015DA  2  D0 2A        	bne @sit_on_solid
0015DC  2               
0015DC  2               @loop_fall_no_collision:
0015DC  2  C6 14        	dec r9L
0015DE  2  D0 D3        	bne @loop_fall						; take t in count for gravity
0015E0  2               
0015E0  2               @apply_delta_x:
0015E0  2  AD 0B 1D     	lda player0 + PLAYER::delta_x		; apply delatx
0015E3  2  F0 2D        	beq @return
0015E5  2  30 0D        	bmi @fall_left
0015E7  2               @fall_right:
0015E7  2  20 F6 16     	jsr check_collision_right
0015EA  2  F0 04        	beq @no_fcollision_right
0015EC  2               @fcollision_right:
0015EC  2  9C 0B 1D     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
0015EF  2  60           	rts
0015F0  2               @no_fcollision_right:
0015F0  2  20 4D 13     	jsr position_x_inc
0015F3  2  60           	rts
0015F4  2               @fall_left:
0015F4  2  20 0B 17     	jsr check_collision_left
0015F7  2  F0 04        	beq @no_fcollision_left
0015F9  2               @fcollision_left:
0015F9  2  9C 0B 1D     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
0015FC  2  60           	rts
0015FD  2               @no_fcollision_left:
0015FD  2  20 A4 13     	jsr position_x_dec
001600  2  60           	rts
001601  2               
001601  2               @fall_once:
001601  2  20 F8 13     	jsr position_y_inc
001604  2  80 DA        	bra @apply_delta_x
001606  2               
001606  2               @sit_on_solid:
001606  2               	; change the status if falling
001606  2  AD 08 1D     	lda player0 + PLAYER::status
001609  2  C9 04        	cmp #STATUS_FALLING
00160B  2  D0 05        	bne @return
00160D  2  A9 00        	lda #STATUS_WALKING_IDLE
00160F  2  8D 08 1D     	sta player0 + PLAYER::status
001612  2               @return:
001612  2  60           	rts
001613  2               
001613  2               	;
001613  2               	; deal with gravity driven jumping
001613  2               	;
001613  2               @jump:
001613  2               @decrease_ticks:
001613  2  CE 09 1D     	dec player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
001616  2  D0 0A        	bne @drive_jump
001618  2  CE 0A 1D     	dec player0 + PLAYER::falling_ticks	+ 1
00161B  2  F0 5F        	beq @apex							; reached the apex of the jump
00161D  2               
00161D  2  A9 0A        	lda #JUMP_LO_TICKS
00161F  2  8D 09 1D     	sta player0 + PLAYER::falling_ticks	; reset t
001622  2               
001622  2               @drive_jump:
001622  2  AD 0A 1D     	lda player0 + PLAYER::falling_ticks + 1
001625  2  85 14        	sta r9L
001627  2               @loop_jump:
001627  2  20 69 14     	jsr position_y_dec
00162A  2               
00162A  2               	; refresh the collision address
00162A  2  AD 16 1D     	lda player0 + PLAYER::levely		; sprite screen position
00162D  2  85 02        	sta r0L
00162F  2  AD 17 1D     	lda player0 + PLAYER::levely + 1
001632  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
001634  2               
001634  2  AD 14 1D     	lda player0 + PLAYER::levelx		; sprite screen position
001637  2  85 04        	sta r1L
001639  2  AD 15 1D     	lda player0 + PLAYER::levelx + 1
00163C  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
00163E  2  20 22 12     	jsr Tilemap::get_collision_addr
001641  2  A5 02 8D 19  	SAVE_r0 player0 + PLAYER::collision_addr
001645  2  1D A5 03 8D  
001649  2  1A 1D        
00164B  2               
00164B  2  AD 16 1D     	lda player0 + PLAYER::levely
00164E  2  29 0F        	and #%00001111
001650  2  D0 05        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
001652  2               
001652  2               	; test hit a ceiling
001652  2  20 68 17     	jsr check_collision_up
001655  2  D0 04        	bne @collision_up
001657  2               @no_collision_up:
001657  2  C6 14        	dec r9L
001659  2  D0 CC        	bne @loop_jump						; loop to take t in count for gravity
00165B  2               
00165B  2               @collision_up:
00165B  2  AD 0B 1D     	lda player0 + PLAYER::delta_x		; deal with deltax
00165E  2  F0 B2        	beq @return
001660  2  30 0D        	bmi @jump_left
001662  2               @jump_right:
001662  2  20 F6 16     	jsr check_collision_right
001665  2  F0 04        	beq @no_collision_right
001667  2               @collision_right:
001667  2  9C 0B 1D     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
00166A  2  60           	rts
00166B  2               @no_collision_right:
00166B  2  20 4D 13     	jsr position_x_inc
00166E  2  60           	rts
00166F  2               @jump_left:
00166F  2  20 0B 17     	jsr check_collision_left
001672  2  F0 04        	beq @no_collision_left
001674  2               @collision_left:
001674  2  9C 0B 1D     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
001677  2  60           	rts
001678  2               @no_collision_left:
001678  2  20 A4 13     	jsr position_x_dec
00167B  2  60           	rts
00167C  2               
00167C  2               @apex:
00167C  2  A9 06 8D 08  	m_status STATUS_JUMPING_IDLE
001680  2  1D           
001681  2  60           	rts
001682  2               
001682  2               ;************************************************
001682  2               ;	compute the number of tiles covered by the boundingbox
001682  2               ;	return: r1L : number of tiles height
001682  2               ;			X = r1H : number of tiles width
001682  2               ;			Y = r2L : index of the first tile to test
001682  2               ;
001682  2               bbox_coverage:
001682  2               	; X = how many column of tiles to test
001682  2  AD 14 1D     	lda player0 + PLAYER::levelx
001685  2  29 0F        	and #%00001111
001687  2  C9 08        	cmp #8
001689  2  F0 08        	beq @one_tile
00168B  2  30 0C        	bmi @two_tiles_straight				; if X < 8, test as if int
00168D  2               @two_tiles_right:
00168D  2  A2 02        	ldx #02								; test 2 column ( y % 16 <> 0)
00168F  2  A0 01        	ldy #01								; starting on row +1
001691  2  80 0A        	bra @test_lines
001693  2               @one_tile:
001693  2  A2 01        	ldx #01								; test 1 column ( y % 16  == 8)
001695  2  A0 01        	ldy #01								; starting on row +1
001697  2  80 04        	bra @test_lines
001699  2               @two_tiles_straight:
001699  2  A2 02        	ldx #02								; test 2 columns ( y % 16 == 0)
00169B  2  A0 00        	ldy #00								; test on row  0 ( x % 16 != 0)
00169D  2               
00169D  2               @test_lines:
00169D  2               	; X = how many lines of tiles to test
00169D  2  AD 16 1D     	lda player0 + PLAYER::levely
0016A0  2  29 0F        	and #%00001111
0016A2  2  D0 09        	bne @yfloat				; if player is not on a multiple of 16 (tile size)
0016A4  2               @yint:
0016A4  2  A9 02        	lda #02					; test 2 lines ( y % 16 == 0)
0016A6  2  85 04        	sta r1L
0016A8  2  86 05        	stx r1H
0016AA  2  84 06        	sty r2L
0016AC  2  60           	rts
0016AD  2               @yfloat:
0016AD  2  A9 03        	lda #03					; test 3 rows ( y % 16 <> 0)
0016AF  2  85 04        	sta r1L
0016B1  2  86 05        	stx r1H
0016B3  2  84 06        	sty r2L
0016B5  2  60           	rts
0016B6  2               
0016B6  2               ;************************************************
0016B6  2               ; check collision on the height
0016B6  2               ;	A = vaule of the collision
0016B6  2               ;	ZERO = no collision
0016B6  2               ;
0016B6  2               check_collision_height:
0016B6  2               	; only test if we are 'centered'
0016B6  2  AD 14 1D     	lda player0 + PLAYER::levelx
0016B9  2  29 0F        	and #%00001111
0016BB  2  C9 08        	cmp #08
0016BD  2  D0 34        	bne @no_collision
0016BF  2               
0016BF  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
0016C2  2  85 02        	sta r0L
0016C4  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
0016C7  2  85 03        	sta r0H
0016C9  2               
0016C9  2  20 82 16     	jsr bbox_coverage
0016CC  2  A6 04        	ldx r1L				; tiles height
0016CE  2  98           	tya
0016CF  2  18           	clc
0016D0  2  6D 58 12     	adc test_right_left
0016D3  2  A8           	tay
0016D4  2               
0016D4  2               @test_line:
0016D4  2  B1 02        	lda (r0L),y
0016D6  2  F0 11        	beq @test_next_line
0016D8  2               
0016D8  2               	; some tiles are not real collision
0016D8  2  84 30        	sty $30
0016DA  2  A8           	tay
0016DB  2  B9 00 1C     	lda tiles_attributes,y
0016DE  2  89 02        	bit #TILE_ATTR::SOLID_WALL
0016E0  2  F0 05        	beq @test_next_line1
0016E2  2  A4 30        	ldy $30
0016E4  2  B1 02        	lda (r0L),y
0016E6  2  60           	rts
0016E7  2               
0016E7  2               @test_next_line1:
0016E7  2  A4 30        	ldy $30
0016E9  2               
0016E9  2               @test_next_line:
0016E9  2  CA           	dex
0016EA  2  F0 07        	beq @no_collision
0016EC  2  98           	tya
0016ED  2  18           	clc
0016EE  2  69 20        	adc #LEVEL_TILES_WIDTH			; test the tile on the right of the player (hip position)
0016F0  2  A8           	tay
0016F1  2  80 E1        	bra @test_line					; LADDERS can be traversed
0016F3  2               
0016F3  2               @no_collision:						; force a no collision
0016F3  2  A9 00        	lda #00
0016F5  2               @return:
0016F5  2  60           	rts
0016F6  2               
0016F6  2               ;************************************************
0016F6  2               ; check collision on the right
0016F6  2               ;	return: A = value of the collision
0016F6  2               ;			ZERO = no collision
0016F6  2               ;
0016F6  2               check_collision_right:
0016F6  2  A9 01        	lda #$01
0016F8  2  8D 58 12     	sta test_right_left
0016FB  2  20 B6 16     	jsr check_collision_height
0016FE  2  D0 0A        	bne @return					; no tile collision
001700  2               
001700  2  A9 06        	lda #(02 | 04)
001702  2  AE 07 1D     	ldx player0 + PLAYER::sprite
001705  2  A0 01        	ldy #01
001707  2  20 CE 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
00170A  2               
00170A  2               @return:
00170A  2  60           	rts
00170B  2               
00170B  2               ;************************************************
00170B  2               ; check collision on the left
00170B  2               ;
00170B  2               check_collision_left:
00170B  2  A9 FF        	lda #$ff
00170D  2  8D 58 12     	sta test_right_left
001710  2  20 B6 16     	jsr check_collision_height
001713  2  D0 0A        	bne @return
001715  2               
001715  2  A9 0A        	lda #(02 | 08)
001717  2  AE 07 1D     	ldx player0 + PLAYER::sprite
00171A  2  A0 01        	ldy #01
00171C  2  20 CE 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
00171F  2               
00171F  2               @return:
00171F  2  60           	rts
001720  2               
001720  2               ;************************************************
001720  2               ; check collision down
001720  2               ;	collision surface to test is 16 pixels around the mid X
001720  2               ; 	output : Z = no collision
001720  2               ;
001720  2               check_collision_down:
001720  2  AD 16 1D     	lda player0 + PLAYER::levely	; if the player is inbetween 2 tiles there can be no collision
001723  2  29 0F        	and #%00001111
001725  2  F0 0B        	beq @real_test
001727  2               
001727  2  A9 05        	lda #(01 | 04)
001729  2  AE 07 1D     	ldx player0 + PLAYER::sprite
00172C  2  A0 01        	ldy #01
00172E  2  20 CE 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001731  2  60           	rts
001732  2               @real_test:
001732  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
001735  2  85 02        	sta r0L
001737  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
00173A  2  85 03        	sta r0H
00173C  2               
00173C  2  20 82 16     	jsr bbox_coverage
00173F  2  98           	tya
001740  2  18           	clc
001741  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
001743  2  A8           	tay
001744  2               
001744  2               @test_colum:
001744  2  B1 02        	lda (r0L),y
001746  2  F0 0C        	beq @next_colum							; empty tile, test the next one
001748  2               
001748  2  84 30        	sty $30
00174A  2  A8           	tay
00174B  2  B9 00 1C     	lda tiles_attributes,y
00174E  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001750  2  D0 08        	bne @collision							; considere slopes as empty
001752  2  A4 30        	ldy $30
001754  2               
001754  2               @next_colum:
001754  2  CA           	dex
001755  2  F0 06        	beq @return
001757  2  C8           	iny
001758  2  80 EA        	bra @test_colum
00175A  2               @collision:
00175A  2  A9 01        	lda #01
00175C  2  60           	rts
00175D  2               @return:
00175D  2  A9 05        	lda #(01 | 04)
00175F  2  AE 07 1D     	ldx player0 + PLAYER::sprite
001762  2  A0 01        	ldy #01
001764  2  20 CE 0E     	jsr Sprite::precheck_collision	; precheck 1 pixel right
001767  2               
001767  2  60           	rts
001768  2               
001768  2               ;************************************************
001768  2               ; check collision up
001768  2               ;	collision surface to test is 16 pixels around the mid X
001768  2               ;	input :
001768  2               ;		r0 : @ of current tile the top-left corner of the player sprite
001768  2               ; 	output : Z = no collision
001768  2               ;
001768  2               check_collision_up:
001768  2  38           	sec
001769  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
00176C  2  E9 20        	sbc #LEVEL_TILES_WIDTH
00176E  2  85 02        	sta r0L
001770  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
001773  2  E9 00        	sbc #0
001775  2  85 03        	sta r0H
001777  2               
001777  2               	; X = how many column of tiles to test
001777  2  AD 14 1D     	lda player0 + PLAYER::levelx
00177A  2  29 0F        	and #%00001111
00177C  2  F0 0A        	beq @xint				; if player is not on a multiple of 16 (tile size)
00177E  2               @xfloat:
00177E  2  C9 08        	cmp #8
001780  2  30 06        	bmi @xint
001782  2  A2 01        	ldx #1					; test 1 column ( y % 16 <> 0)
001784  2  A0 01        	ldy #1					; starting at colum + 1
001786  2  80 13        	bra @test_colum
001788  2               @xint:
001788  2  A2 02        	ldx #2					; test 2 columns ( y % 16 == 0)
00178A  2  A0 00        	ldy #0					; starting at colum
00178C  2  80 00        	bra @test_y
00178E  2               
00178E  2               @test_y:
00178E  2               	; Y = how tile rows to test
00178E  2  AD 16 1D     	lda player0 + PLAYER::levely
001791  2  29 0F        	and #%00001111
001793  2  F0 06        	beq @yint				; if player is not on a multiple of 16 (tile size)
001795  2               @yfloat:
001795  2  98           	tya
001796  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; test on (row -1) +1 ( x % 16 != 0) + column
001798  2  A8           	tay
001799  2  80 00        	bra @test_colum
00179B  2               @yint:
00179B  2               
00179B  2               @test_colum:
00179B  2  B1 02        	lda (r0L),y							; left side
00179D  2  F0 0C        	beq @next_column
00179F  2               
00179F  2  84 30        	sty $30
0017A1  2  A8           	tay
0017A2  2  B9 00 1C     	lda tiles_attributes,y
0017A5  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
0017A7  2  D0 08        	bne @return1
0017A9  2  A4 30        	ldy $30
0017AB  2               
0017AB  2               @next_column:
0017AB  2  CA           	dex
0017AC  2  F0 05        	beq @return
0017AE  2  C8           	iny
0017AF  2  80 EA        	bra @test_colum
0017B1  2               @return1:
0017B1  2  A9 01        	lda #01
0017B3  2               @return:
0017B3  2  60           	rts
0017B4  2               
0017B4  2               ;************************************************
0017B4  2               ; check if the player feet is exactly on a slope tile
0017B4  2               ;	modify: player_on_slop
0017B4  2               ;	return: Z = slop
0017B4  2               ;			Y = feet position tested (vs r0)
0017B4  2               ;
0017B4  2               check_player_on_slop:
0017B4  2  9C 56 12     	stz player_on_slop				; no slope
0017B7  2               
0017B7  2  20 82 16     	jsr bbox_coverage
0017BA  2               
0017BA  2  18           	clc
0017BB  2  98           	tya
0017BC  2  A6 04        	ldx r1L
0017BE  2  CA           	dex
0017BF  2               :
0017BF  2  69 20        	adc #LEVEL_TILES_WIDTH
0017C1  2  CA           	dex
0017C2  2  D0 FB        	bne :-
0017C4  2  A8           	tay								; position of the feet tiles
0017C5  2               
0017C5  2  AD 14 1D     	lda player0 + PLAYER::levelx
0017C8  2  29 0F        	and #%00001111
0017CA  2  C9 08        	cmp #08
0017CC  2  10 01        	bpl :+
0017CE  2  C8           	iny
0017CF  2               :
0017CF  2               
0017CF  2               	; check if player feet is ON a slop
0017CF  2  B1 02        	lda (r0),y						; test ON feet level
0017D1  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0017D3  2  F0 04        	beq @on_slope
0017D5  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0017D7  2  D0 06        	bne @no_slope
0017D9  2               @on_slope:
0017D9  2  B1 02        	lda (r0),y						; test ON feet level
0017DB  2  8D 56 12     	sta player_on_slop
0017DE  2  60           	rts
0017DF  2               
0017DF  2               @no_slope:
0017DF  2  A9 00        	lda #0
0017E1  2  8D 56 12     	sta player_on_slop
0017E4  2  60           	rts
0017E5  2               
0017E5  2               ;************************************************
0017E5  2               ; check if the player feet is ABOVE a slope tile
0017E5  2               ;	input: 	Y = feet position tested (vs r0)
0017E5  2               ;	modify: player_on_slop
0017E5  2               ;	return: Z = slop
0017E5  2               ;
0017E5  2               is_player_above_slop:
0017E5  2  9C 56 12     	stz player_on_slop				; no slope
0017E8  2               
0017E8  2  98           	tya
0017E9  2  18           	clc
0017EA  2  69 20        	adc #LEVEL_TILES_WIDTH
0017EC  2  A8           	tay								; test BELOW feet level
0017ED  2  B1 02        	lda (r0),y
0017EF  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
0017F1  2  F0 0A        	beq @above_slope
0017F3  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
0017F5  2  F0 06        	beq @above_slope
0017F7  2               @no_slope:
0017F7  2  A9 00        	lda #0
0017F9  2  8D 56 12     	sta player_on_slop
0017FC  2  60           	rts
0017FD  2               @above_slope:
0017FD  2  8D 56 12     	sta player_on_slop
001800  2  60           	rts
001801  2               
001801  2               ;************************************************
001801  2               ; status to ignore while moving
001801  2               ;
001801  2               ignore_move_request:
001801  2  00           	.byte	00	;	STATUS_WALKING_IDLE
001802  2  00           	.byte	00	;	STATUS_WALKING
001803  2  02           	.byte	02	;	STATUS_CLIMBING
001804  2  02           	.byte	02	;	STATUS_CLIMBING_IDLE
001805  2  01           	.byte	01	;	STATUS_FALLING
001806  2  01           	.byte	01	;	STATUS_JUMPING
001807  2  01           	.byte	01	;	STATUS_JUMPING_IDLE
001808  2               
001808  2               ;************************************************
001808  2               ; Try to move player to the right, walk up if facing a slope
001808  2               ;
001808  2               move_right:
001808  2  AC 08 1D     	ldy player0 + PLAYER::status
00180B  2  B9 01 18     	lda ignore_move_request, y
00180E  2  F0 06        	beq @walk_right					; if 0 => can move
001810  2  C9 02        	cmp #02
001812  2  F0 6E        	beq @climb_right				; if 2 => has to climb
001814  2  80 6B        	bra @return1					; else block the move
001816  2               
001816  2               @walk_right:
001816  2  20 B4 17     	jsr check_player_on_slop
001819  2  D0 0A        	bne @no_collision
00181B  2               
00181B  2  20 E5 17     	jsr is_player_above_slop
00181E  2  D0 05        	bne @no_collision
001820  2               
001820  2  20 F6 16     	jsr Player::check_collision_right
001823  2  D0 5C        	bne @return1					; block is collision on the right  and there is no slope on the right
001825  2               
001825  2               @no_collision:
001825  2  A9 01        	lda #01
001827  2  8D 0B 1D     	sta player0 + PLAYER::delta_x
00182A  2               
00182A  2               @set_walking_sprite:
00182A  2  A9 01        	lda #SPRITE_FLIP_H
00182C  2  8D 18 1D     	sta player0 + PLAYER::flip
00182F  2  AC 07 1D     	ldy player0 + PLAYER::sprite
001832  2  20 01 0E     	jsr Sprite::set_flip				; force sprite to look right
001835  2               
001835  2  A9 01 8D 08  	m_status STATUS_WALKING
001839  2  1D           
00183A  2               
00183A  2               	;change player sprite
00183A  2  A9 03        	lda #Player::Sprites::LEFT
00183C  2  CD 0D 1D     	cmp player0 + PLAYER::spriteID
00183F  2  F0 08        	beq @move_x
001841  2               
001841  2  A9 03        	lda #Player::Sprites::LEFT
001843  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001846  2  20 33 13     	jsr set_bitmap
001849  2               
001849  2               @move_x:
001849  2  20 4D 13     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
00184C  2               
00184C  2               	; if sitting on a slop
00184C  2  AD 56 12     	lda player_on_slop
00184F  2  F0 2D        	beq @set_position
001851  2  C9 03        	cmp #TILE_SOLD_SLOP_RIGHT
001853  2  F0 26        	beq @move_y_up
001855  2               @try_move_y_dow:
001855  2  AD 16 1D     	lda player0 + PLAYER::levely
001858  2  29 0F        	and #%00001111
00185A  2  D0 1A        	bne @move_y_down
00185C  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
00185F  2  85 02        	sta r0L
001861  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
001864  2  85 03        	sta r0H
001866  2  A5 06        	lda r2L
001868  2  18           	clc
001869  2  69 41        	adc #(LEVEL_TILES_WIDTH * 2 + 1)	; check on the 2nd block
00186B  2  A8           	tay
00186C  2  B1 02        	lda (r0), y							; check if the tile below as an attribute SOLID_GROUND
00186E  2  A8           	tay
00186F  2  B9 00 1C     	lda tiles_attributes,y
001872  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001874  2  D0 61        	bne @return							; do not change Y if the tile below the player is a solid one
001876  2               @move_y_down:
001876  2  20 F8 13     	jsr position_y_inc
001879  2  80 03        	bra @set_position
00187B  2               @move_y_up:
00187B  2  20 69 14     	jsr position_y_dec
00187E  2               
00187E  2               @set_position:
00187E  2  20 24 13     	jsr position_set
001881  2               @return1:
001881  2  60           	rts
001882  2               
001882  2               @climb_right:
001882  2  20 F6 16     	jsr Player::check_collision_right
001885  2  F0 05        	beq @climb_right_1
001887  2  C9 04        	cmp #TILE_SOLID_LADER
001889  2  F0 01        	beq @climb_right_1
00188B  2  60           	rts
00188C  2               @climb_right_1:
00188C  2  20 82 16     	jsr bbox_coverage
00188F  2               @get_tile:
00188F  2  B1 02        	lda (r0),y
001891  2  F0 0E        	beq @no_grab					; no tile on right
001893  2  85 31        	sta $31
001895  2  84 30        	sty $30
001897  2  A8           	tay
001898  2  B9 00 1C     	lda tiles_attributes,y
00189B  2  89 08        	bit #TILE_ATTR::GRABBING
00189D  2  D0 08        	bne @climb_right_2				; tile on right with a GRAB attribute
00189F  2  A4 30        	ldy $30
0018A1  2               @no_grab:							; test the tile on the right on next line
0018A1  2  C8           	iny
0018A2  2  CA           	dex
0018A3  2  D0 EA        	bne @get_tile
0018A5  2  80 1E        	bra @climb_right_drop			; no grab tile on the right of the player
0018A7  2               @climb_right_2:
0018A7  2  A5 31        	lda $31							; tile index with grab attribute
0018A9  2  C9 05        	cmp #TILE_LEDGE
0018AB  2  D0 04        	bne @set_climb_sprite
0018AD  2               @set_hang_sprite:
0018AD  2  A9 09        	lda #Player::Sprites::HANG
0018AF  2  80 02        	bra @next
0018B1  2               @set_climb_sprite:
0018B1  2  A9 06        	lda #Player::Sprites::CLIMB
0018B3  2               @next:
0018B3  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
0018B6  2  20 33 13     	jsr set_bitmap
0018B9  2  A9 02 8D 08  	m_status STATUS_CLIMBING
0018BD  2  1D           
0018BE  2  20 4D 13     	jsr Player::position_x_inc		; move the player sprite, if the
0018C1  2  20 24 13     	jsr position_set
0018C4  2  60           	rts
0018C5  2               @climb_right_drop:
0018C5  2  A9 01 8D 08  	m_status STATUS_WALKING
0018C9  2  1D           
0018CA  2  A9 03 8D 0D  	SET_SPRITE Player::Sprites::LEFT, 1
0018CE  2  1D A9 01 8D  
0018D2  2  0E 1D 20 33  
0018D7  2               
0018D7  2               @return:
0018D7  2  60           	rts
0018D8  2               
0018D8  2               ;************************************************
0018D8  2               ; try to move the player to the left
0018D8  2               ;
0018D8  2               move_left:
0018D8  2  AC 08 1D     	ldy player0 + PLAYER::status
0018DB  2  B9 01 18     	lda ignore_move_request, y
0018DE  2  F0 06        	beq @walk_left					; if 0 => can move
0018E0  2  C9 02        	cmp #02
0018E2  2  F0 6E        	beq @climb_left				; if 2 => has to climb
0018E4  2  80 6B        	bra @return					; else block the move
0018E6  2               
0018E6  2               @walk_left:
0018E6  2  20 B4 17     	jsr check_player_on_slop
0018E9  2  D0 0A        	bne @no_collision				; ignore right collision left if on a slope
0018EB  2               
0018EB  2  20 E5 17     	jsr is_player_above_slop
0018EE  2  D0 05        	bne @no_collision
0018F0  2               
0018F0  2  20 0B 17     	jsr Player::check_collision_left
0018F3  2  D0 5C        	bne @return						; block is collision on the right  and there is no slope on the right
0018F5  2               
0018F5  2               @no_collision:
0018F5  2  A9 FF        	lda #$ff
0018F7  2  8D 0B 1D     	sta player0 + PLAYER::delta_x
0018FA  2               
0018FA  2               @set_walking_sprite:
0018FA  2  A9 00        	lda #SPRITE_FLIP_NONE
0018FC  2  8D 18 1D     	sta player0 + PLAYER::flip
0018FF  2  AC 07 1D     	ldy player0 + PLAYER::sprite
001902  2  20 01 0E     	jsr Sprite::set_flip				; force sprite to loop right
001905  2               
001905  2  A9 01 8D 08  	m_status STATUS_WALKING
001909  2  1D           
00190A  2               
00190A  2  A9 03        	lda #Player::Sprites::LEFT
00190C  2  CD 0D 1D     	cmp player0 + PLAYER::spriteID
00190F  2  F0 08        	beq @move_x
001911  2               
001911  2               	;change player sprite
001911  2  A9 03        	lda #Player::Sprites::LEFT
001913  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001916  2  20 33 13     	jsr set_bitmap
001919  2               
001919  2               @move_x:
001919  2  20 A4 13     	jsr Player::position_x_dec
00191C  2               
00191C  2  AD 56 12     	lda player_on_slop				; if walking a slop also increase Y
00191F  2  F0 2D        	beq @set_position
001921  2  C9 02        	cmp #TILE_SOLD_SLOP_LEFT
001923  2  F0 26        	beq @move_y_up
001925  2               @try_move_y_dow:
001925  2  AD 16 1D     	lda player0 + PLAYER::levely
001928  2  29 0F        	and #%00001111
00192A  2  D0 1A        	bne @move_y_down
00192C  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
00192F  2  85 02        	sta r0L
001931  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
001934  2  85 03        	sta r0H
001936  2  A5 06        	lda r2L
001938  2  18           	clc
001939  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)
00193B  2  A8           	tay
00193C  2  B1 02        	lda (r0), y							; check if the tile below as an attribute TILE_SOLID_GROUND
00193E  2  A8           	tay
00193F  2  B9 00 1C     	lda tiles_attributes,y
001942  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
001944  2  D0 0B        	bne @return							; do not change Y if the tile below the player is a solid one
001946  2               @move_y_down:
001946  2  20 F8 13     	jsr position_y_inc
001949  2  80 03        	bra @set_position
00194B  2               @move_y_up:
00194B  2  20 69 14     	jsr position_y_dec
00194E  2               
00194E  2               @set_position:
00194E  2  20 24 13     	jsr position_set
001951  2               
001951  2               @return:
001951  2  60           	rts
001952  2               
001952  2               @climb_left:
001952  2  20 0B 17     	jsr Player::check_collision_left
001955  2  F0 01        	beq @climb_left_1
001957  2  60           	rts								; collision on left, block the move
001958  2               @climb_left_1:
001958  2  20 82 16     	jsr bbox_coverage				; what tiles is the player covering
00195B  2               @get_tile:
00195B  2  B1 02        	lda (r0),y
00195D  2  F0 0E        	beq @no_grab					; no tile on right
00195F  2  85 31        	sta $31
001961  2  84 30        	sty $30
001963  2  A8           	tay
001964  2  B9 00 1C     	lda tiles_attributes,y
001967  2  89 08        	bit #TILE_ATTR::GRABBING
001969  2  D0 08        	bne @climb_left_2				; tile on left with a GRAB attribute
00196B  2  A4 30        	ldy $30
00196D  2               @no_grab:							; test the tile on the left on next line
00196D  2  C8           	iny
00196E  2  CA           	dex
00196F  2  D0 EA        	bne @get_tile
001971  2  80 1E        	bra @climb_left_drop			; no grab tile on the right of the player
001973  2               @climb_left_2:
001973  2  A5 31        	lda $31							; tile index with grab attribute
001975  2  C9 05        	cmp #TILE_LEDGE
001977  2  D0 04        	bne @set_climb_sprite
001979  2               @set_hang_sprite:
001979  2  A9 09        	lda #Player::Sprites::HANG
00197B  2  80 02        	bra @next
00197D  2               @set_climb_sprite:
00197D  2  A9 06        	lda #Player::Sprites::CLIMB
00197F  2               @next:
00197F  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001982  2  20 33 13     	jsr set_bitmap
001985  2  A9 02 8D 08  	m_status STATUS_CLIMBING
001989  2  1D           
00198A  2  20 A4 13     	jsr Player::position_x_dec		; move the player sprite, if the
00198D  2  20 24 13     	jsr position_set
001990  2  60           	rts
001991  2               @climb_left_drop:					; no ladder to stick to
001991  2  A9 01 8D 08  	m_status STATUS_WALKING
001995  2  1D           
001996  2  A9 03 8D 0D  	SET_SPRITE Player::Sprites::LEFT, 1
00199A  2  1D A9 01 8D  
00199E  2  0E 1D 20 33  
0019A3  2  60           	rts
0019A4  2               
0019A4  2               ;************************************************
0019A4  2               ; try to move the player down (crouch, hide, move down a ladder)
0019A4  2               ;
0019A4  2               move_down:
0019A4  2  AD 08 1D     	lda player0 + PLAYER::status
0019A7  2  C9 04        	cmp #STATUS_FALLING
0019A9  2  D0 01        	bne @try_move_down						; cannot move when falling
0019AB  2  60           	rts
0019AC  2               
0019AC  2               @try_move_down:
0019AC  2               	; custom collision down
0019AC  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
0019AF  2  85 02        	sta r0L
0019B1  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
0019B4  2  85 03        	sta r0H
0019B6  2               
0019B6  2  20 82 16     	jsr bbox_coverage
0019B9  2  8E 57 12     	stx ladders						; width of the player in tiles = number of ladders to find below
0019BC  2  98           	tya
0019BD  2  18           	clc
0019BE  2  69 40        	adc #(LEVEL_TILES_WIDTH * 2)	; check below the player
0019C0  2  A8           	tay
0019C1  2               
0019C1  2               @test_colum:
0019C1  2  B1 02        	lda (r0L),y
0019C3  2  C9 04        	cmp #TILE_SOLID_LADER
0019C5  2  D0 05        	bne @check_solid_ground
0019C7  2               @ladder_down:
0019C7  2  CE 57 12     	dec ladders
0019CA  2  80 0C        	bra @next_column
0019CC  2               @check_solid_ground:
0019CC  2  84 30        	sty $30
0019CE  2  A8           	tay
0019CF  2  B9 00 1C     	lda tiles_attributes,y
0019D2  2  89 01        	bit #TILE_ATTR::SOLID_GROUND
0019D4  2  D0 45        	bne @cannot_move_down
0019D6  2  A4 30        	ldy $30
0019D8  2               @next_column:
0019D8  2  CA           	dex
0019D9  2  F0 03        	beq @end
0019DB  2  C8           	iny
0019DC  2  80 E3        	bra @test_colum
0019DE  2               @end:
0019DE  2               
0019DE  2  AD 57 12     	lda ladders
0019E1  2  F0 1C        	beq @move_down						; correct number of ladder tiles below the player
0019E3  2               
0019E3  2               	; if there player is covering ANY ladders (accros the boundingbox)
0019E3  2  A4 06        	ldy r2L
0019E5  2               @check_line:							; already climbing down is player grabbing no ladder
0019E5  2  A6 05        	ldx r1H
0019E7  2               @check_row:
0019E7  2  B1 02        	lda (r0L),y
0019E9  2  C9 04        	cmp #TILE_SOLID_LADER
0019EB  2  F0 12        	beq @move_down
0019ED  2  C8           	iny
0019EE  2  CA           	dex
0019EF  2  D0 F6        	bne @check_row
0019F1  2  C6 04        	dec r1L
0019F3  2  F0 26        	beq @cannot_move_down
0019F5  2               
0019F5  2  98           	tya
0019F6  2  18           	clc
0019F7  2  69 20        	adc #LEVEL_TILES_WIDTH
0019F9  2  38           	sec
0019FA  2  E5 05        	sbc r1H
0019FC  2  A8           	tay
0019FD  2  80 E6        	bra @check_line
0019FF  2               
0019FF  2               @move_down:
0019FF  2  20 F8 13     	jsr Player::position_y_inc		; move down the ladder
001A02  2  20 24 13     	jsr position_set
001A05  2               
001A05  2  A9 02 8D 08  	m_status STATUS_CLIMBING
001A09  2  1D           
001A0A  2               
001A0A  2  A9 06        	lda #Player::Sprites::CLIMB
001A0C  2  CD 0D 1D     	cmp player0 + PLAYER::spriteID
001A0F  2  D0 01        	bne @change_sprite
001A11  2  60           	rts
001A12  2               
001A12  2               @change_sprite:
001A12  2               	;change player sprite
001A12  2  A9 06        	lda #Player::Sprites::CLIMB
001A14  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001A17  2  20 33 13     	jsr set_bitmap
001A1A  2  60           	rts
001A1B  2               
001A1B  2               @cannot_move_down:
001A1B  2  A9 00        	lda #STATUS_WALKING_IDLE
001A1D  2  8D 08 1D     	sta player0 + PLAYER::status
001A20  2  A9 01        	lda #01
001A22  2  8D 0E 1D     	sta player0 + PLAYER::spriteAnim
001A25  2  20 33 13     	jsr set_bitmap
001A28  2  9C 0B 1D     	stz player0 + PLAYER::delta_x
001A2B  2  60           	rts
001A2C  2               
001A2C  2               ;************************************************
001A2C  2               ; try to move the player up (move up a ladder)
001A2C  2               ;	only climb a ladder if the 16 pixels mid-X are fully enclosed in the ladder
001A2C  2               ;	modify: r0, r1, r2
001A2C  2               ;
001A2C  2               move_up:
001A2C  2  AD 08 1D     	lda player0 + PLAYER::status
001A2F  2  C9 04        	cmp #STATUS_FALLING
001A31  2  D0 01        	bne @try_move_up				; cannot move when falling
001A33  2  60           	rts
001A34  2               @try_move_up:
001A34  2               	; custom collision up
001A34  2  20 82 16     	jsr bbox_coverage
001A37  2  8E 57 12     	stx ladders						; width of the player in tiles = number of ladders to find below
001A3A  2               
001A3A  2               	; check the situation ABOVE the player
001A3A  2  38           	sec
001A3B  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
001A3E  2  E9 20        	sbc #LEVEL_TILES_WIDTH
001A40  2  85 02        	sta r0L
001A42  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
001A45  2  E9 00        	sbc #0
001A47  2  85 03        	sta r0H
001A49  2               
001A49  2               	; if there the right numbers of ladder tiles above the player
001A49  2               @test_colum:
001A49  2  B1 02        	lda (r0L),y
001A4B  2  C9 04        	cmp #TILE_SOLID_LADER
001A4D  2  D0 05        	bne @check_solid_ceiling
001A4F  2  CE 57 12     	dec ladders
001A52  2  80 0C        	bra @next_column
001A54  2               @check_solid_ceiling:
001A54  2  84 30        	sty $30
001A56  2  A8           	tay
001A57  2  B9 00 1C     	lda tiles_attributes,y
001A5A  2  89 04        	bit #TILE_ATTR::SOLID_CEILING
001A5C  2  D0 4F        	bne @cannot_move_up
001A5E  2  A4 30        	ldy $30
001A60  2               @next_column:
001A60  2  CA           	dex
001A61  2  F0 03        	beq @end
001A63  2  C8           	iny
001A64  2  80 E3        	bra @test_colum
001A66  2               @end:
001A66  2               
001A66  2  AD 57 12     	lda ladders
001A69  2  F0 26        	beq @climb_down						; correct number of ladder tiles above the player
001A6B  2               
001A6B  2               	; if there player is covering ANY LADER (accros the boundingbox)
001A6B  2  AD 19 1D     	lda player0 + PLAYER::collision_addr
001A6E  2  85 02        	sta r0L
001A70  2  AD 1A 1D     	lda player0 + PLAYER::collision_addr + 1
001A73  2  85 03        	sta r0H
001A75  2               
001A75  2  A4 06        	ldy r2L
001A77  2               @check_line:							; already climbing up is player grabbing no ladder
001A77  2  A6 05        	ldx r1H
001A79  2               @check_row:
001A79  2  B1 02        	lda (r0L),y
001A7B  2  C9 04        	cmp #TILE_SOLID_LADER
001A7D  2  F0 12        	beq @climb_down
001A7F  2  C8           	iny
001A80  2  CA           	dex
001A81  2  D0 F6        	bne @check_row
001A83  2  C6 04        	dec r1L
001A85  2  F0 26        	beq @cannot_move_up
001A87  2               
001A87  2  98           	tya
001A88  2  18           	clc
001A89  2  69 20        	adc #LEVEL_TILES_WIDTH
001A8B  2  38           	sec
001A8C  2  E5 05        	sbc r1H
001A8E  2  A8           	tay
001A8F  2  80 E6        	bra @check_line
001A91  2               
001A91  2               @climb_down:
001A91  2  20 69 14     	jsr Player::position_y_dec		; move up the ladder
001A94  2  20 24 13     	jsr position_set
001A97  2               
001A97  2  A9 02 8D 08  	m_status STATUS_CLIMBING
001A9B  2  1D           
001A9C  2               
001A9C  2  A9 06        	lda #Player::Sprites::CLIMB
001A9E  2  CD 0D 1D     	cmp player0 + PLAYER::spriteID
001AA1  2  D0 01        	bne @set_sprite
001AA3  2  60           	rts
001AA4  2               @set_sprite:						;change player sprite
001AA4  2  A9 06        	lda #Player::Sprites::CLIMB
001AA6  2  8D 0D 1D     	sta player0 + PLAYER::spriteID
001AA9  2  20 33 13     	jsr set_bitmap
001AAC  2  60           	rts
001AAD  2               
001AAD  2               @cannot_move_up:
001AAD  2  A9 00        	lda #STATUS_WALKING_IDLE
001AAF  2  8D 08 1D     	sta player0 + PLAYER::status
001AB2  2  60           	rts
001AB3  2               
001AB3  2               ;************************************************
001AB3  2               ; jump
001AB3  2               ;	A = delta X value
001AB3  2               ;
001AB3  2               jump:
001AB3  2  AA           	tax
001AB4  2  AC 08 1D         ldy player0 + PLAYER::status
001AB7  2  B9 01 18     	lda ignore_move_request,y
001ABA  2  D0 17        	bne @return
001ABC  2  8E 0B 1D     	stx player0 + PLAYER::delta_x
001ABF  2               
001ABF  2               	; ensure there is no ceiling over the player
001ABF  2  20 68 17     	jsr check_collision_up
001AC2  2  D0 0F        	bne @return
001AC4  2               
001AC4  2  A9 0A        	lda #JUMP_LO_TICKS
001AC6  2  8D 09 1D     	sta player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
001AC9  2  A9 02        	lda #JUMP_HI_TICKS
001ACB  2  8D 0A 1D     	sta player0 + PLAYER::falling_ticks	+ 1
001ACE  2               
001ACE  2  A9 05 8D 08  	m_status STATUS_JUMPING
001AD2  2  1D           
001AD3  2               @return:
001AD3  2  60           	rts
001AD4  2               
001AD4  2               .endscope
001AD4  2               
001AD4  1               
001AD4  1               ;-----------------------------------------------------------------------------
001AD4  1               ;/////////////////////////////////////////////////////////////////////////////
001AD4  1               ; main code
001AD4  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001AD4  1               ;-----------------------------------------------------------------------------
001AD4  1               
001AD4  1  00 00        objects: .word 0
001AD6  1               
001AD6  1               start:
001AD6  1               	; 320x240
001AD6  1  A9 40        	lda #64
001AD8  1  8D 2A 9F     	sta veradchscale
001ADB  1  8D 2B 9F     	sta veradcvscale
001ADE  1               
001ADE  1               	; activate layer0
001ADE  1  A9 71        	lda #%01110001
001AE0  1               ;	and #(255-VERA_LAYER0)
001AE0  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
001AE0  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
001AE3  1               
001AE3  1               	;---------------------------------
001AE3  1               	; load tiles file into vram
001AE3  1               	;---------------------------------
001AE3  1  20 45 08     	jsr Tiles::load_static
001AE6  1               
001AE6  1               	;---------------------------------
001AE6  1               	; load tilemaps into vram
001AE6  1               	;---------------------------------
001AE6  1  20 88 11     	jsr Tilemap::load
001AE9  1               
001AE9  1               	;---------------------------------
001AE9  1               	; load animated tiles into ram
001AE9  1               	;---------------------------------
001AE9  1  20 8F 08     	jsr Tiles::load
001AEC  1               
001AEC  1               	;---------------------------------
001AEC  1               	; load sprite 0,1,2 into vram
001AEC  1               	;---------------------------------
001AEC  1               load_sprites:
001AEC  1               	; prepare VERA sprites
001AEC  1  20 6A 0C     	jsr Sprite::init_addr_table
001AEF  1               
001AEF  1  A9 00 85 02  	LOAD_r0 (::VRAM_tiles + tiles * tile_size)	; base for the sprites
001AF3  1  A9 41 85 03  
001AF7  1  20 59 12     	jsr Player::init
001AFA  1               
001AFA  1               	;---------------------------------
001AFA  1               	; load objects list into ram
001AFA  1               	;---------------------------------
001AFA  1  20 CB 0F     	jsr Objects::init
001AFD  1               
001AFD  1               setirq:
001AFD  1                  ; backup default RAM IRQ vector
001AFD  1  AD 14 03        lda IRQVec
001B00  1  8D FD 1B        sta default_irq_vector
001B03  1  AD 15 03        lda IRQVec+1
001B06  1  8D FE 1B        sta default_irq_vector+1
001B09  1               
001B09  1                  ; overwrite RAM IRQ vector with custom handler address
001B09  1  78              sei ; disable IRQ while vector is changing
001B0A  1  A9 21           lda #<custom_irq_handler
001B0C  1  8D 14 03        sta IRQVec
001B0F  1  A9 1B           lda #>custom_irq_handler
001B11  1  8D 15 03        sta IRQVec+1
001B14  1  AD 26 9F        lda veraien
001B17  1  09 01           ora #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001B19  1  8D 26 9F        sta veraien
001B1C  1  58              cli ; enable IRQ now that vector is properly set
001B1D  1               
001B1D  1               mainloop:
001B1D  1  CB           	wai
001B1E  1  80 FD        	bra mainloop
001B20  1               
001B20  1  60           	rts
001B21  1               
001B21  1               ;-----------------------------------------------------------------------------
001B21  1               ;/////////////////////////////////////////////////////////////////////////////
001B21  1               ; deal with IRQ"s
001B21  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001B21  1               ;-----------------------------------------------------------------------------
001B21  1               custom_irq_handler:
001B21  1  AD 27 9F     	lda veraisr
001B24  1  AA           	tax
001B25  1  29 04        	and #VERA_SPRCOL_BIT
001B27  1  F0 0B        	beq @check_vsync
001B29  1               
001B29  1               @sprite_collision:
001B29  1  8D 27 9F     	sta veraisr						; acknowled the SPRCOL IRQ
001B2C  1  8A           	txa
001B2D  1  4A           	lsr
001B2E  1  4A           	lsr
001B2F  1  4A           	lsr
001B30  1  4A           	lsr								; extract the collision mask (4:7)
001B31  1  20 20 0E     	jsr Sprite::register_collision
001B34  1               
001B34  1               @check_vsync:
001B34  1  8A           	txa
001B35  1  29 01        	and #VERA_VSYNC_BIT
001B37  1  F0 48        	beq @continue
001B39  1               
001B39  1               @frame_update:
001B39  1  8D 27 9F     	sta veraisr						; acknowled the VSYNC IRQ
001B3C  1               
001B3C  1               	;---------------------------------
001B3C  1               	; animate sprite
001B3C  1               	;---------------------------------
001B3C  1  20 CC 14     	jsr Player::animate
001B3F  1               
001B3F  1               	;---------------------------------
001B3F  1               	; swap animated tiles
001B3F  1               	;---------------------------------
001B3F  1  20 39 09     	jsr Tiles::animate
001B42  1               
001B42  1               	;---------------------------------
001B42  1               	; sprite collisions management
001B42  1               	;---------------------------------
001B42  1  20 A7 0E     	jsr Sprite::check_irq_collision
001B45  1               
001B45  1               	;---------------------------------
001B45  1               	; player physics
001B45  1               	;---------------------------------
001B45  1  20 27 15     	jsr Player::physics
001B48  1               
001B48  1               	;---------------------------------
001B48  1               	; check keyboard
001B48  1               	;---------------------------------
001B48  1               @check_keyboard:
001B48  1               	; get fake-joystick data from keyboard
001B48  1  A9 00        	lda #0
001B4A  1  20 56 FF     	jsr joystick_get
001B4D  1  8D 06 1C     	sta joystick_data
001B50  1               
001B50  1               	; get real joystick data
001B50  1  A9 01        	lda #1
001B52  1  20 56 FF     	jsr joystick_get
001B55  1  C0 00        	cpy #0
001B57  1  D0 06        	bne :+
001B59  1  2D 06 1C     	and joystick_data
001B5C  1  8D 06 1C     	sta joystick_data
001B5F  1               :
001B5F  1  AD 06 1C     	lda joystick_data
001B62  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001B62  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
001B62  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
001B62  1               ;
001B62  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
001B62  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
001B62  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
001B62  1               ;  .Y, byte 2:
001B62  1               ;              $00 = joystick present
001B62  1               ;              $FF = joystick not present
001B62  1  89 81        	bit #(JOY_RIGHT|JOY_B)
001B64  1  F0 1E        	beq @jump_right
001B66  1  89 82        	bit #(JOY_LEFT|JOY_B)
001B68  1  F0 21        	beq @jump_left
001B6A  1  89 01        	bit #JOY_RIGHT
001B6C  1  F0 29        	beq @joystick_right
001B6E  1  89 02        	bit #JOY_LEFT
001B70  1  F0 20        	beq @joystick_left
001B72  1  89 04        	bit #JOY_DOWN
001B74  1  F0 2B        	beq @movedown
001B76  1  89 08        	bit #JOY_UP
001B78  1  F0 22        	beq @moveup
001B7A  1  89 80        	bit #JOY_B
001B7C  1  F0 28        	beq @jump
001B7E  1               
001B7E  1  20 0E 15     	jsr Player::set_idle
001B81  1               
001B81  1               @continue:
001B81  1                  ; continue to default IRQ handler
001B81  1  6C FD 1B        jmp (default_irq_vector)
001B84  1                  ; RTI will happen after jump
001B84  1               
001B84  1               @jump_right:
001B84  1  A9 01        	lda #$01					; jump right
001B86  1  20 B3 1A     	jsr Player::jump
001B89  1  80 F6        	bra @continue
001B8B  1               
001B8B  1               @jump_left:
001B8B  1  A9 FF        	lda #$ff					; jump left
001B8D  1  20 B3 1A     	jsr Player::jump
001B90  1  80 EF        	bra @continue
001B92  1               
001B92  1               @joystick_left:
001B92  1  20 D8 18     	jsr Player::move_left
001B95  1  80 EA        	bra @continue
001B97  1               
001B97  1               @joystick_right:
001B97  1  20 08 18     	jsr Player::move_right
001B9A  1  80 E5        	bra @continue
001B9C  1               
001B9C  1               @moveup:
001B9C  1  20 2C 1A     	jsr Player::move_up
001B9F  1  80 E0        	bra @continue
001BA1  1               
001BA1  1               @movedown:
001BA1  1  20 A4 19     	jsr Player::move_down
001BA4  1  80 DB        	bra @continue
001BA6  1               
001BA6  1               @jump:
001BA6  1  A9 00        	lda #0				; jump up
001BA8  1  20 B3 1A     	jsr Player::jump
001BAB  1  80 D4        	bra @continue
001BAD  1               
001BAD  1               .segment "DATA"
001BAD  1               .include "tilemap.inc"
001BAD  2               map:
001BAD  2  20 20        	.byte 32,32
001BAF  2  6C 65 76 65  fslevel: .literal "level.bin"
001BB3  2  6C 2E 62 69  
001BB7  2  6E           
001BB8  2               fslevel_end:
001BB8  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001BBC  2  65 72 79 2E  
001BC0  2  62 69 6E     
001BC3  2               fsbackground_end:
001BC3  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001BC7  2  69 73 69 6F  
001BCB  2  6E 2E 62 69  
001BD0  2               fscollision_end:
001BD0  2  6F 62 6A 65  fsobjects: .literal "objects.bin"
001BD4  2  63 74 73 2E  
001BD8  2  62 69 6E     
001BDB  2               fsobjects_end:
001BDB  2  73 70 72 69  fssprites1: .literal "sprites1.bin"
001BDF  2  74 65 73 31  
001BE3  2  2E 62 69 6E  
001BE7  2               fssprites1_end:
001BE7  2               tileset:
001BE7  2  10 10        	.byte 16,16
001BE9  2               tiles = 49
001BE9  2               tile_size = 256
001BE9  2  74 69 6C 65  fstile: .literal "tiles.bin"
001BED  2  73 2E 62 69  
001BF1  2  6E           
001BF2  2               fstileend:
001BF2  2               
001BF2  1               .include "sprite.inc"
001BF2  2  73 70 72 69  fssprite:	.literal "sprites.bin"
001BF6  2  74 65 73 2E  
001BFA  2  62 69 6E     
001BFD  2               fsspriteend:
001BFD  2               sprites = 12
001BFD  2               sprite_size = 1024
001BFD  2               
001BFD  1               
001BFD  1  00 00        default_irq_vector: .addr 0
001BFF  1  00           trigger_debug: .byte 0
001C00  1               tiles_attributes:
001C00  1  00           	.byte %00000000	;	TILE_NO_COLLISION
001C01  1  07           	.byte %00000111	;	TILE_SOLID_GROUND
001C02  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_LEFT
001C03  1  04           	.byte %00000100	;	TILE_SOLD_SLOP_RIGHT
001C04  1  09           	.byte %00001001	;	TILE_SOLID_LADER
001C05  1  09           	.byte %00001001	;	TILE_LEDGE
001C06  1               
001C06  1               .segment "BSS"
001C06  1  00           	joystick_data: .byte 0
001C07  1  xx xx xx xx  	sprites_table: .res 256		; VERA memory of each of the 256 sprites
001C0B  1  xx xx xx xx  
001C0F  1  xx xx xx xx  
001D07  1  xx xx xx xx  	player0: .tag PLAYER
001D0B  1  xx xx xx xx  
001D0F  1  xx xx xx xx  
001D07  1               
