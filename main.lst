ca65 V2.19 - Git ad7c5a6
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 6E 0D        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               veral1vscrolllo	= verareg+$19
000810  2               veral1vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               TILE_SOLID_GROUND = 32
000810  1               TILE_SOLID_LADER = 33
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1               .macro LOAD_FILE filename, length, ram
000810  1               	lda #1
000810  1               	ldx #8
000810  1               	ldy #0
000810  1               	jsr SETLFS
000810  1               	lda #length
000810  1               	ldx #<filename
000810  1               	ldy #>filename
000810  1               	jsr SETNAM
000810  1               	lda #0
000810  1               	ldx #<ram
000810  1               	ldy #>ram
000810  1               	jsr LOAD
000810  1               .endmacro
000810  1               
000810  1               .scope Vera
000810  1               
000810  1               .macro VLOAD_FILE filename, length, vram
000810  1               	lda #1
000810  1               	ldx #8
000810  1               	ldy #0
000810  1               	jsr SETLFS
000810  1               	lda #length
000810  1               	ldx #<filename
000810  1               	ldy #>filename
000810  1               	jsr SETNAM
000810  1               	lda #(^vram + 2)
000810  1               	ldx #<vram
000810  1               	ldy #>vram
000810  1               	jsr LOAD
000810  1               .endmacro
000810  1               
000810  1               ;
000810  1               ; copy from rom to vram
000810  1               ;	r0 : from
000810  1               ;	r1 : to (first 16 bites)
000810  1               ;   	y : vera bank (0, 1)
000810  1               ;	X: blocks
000810  1               ;
000810  1               vcopy:
000810  1  A9 00        	lda #0
000812  1  8D 25 9F     	sta veractl
000815  1  98           	tya
000816  1  09 10        	ora #$10
000818  1  8D 22 9F     	sta verahi
00081B  1  A5 05        	lda r1H
00081D  1  8D 21 9F     	sta veramid
000820  1  A5 04        	lda r1L
000822  1  8D 20 9F     	sta veralo
000825  1               
000825  1               @loop:
000825  1  A0 00            ldy #0
000827  1               @loop1tile:
000827  1  B1 02        	lda (r0),y                         	; read from tiles data
000829  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
00082C  1  C8               iny
00082D  1  D0 F8            bne @loop1tile
00082F  1               
00082F  1  E6 03        	inc r0H
000831  1  CA           	dex
000832  1  D0 F1        	bne @loop
000834  1  60           	rts
000835  1               .endscope
000835  1               
000835  1               
000835  1               .include "layers.asm"
000835  2               ;-----------------------------------------------------------------------------
000835  2               ;/////////////////////////////////////////////////////////////////////////////
000835  2               ; START Layers code
000835  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000835  2               ;-----------------------------------------------------------------------------
000835  2               
000835  2               .scope Layers
000835  2               HSCROLL = 0
000835  2               VSCROLL = 2
000835  2               
000835  2               ; define size of tiles for layer
000835  2               .macro VTILEMODE layer, mode
000835  2               	lda veral0tilebase + layer * 7
000835  2               	and #VERA_CLEAR_TILE_SIZE
000835  2               	ora #mode
000835  2               	sta veral0tilebase + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; define number of tiles in the map
000835  2               .macro VCONFIG_TILES layer,mode
000835  2               	lda veral0config + layer * 7
000835  2               	and #VERA_CONFIG_CLEAR_TILES
000835  2               	ora #mode
000835  2               	sta veral0config + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; define number of colors for the map
000835  2               .macro VCONFIG_DEPTH layer,mode
000835  2               	lda veral0config + layer * 7
000835  2               	and #VERA_CONFIG_CLEAR_DEPTH
000835  2               	ora #mode
000835  2               	sta veral0config + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; set the tilebase for the layer
000835  2               .macro VTILEBASE layer,addr
000835  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000835  2               	and #VERA_TILEBASE_CLEAR_ADR
000835  2               	ora #(addr >> 9)
000835  2               	sta veral0tilebase + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; set the mapbase for the layer
000835  2               .macro VMAPBASE layer,addr
000835  2                   lda #(addr >> 9)         ; store 2 last bits
000835  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000835  2               .endmacro
000835  2               
000835  2               ;
000835  2               ; increase layer scrolling with a 8bits limit
000835  2               ;	X: : 0 = horizontal
000835  2               ;	   : 2 = vertical
000835  2               ;	Y: limit
000835  2               ;
000835  2               scroll_inc_8:
000835  2  84 02        	sty r0L
000837  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00083A  2  C5 02        	cmp r0L
00083C  2  F0 0C        	beq @noscroll
00083E  2               @scrollinc:
00083E  2  1A           	inc
00083F  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000842  2  D0 03        	bne @scrolled
000844  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000847  2               @scrolled:
000847  2  A9 01        	lda #01		; clear ZERO => scrolled
000849  2  60           	rts
00084A  2               @noscroll:
00084A  2  A9 00        	lda #00		; set ZERO => noscroll
00084C  2  60           	rts
00084D  2               
00084D  2               ;
00084D  2               ; increase layer scrolling with a 16bits limit
00084D  2               ;	X: : 0 = horizontal
00084D  2               ;	   : 2 = vertical
00084D  2               ;	r0L: limit
00084D  2               ;
00084D  2               scroll_inc_16:
00084D  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000850  2  C5 02        	cmp r0L
000852  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
000854  2  A8           	tay
000855  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
000858  2  C5 03        	cmp r0H
00085A  2  F0 0D        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
00085C  2  98           	tya
00085D  2               @scrollinc:
00085D  2  1A           	inc
00085E  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000861  2  D0 03        	bne @scrolled
000863  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000866  2               @scrolled:
000866  2  A9 01        	lda #01	; clear ZERO => scrolled
000868  2  60           	rts
000869  2               @noscroll:
000869  2  A9 00        	lda #00	; set ZERO => noscroll
00086B  2  60           	rts
00086C  2               
00086C  2               ; increase a layer scroll offset but do NOT overlap
00086C  2               .macro VSCROLL_INC direction,limit
00086C  2               .if limit > 255
00086C  2               	LOAD_r0 limit
00086C  2               	ldx #direction
00086C  2               	jsr Layers::scroll_inc_16
00086C  2               .else
00086C  2               	ldy #limit
00086C  2               	ldx #direction
00086C  2               	jsr Layers::scroll_inc_8
00086C  2               .endif
00086C  2               .endmacro
00086C  2               
00086C  2               ;
00086C  2               ;
00086C  2               ; decrease a layer scroll offset
00086C  2               ;	X : 0 = horizontal
00086C  2               ;	  : 2 = vertical
00086C  2               ;
00086C  2               scroll_dec:
00086C  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00086F  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
000871  2  3A           	dec
000872  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000875  2  80 0E        	bra @scrolled
000877  2               @scrollHI:
000877  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
00087A  2  F0 0C        	beq @noscroll		; 0000 => no scrolling
00087C  2  3A           	dec
00087D  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000880  2  88           	dey
000881  2  98           	tya
000882  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
000885  2               
000885  2               @scrolled:
000885  2  A9 01        	lda #01		; clear ZERO => scrolled
000887  2  60           	rts
000888  2               
000888  2               @noscroll:
000888  2  A9 00        	lda #00		; set ZERO => noscroll
00088A  2  60           	rts
00088B  2               
00088B  2               ;
00088B  2               ; force layer0 scrolling to be half of the layer1 scrolling
00088B  2               ;
00088B  2               scroll_l0:
00088B  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
00088E  2  4A           	lsr
00088F  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
000892  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000895  2  6A           	ror
000896  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
000899  2  60           	rts
00089A  2               .endscope
00089A  2               
00089A  1               .include "sprites.asm"
00089A  2               ;-----------------------------------------------------------------------------
00089A  2               ;/////////////////////////////////////////////////////////////////////////////
00089A  2               ; START Sprite code
00089A  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00089A  2               ;-----------------------------------------------------------------------------
00089A  2               
00089A  2               .struct VSPRITE
00089A  2               	address125 .byte
00089A  2               	mode_xxx_address1613 .byte
00089A  2               	x70 .byte
00089A  2               	x98 .byte
00089A  2               	y70 .byte
00089A  2               	y98 .byte
00089A  2               	collision_zdepth_vflip_hflip .byte
00089A  2               	height_width_offset .byte
00089A  2               .endstruct
00089A  2               
00089A  2               .scope Sprite
00089A  2               ;
00089A  2               ; create a table with the VERA @addr for each sprite
00089A  2               ;
00089A  2               init_addr_table:
00089A  2               	; start of the sprites in VERA memory
00089A  2  A9 00        	lda #<vram_sprd
00089C  2  85 02        	sta r0L
00089E  2  A9 FC        	lda #>vram_sprd
0008A0  2  85 03        	sta r0H
0008A2  2               
0008A2  2  A2 80        	ldx #128
0008A4  2  A0 00        	ldy #0
0008A6  2                @loop:
0008A6  2  A5 03        	lda r0H
0008A8  2  99 FE 0E     	sta sprites_table,y
0008AB  2  C8           	iny
0008AC  2  A5 02        	lda r0L
0008AE  2  99 FE 0E     	sta sprites_table,y
0008B1  2  C8           	iny
0008B2  2               
0008B2  2  18           	clc
0008B3  2  A5 02        	lda r0L
0008B5  2  69 08        	adc #8
0008B7  2  85 02        	sta r0L
0008B9  2  A5 03        	lda r0H
0008BB  2  69 00        	adc #0
0008BD  2  85 03        	sta r0H	; move to next sprite
0008BF  2               
0008BF  2  CA           	dex
0008C0  2  D0 E4        	bne @loop
0008C2  2               
0008C2  2  60           	rts
0008C3  2               
0008C3  2               ;
0008C3  2               ; the the VERA memory pointer to sprite Y + attribute X
0008C3  2               ;	Y = sprite index
0008C3  2               ;	X = attribute offset
0008C3  2               ;
0008C3  2               vram:
0008C3  2  DA           	phx			; save X on the stack
0008C4  2               
0008C4  2  98           	tya			; index of the sprite
0008C5  2  0A           	asl
0008C6  2  A8           	tay			; index of the address of the sprite (y*2)
0008C7  2               
0008C7  2  A9 00        	lda #0
0008C9  2  8D 25 9F     	sta veractl
0008CC  2  A9 11        	lda #<(vram_sprd >> 16) | $10
0008CE  2  8D 22 9F     	sta verahi
0008D1  2  B9 FE 0E     	lda sprites_table, y
0008D4  2  8D 21 9F     	sta veramid
0008D7  2  C8           	iny
0008D8  2  BA           	tsx
0008D9  2  BD 01 01     	lda $0101,x	; reload X from the stack
0008DC  2  79 FE 0E     	adc sprites_table, y
0008DF  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
0008E2  2  FA           	plx
0008E3  2  60           	rts
0008E4  2               
0008E4  2               load:
0008E4  2  20 FE 08     	jsr set_bitmap
0008E7  2               
0008E7  2  9C 23 9F     	stz veradat					; x = 0
0008EA  2  9C 23 9F     	stz veradat
0008ED  2  9C 23 9F     	stz veradat					; y = 0
0008F0  2  9C 23 9F     	stz veradat
0008F3  2  A9 00        	lda #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
0008F5  2  8D 23 9F     	sta veradat
0008F8  2  A9 A0        	lda #%10100000				; 32x32 sprite
0008FA  2  8D 23 9F     	sta veradat
0008FD  2  60           	rts
0008FE  2               
0008FE  2               ;
0008FE  2               ; change the address of the bitmap for the sprite
0008FE  2               ;	Y = sprite index
0008FE  2               ;	r0 = vera memory (full value)
0008FE  2               ;
0008FE  2               set_bitmap:
0008FE  2  A2 00        	ldx #VSPRITE::address125
000900  2  20 C3 08     	jsr vram			; set very pointer to the address of the bitmap
000903  2               
000903  2               	; convert full addr to vera mode (bit shiting)
000903  2  A5 03        	lda r0H
000905  2  4A           	lsr
000906  2  66 02        	ror r0L
000908  2  4A           	lsr
000909  2  66 02        	ror r0L
00090B  2  4A           	lsr
00090C  2  66 02        	ror r0L
00090E  2  4A           	lsr
00090F  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000911  2  4A           	lsr
000912  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
000914  2  09 80        	ora #$80						; M = 8 bits
000916  2  A6 02        	ldx r0L
000918  2  8E 23 9F     	stx veradat					; addres 12:5 of the sprite date
00091B  2  8D 23 9F     	sta veradat					; M000 + address 16:13
00091E  2               
00091E  2  60           	rts
00091F  2               ;
00091F  2               ; change the display byte for a sprite
00091F  2               ;	Y = sprite index
00091F  2               ;	X = display value to set
00091F  2               ;
00091F  2               display:
00091F  2  86 02        	stx r0L		; save X for later
000921  2               
000921  2               	; set vram memory on the X sprite
000921  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000923  2  20 C3 08     	jsr vram
000926  2               
000926  2  A5 02        	lda r0L
000928  2  8D 23 9F     	sta veradat
00092B  2  60           	rts
00092C  2               
00092C  2               ;
00092C  2               ; define position of sprite
00092C  2               ;	Y = sprite index
00092C  2               ;	r0 = addr of word X & word Y
00092C  2               ;
00092C  2               position:
00092C  2               	; set vram memory on the X sprite
00092C  2  A2 02        	ldx #VSPRITE::x70
00092E  2  20 C3 08     	jsr vram
000931  2               
000931  2  A0 01        	ldy #1
000933  2  B2 02        	lda (r0L)
000935  2  8D 23 9F     	sta veradat
000938  2  B1 02        	lda (r0L),y
00093A  2  8D 23 9F     	sta veradat
00093D  2  C8           	iny
00093E  2  B1 02        	lda (r0L),y
000940  2  8D 23 9F     	sta veradat
000943  2  C8           	iny
000944  2  B1 02        	lda (r0L),y
000946  2  8D 23 9F     	sta veradat
000949  2  60           	rts
00094A  2               
00094A  2               ;
00094A  2               ; Change the flipping of a sprite
00094A  2               ;	Y = sprite index
00094A  2               ;	A = value to set
00094A  2               ;
00094A  2               set_flip:
00094A  2  85 30        	sta $30
00094C  2  84 31        	sty $31
00094E  2               
00094E  2               	; set vram memory on the X sprite
00094E  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000950  2  20 C3 08     	jsr vram
000953  2               
000953  2  AD 23 9F     	lda veradat				;get current value
000956  2  29 FC        	and #SPRITE_FLIP_CLEAR
000958  2  05 30        	ora $30					; change only the flip value
00095A  2  85 30        	sta $30
00095C  2               
00095C  2  A4 31        	ldy $31
00095E  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000960  2  20 C3 08     	jsr vram
000963  2  A5 30        	lda $30
000965  2  8D 23 9F     	sta veradat
000968  2  60           	rts
000969  2               .endscope
000969  2               
000969  1               .include "player.asm"
000969  2               ;-----------------------------------------------------------------------------
000969  2               ;/////////////////////////////////////////////////////////////////////////////
000969  2               ; START player code
000969  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000969  2               ;-----------------------------------------------------------------------------
000969  2               
000969  2               PLAYER_SPRITE_ANIMATION = 3
000969  2               PLAYER_SPRITE_FRONT = 0
000969  2               PLAYER_SPRITE_LEFT = 3
000969  2               PLAYER_SPRITE_BACK = 6
000969  2               
000969  2               .enum
000969  2               	STATUS_WALKING_IDLE
000969  2               	STATUS_WALKING
000969  2               	STATUS_CLIMBING
000969  2               	STATUS_CLIMBING_IDLE
000969  2               	STATUS_FALLING
000969  2               .endenum
000969  2               
000969  2               .struct PLAYER
000969  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
000969  2               	animation_tick	.byte
000969  2               	spriteID 		.byte	; current animation loop start
000969  2               	spriteAnim 		.byte	; current frame
000969  2               	spriteAnimDirection .byte ; direction of the animation
000969  2               	vera_bitmap_start .word	; vera memory of the first bitmap
000969  2               	px 				.word	; relative X & Y on screen
000969  2               	py 				.word
000969  2               	levelx			.word	; absolute X & Y in the level
000969  2               	levely			.word
000969  2               	flip 			.byte
000969  2               	tilemap			.word	; cached @ of the tilemap equivalent of the center of the player
000969  2               .endstruct
000969  2               
000969  2               .macro m_status value
000969  2               	lda #(value)
000969  2               	sta player0 + PLAYER::status
000969  2               .endmacro
000969  2               
000969  2               .scope Player
000969  2               init:
000969  2  A9 0A        	lda #10
00096B  2  8D ED 0E     	sta player0 + PLAYER::animation_tick
00096E  2  A9 00        	lda #STATUS_WALKING_IDLE
000970  2  8D EC 0E     	sta player0 + PLAYER::status
000973  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000975  2  8D EE 0E     	sta player0 + PLAYER::spriteID
000978  2  9C EF 0E     	stz player0 + PLAYER::spriteAnim
00097B  2  A9 01        	lda #1
00097D  2  8D F0 0E     	sta player0 + PLAYER::spriteAnimDirection
000980  2  9C F3 0E     	stz player0 + PLAYER::px
000983  2  9C F4 0E     	stz player0 + PLAYER::px+1
000986  2  9C F5 0E     	stz player0 + PLAYER::py
000989  2  9C F6 0E     	stz player0 + PLAYER::py+1
00098C  2  9C F7 0E     	stz player0 + PLAYER::levelx
00098F  2  9C F8 0E     	stz player0 + PLAYER::levelx+1
000992  2  9C F9 0E     	stz player0 + PLAYER::levely
000995  2  9C FA 0E     	stz player0 + PLAYER::levely+1
000998  2  9C FB 0E     	stz player0 + PLAYER::flip
00099B  2               
00099B  2               	; load sprites data at the end of the tiles
00099B  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (VRAM_tiles + tiles * tile_size)
00099F  2  A0 00 20 BA  
0009A3  2  FF A9 0B A2  
0009B6  2               
0009B6  2  20 C9 09     	jsr Player::set_vera_base
0009B9  2               
0009B9  2  A0 00        	ldy #0
0009BB  2  20 E4 08     	jsr Sprite::load
0009BE  2               
0009BE  2               	; turn sprite 0 on
0009BE  2  A0 00        	ldy #0
0009C0  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0009C2  2  20 1F 09     	jsr Sprite::display
0009C5  2               
0009C5  2               	; set first bitmap
0009C5  2  20 E2 09     	jsr set_bitmap
0009C8  2  60           	rts
0009C9  2               
0009C9  2               ;
0009C9  2               ;	record the address in VERA memory of the bitmaps
0009C9  2               ;		r3 = base memory
0009C9  2               ;
0009C9  2               set_vera_base:
0009C9  2  A5 02        	lda r0L
0009CB  2  8D F1 0E     	sta player0 + PLAYER::vera_bitmap_start
0009CE  2  A5 03        	lda r0H
0009D0  2  8D F2 0E     	sta player0 + PLAYER::vera_bitmap_start + 1
0009D3  2  60           	rts
0009D4  2               
0009D4  2               ;
0009D4  2               ; force the current player sprite at its position
0009D4  2               ;
0009D4  2               position_set:
0009D4  2  A0 00        	ldy #0
0009D6  2  A9 F3 85 02  	LOAD_r0 (player0 + PLAYER::px)
0009DA  2  A9 0E 85 03  
0009DE  2  20 2C 09     	jsr Sprite::position			; set position of the sprite
0009E1  2  60           	rts
0009E2  2               
0009E2  2               ;
0009E2  2               ; change the player bitmap
0009E2  2               ;
0009E2  2               set_bitmap:
0009E2  2  18           	clc
0009E3  2  AD EF 0E     	lda player0 + PLAYER::spriteAnim
0009E6  2  6D EE 0E     	adc player0 + PLAYER::spriteID
0009E9  2               
0009E9  2  0A           	asl
0009EA  2  0A           	asl			; * 1024 (in High)
0009EB  2  6D F2 0E     	adc player0 + PLAYER::vera_bitmap_start + 1
0009EE  2  85 03        	sta r0H
0009F0  2  AD F1 0E     	lda player0 + PLAYER::vera_bitmap_start
0009F3  2  85 02        	sta r0L
0009F5  2               
0009F5  2  A0 00        	ldy #0
0009F7  2  20 FE 08     	jsr Sprite::set_bitmap
0009FA  2  60           	rts
0009FB  2               
0009FB  2               ;
0009FB  2               ; increase player X position
0009FB  2               ;
0009FB  2               position_x_inc:
0009FB  2               	; move the absolute position levelx + 1
0009FB  2  AD F7 0E     	lda player0 + PLAYER::levelx
0009FE  2  AE F8 0E     	ldx player0 + PLAYER::levelx + 1
000A01  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
000A03  2  D0 04        	bne @incLOW1
000A05  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
000A07  2  F0 46        	beq @no_move						; we are at the level limit
000A09  2               @incLOW1:
000A09  2  1A           	inc
000A0A  2  8D F7 0E     	sta player0 + PLAYER::levelx
000A0D  2  D0 04        	bne @inc_screen_x
000A0F  2               @incHi:
000A0F  2  E8           	inx
000A10  2  8E F8 0E     	stx player0 + PLAYER::levelx + 1
000A13  2               
000A13  2               @inc_screen_x:
000A13  2               	; distance from layer border to sprite absolute position
000A13  2  38           	sec
000A14  2  AD F7 0E     	lda player0 + PLAYER::levelx
000A17  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000A1A  2  85 02        	sta r0L
000A1C  2  AD F8 0E     	lda player0 + PLAYER::levelx + 1
000A1F  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000A22  2  85 03        	sta r0H
000A24  2               
000A24  2  D0 15        	bne @move_sprite_upper
000A26  2  A5 02        	lda r0L
000A28  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
000A2A  2  90 19        	bcc @move_sprite
000A2C  2               
000A2C  2               @move_layers:
000A2C  2               	; keep the sprite onscreen 224, for level 224->416
000A2C  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
000A30  2  20 35 08     
000A33  2  F0 06        	beq @move_sprite_upper
000A35  2  A2 00        	ldx #Layers::HSCROLL
000A37  2  20 8B 08     	jsr Layers::scroll_l0
000A3A  2  60           	rts
000A3B  2               
000A3B  2               @move_sprite_upper:
000A3B  2  AD F3 0E     	lda player0 + PLAYER::px
000A3E  2  AE F4 0E     	ldx player0 + PLAYER::px + 1
000A41  2  1A           	inc
000A42  2  D0 01        	bne @move_sprite
000A44  2  E8           	inx
000A45  2               
000A45  2               @move_sprite:
000A45  2  8D F3 0E     	sta player0 + PLAYER::px
000A48  2  8E F4 0E     	stx player0 + PLAYER::px + 1
000A4B  2  20 D4 09     	jsr Player::position_set
000A4E  2  60           	rts
000A4F  2               
000A4F  2               @no_move:
000A4F  2  60           	rts
000A50  2               ;
000A50  2               ; decrease player position X unless at 0
000A50  2               ;
000A50  2               position_x_dec:
000A50  2               	; move the absolute position levelx + 1
000A50  2  AD F7 0E     	lda player0 + PLAYER::levelx
000A53  2  D0 05        	bne @decLOW
000A55  2  AE F8 0E     	ldx player0 + PLAYER::levelx + 1
000A58  2  F0 49        	beq @no_move						; we are at Y == 0
000A5A  2               @decLOW:
000A5A  2  3A           	dec
000A5B  2  8D F7 0E     	sta player0 + PLAYER::levelx
000A5E  2  C9 FF        	cmp #$ff
000A60  2  D0 04        	bne @dec_screen_x
000A62  2               @decHi:
000A62  2  CA           	dex
000A63  2  8E F8 0E     	stx player0 + PLAYER::levelx + 1
000A66  2               
000A66  2               @dec_screen_x:
000A66  2               	; distance from layer border to sprite absolute position
000A66  2  38           	sec
000A67  2  AD F7 0E     	lda player0 + PLAYER::levelx
000A6A  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000A6D  2  85 02        	sta r0L
000A6F  2  AD F8 0E     	lda player0 + PLAYER::levelx + 1
000A72  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000A75  2  85 03        	sta r0H
000A77  2               
000A77  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000A79  2               
000A79  2  A5 02        	lda r0L
000A7B  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000A7D  2  C9 40        	cmp #64
000A7F  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
000A81  2               
000A81  2               @move_layers:
000A81  2               	; keep the sprite onscreen 224, for level 224->416
000A81  2  A2 00        	ldx #Layers::HSCROLL
000A83  2  20 6C 08     	jsr Layers::scroll_dec
000A86  2  F0 06        	beq @move_sprite_lower
000A88  2  A2 00        	ldx #Layers::HSCROLL
000A8A  2  20 8B 08     	jsr Layers::scroll_l0
000A8D  2  60           	rts
000A8E  2               
000A8E  2               @move_sprite_lower:
000A8E  2  AD F3 0E     	lda player0 + PLAYER::px
000A91  2  AE F4 0E     	ldx player0 + PLAYER::px + 1
000A94  2  3A           	dec
000A95  2  C9 FF        	cmp #$ff
000A97  2  D0 01        	bne @move_sprite
000A99  2  CA           	dex
000A9A  2               
000A9A  2               @move_sprite:
000A9A  2  8D F3 0E     	sta player0 + PLAYER::px
000A9D  2  8E F4 0E     	stx player0 + PLAYER::px + 1
000AA0  2  20 D4 09     	jsr Player::position_set
000AA3  2               
000AA3  2               @no_move:
000AA3  2  60           	rts
000AA4  2               
000AA4  2               ;
000AA4  2               ; increase player Y position
000AA4  2               ;
000AA4  2               position_y_inc:
000AA4  2               	; move the absolute position levelx + 1
000AA4  2  AD F9 0E     	lda player0 + PLAYER::levely
000AA7  2  AE FA 0E     	ldx player0 + PLAYER::levely + 1
000AAA  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
000AAC  2  D0 04        	bne @incLOW1
000AAE  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
000AB0  2  F0 4C        	beq @no_move						; we are at the level limit
000AB2  2               @incLOW1:
000AB2  2  1A           	inc
000AB3  2  8D F9 0E     	sta player0 + PLAYER::levely
000AB6  2  D0 04        	bne @inc_screen_y
000AB8  2               @incHi:
000AB8  2  E8           	inx
000AB9  2  8E FA 0E     	stx player0 + PLAYER::levely + 1
000ABC  2               
000ABC  2               @inc_screen_y:
000ABC  2               	; distance from layer border to sprite absolute position
000ABC  2  38           	sec
000ABD  2  AD F9 0E     	lda player0 + PLAYER::levely
000AC0  2  ED 39 9F     	sbc veral1vscrolllo
000AC3  2  85 02        	sta r0L
000AC5  2  AD FA 0E     	lda player0 + PLAYER::levely + 1
000AC8  2  ED 3A 9F     	sbc veral1vscrollhi
000ACB  2  85 03        	sta r0H
000ACD  2               
000ACD  2  D0 1B        	bne @move_sprite_upper
000ACF  2  A5 02        	lda r0L
000AD1  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
000AD3  2  90 1F        	bcc @move_sprite
000AD5  2               
000AD5  2               @move_layers:
000AD5  2               	; keep the sprite onscreen 224, for level 224->416
000AD5  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
000AD9  2  A9 01 85 03  
000ADD  2  A2 02 20 4D  
000AE2  2  F0 06        	beq @move_sprite_upper
000AE4  2  A2 02        	ldx #Layers::VSCROLL
000AE6  2  20 8B 08     	jsr Layers::scroll_l0
000AE9  2  60           	rts
000AEA  2               
000AEA  2               @move_sprite_upper:
000AEA  2  AD F5 0E     	lda player0 + PLAYER::py
000AED  2  AE F6 0E     	ldx player0 + PLAYER::py + 1
000AF0  2  1A           	inc
000AF1  2  D0 01        	bne @move_sprite
000AF3  2  E8           	inx
000AF4  2               
000AF4  2               @move_sprite:
000AF4  2  8D F5 0E     	sta player0 + PLAYER::py
000AF7  2  8E F6 0E     	stx player0 + PLAYER::py + 1
000AFA  2  20 D4 09     	jsr Player::position_set
000AFD  2  60           	rts
000AFE  2               
000AFE  2               @no_move:
000AFE  2  60           	rts
000AFF  2               
000AFF  2               ;;
000AFF  2  AD F5 0E     	lda player0 + PLAYER::py
000B02  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
000B04  2  F0 09        	beq @moveleftP0
000B06  2  1A           	inc
000B07  2  8D F5 0E     	sta player0 + PLAYER::py
000B0A  2  D0 03        	bne @moveleftP0
000B0C  2  EE F6 0E     	inc player0 + PLAYER::py + 1
000B0F  2               @moveleftP0:
000B0F  2  20 D4 09     	jsr Player::position_set
000B12  2  60           	rts
000B13  2               
000B13  2               ;
000B13  2               ; decrease player position X unless at 0
000B13  2               ;
000B13  2               position_y_dec:
000B13  2               	; move the absolute position levelx + 1
000B13  2  AD F9 0E     	lda player0 + PLAYER::levely
000B16  2  D0 05        	bne @decLOW
000B18  2  AE FA 0E     	ldx player0 + PLAYER::levely + 1
000B1B  2  F0 49        	beq @no_move						; we are at Y == 0
000B1D  2               @decLOW:
000B1D  2  3A           	dec
000B1E  2  8D F9 0E     	sta player0 + PLAYER::levely
000B21  2  C9 FF        	cmp #$ff
000B23  2  D0 04        	bne @dec_screen_y
000B25  2               @decHi:
000B25  2  CA           	dex
000B26  2  8E FA 0E     	stx player0 + PLAYER::levely + 1
000B29  2               
000B29  2               @dec_screen_y:
000B29  2               	; distance from layer border to sprite absolute position
000B29  2  38           	sec
000B2A  2  AD F9 0E     	lda player0 + PLAYER::levely
000B2D  2  ED 39 9F     	sbc veral1vscrolllo
000B30  2  85 02        	sta r0L
000B32  2  AD FA 0E     	lda player0 + PLAYER::levely + 1
000B35  2  ED 3A 9F     	sbc veral1vscrollhi
000B38  2  85 03        	sta r0H
000B3A  2               
000B3A  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000B3C  2               
000B3C  2  A5 02        	lda r0L
000B3E  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000B40  2  C9 20        	cmp #32
000B42  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
000B44  2               
000B44  2               @move_layers:
000B44  2               	; keep the sprite onscreen 224, for level 224->416
000B44  2  A2 02        	ldx #Layers::VSCROLL
000B46  2  20 6C 08     	jsr Layers::scroll_dec
000B49  2  F0 06        	beq @move_sprite_lower
000B4B  2  A2 02        	ldx #Layers::VSCROLL
000B4D  2  20 8B 08     	jsr Layers::scroll_l0
000B50  2  60           	rts
000B51  2               
000B51  2               @move_sprite_lower:
000B51  2  AD F5 0E     	lda player0 + PLAYER::py
000B54  2  AE F6 0E     	ldx player0 + PLAYER::py + 1
000B57  2  3A           	dec
000B58  2  C9 FF        	cmp #$ff
000B5A  2  D0 01        	bne @move_sprite
000B5C  2  CA           	dex
000B5D  2               
000B5D  2               @move_sprite:
000B5D  2  8D F5 0E     	sta player0 + PLAYER::py
000B60  2  8E F6 0E     	stx player0 + PLAYER::py + 1
000B63  2  20 D4 09     	jsr Player::position_set
000B66  2               
000B66  2               @no_move:
000B66  2  60           	rts
000B67  2               
000B67  2               ;
000B67  2               ; hide the current sprite
000B67  2               ;
000B67  2               hide1:
000B67  2  DB           	stp
000B68  2  18           	clc
000B69  2  AD EF 0E     	lda player0 + PLAYER::spriteAnim
000B6C  2  6D EE 0E     	adc player0 + PLAYER::spriteID
000B6F  2  A8           	tay		; sprite index
000B70  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
000B72  2  20 1F 09     	jsr Sprite::display			; turn current sprite off
000B75  2  60           	rts
000B76  2               
000B76  2               ;
000B76  2               ; Animate the player if needed
000B76  2               ;
000B76  2               animate:
000B76  2  AD EC 0E     	lda player0 + PLAYER::status
000B79  2  C9 00        	cmp #STATUS_WALKING_IDLE
000B7B  2  F0 3A        	beq @end
000B7D  2  C9 04        	cmp #STATUS_FALLING
000B7F  2  F0 36        	beq @end
000B81  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000B83  2  F0 32        	beq @end
000B85  2               
000B85  2  CE ED 0E     	dec player0 + PLAYER::animation_tick
000B88  2  D0 2D        	bne @end
000B8A  2               
000B8A  2  A9 0A        	lda #10
000B8C  2  8D ED 0E     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
000B8F  2               
000B8F  2  18           	clc
000B90  2  AD EF 0E     	lda player0 + PLAYER::spriteAnim
000B93  2  6D F0 0E     	adc player0 + PLAYER::spriteAnimDirection
000B96  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
000B98  2  C9 03        	cmp #3
000B9A  2  F0 0B        	beq @set_sprite_anim_decrease
000B9C  2  80 10        	bra @set_sprite_on
000B9E  2               @set_sprite_anim_increase:
000B9E  2  A9 01        	lda #01
000BA0  2  8D F0 0E     	sta player0 + PLAYER::spriteAnimDirection
000BA3  2  A9 00        	lda #0
000BA5  2  80 07        	bra @set_sprite_on
000BA7  2               @set_sprite_anim_decrease:
000BA7  2  A9 FF        	lda #$ff
000BA9  2  8D F0 0E     	sta player0 + PLAYER::spriteAnimDirection
000BAC  2  A9 02        	lda #2
000BAE  2               @set_sprite_on:
000BAE  2  8D EF 0E     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
000BB1  2  20 E2 09     	jsr Player::set_bitmap
000BB4  2  20 D4 09     	jsr Player::position_set
000BB7  2               @end:
000BB7  2  60           	rts
000BB8  2               
000BB8  2               ;
000BB8  2               ; position of the player on the layer1 tilemap
000BB8  2               ;
000BB8  2               get_tilemap_position:
000BB8  2  18           	clc
000BB9  2  AD F9 0E     	lda player0 + PLAYER::levely		; sprite screen position
000BBC  2  85 02        	sta r0L
000BBE  2  AD FA 0E     	lda player0 + PLAYER::levely + 1
000BC1  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
000BC3  2               
000BC3  2  A5 02        	lda r0L
000BC5  2               	;adc #16							; half height of the player
000BC5  2  29 F0        	and #%11110000
000BC7  2  85 02        	sta r0L
000BC9  2  A5 03        	lda r0H
000BCB  2               	;adc #0							; # add the carry
000BCB  2  85 03        	sta r0H
000BCD  2  A5 02        	lda r0L
000BCF  2  0A           	asl
000BD0  2  26 03        	rol r0H
000BD2  2  85 02        	sta r0L 						; r0 = first tile of the tilemap in the row
000BD4  2               									; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
000BD4  2               
000BD4  2  AD F7 0E     	lda player0 + PLAYER::levelx		; sprite screen position
000BD7  2  85 04        	sta r1L
000BD9  2  AD F8 0E     	lda player0 + PLAYER::levelx + 1
000BDC  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
000BDE  2               
000BDE  2  18           	clc
000BDF  2  A5 04        	lda r1L
000BE1  2  69 10        	adc #(LEVEL_TILES_WIDTH / 2)	; helf width of the player
000BE3  2  85 04        	sta r1L
000BE5  2  A5 05        	lda r1H
000BE7  2  69 00        	adc #0
000BE9  2  4A           	lsr
000BEA  2  66 04        	ror r1L
000BEC  2  4A           	lsr
000BED  2  66 04        	ror r1L
000BEF  2  4A           	lsr
000BF0  2  66 04        	ror r1L
000BF2  2  4A           	lsr
000BF3  2  66 04        	ror r1L
000BF5  2  85 05        	sta r1H 					; r1 = tile X in the row
000BF7  2               								; sprite X /16 (convert to tile X)
000BF7  2               
000BF7  2  18           	clc
000BF8  2  A5 02        	lda r0L
000BFA  2  65 04        	adc r1L
000BFC  2  85 02        	sta r0L
000BFE  2  A5 03        	lda r0H
000C00  2  65 05        	adc r1H
000C02  2  85 03        	sta r0H						; r0 = tile position in the tilemap
000C04  2               
000C04  2  18           	clc
000C05  2  A5 03        	lda r0H
000C07  2  69 A0        	adc #>HIMEM
000C09  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
000C0B  2  60           	rts
000C0C  2               
000C0C  2               ;
000C0C  2               ; force player status to be idle
000C0C  2               ;
000C0C  2               set_idle:
000C0C  2  AD EC 0E     	lda player0 + PLAYER::status
000C0F  2  C9 01        	cmp #STATUS_WALKING
000C11  2  F0 09        	beq @set_idle_walking
000C13  2  C9 04        	cmp #STATUS_FALLING
000C15  2  F0 05        	beq @set_idle_walking
000C17  2  C9 02        	cmp #STATUS_CLIMBING
000C19  2  F0 07        	beq @set_idle_climbing
000C1B  2               
000C1B  2  60           	rts							; keep the current value
000C1C  2               
000C1C  2               @set_idle_walking:
000C1C  2  A9 00 8D EC  	m_status STATUS_WALKING_IDLE
000C20  2  0E           
000C21  2  60           	rts
000C22  2               
000C22  2               @set_idle_climbing:
000C22  2  A9 03 8D EC  	m_status STATUS_CLIMBING_IDLE
000C26  2  0E           
000C27  2  60           	rts
000C28  2               
000C28  2               ;
000C28  2               ; check if the player sits on a solid tile
000C28  2               ;
000C28  2               physics:
000C28  2  20 B8 0B     	jsr get_tilemap_position
000C2B  2               
000C2B  2               	; test tile below
000C2B  2  A0 40        	ldy #64						; test the tile BELOW the player
000C2D  2  B1 02        	lda (r0L),y					; tile value at the position
000C2F  2  D0 08        	bne @sit_on_solid			; solid tile, keep the player there
000C31  2               
000C31  2               	; let the player fall
000C31  2  A9 04        	lda #STATUS_FALLING
000C33  2  8D EC 0E     	sta player0 + PLAYER::status
000C36  2               
000C36  2  20 A4 0A     	jsr position_y_inc
000C39  2               
000C39  2               @sit_on_solid:
000C39  2               
000C39  2  A5 02 8D FC  	SAVE_r0 player0 + PLAYER::tilemap	; cache the tilemap @
000C3D  2  0E A5 03 8D  
000C41  2  FD 0E        
000C43  2  60           	rts
000C44  2               
000C44  2               ;
000C44  2               ; check collision on the right
000C44  2               ;
000C44  2               check_collision_right:
000C44  2  A0 01        	ldy #1						; test the tile on the right of the player
000C46  2  AD FC 0E     	lda player0 + PLAYER::tilemap
000C49  2  85 02        	sta r0L
000C4B  2  AD FD 0E     	lda player0 + PLAYER::tilemap + 1
000C4E  2  85 03        	sta r0H
000C50  2  B1 02        	lda (r0L),y
000C52  2  60           	rts
000C53  2               
000C53  2               ;
000C53  2               ; check collision down
000C53  2               ;
000C53  2               check_collision_down:
000C53  2  AD FC 0E     	lda player0 + PLAYER::tilemap
000C56  2  85 02        	sta r0L
000C58  2  AD FD 0E     	lda player0 + PLAYER::tilemap + 1
000C5B  2  85 03        	sta r0H
000C5D  2  B1 02        	lda (r0L),y
000C5F  2  60           	rts
000C60  2               
000C60  2               ;
000C60  2               ; check collision up
000C60  2               ;
000C60  2               check_collision_up:
000C60  2               	;sec
000C60  2  AD FC 0E     	lda player0 + PLAYER::tilemap
000C63  2               	;sbc #32
000C63  2  85 02        	sta r0L
000C65  2  AD FD 0E     	lda player0 + PLAYER::tilemap + 1
000C68  2               	;sbc #0
000C68  2  85 03        	sta r0H
000C6A  2  B1 02        	lda (r0L),y
000C6C  2  60           	rts
000C6D  2               
000C6D  2               ;
000C6D  2               ; check collision on the left
000C6D  2               ;
000C6D  2               check_collision_left:
000C6D  2  38           	sec
000C6E  2  AD FC 0E     	lda player0 + PLAYER::tilemap
000C71  2  E9 01        	sbc #1				; test the tile on the left of the player
000C73  2  85 02        	sta r0L
000C75  2  AD FD 0E     	lda player0 + PLAYER::tilemap + 1
000C78  2  E9 00        	sbc #0
000C7A  2  85 03        	sta r0H
000C7C  2  B2 02        	lda (r0L)
000C7E  2  60           	rts
000C7F  2               
000C7F  2               ;
000C7F  2               ; Try to move player to the right
000C7F  2               ;
000C7F  2               move_right:
000C7F  2  AD EC 0E     	lda player0 + PLAYER::status
000C82  2  C9 04        	cmp #STATUS_FALLING
000C84  2  F0 38        	beq @return						; cannot move when falling
000C86  2               
000C86  2  20 44 0C     	jsr Player::check_collision_right
000C89  2  F0 04        	beq @move
000C8B  2               
000C8B  2  C9 21        	cmp #TILE_SOLID_LADER
000C8D  2  D0 2F        	bne @return						; LADDERS can be traversed
000C8F  2               
000C8F  2               @move:
000C8F  2  AD EC 0E     	lda player0 + PLAYER::status
000C92  2  C9 02        	cmp #STATUS_CLIMBING
000C94  2  F0 22        	beq @keep_climbing_sprite
000C96  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000C98  2  F0 1E        	beq @keep_climbing_sprite
000C9A  2               
000C9A  2               @set_walking_sprite:
000C9A  2  A9 01        	lda #SPRITE_FLIP_H
000C9C  2  8D FB 0E     	sta player0 + PLAYER::flip
000C9F  2  A0 00        	ldy #0
000CA1  2  20 4A 09     	jsr Sprite::set_flip				; force sprite to look right
000CA4  2               
000CA4  2  A9 01 8D EC  	m_status STATUS_WALKING
000CA8  2  0E           
000CA9  2               
000CA9  2               	;change player sprite
000CA9  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000CAB  2  CD EE 0E     	cmp player0 + PLAYER::spriteID
000CAE  2  F0 08        	beq @move_x
000CB0  2               
000CB0  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000CB2  2  8D EE 0E     	sta player0 + PLAYER::spriteID
000CB5  2  20 E2 09     	jsr set_bitmap
000CB8  2               
000CB8  2               @keep_climbing_sprite:
000CB8  2               @move_x:
000CB8  2  20 FB 09     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
000CBB  2  20 D4 09     	jsr position_set
000CBE  2               
000CBE  2               @return:
000CBE  2  60           	rts
000CBF  2               
000CBF  2               ;
000CBF  2               ; try to move the player to the left
000CBF  2               ;
000CBF  2               move_left:
000CBF  2  AD EC 0E     	lda player0 + PLAYER::status
000CC2  2  C9 04        	cmp #STATUS_FALLING
000CC4  2  F0 38        	beq @return						; cannot move when falling
000CC6  2               
000CC6  2  20 6D 0C     	jsr Player::check_collision_left
000CC9  2  F0 04        	beq @move
000CCB  2               
000CCB  2  C9 21        	cmp #TILE_SOLID_LADER
000CCD  2  D0 2F        	bne @return						; LADDERS can be traversed
000CCF  2               
000CCF  2               @move:
000CCF  2  AD EC 0E     	lda player0 + PLAYER::status
000CD2  2  C9 02        	cmp #STATUS_CLIMBING
000CD4  2  F0 22        	beq @keep_climbing_sprite
000CD6  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000CD8  2  F0 1E        	beq @keep_climbing_sprite
000CDA  2               
000CDA  2               @set_walking_sprite:
000CDA  2  A9 00        	lda #SPRITE_FLIP_NONE
000CDC  2  8D FB 0E     	sta player0 + PLAYER::flip
000CDF  2  A0 00        	ldy #0
000CE1  2  20 4A 09     	jsr Sprite::set_flip				; force sprite to loop right
000CE4  2               
000CE4  2  A9 01 8D EC  	m_status STATUS_WALKING
000CE8  2  0E           
000CE9  2               
000CE9  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000CEB  2  CD EE 0E     	cmp player0 + PLAYER::spriteID
000CEE  2  F0 08        	beq @move_x
000CF0  2               
000CF0  2               	;change player sprite
000CF0  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000CF2  2  8D EE 0E     	sta player0 + PLAYER::spriteID
000CF5  2  20 E2 09     	jsr set_bitmap
000CF8  2               
000CF8  2               @keep_climbing_sprite:
000CF8  2               @move_x:
000CF8  2  20 50 0A     	jsr Player::position_x_dec
000CFB  2  20 D4 09     	jsr position_set
000CFE  2               
000CFE  2               @return:
000CFE  2  60           	rts
000CFF  2               
000CFF  2               ;
000CFF  2               ; try to move the player down (crouch, hide, move down a ladder)
000CFF  2               ;
000CFF  2               move_down:
000CFF  2  AD EC 0E     	lda player0 + PLAYER::status
000D02  2  C9 04        	cmp #STATUS_FALLING
000D04  2  F0 23        	beq @return						; cannot move when falling
000D06  2               
000D06  2  A0 40        	ldy #(LEVEL_TILES_WIDTH * 2)
000D08  2  20 53 0C     	jsr Player::check_collision_down
000D0B  2  C9 21        	cmp #TILE_SOLID_LADER
000D0D  2  D0 1A        	bne @return						; solid collision below, block move
000D0F  2               
000D0F  2  20 A4 0A     	jsr Player::position_y_inc		; move down the ladder
000D12  2               
000D12  2  A9 02 8D EC  	m_status STATUS_CLIMBING
000D16  2  0E           
000D17  2               
000D17  2  A9 06        	lda #PLAYER_SPRITE_BACK
000D19  2  CD EE 0E     	cmp player0 + PLAYER::spriteID
000D1C  2  F0 0B        	beq @return
000D1E  2               
000D1E  2               	;change player sprite
000D1E  2  A9 06        	lda #PLAYER_SPRITE_BACK
000D20  2  8D EE 0E     	sta player0 + PLAYER::spriteID
000D23  2  20 E2 09     	jsr set_bitmap
000D26  2  20 D4 09     	jsr position_set
000D29  2               
000D29  2               @return:
000D29  2  60           	rts
000D2A  2               
000D2A  2               ;
000D2A  2               ; try to move the player up (move up a ladder)
000D2A  2               ;
000D2A  2               move_up:
000D2A  2  AD EC 0E     	lda player0 + PLAYER::status
000D2D  2  C9 04        	cmp #STATUS_FALLING
000D2F  2  F0 3C        	beq @return						; cannot move when falling
000D31  2               
000D31  2  A0 00        	ldy #0
000D33  2  20 60 0C     	jsr Player::check_collision_up	; test at head
000D36  2  C9 21        	cmp #TILE_SOLID_LADER
000D38  2  F0 19        	beq @climb						; solid collision below, block move
000D3A  2               
000D3A  2  A0 20        	ldy #LEVEL_TILES_WIDTH
000D3C  2  20 60 0C     	jsr Player::check_collision_up	; test at hip
000D3F  2  C9 21        	cmp #TILE_SOLID_LADER
000D41  2  F0 10        	beq @climb						; solid collision below, block move
000D43  2               
000D43  2  AD F9 0E     	lda player0 + PLAYER::levely	; if player is not on a multiple of 16 (tile size)
000D46  2  29 0F        	and #%00001111
000D48  2  F0 23        	beq @return
000D4A  2               
000D4A  2               	; the player covers 3 vertical tiles
000D4A  2  A0 40        	ldy #(LEVEL_TILES_WIDTH * 2)
000D4C  2  20 60 0C     	jsr Player::check_collision_up	; test at feet
000D4F  2  C9 21        	cmp #TILE_SOLID_LADER
000D51  2  D0 1A        	bne @return						; solid collision below, block move
000D53  2               
000D53  2               @climb:
000D53  2  20 13 0B     	jsr Player::position_y_dec		; move down the ladder
000D56  2               
000D56  2  A9 02 8D EC  	m_status STATUS_CLIMBING
000D5A  2  0E           
000D5B  2               
000D5B  2  A9 06        	lda #PLAYER_SPRITE_BACK
000D5D  2  CD EE 0E     	cmp player0 + PLAYER::spriteID
000D60  2  F0 0B        	beq @return
000D62  2               
000D62  2               	;change player sprite
000D62  2  A9 06        	lda #PLAYER_SPRITE_BACK
000D64  2  8D EE 0E     	sta player0 + PLAYER::spriteID
000D67  2  20 E2 09     	jsr set_bitmap
000D6A  2  20 D4 09     	jsr position_set
000D6D  2               
000D6D  2               @return:
000D6D  2  60           	rts
000D6E  2               
000D6E  2               .endscope
000D6E  2               
000D6E  1               
000D6E  1               ;-----------------------------------------------------------------------------
000D6E  1               ;/////////////////////////////////////////////////////////////////////////////
000D6E  1               ; main code
000D6E  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000D6E  1               ;-----------------------------------------------------------------------------
000D6E  1               
000D6E  1               start:
000D6E  1               	; 320x240
000D6E  1  A9 40        	lda #64
000D70  1  8D 2A 9F     	sta veradchscale
000D73  1  8D 2B 9F     	sta veradcvscale
000D76  1               
000D76  1               	; activate layer0
000D76  1  A9 71        	lda #%01110001
000D78  1               ;	and #(255-VERA_LAYER0)
000D78  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
000D78  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
000D7B  1               
000D7B  1               	;---------------------------------
000D7B  1               	; load tiles file into vram
000D7B  1               	;---------------------------------
000D7B  1  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), VRAM_tiles
000D7F  1  A0 00 20 BA  
000D83  1  FF A9 09 A2  
000D96  1               
000D96  1               	;---------------------------------
000D96  1               	; load tilemaps into vram
000D96  1               	;---------------------------------
000D96  1               setlayer0:
000D96  1  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
000D9A  1  0F 09 00 8D  
000D9E  1  2D 9F        
000DA0  1  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
000DA4  1  0F 09 03 8D  
000DA8  1  2D 9F        
000DAA  1  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
000DAE  1  9F           
000DAF  1  AD 2F 9F 29  	VTILEBASE 0, VRAM_tiles
000DB3  1  03 09 08 8D  
000DB7  1  2F 9F        
000DB9  1  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
000DBD  1  FC 09 03 8D  
000DC1  1  2F 9F        
000DC3  1  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
000DC7  1  A0 00 20 BA  
000DCB  1  FF A9 0B A2  
000DDE  1               
000DDE  1               setlayer1:
000DDE  1  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
000DE2  1  0F 09 00 8D  
000DE6  1  34 9F        
000DE8  1  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
000DEC  1  0F 09 03 8D  
000DF0  1  34 9F        
000DF2  1  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
000DF6  1  9F           
000DF7  1  AD 36 9F 29  	VTILEBASE 1, VRAM_tiles
000DFB  1  03 09 08 8D  
000DFF  1  36 9F        
000E01  1  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000E05  1  FC 09 03 8D  
000E09  1  36 9F        
000E0B  1  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
000E0F  1  A0 00 20 BA  
000E13  1  FF A9 09 A2  
000E26  1               
000E26  1               	;---------------------------------
000E26  1               	; load collisionmap into ram
000E26  1               	;---------------------------------
000E26  1  A9 00        	lda #0
000E28  1  85 00        	sta $00
000E2A  1  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), HIMEM
000E2E  1  A0 00 20 BA  
000E32  1  FF A9 0D A2  
000E45  1               
000E45  1               	;---------------------------------
000E45  1               	; load sprite 0,1,2 into vram
000E45  1               	;---------------------------------
000E45  1               load_sprites:
000E45  1               	; prepare VERA sprites
000E45  1  20 9A 08     	jsr Sprite::init_addr_table
000E48  1               
000E48  1  A9 00 85 02  	LOAD_r0 (VRAM_tiles + tiles * tile_size)	; base for the sprites
000E4C  1  A9 37 85 03  
000E50  1  20 69 09     	jsr Player::init
000E53  1               
000E53  1               setirq:
000E53  1                  ; backup default RAM IRQ vector
000E53  1  AD 14 03        lda IRQVec
000E56  1  8D E9 0E        sta default_irq_vector
000E59  1  AD 15 03        lda IRQVec+1
000E5C  1  8D EA 0E        sta default_irq_vector+1
000E5F  1               
000E5F  1                  ; overwrite RAM IRQ vector with custom handler address
000E5F  1  78              sei ; disable IRQ while vector is changing
000E60  1  A9 74           lda #<custom_irq_handler
000E62  1  8D 14 03        sta IRQVec
000E65  1  A9 0E           lda #>custom_irq_handler
000E67  1  8D 15 03        sta IRQVec+1
000E6A  1  A9 01           lda #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
000E6C  1  8D 26 9F        sta veraien
000E6F  1  58              cli ; enable IRQ now that vector is properly set
000E70  1               
000E70  1               mainloop:
000E70  1  CB           	wai
000E71  1               	; do nothing in main loop, just let ISR do everything
000E71  1  80 FD        	bra mainloop
000E73  1               
000E73  1  60           	rts
000E74  1               
000E74  1               ;-----------------------------------------------------------------------------
000E74  1               ;/////////////////////////////////////////////////////////////////////////////
000E74  1               ; deal with IRQ"s
000E74  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000E74  1               ;-----------------------------------------------------------------------------
000E74  1               custom_irq_handler:
000E74  1  AD 27 9F        lda veraisr
000E77  1  29 01           and #VERA_VSYNC_BIT
000E79  1  F0 1E           beq continue 	; non-VSYNC IRQ, no tick update
000E7B  1               
000E7B  1               	;---------------------------------
000E7B  1               	; animate sprite
000E7B  1               	;---------------------------------
000E7B  1  20 76 0B     	jsr Player::animate
000E7E  1               
000E7E  1               	;---------------------------------
000E7E  1               	; player physics
000E7E  1               	;---------------------------------
000E7E  1  20 28 0C     	jsr Player::physics
000E81  1               
000E81  1               	;---------------------------------
000E81  1               	; check keyboard
000E81  1               	;---------------------------------
000E81  1               @check_keyboard:
000E81  1  A9 00        	lda #0
000E83  1  20 56 FF     	jsr joystick_get
000E86  1               
000E86  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
000E86  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
000E86  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
000E86  1               ;
000E86  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
000E86  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
000E86  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
000E86  1               ;  .Y, byte 2:
000E86  1               ;              $00 = joystick present
000E86  1               ;              $FF = joystick not present
000E86  1  89 01        	bit #JOY_RIGHT
000E88  1  F0 17        	beq moveright
000E8A  1  89 02        	bit #JOY_LEFT
000E8C  1  F0 0E        	beq moveleft
000E8E  1  89 04        	bit #JOY_DOWN
000E90  1  F0 19        	beq movedown
000E92  1  89 08        	bit #JOY_UP
000E94  1  F0 10        	beq moveup
000E96  1               
000E96  1  20 0C 0C     	jsr Player::set_idle
000E99  1               
000E99  1               continue:
000E99  1                  ; continue to default IRQ handler
000E99  1  6C E9 0E        jmp (default_irq_vector)
000E9C  1                  ; RTI will happen after jump
000E9C  1               
000E9C  1               moveleft:
000E9C  1  20 BF 0C     	jsr Player::move_left
000E9F  1  80 F8        	bra continue
000EA1  1               
000EA1  1               moveright:
000EA1  1  20 7F 0C     	jsr Player::move_right
000EA4  1  80 F3        	bra continue
000EA6  1               
000EA6  1               moveup:
000EA6  1  20 2A 0D     	jsr Player::move_up
000EA9  1  80 EE        	bra continue
000EAB  1               
000EAB  1               movedown:
000EAB  1  20 FF 0C     	jsr Player::move_down
000EAE  1  80 E9        	bra continue
000EB0  1               
000EB0  1               .segment "DATA"
000EB0  1               .include "tilemap.inc"
000EB0  2               map:
000EB0  2  20 20        	.byte 32,32
000EB2  2  6C 65 76 65  fslevel: .literal "level.bin"
000EB6  2  6C 2E 62 69  
000EBA  2  6E           
000EBB  2               fslevel_end:
000EBB  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
000EBF  2  65 72 79 2E  
000EC3  2  62 69 6E     
000EC6  2               fsbackground_end:
000EC6  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
000ECA  2  69 73 69 6F  
000ECE  2  6E 2E 62 69  
000ED3  2               fscollision_end:
000ED3  2               tileset:
000ED3  2  10 10        	.byte 16,16
000ED5  2               tiles = 39
000ED5  2               tile_size = 256
000ED5  2  74 69 6C 65  fstile: .literal "tiles.bin"
000ED9  2  73 2E 62 69  
000EDD  2  6E           
000EDE  2               fstileend:
000EDE  2               
000EDE  1               .include "sprite.inc"
000EDE  2  73 70 72 69  fssprite:	.literal "sprites.bin"
000EE2  2  74 65 73 2E  
000EE6  2  62 69 6E     
000EE9  2               fsspriteend:
000EE9  2               sprites = 9
000EE9  2               sprite_size = 1024
000EE9  2               
000EE9  1               
000EE9  1  00 00        default_irq_vector: .addr 0
000EEB  1               
000EEB  1               .segment "BSS"
000EEB  1  xx           keyboard: .res 1
000EEC  1  xx xx xx xx  player0: .tag PLAYER
000EF0  1  xx xx xx xx  
000EF4  1  xx xx xx xx  
000EFE  1  xx xx xx xx  sprites_table: .res 256		; VERA memory of each of the 256 sprites
000F02  1  xx xx xx xx  
000F06  1  xx xx xx xx  
000EFE  1               
