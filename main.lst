ca65 V2.19 - Git ad7c5a6
Main file   : main.asm
Current file: main.asm

000000r 1               .org $080D
00080D  1               .segment "STARTUP"
00080D  1               .segment "INIT"
00080D  1               .segment "ONCE"
00080D  1               .segment "CODE"
00080D  1               
00080D  1  4C 02 0F        jmp start
000810  1               
000810  1               .macro LOAD_r0 addr16
000810  1               	lda #<addr16
000810  1               	sta r0L
000810  1               	lda #>addr16
000810  1               	sta r0H
000810  1               .endmacro
000810  1               .macro SAVE_r0 addr16
000810  1               	lda r0L
000810  1               	sta addr16
000810  1               	lda r0H
000810  1               	sta addr16 + 1
000810  1               .endmacro
000810  1               .macro LOAD_r1 addr16
000810  1               	lda #<addr16
000810  1               	sta r1L
000810  1               	lda #>addr16
000810  1               	sta r1H
000810  1               .endmacro
000810  1               .macro LOAD_r3 addr16
000810  1               	lda #<addr16
000810  1               	sta r3L
000810  1               	lda #>addr16
000810  1               	sta r3H
000810  1               .endmacro
000810  1               
000810  1               .include "x16.inc"
000810  2               .ifndef X16_INC
000810  2               X16_INC = 1
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 64 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Channel I/O
000810  2               SETMSG		= $FF90 ; set verbosity
000810  2               READST		= $FFB7 ; return status byte
000810  2               SETLFS		= $FFBA ; set LA, FA and SA
000810  2               SETNAM		= $FFBD ; set filename
000810  2               OPEN		= $FFC0 ; open a channel
000810  2               CLOSE		= $FFC3 ; close a channel
000810  2               CHKIN		= $FFC6 ; set channel for character input
000810  2               CHKOUT		= $FFC9 ; set channel for character output
000810  2               CLRCHN		= $FFCC ; restore character I/O to screen/keyboard
000810  2               BASIN		= $FFCF ; get character
000810  2               BSOUT		= $FFD2 ; write character
000810  2               LOAD		= $FFD5 ; load a file into memory
000810  2               SAVE		= $FFD8 ; save a file from memory
000810  2               CLALL		= $FFE7 ; close all channels
000810  2               
000810  2               ; Commodore Peripheral Bus
000810  2               TALK		= $FFB4 ; send TALK command
000810  2               LISTEN		= $FFB1 ; send LISTEN command
000810  2               UNLSN		= $FFAE ; send UNLISTEN command
000810  2               UNTLK		= $FFAB ; send UNTALK command
000810  2               IECOUT		= $FFA8 ; send byte to serial bus
000810  2               IECIN		= $FFA5 ; read byte from serial bus
000810  2               SETTMO		= $FFA2 ; set timeout
000810  2               TKSA		= $FF96 ; send TALK secondary address
000810  2               SECOND		= $FF93 ; send LISTEN secondary address
000810  2               
000810  2               ; Memory
000810  2               MEMBOT		= $FF9C ; read/write address of start of usable RAM
000810  2               MEMTOP		= $FF99 ; read/write address of end of usable RAM
000810  2               
000810  2               ; Time
000810  2               RDTIM		= $FFDE ; read system clock
000810  2               SETTIM		= $FFDB ; write system clock
000810  2               UDTIM		= $FFEA ; advance clock
000810  2               
000810  2               ; Other:
000810  2               STOP		= $FFE1 ; test for STOP key
000810  2               GETIN		= $FFE4 ; get character from keyboard
000810  2               SCREEN		= $FFED ; get the screen resolution
000810  2               PLOT		= $FFF0 ; read/write cursor position
000810  2               IOBASE		= $FFF3 ; return start of I/O area
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commodore 128 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               CLOSE_ALL		= $FF4A ; close all files on a device
000810  2               LKUPLA		= $FF8D ; search tables for given LA
000810  2               LKUPSA		= $FF8A ; search tables for given SA
000810  2               DLCHR		= $FF62 ; activate a text mode font in the video hardware [not yet implemented]
000810  2               PFKEY		= $FF65 ; program a function key [not yet implemented]
000810  2               FETCH		= $FF74 ; LDA (fetvec),Y from any bank
000810  2               STASH		= $FF77 ; STA (stavec),Y to any bank
000810  2               CMPARE		= $FF7A ; CMP (cmpvec),Y to any bank
000810  2               PRIMM		= $FF7D ; print string following the callerâ€™s code
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Commander X16 API
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               ; Clock
000810  2               clock_set_date_time		= $FF4D ; set date and time
000810  2               clock_get_date_time		= $FF50 ; get date and time
000810  2               
000810  2               ; Mouse
000810  2               mouse_config			= $FF68 ; configure mouse pointer
000810  2               mouse_get				= $FF6B ; get state of mouse
000810  2               
000810  2               ; Joystick
000810  2               joystick_scan			= $FF53 ; query joysticks
000810  2               joystick_get			= $FF56 ; get state of one joystick
000810  2               
000810  2               ; Sprites
000810  2               sprite_set_image		= $FEF0 ; set the image of a sprite
000810  2               sprite_set_position		= $FEF3 ; set the position of a sprite
000810  2               
000810  2               ; Framebuffer
000810  2               FB_init					= $FEF6 ; enable graphics mode
000810  2               FB_get_info				= $FEF9 ; get screen size and color depth
000810  2               FB_set_palette			= $FEFC ; set (parts of) the palette
000810  2               FB_cursor_position		= $FEFF ; position the direct;access cursor
000810  2               FB_cursor_next_line		= $FF02 ; move direct;access cursor to next line
000810  2               FB_get_pixel			= $FF05 ; read one pixel, update cursor
000810  2               FB_get_pixels			= $FF08 ; copy pixels into RAM, update cursor
000810  2               FB_set_pixel			= $FF0B ; set one pixel, update cursor
000810  2               FB_set_pixels			= $FF0E ; copy pixels from RAM, update cursor
000810  2               FB_set_8_pixels			= $FF11 ; set 8 pixels from bit mask (transparent), update cursor
000810  2               FB_set_8_pixels_opaque	= $FF14 ; set 8 pixels from bit mask (opaque), update cursor
000810  2               FB_fill_pixels			= $FF17 ; fill pixels with constant color, update cursor
000810  2               FB_filter_pixels		= $FF1A ; apply transform to pixels, update cursor
000810  2               FB_move_pixels			= $FF1D ; copy horizontally consecutive pixels to a different position
000810  2               
000810  2               ; Graphics
000810  2               GRAPH_init				= $FF20 ; initialize graphics
000810  2               GRAPH_clear				= $FF23 ; clear screen
000810  2               GRAPH_set_window		= $FF26 ; set clipping region
000810  2               GRAPH_set_colors		= $FF29 ; set stroke, fill and background colors
000810  2               GRAPH_draw_line			= $FF2C ; draw a line
000810  2               GRAPH_draw_rect			= $FF2F ; draw a rectangle (optionally filled)
000810  2               GRAPH_move_rect			= $FF32 ; move pixels
000810  2               GRAPH_draw_oval			= $FF35 ; draw an oval or circle
000810  2               GRAPH_draw_image		= $FF38 ; draw a rectangular image
000810  2               GRAPH_set_font			= $FF3B ; set the current font
000810  2               GRAPH_get_char_size		= $FF3E ; get size and baseline of a character
000810  2               GRAPH_put_char			= $FF41 ; print a character
000810  2               
000810  2               ; Console
000810  2               CONSOLE_init					= $FEDB ; initialize console mode
000810  2               CONSOLE_put_char				= $FEDE ; print character to console
000810  2               CONSOLE_put_image				= $FED8 ; draw image as if it was a character
000810  2               CONSOLE_get_char				= $FEE1 ; get character from console
000810  2               CONSOLE_set_paging_message		= $FED5 ; set paging message or disable paging
000810  2               
000810  2               ; Other
000810  2               memory_fill				= $FEE4 ; fill memory region with a byte value
000810  2               memory_copy				= $FEE7 ; copy memory region
000810  2               memory_crc				= $FEEA ; calculate CRC16 of memory region
000810  2               memory_decompress		= $FEED ; decompress LZSA2 block
000810  2               entropy_get				= $FECF ; Get 24 random bits
000810  2               monitor					= $FF44 ; enter machine language monitor
000810  2               restore_basic			= $FF47 ; enter BASIC
000810  2               screen_set_mode			= $FF5F ; set screen mode
000810  2               screen_set_charset		= $FF62 ; activate 8x8 text mode charset
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; VRAM Addresses
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               VRAM_composer		= $F0000
000810  2               VRAM_hscale			= VRAM_composer+1
000810  2               VRAM_vscale			= VRAM_composer+2
000810  2               VRAM_palette		= $F1000
000810  2               VRAM_layer0			= $F2000
000810  2               VRAM_layer1			= $F3000
000810  2               VRAM_sprreg			= $F4000
000810  2               VRAM_sprattr		= $F5000
000810  2               VRAM_audio			= $F6000
000810  2               VRAM_spi			= $F7000
000810  2               VRAM_uart			= $F8000
000810  2               
000810  2               VROM_petscii				= $1F000
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; IRQs
000810  2               ; ------------------------------------------------------------
000810  2               
000810  2               IRQVec		= $0314
000810  2               BRKVec		= $0316
000810  2               NMIVec		= $0318
000810  2               
000810  2               
000810  2               ; ------------------------------------------------------------
000810  2               ; Virtual registers
000810  2               ; ------------------------------------------------------------
000810  2               r0			= $02
000810  2               r0L			= $02
000810  2               r0H			= $03
000810  2               r1			= $04
000810  2               r1L			= $04
000810  2               r1H			= $05
000810  2               r2			= $06
000810  2               r2L			= $06
000810  2               r2H			= $07
000810  2               r3			= $08
000810  2               r3L			= $08
000810  2               r3H			= $09
000810  2               r4			= $0a
000810  2               r4L			= $0a
000810  2               r4H			= $0b
000810  2               r5			= $0c
000810  2               r5L			= $0c
000810  2               r5H			= $0d
000810  2               r6			= $0e
000810  2               r6L			= $0e
000810  2               r6H			= $0f
000810  2               r7			= $10
000810  2               r7L			= $10
000810  2               r7H			= $11
000810  2               r8			= $12
000810  2               r8L			= $12
000810  2               r8H			= $13
000810  2               r9			= $14
000810  2               r9L			= $14
000810  2               r9H			= $15
000810  2               r10			= $16
000810  2               r10L		= $16
000810  2               r10H		= $17
000810  2               r11			= $18
000810  2               r11L		= $18
000810  2               r11H		= $19
000810  2               r12			= $1a
000810  2               r12L		= $1a
000810  2               r12H		= $1b
000810  2               r13			= $1c
000810  2               r13L		= $1c
000810  2               r13H		= $1d
000810  2               r14			= $1e
000810  2               r14L		= $1e
000810  2               r14H		= $1f
000810  2               r15			= $20
000810  2               r15L		= $20
000810  2               r15H		= $21
000810  2               
000810  2               
000810  2               .endif
000810  2               
000810  1               .include "vera.inc"
000810  2               ; License: Public Domain
000810  2               .ifndef VERA_INC
000810  2               VERA_INC = 1
000810  2               
000810  2               verareg =$9f20
000810  2               
000810  2               veralo  		= verareg+$0
000810  2               veramid 		= verareg+$1
000810  2               verahi  		= verareg+$2
000810  2               veradat 		= verareg+$3
000810  2               veradat2		= verareg+$4
000810  2               veractl 		= verareg+$5
000810  2               veraien 		= verareg+$6
000810  2               veraisr 		= verareg+$7
000810  2               verairqlo 		= verareg+$8
000810  2               
000810  2               ; DCSEl = 0
000810  2               veradcvideo		= verareg+$9
000810  2               
000810  2               VERA_VGA		= %00000001
000810  2               VERA_LAYER0		= %00010000
000810  2               VERA_LAYER1		= %00100000
000810  2               VERA_SPRITE		= %01000000
000810  2               
000810  2               veradchscale	= verareg+$a
000810  2               veradcvscale	= verareg+$b
000810  2               veradcborder	= verareg+$c
000810  2               
000810  2               ; DCSEl = 1
000810  2               veradchstart	= verareg+$9
000810  2               veradchstop		= verareg+$a
000810  2               veradcvstart	= verareg+$b
000810  2               veradcvstop		= verareg+$c
000810  2               
000810  2               ; L0
000810  2               veral0config	= verareg+$d
000810  2               veral0mapbase	= verareg+$e
000810  2               veral0tilebase	= verareg+$f
000810  2               VERA_L0_hscrolllo	= verareg+$10
000810  2               VERA_L0_hscrollhi	= verareg+$11
000810  2               veral0vscrolllo	= verareg+$12
000810  2               veral0vscrollhi	= verareg+$13
000810  2               
000810  2               ; L1
000810  2               veral1config	= verareg+$14
000810  2               veral1mapbase	= verareg+$15
000810  2               veral1tilebase	= verareg+$16
000810  2               VERA_L1_hscrolllo	= verareg+$17
000810  2               VERA_L1_hscrollhi	= verareg+$18
000810  2               veral1vscrolllo	= verareg+$19
000810  2               veral1vscrollhi	= verareg+$1a
000810  2               
000810  2               VERA_CONFIG_CLEAR_TILES=%00001111
000810  2               VERA_CONFIG_32x32 = 	%00000000
000810  2               VERA_CONFIG_32x64 = 	%00010000
000810  2               VERA_CONFIG_32x128 = 	%00100000
000810  2               VERA_CONFIG_32x256 = 	%00110000
000810  2               VERA_CONFIG_64x32 = 	%01000000
000810  2               VERA_CONFIG_128x32 = 	%10000000
000810  2               VERA_CONFIG_256x32 = 	%11000000
000810  2               VERA_CONFIG_64x64 = 	%01010000
000810  2               VERA_CONFIG_64x128 = 	%01100000
000810  2               VERA_CONFIG_64x256 = 	%01110000
000810  2               VERA_CONFIG_128x64 = 	%10010000
000810  2               VERA_CONFIG_128x128 = 	%10100000
000810  2               VERA_CONFIG_128x256 = 	%10110000
000810  2               VERA_CONFIG_256x64 = 	%11010000
000810  2               VERA_CONFIG_256x128 = 	%11100000
000810  2               VERA_CONFIG_256x256 = 	%11110000
000810  2               
000810  2               VERA_CONFIG_CLEAR_DEPTH=%00001111
000810  2               VERA_CONFIG_1BPP	=	%00000000
000810  2               VERA_CONFIG_2BPP	=	%00000001
000810  2               VERA_CONFIG_4BPP	=	%00000010
000810  2               VERA_CONFIG_8BPP	=	%00000011
000810  2               
000810  2               VERA_CLEAR_TILE_SIZE= %11111100
000810  2               VERA_TILE_8x8 		= %00000000
000810  2               VERA_TILE_8x16 		= %00000010
000810  2               VERA_TILE_16x8 		= %00000001
000810  2               VERA_TILE_16x16 	= %00000011
000810  2               
000810  2               VERA_TILEBASE_CLEAR_ADR = %00000011
000810  2               
000810  2               ; audio
000810  2               veraaudioctl	= verareg+$1b
000810  2               veraaudiorate	= verareg+$1c
000810  2               veraaudiodata	= verareg+$1d
000810  2               veraspidata		= verareg+$1e
000810  2               veraspictl		= verareg+$1f
000810  2               
000810  2               vram_sprd  = $1fc00
000810  2               
000810  2               AUTO_INC_0 		= $000000
000810  2               AUTO_INC_1 		= $100000
000810  2               AUTO_INC_2 		= $200000
000810  2               AUTO_INC_4 		= $300000
000810  2               AUTO_INC_8 		= $400000
000810  2               AUTO_INC_16		= $500000
000810  2               AUTO_INC_32		= $600000
000810  2               AUTO_INC_64		= $700000
000810  2               AUTO_INC_128	= $800000
000810  2               AUTO_INC_256	= $900000
000810  2               AUTO_INC_512	= $A00000
000810  2               AUTO_INC_40		= $B00000
000810  2               AUTO_INC_80		= $C00000
000810  2               AUTO_INC_160	= $C00000
000810  2               AUTO_INC_320	= $E00000
000810  2               AUTO_INC_640	= $F00000
000810  2               
000810  2               SPRITE_SIZE_8	= $0
000810  2               SPRITE_SIZE_16	= $1
000810  2               SPRITE_SIZE_32	= $2
000810  2               SPRITE_SIZE_64	= $3
000810  2               
000810  2               SPRITE_ZDEPTH_DISABLED = %00000000
000810  2               SPRITE_ZDEPTH_BGto0 = %00000100
000810  2               SPRITE_ZDEPTH_0to1 = %00001000
000810  2               SPRITE_ZDEPTH_TOP = %00001100
000810  2               
000810  2               SPRITE_FLIP_CLEAR = %11111100
000810  2               SPRITE_FLIP_NONE = %00000000
000810  2               SPRITE_FLIP_H = %00000001
000810  2               SPRITE_FLIP_V = %00000010
000810  2               
000810  2               veral0mode = %00010000
000810  2               VERA_VSYNC_BIT         = $01
000810  2               
000810  2               
000810  2               .macro vset addr
000810  2               	lda #0
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vset2 addr
000810  2               	lda #1
000810  2               	sta veractl
000810  2               	lda #<(addr >> 16) | $10
000810  2               	sta verahi
000810  2               	lda #<(addr >> 8)
000810  2               	sta veramid
000810  2               	lda #<(addr)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro vstore addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vstore2 addr
000810  2               	pha
000810  2               	vset addr
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro vload addr
000810  2               	vset addr
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro vload2 addr
000810  2               	vset addr
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprset offset
000810  2               	lda #<(vram_sprd >> 16) | $10
000810  2               	sta verahi
000810  2               	txa
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	lsr
000810  2               	clc
000810  2               	adc #<((vram_sprd + offset) >> 8)
000810  2               	sta veramid
000810  2               	txa
000810  2               	asl
000810  2               	asl
000810  2               	asl
000810  2               	clc
000810  2               	adc #<(vram_sprd + offset)
000810  2               	sta veralo
000810  2               .endmacro
000810  2               
000810  2               .macro sprload offset
000810  2               	sprset offset
000810  2               	lda veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprload2 offset
000810  2               	sprset offset
000810  2               	lda veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat
000810  2               .endmacro
000810  2               
000810  2               .macro sprstore2 offset
000810  2               	pha
000810  2               	sprset offset
000810  2               	pla
000810  2               	sta veradat2
000810  2               .endmacro
000810  2               
000810  2               .macro video_init
000810  2               	lda #0
000810  2               	sta veractl ; set ADDR1 active
000810  2               	sta veramid
000810  2               	lda #$1F    ; $F0000 increment 1
000810  2               	sta verahi
000810  2               	lda #$00
000810  2               	sta veralo
000810  2               	lda #1
000810  2               	sta veradat ; VGA output
000810  2               .endmacro
000810  2               
000810  2               .endif
000810  2               
000810  1               
000810  1               ; VRAM Addresses
000810  1               VRAM_layer0_map   = $00000
000810  1               VRAM_layer1_map   = $00800
000810  1               VRAM_tiles        = $01000
000810  1               
000810  1               HIMEM = $a000
000810  1               
000810  1               SCREEN_WIDTH = 320
000810  1               SCREEN_HEIGHT = 240
000810  1               LEVEL_TILES_WIDTH = 32
000810  1               LEVEL_WIDTH = LEVEL_TILES_WIDTH*16
000810  1               LEVEL_HEIGHT = 32*16
000810  1               
000810  1               TILE_SOLID_GROUND = 32
000810  1               TILE_SOLID_LADER = 33
000810  1               
000810  1               ;---------------------------------
000810  1               ; joystick management
000810  1               ;---------------------------------
000810  1               
000810  1               JOY_RIGHT 	= %00000001
000810  1               JOY_LEFT 	= %00000010
000810  1               JOY_DOWN 	= %00000100
000810  1               JOY_UP 		= %00001000
000810  1               JOY_START	= %00010000
000810  1               JOY_SEL		= %00100000
000810  1               JOY_Y		= %01000000
000810  1               JOY_B		= %10000000
000810  1               
000810  1               .macro VCOPY from, to, blocks
000810  1               	LOAD_r0 from
000810  1               	LOAD_r1 (to & $00ffff)
000810  1               	ldy #(to >> 16)
000810  1               	ldx #(blocks)
000810  1               	jsr Vera::vcopy
000810  1               .endmacro
000810  1               
000810  1               ;-----------------------------------------------------------------------------
000810  1               ;/////////////////////////////////////////////////////////////////////////////
000810  1               ; START Vera code
000810  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000810  1               ;-----------------------------------------------------------------------------
000810  1               
000810  1               .macro LOAD_FILE filename, length, ram
000810  1               	lda #1
000810  1               	ldx #8
000810  1               	ldy #0
000810  1               	jsr SETLFS
000810  1               	lda #length
000810  1               	ldx #<filename
000810  1               	ldy #>filename
000810  1               	jsr SETNAM
000810  1               	lda #0
000810  1               	ldx #<ram
000810  1               	ldy #>ram
000810  1               	jsr LOAD
000810  1               .endmacro
000810  1               
000810  1               .scope Vera
000810  1               
000810  1               .macro VLOAD_FILE filename, length, vram
000810  1               	lda #1
000810  1               	ldx #8
000810  1               	ldy #0
000810  1               	jsr SETLFS
000810  1               	lda #length
000810  1               	ldx #<filename
000810  1               	ldy #>filename
000810  1               	jsr SETNAM
000810  1               	lda #(^vram + 2)
000810  1               	ldx #<vram
000810  1               	ldy #>vram
000810  1               	jsr LOAD
000810  1               .endmacro
000810  1               
000810  1               ;
000810  1               ; copy from rom to vram
000810  1               ;	r0 : from
000810  1               ;	r1 : to (first 16 bites)
000810  1               ;   	y : vera bank (0, 1)
000810  1               ;	X: blocks
000810  1               ;
000810  1               vcopy:
000810  1  A9 00        	lda #0
000812  1  8D 25 9F     	sta veractl
000815  1  98           	tya
000816  1  09 10        	ora #$10
000818  1  8D 22 9F     	sta verahi
00081B  1  A5 05        	lda r1H
00081D  1  8D 21 9F     	sta veramid
000820  1  A5 04        	lda r1L
000822  1  8D 20 9F     	sta veralo
000825  1               
000825  1               @loop:
000825  1  A0 00            ldy #0
000827  1               @loop1tile:
000827  1  B1 02        	lda (r0),y                         	; read from tiles data
000829  1  8D 23 9F         sta veradat                      	; Write to VRAM with +1 Autoincrement
00082C  1  C8               iny
00082D  1  D0 F8            bne @loop1tile
00082F  1               
00082F  1  E6 03        	inc r0H
000831  1  CA           	dex
000832  1  D0 F1        	bne @loop
000834  1  60           	rts
000835  1               .endscope
000835  1               
000835  1               
000835  1               .include "layers.asm"
000835  2               ;-----------------------------------------------------------------------------
000835  2               ;/////////////////////////////////////////////////////////////////////////////
000835  2               ; START Layers code
000835  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000835  2               ;-----------------------------------------------------------------------------
000835  2               
000835  2               .scope Layers
000835  2               HSCROLL = 0
000835  2               VSCROLL = 2
000835  2               
000835  2               ; define size of tiles for layer
000835  2               .macro VTILEMODE layer, mode
000835  2               	lda veral0tilebase + layer * 7
000835  2               	and #VERA_CLEAR_TILE_SIZE
000835  2               	ora #mode
000835  2               	sta veral0tilebase + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; define number of tiles in the map
000835  2               .macro VCONFIG_TILES layer,mode
000835  2               	lda veral0config + layer * 7
000835  2               	and #VERA_CONFIG_CLEAR_TILES
000835  2               	ora #mode
000835  2               	sta veral0config + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; define number of colors for the map
000835  2               .macro VCONFIG_DEPTH layer,mode
000835  2               	lda veral0config + layer * 7
000835  2               	and #VERA_CONFIG_CLEAR_DEPTH
000835  2               	ora #mode
000835  2               	sta veral0config + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; set the tilebase for the layer
000835  2               .macro VTILEBASE layer,addr
000835  2                   lda veral0tilebase + layer * 7                  ; set memory for tilebase
000835  2               	and #VERA_TILEBASE_CLEAR_ADR
000835  2               	ora #(addr >> 9)
000835  2               	sta veral0tilebase + layer * 7
000835  2               .endmacro
000835  2               
000835  2               ; set the mapbase for the layer
000835  2               .macro VMAPBASE layer,addr
000835  2                   lda #(addr >> 9)         ; store 2 last bits
000835  2                   sta veral0mapbase + layer * 7                   ; Store to Map Base Pointer
000835  2               .endmacro
000835  2               
000835  2               ;
000835  2               ; increase layer scrolling with a 8bits limit
000835  2               ;	X: : 0 = horizontal
000835  2               ;	   : 2 = vertical
000835  2               ;	Y: limit
000835  2               ;
000835  2               scroll_inc_8:
000835  2  84 02        	sty r0L
000837  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00083A  2  C5 02        	cmp r0L
00083C  2  F0 0C        	beq @noscroll
00083E  2               @scrollinc:
00083E  2  1A           	inc
00083F  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000842  2  D0 03        	bne @scrolled
000844  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000847  2               @scrolled:
000847  2  A9 01        	lda #01		; clear ZERO => scrolled
000849  2  60           	rts
00084A  2               @noscroll:
00084A  2  A9 00        	lda #00		; set ZERO => noscroll
00084C  2  60           	rts
00084D  2               
00084D  2               ;
00084D  2               ; increase layer scrolling with a 16bits limit
00084D  2               ;	X: : 0 = horizontal
00084D  2               ;	   : 2 = vertical
00084D  2               ;	r0L: limit
00084D  2               ;
00084D  2               scroll_inc_16:
00084D  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000850  2  C5 02        	cmp r0L
000852  2  D0 09        	bne @scrollinc								; if low bits are not equals to the limit low bits => safe to increase
000854  2  A8           	tay
000855  2  BD 38 9F     	lda VERA_L1_hscrollhi, x
000858  2  C5 03        	cmp r0H
00085A  2  F0 0D        	beq @noscroll								; if high bits are equals to the limit high bits => we reached the limit
00085C  2  98           	tya
00085D  2               @scrollinc:
00085D  2  1A           	inc
00085E  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000861  2  D0 03        	bne @scrolled
000863  2  FE 38 9F     	inc VERA_L1_hscrollhi, x
000866  2               @scrolled:
000866  2  A9 01        	lda #01	; clear ZERO => scrolled
000868  2  60           	rts
000869  2               @noscroll:
000869  2  A9 00        	lda #00	; set ZERO => noscroll
00086B  2  60           	rts
00086C  2               
00086C  2               ; increase a layer scroll offset but do NOT overlap
00086C  2               .macro VSCROLL_INC direction,limit
00086C  2               .if limit > 255
00086C  2               	LOAD_r0 limit
00086C  2               	ldx #direction
00086C  2               	jsr Layers::scroll_inc_16
00086C  2               .else
00086C  2               	ldy #limit
00086C  2               	ldx #direction
00086C  2               	jsr Layers::scroll_inc_8
00086C  2               .endif
00086C  2               .endmacro
00086C  2               
00086C  2               ;
00086C  2               ;
00086C  2               ; decrease a layer scroll offset
00086C  2               ;	X : 0 = horizontal
00086C  2               ;	  : 2 = vertical
00086C  2               ;
00086C  2               scroll_dec:
00086C  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
00086F  2  F0 06        	beq @scrollHI			; 00 => decrease high bits
000871  2  3A           	dec
000872  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000875  2  80 0E        	bra @scrolled
000877  2               @scrollHI:
000877  2  BC 38 9F     	ldy VERA_L1_hscrollhi, x
00087A  2  F0 0C        	beq @noscroll		; 0000 => no scrolling
00087C  2  3A           	dec
00087D  2  9D 37 9F     	sta VERA_L1_hscrolllo, x
000880  2  88           	dey
000881  2  98           	tya
000882  2  9D 38 9F     	sta VERA_L1_hscrollhi, x
000885  2               
000885  2               @scrolled:
000885  2  A9 01        	lda #01		; clear ZERO => scrolled
000887  2  60           	rts
000888  2               
000888  2               @noscroll:
000888  2  A9 00        	lda #00		; set ZERO => noscroll
00088A  2  60           	rts
00088B  2               
00088B  2               ;
00088B  2               ; force layer0 scrolling to be half of the layer1 scrolling
00088B  2               ;
00088B  2               scroll_l0:
00088B  2  BD 38 9F     	lda VERA_L1_hscrollhi, x	; layer0 hScroll is layer 1 / 2
00088E  2  4A           	lsr
00088F  2  9D 31 9F     	sta VERA_L0_hscrollhi, x
000892  2  BD 37 9F     	lda VERA_L1_hscrolllo, x
000895  2  6A           	ror
000896  2  9D 30 9F     	sta VERA_L0_hscrolllo, x
000899  2  60           	rts
00089A  2               .endscope
00089A  2               
00089A  1               .include "sprites.asm"
00089A  2               ;-----------------------------------------------------------------------------
00089A  2               ;/////////////////////////////////////////////////////////////////////////////
00089A  2               ; START Sprite code
00089A  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00089A  2               ;-----------------------------------------------------------------------------
00089A  2               
00089A  2               .struct VSPRITE
00089A  2               	address125 .byte
00089A  2               	mode_xxx_address1613 .byte
00089A  2               	x70 .byte
00089A  2               	x98 .byte
00089A  2               	y70 .byte
00089A  2               	y98 .byte
00089A  2               	collision_zdepth_vflip_hflip .byte
00089A  2               	height_width_offset .byte
00089A  2               .endstruct
00089A  2               
00089A  2               .scope Sprite
00089A  2               ;
00089A  2               ; create a table with the VERA @addr for each sprite
00089A  2               ;
00089A  2               init_addr_table:
00089A  2               	; start of the sprites in VERA memory
00089A  2  A9 00        	lda #<vram_sprd
00089C  2  85 02        	sta r0L
00089E  2  A9 FC        	lda #>vram_sprd
0008A0  2  85 03        	sta r0H
0008A2  2               
0008A2  2  A2 80        	ldx #128
0008A4  2  A0 00        	ldy #0
0008A6  2                @loop:
0008A6  2  A5 03        	lda r0H
0008A8  2  99 DA 10     	sta sprites_table,y
0008AB  2  C8           	iny
0008AC  2  A5 02        	lda r0L
0008AE  2  99 DA 10     	sta sprites_table,y
0008B1  2  C8           	iny
0008B2  2               
0008B2  2  18           	clc
0008B3  2  A5 02        	lda r0L
0008B5  2  69 08        	adc #8
0008B7  2  85 02        	sta r0L
0008B9  2  A5 03        	lda r0H
0008BB  2  69 00        	adc #0
0008BD  2  85 03        	sta r0H	; move to next sprite
0008BF  2               
0008BF  2  CA           	dex
0008C0  2  D0 E4        	bne @loop
0008C2  2               
0008C2  2  60           	rts
0008C3  2               
0008C3  2               ;
0008C3  2               ; the the VERA memory pointer to sprite Y + attribute X
0008C3  2               ;	Y = sprite index
0008C3  2               ;	X = attribute offset
0008C3  2               ;
0008C3  2               vram:
0008C3  2  DA           	phx			; save X on the stack
0008C4  2               
0008C4  2  98           	tya			; index of the sprite
0008C5  2  0A           	asl
0008C6  2  A8           	tay			; index of the address of the sprite (y*2)
0008C7  2               
0008C7  2  A9 00        	lda #0
0008C9  2  8D 25 9F     	sta veractl
0008CC  2  A9 11        	lda #<(vram_sprd >> 16) | $10
0008CE  2  8D 22 9F     	sta verahi
0008D1  2  B9 DA 10     	lda sprites_table, y
0008D4  2  8D 21 9F     	sta veramid
0008D7  2  C8           	iny
0008D8  2  BA           	tsx
0008D9  2  BD 01 01     	lda $0101,x	; reload X from the stack
0008DC  2  79 DA 10     	adc sprites_table, y
0008DF  2  8D 20 9F     	sta veralo	; vera = $1fc00 + sprite index (X) * 8
0008E2  2  FA           	plx
0008E3  2  60           	rts
0008E4  2               
0008E4  2               load:
0008E4  2  20 FE 08     	jsr set_bitmap
0008E7  2               
0008E7  2  9C 23 9F     	stz veradat					; x = 0
0008EA  2  9C 23 9F     	stz veradat
0008ED  2  9C 23 9F     	stz veradat					; y = 0
0008F0  2  9C 23 9F     	stz veradat
0008F3  2  A9 00        	lda #%00000000				; collision mask + sprite = disabled + vflip=none + hflip=none
0008F5  2  8D 23 9F     	sta veradat
0008F8  2  A9 A0        	lda #%10100000				; 32x32 sprite
0008FA  2  8D 23 9F     	sta veradat
0008FD  2  60           	rts
0008FE  2               
0008FE  2               ;
0008FE  2               ; change the address of the bitmap for the sprite
0008FE  2               ;	Y = sprite index
0008FE  2               ;	r0 = vera memory (12:5)
0008FE  2               ;
0008FE  2               set_bitmap:
0008FE  2  A2 00        	ldx #VSPRITE::address125
000900  2  20 C3 08     	jsr vram			; set very pointer to the address of the bitmap
000903  2               
000903  2  A5 02        	lda r0L
000905  2  8D 23 9F     	sta veradat
000908  2  A5 03        	lda r0H
00090A  2  09 80        	ora #$80						; M = 8 bits
00090C  2  8D 23 9F     	sta veradat
00090F  2               
00090F  2  60           	rts
000910  2               ;
000910  2               ; change the display byte for a sprite
000910  2               ;	Y = sprite index
000910  2               ;	X = display value to set
000910  2               ;
000910  2               display:
000910  2  86 02        	stx r0L		; save X for later
000912  2               
000912  2               	; set vram memory on the X sprite
000912  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000914  2  20 C3 08     	jsr vram
000917  2               
000917  2  A5 02        	lda r0L
000919  2  8D 23 9F     	sta veradat
00091C  2  60           	rts
00091D  2               
00091D  2               ;
00091D  2               ; define position of sprite
00091D  2               ;	Y = sprite index
00091D  2               ;	r0 = addr of word X & word Y
00091D  2               ;
00091D  2               position:
00091D  2               	; set vram memory on the X sprite
00091D  2  A2 02        	ldx #VSPRITE::x70
00091F  2  20 C3 08     	jsr vram
000922  2               
000922  2  A0 01        	ldy #1
000924  2  B2 02        	lda (r0L)
000926  2  8D 23 9F     	sta veradat
000929  2  B1 02        	lda (r0L),y
00092B  2  8D 23 9F     	sta veradat
00092E  2  C8           	iny
00092F  2  B1 02        	lda (r0L),y
000931  2  8D 23 9F     	sta veradat
000934  2  C8           	iny
000935  2  B1 02        	lda (r0L),y
000937  2  8D 23 9F     	sta veradat
00093A  2  60           	rts
00093B  2               
00093B  2               ;
00093B  2               ; Change the flipping of a sprite
00093B  2               ;	Y = sprite index
00093B  2               ;	A = value to set
00093B  2               ;
00093B  2               set_flip:
00093B  2  85 30        	sta $30
00093D  2  84 31        	sty $31
00093F  2               
00093F  2               	; set vram memory on the X sprite
00093F  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000941  2  20 C3 08     	jsr vram
000944  2               
000944  2  AD 23 9F     	lda veradat				;get current value
000947  2  29 FC        	and #SPRITE_FLIP_CLEAR
000949  2  05 30        	ora $30					; change only the flip value
00094B  2  85 30        	sta $30
00094D  2               
00094D  2  A4 31        	ldy $31
00094F  2  A2 06        	ldx #VSPRITE::collision_zdepth_vflip_hflip
000951  2  20 C3 08     	jsr vram
000954  2  A5 30        	lda $30
000956  2  8D 23 9F     	sta veradat
000959  2  60           	rts
00095A  2               .endscope
00095A  2               
00095A  1               .include "player.asm"
00095A  2               ;-----------------------------------------------------------------------------
00095A  2               ;/////////////////////////////////////////////////////////////////////////////
00095A  2               ; START player code
00095A  2               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
00095A  2               ;-----------------------------------------------------------------------------
00095A  2               
00095A  2               PLAYER_SPRITE_ANIMATION = 3
00095A  2               PLAYER_SPRITE_FRONT = 0
00095A  2               PLAYER_SPRITE_LEFT = 3
00095A  2               PLAYER_SPRITE_BACK = 6
00095A  2               
00095A  2               JUMP_LO_TICKS = 10
00095A  2               JUMP_HI_TICKS = 2
00095A  2               FALL_LO_TICKS = 8
00095A  2               FALL_HI_TICKS = 2
00095A  2               
00095A  2               .enum
00095A  2               	STATUS_WALKING_IDLE
00095A  2               	STATUS_WALKING
00095A  2               	STATUS_CLIMBING
00095A  2               	STATUS_CLIMBING_IDLE
00095A  2               	STATUS_FALLING
00095A  2               	STATUS_JUMPING
00095A  2               	STATUS_JUMPING_IDLE
00095A  2               .endenum
00095A  2               
00095A  2               .struct PLAYER
00095A  2               	sprite			.byte	; sprite index
00095A  2               	status			.byte	; status of the player : IDLE, WALKING, CLIMBING, FALLING
00095A  2               	falling_ticks	.word	; ticks since the player is fllaing (thing t in gravity)
00095A  2               	delta_x			.byte	; when driving by phisics, original delta_x value
00095A  2               	animation_tick	.byte
00095A  2               	spriteID 		.byte	; current animation loop start
00095A  2               	spriteAnim 		.byte	; current frame
00095A  2               	spriteAnimDirection .byte ; direction of the animation
00095A  2               	px 				.word	; relative X & Y on screen
00095A  2               	py 				.word
00095A  2               	levelx			.word	; absolute X & Y in the level
00095A  2               	levely			.word
00095A  2               	flip 			.byte
00095A  2               	tilemap			.word	; cached @ of the tilemap equivalent of the center of the player
00095A  2               	vera_bitmaps    .res 	2*9	; 9 words to store vera bitmaps address
00095A  2               .endstruct
00095A  2               
00095A  2               .macro m_status value
00095A  2               	lda #(value)
00095A  2               	sta player0 + PLAYER::status
00095A  2               .endmacro
00095A  2               
00095A  2               .scope Player
00095A  2               
00095A  2               ;************************************************
00095A  2               ;
00095A  2               ;
00095A  2               init:
00095A  2  9C B4 10     	stz player0 + PLAYER::sprite
00095D  2  A9 0A        	lda #10
00095F  2  8D B9 10     	sta player0 + PLAYER::animation_tick
000962  2  A9 00        	lda #STATUS_WALKING_IDLE
000964  2  8D B5 10     	sta player0 + PLAYER::status
000967  2  9C B6 10     	stz player0 + PLAYER::falling_ticks
00096A  2  9C B7 10     	stz player0 + PLAYER::falling_ticks + 1
00096D  2  A9 03        	lda #PLAYER_SPRITE_LEFT
00096F  2  8D BA 10     	sta player0 + PLAYER::spriteID
000972  2  9C BB 10     	stz player0 + PLAYER::spriteAnim
000975  2  A9 01        	lda #1
000977  2  8D BC 10     	sta player0 + PLAYER::spriteAnimDirection
00097A  2  9C BD 10     	stz player0 + PLAYER::px
00097D  2  9C BE 10     	stz player0 + PLAYER::px+1
000980  2  9C BF 10     	stz player0 + PLAYER::py
000983  2  9C C0 10     	stz player0 + PLAYER::py+1
000986  2  9C C1 10     	stz player0 + PLAYER::levelx
000989  2  9C C2 10     	stz player0 + PLAYER::levelx+1
00098C  2  9C C3 10     	stz player0 + PLAYER::levely
00098F  2  9C C4 10     	stz player0 + PLAYER::levely+1
000992  2  9C C5 10     	stz player0 + PLAYER::flip
000995  2               
000995  2               	; load sprites data at the end of the tiles
000995  2  A9 01 A2 08  	VLOAD_FILE fssprite, (fsspriteend-fssprite), (VRAM_tiles + tiles * tile_size)
000999  2  A0 00 20 BA  
00099D  2  FF A9 0B A2  
0009B0  2               
0009B0  2  AD C8 10     	lda player0 + PLAYER::vera_bitmaps
0009B3  2  85 02        	sta r0L
0009B5  2  AD C9 10     	lda player0 + PLAYER::vera_bitmaps+1
0009B8  2  85 03        	sta r0H
0009BA  2               
0009BA  2  AC B4 10     	ldy player0 + PLAYER::sprite
0009BD  2  20 E4 08     	jsr Sprite::load
0009C0  2               
0009C0  2               	; turn sprite 0 on
0009C0  2  AC B4 10     	ldy player0 + PLAYER::sprite
0009C3  2  A2 0C        	ldx #SPRITE_ZDEPTH_TOP
0009C5  2  20 10 09     	jsr Sprite::display
0009C8  2               
0009C8  2               	; register the vera simplified memory 12:5
0009C8  2  A2 00        	ldx #0
0009CA  2  A0 09        	ldy #9
0009CC  2  A9 00 85 04  	LOAD_r1 (VRAM_tiles + tiles * tile_size)
0009D0  2  A9 38 85 05  
0009D4  2               
0009D4  2               @loop:
0009D4  2               	; load full VERA memory (12:0) into R0
0009D4  2  A5 04        	lda r1L
0009D6  2  85 02        	sta r0L
0009D8  2  A5 05        	lda r1H
0009DA  2  85 03        	sta r0H
0009DC  2               
0009DC  2               	; convert full addr to vera mode (bit shiting >> 5)
0009DC  2  A5 03        	lda r0H
0009DE  2  4A           	lsr
0009DF  2  66 02        	ror r0L
0009E1  2  4A           	lsr
0009E2  2  66 02        	ror r0L
0009E4  2  4A           	lsr
0009E5  2  66 02        	ror r0L
0009E7  2  4A           	lsr
0009E8  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0009EA  2  4A           	lsr
0009EB  2  66 02        	ror r0L						; bit shift 4x 16 bits vera memory
0009ED  2               
0009ED  2               	; store 12:5 into our cache
0009ED  2  9D C8 10     	sta player0 + PLAYER::vera_bitmaps, x
0009F0  2  E8           	inx
0009F1  2  A5 02        	lda r0L
0009F3  2  9D C8 10     	sta player0 + PLAYER::vera_bitmaps, x
0009F6  2  E8           	inx
0009F7  2               
0009F7  2               	; increase the vram (+4 r1H = +1024 r1)
0009F7  2  18           	clc
0009F8  2  A5 05        	lda r1H
0009FA  2  69 04        	adc #4
0009FC  2  85 05        	sta r1H
0009FE  2               
0009FE  2  88           	dey
0009FF  2  D0 D3        	bne @loop
000A01  2               
000A01  2               	; set first bitmap
000A01  2  20 14 0A     	jsr set_bitmap
000A04  2  60           	rts
000A05  2               
000A05  2               ;************************************************
000A05  2               ; force the current player sprite at its position
000A05  2               ;
000A05  2               position_set:
000A05  2  AC B4 10     	ldy player0 + PLAYER::sprite
000A08  2  A9 BD 85 02  	LOAD_r0 (player0 + PLAYER::px)
000A0C  2  A9 10 85 03  
000A10  2  20 1D 09     	jsr Sprite::position			; set position of the sprite
000A13  2  60           	rts
000A14  2               
000A14  2               ;************************************************
000A14  2               ; change the player bitmap
000A14  2               ;
000A14  2               set_bitmap:
000A14  2  18           	clc
000A15  2  AD BB 10     	lda player0 + PLAYER::spriteAnim
000A18  2  6D BA 10     	adc player0 + PLAYER::spriteID
000A1B  2  0A           	asl						; convert sprite index to work position
000A1C  2  AA           	tax
000A1D  2               
000A1D  2               	; extract the vera bitmap address in vera format (12:5 bits)
000A1D  2  BD C8 10     	lda player0 + PLAYER::vera_bitmaps, x
000A20  2  85 03        	sta r0H
000A22  2  BD C9 10     	lda player0 + PLAYER::vera_bitmaps + 1, x
000A25  2  85 02        	sta r0L
000A27  2               
000A27  2  AC B4 10     	ldy player0 + PLAYER::sprite
000A2A  2  20 FE 08     	jsr Sprite::set_bitmap
000A2D  2  60           	rts
000A2E  2               
000A2E  2               ;************************************************
000A2E  2               ; increase player X position
000A2E  2               ;
000A2E  2               position_x_inc:
000A2E  2               	; move the absolute position levelx + 1
000A2E  2  AD C1 10     	lda player0 + PLAYER::levelx
000A31  2  AE C2 10     	ldx player0 + PLAYER::levelx + 1
000A34  2  C9 E0        	cmp #<(LEVEL_WIDTH - 32)
000A36  2  D0 04        	bne @incLOW1
000A38  2  E0 01        	cpx #>(LEVEL_WIDTH - 32)
000A3A  2  F0 48        	beq @no_move						; we are at the level limit
000A3C  2               @incLOW1:
000A3C  2  1A           	inc
000A3D  2  8D C1 10     	sta player0 + PLAYER::levelx
000A40  2  D0 04        	bne @inc_screen_x
000A42  2               @incHi:
000A42  2  E8           	inx
000A43  2  8E C2 10     	stx player0 + PLAYER::levelx + 1
000A46  2               
000A46  2               @inc_screen_x:
000A46  2               	; distance from layer border to sprite absolute position
000A46  2  38           	sec
000A47  2  AD C1 10     	lda player0 + PLAYER::levelx
000A4A  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000A4D  2  85 02        	sta r0L
000A4F  2  AD C2 10     	lda player0 + PLAYER::levelx + 1
000A52  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000A55  2  85 03        	sta r0H
000A57  2               
000A57  2  D0 17        	bne @move_sprite_upper
000A59  2  A6 03        	ldx r0H
000A5B  2  A5 02        	lda r0L
000A5D  2  C9 E0        	cmp #<(SCREEN_WIDTH	- 96)
000A5F  2  90 19        	bcc @move_sprite
000A61  2               
000A61  2               @move_layers:
000A61  2               	; keep the sprite onscreen 224, for level 224->416
000A61  2  A0 BF A2 00  	VSCROLL_INC Layers::HSCROLL,(32*16-320 - 1)	; 32 tiles * 16 pixels per tiles - 320 screen pixels
000A65  2  20 35 08     
000A68  2  F0 06        	beq @move_sprite_upper
000A6A  2  A2 00        	ldx #Layers::HSCROLL
000A6C  2  20 8B 08     	jsr Layers::scroll_l0
000A6F  2  60           	rts
000A70  2               
000A70  2               @move_sprite_upper:
000A70  2  AD BD 10     	lda player0 + PLAYER::px
000A73  2  AE BE 10     	ldx player0 + PLAYER::px + 1
000A76  2  1A           	inc
000A77  2  D0 01        	bne @move_sprite
000A79  2  E8           	inx
000A7A  2               
000A7A  2               @move_sprite:
000A7A  2  8D BD 10     	sta player0 + PLAYER::px
000A7D  2  8E BE 10     	stx player0 + PLAYER::px + 1
000A80  2  20 05 0A     	jsr Player::position_set
000A83  2  60           	rts
000A84  2               
000A84  2               @no_move:
000A84  2  60           	rts
000A85  2               
000A85  2               ;************************************************
000A85  2               ; decrease player position X unless at 0
000A85  2               ;
000A85  2               position_x_dec:
000A85  2               	; move the absolute position levelx + 1
000A85  2  AD C1 10     	lda player0 + PLAYER::levelx
000A88  2  D0 05        	bne @decLOW
000A8A  2  AE C2 10     	ldx player0 + PLAYER::levelx + 1
000A8D  2  F0 49        	beq @no_move						; we are at Y == 0
000A8F  2               @decLOW:
000A8F  2  3A           	dec
000A90  2  8D C1 10     	sta player0 + PLAYER::levelx
000A93  2  C9 FF        	cmp #$ff
000A95  2  D0 04        	bne @dec_screen_x
000A97  2               @decHi:
000A97  2  CA           	dex
000A98  2  8E C2 10     	stx player0 + PLAYER::levelx + 1
000A9B  2               
000A9B  2               @dec_screen_x:
000A9B  2               	; distance from layer border to sprite absolute position
000A9B  2  38           	sec
000A9C  2  AD C1 10     	lda player0 + PLAYER::levelx
000A9F  2  ED 37 9F     	sbc VERA_L1_hscrolllo
000AA2  2  85 02        	sta r0L
000AA4  2  AD C2 10     	lda player0 + PLAYER::levelx + 1
000AA7  2  ED 38 9F     	sbc VERA_L1_hscrollhi
000AAA  2  85 03        	sta r0H
000AAC  2               
000AAC  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000AAE  2               
000AAE  2  A5 02        	lda r0L
000AB0  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000AB2  2  C9 40        	cmp #64
000AB4  2  B0 0D        	bcs @move_sprite_lower					; if > 64, move the sprites
000AB6  2               
000AB6  2               @move_layers:
000AB6  2               	; keep the sprite onscreen 224, for level 224->416
000AB6  2  A2 00        	ldx #Layers::HSCROLL
000AB8  2  20 6C 08     	jsr Layers::scroll_dec
000ABB  2  F0 06        	beq @move_sprite_lower
000ABD  2  A2 00        	ldx #Layers::HSCROLL
000ABF  2  20 8B 08     	jsr Layers::scroll_l0
000AC2  2  60           	rts
000AC3  2               
000AC3  2               @move_sprite_lower:
000AC3  2  AD BD 10     	lda player0 + PLAYER::px
000AC6  2  AE BE 10     	ldx player0 + PLAYER::px + 1
000AC9  2  3A           	dec
000ACA  2  C9 FF        	cmp #$ff
000ACC  2  D0 01        	bne @move_sprite
000ACE  2  CA           	dex
000ACF  2               
000ACF  2               @move_sprite:
000ACF  2  8D BD 10     	sta player0 + PLAYER::px
000AD2  2  8E BE 10     	stx player0 + PLAYER::px + 1
000AD5  2  20 05 0A     	jsr Player::position_set
000AD8  2               
000AD8  2               @no_move:
000AD8  2  60           	rts
000AD9  2               
000AD9  2               ;************************************************
000AD9  2               ; increase player Y position
000AD9  2               ;
000AD9  2               position_y_inc:
000AD9  2               	; move the absolute position levelx + 1
000AD9  2  AD C3 10     	lda player0 + PLAYER::levely
000ADC  2  AE C4 10     	ldx player0 + PLAYER::levely + 1
000ADF  2  C9 E0        	cmp #<(LEVEL_HEIGHT - 32)
000AE1  2  D0 04        	bne @incLOW1
000AE3  2  E0 01        	cpx #>(LEVEL_HEIGHT - 32)
000AE5  2  F0 4E        	beq @no_move						; we are at the level limit
000AE7  2               @incLOW1:
000AE7  2  1A           	inc
000AE8  2  8D C3 10     	sta player0 + PLAYER::levely
000AEB  2  D0 04        	bne @inc_screen_y
000AED  2               @incHi:
000AED  2  E8           	inx
000AEE  2  8E C4 10     	stx player0 + PLAYER::levely + 1
000AF1  2               
000AF1  2               @inc_screen_y:
000AF1  2               	; distance from layer border to sprite absolute position
000AF1  2  38           	sec
000AF2  2  AD C3 10     	lda player0 + PLAYER::levely
000AF5  2  ED 39 9F     	sbc veral1vscrolllo
000AF8  2  85 02        	sta r0L
000AFA  2  AD C4 10     	lda player0 + PLAYER::levely + 1
000AFD  2  ED 3A 9F     	sbc veral1vscrollhi
000B00  2  85 03        	sta r0H
000B02  2               
000B02  2  D0 1D        	bne @move_sprite_upper
000B04  2  A6 03        	ldx r0H
000B06  2  A5 02        	lda r0L
000B08  2  C9 B0        	cmp #<(SCREEN_HEIGHT - 64)
000B0A  2  90 1F        	bcc @move_sprite
000B0C  2               
000B0C  2               @move_layers:
000B0C  2               	; keep the sprite onscreen 224, for level 224->416
000B0C  2  A9 0F 85 02  	VSCROLL_INC Layers::VSCROLL,(32*16-240 - 1)	; 32 tiles * 16 pixels per tiles - 240 screen pixels
000B10  2  A9 01 85 03  
000B14  2  A2 02 20 4D  
000B19  2  F0 06        	beq @move_sprite_upper
000B1B  2  A2 02        	ldx #Layers::VSCROLL
000B1D  2  20 8B 08     	jsr Layers::scroll_l0
000B20  2  60           	rts
000B21  2               
000B21  2               @move_sprite_upper:
000B21  2  AD BF 10     	lda player0 + PLAYER::py
000B24  2  AE C0 10     	ldx player0 + PLAYER::py + 1
000B27  2  1A           	inc
000B28  2  D0 01        	bne @move_sprite
000B2A  2  E8           	inx
000B2B  2               
000B2B  2               @move_sprite:
000B2B  2  8D BF 10     	sta player0 + PLAYER::py
000B2E  2  8E C0 10     	stx player0 + PLAYER::py + 1
000B31  2  20 05 0A     	jsr Player::position_set
000B34  2  60           	rts
000B35  2               
000B35  2               @no_move:
000B35  2  60           	rts
000B36  2               
000B36  2               ;;
000B36  2  AD BF 10     	lda player0 + PLAYER::py
000B39  2  C9 D0        	cmp #(SCREEN_HEIGHT-32)
000B3B  2  F0 09        	beq @moveleftP0
000B3D  2  1A           	inc
000B3E  2  8D BF 10     	sta player0 + PLAYER::py
000B41  2  D0 03        	bne @moveleftP0
000B43  2  EE C0 10     	inc player0 + PLAYER::py + 1
000B46  2               @moveleftP0:
000B46  2  20 05 0A     	jsr Player::position_set
000B49  2  60           	rts
000B4A  2               
000B4A  2               ;************************************************
000B4A  2               ; decrease player position X unless at 0
000B4A  2               ;
000B4A  2               position_y_dec:
000B4A  2               	; move the absolute position levelx + 1
000B4A  2  AD C3 10     	lda player0 + PLAYER::levely
000B4D  2  D0 05        	bne @decLOW
000B4F  2  AE C4 10     	ldx player0 + PLAYER::levely + 1
000B52  2  F0 49        	beq @no_move						; we are at Y == 0
000B54  2               @decLOW:
000B54  2  3A           	dec
000B55  2  8D C3 10     	sta player0 + PLAYER::levely
000B58  2  C9 FF        	cmp #$ff
000B5A  2  D0 04        	bne @dec_screen_y
000B5C  2               @decHi:
000B5C  2  CA           	dex
000B5D  2  8E C4 10     	stx player0 + PLAYER::levely + 1
000B60  2               
000B60  2               @dec_screen_y:
000B60  2               	; distance from layer border to sprite absolute position
000B60  2  38           	sec
000B61  2  AD C3 10     	lda player0 + PLAYER::levely
000B64  2  ED 39 9F     	sbc veral1vscrolllo
000B67  2  85 02        	sta r0L
000B69  2  AD C4 10     	lda player0 + PLAYER::levely + 1
000B6C  2  ED 3A 9F     	sbc veral1vscrollhi
000B6F  2  85 03        	sta r0H
000B71  2               
000B71  2  D0 15        	bne @move_sprite_lower				; > 256, we are far off from the border, so move the sprite
000B73  2               
000B73  2  A5 02        	lda r0L
000B75  2  30 11        	bmi @move_sprite_lower					; > 127, move the sprites
000B77  2  C9 20        	cmp #32
000B79  2  B0 0D        	bcs @move_sprite_lower					; if > 32, move the sprites
000B7B  2               
000B7B  2               @move_layers:
000B7B  2               	; keep the sprite onscreen 224, for level 224->416
000B7B  2  A2 02        	ldx #Layers::VSCROLL
000B7D  2  20 6C 08     	jsr Layers::scroll_dec
000B80  2  F0 06        	beq @move_sprite_lower
000B82  2  A2 02        	ldx #Layers::VSCROLL
000B84  2  20 8B 08     	jsr Layers::scroll_l0
000B87  2  60           	rts
000B88  2               
000B88  2               @move_sprite_lower:
000B88  2  AD BF 10     	lda player0 + PLAYER::py
000B8B  2  AE C0 10     	ldx player0 + PLAYER::py + 1
000B8E  2  3A           	dec
000B8F  2  C9 FF        	cmp #$ff
000B91  2  D0 01        	bne @move_sprite
000B93  2  CA           	dex
000B94  2               
000B94  2               @move_sprite:
000B94  2  8D BF 10     	sta player0 + PLAYER::py
000B97  2  8E C0 10     	stx player0 + PLAYER::py + 1
000B9A  2  20 05 0A     	jsr Player::position_set
000B9D  2               
000B9D  2               @no_move:
000B9D  2  60           	rts
000B9E  2               
000B9E  2               ;************************************************
000B9E  2               ; hide the current sprite
000B9E  2               ;
000B9E  2               hide1:
000B9E  2  DB           	stp
000B9F  2  18           	clc
000BA0  2  AD BB 10     	lda player0 + PLAYER::spriteAnim
000BA3  2  6D BA 10     	adc player0 + PLAYER::spriteID
000BA6  2  A8           	tay		; sprite index
000BA7  2  A2 00        	ldx #SPRITE_ZDEPTH_DISABLED
000BA9  2  20 10 09     	jsr Sprite::display			; turn current sprite off
000BAC  2  60           	rts
000BAD  2               
000BAD  2               ;************************************************
000BAD  2               ; Animate the player if needed
000BAD  2               ;
000BAD  2               animate:
000BAD  2  AD B5 10     	lda player0 + PLAYER::status
000BB0  2  C9 00        	cmp #STATUS_WALKING_IDLE
000BB2  2  F0 3A        	beq @end
000BB4  2  C9 04        	cmp #STATUS_FALLING
000BB6  2  F0 36        	beq @end
000BB8  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000BBA  2  F0 32        	beq @end
000BBC  2               
000BBC  2  CE B9 10     	dec player0 + PLAYER::animation_tick
000BBF  2  D0 2D        	bne @end
000BC1  2               
000BC1  2  A9 0A        	lda #10
000BC3  2  8D B9 10     	sta player0 + PLAYER::animation_tick	; reset animation tick counter
000BC6  2               
000BC6  2  18           	clc
000BC7  2  AD BB 10     	lda player0 + PLAYER::spriteAnim
000BCA  2  6D BC 10     	adc player0 + PLAYER::spriteAnimDirection
000BCD  2  F0 06        	beq @set_sprite_anim_increase					; reached 0
000BCF  2  C9 03        	cmp #3
000BD1  2  F0 0B        	beq @set_sprite_anim_decrease
000BD3  2  80 10        	bra @set_sprite_on
000BD5  2               @set_sprite_anim_increase:
000BD5  2  A9 01        	lda #01
000BD7  2  8D BC 10     	sta player0 + PLAYER::spriteAnimDirection
000BDA  2  A9 00        	lda #0
000BDC  2  80 07        	bra @set_sprite_on
000BDE  2               @set_sprite_anim_decrease:
000BDE  2  A9 FF        	lda #$ff
000BE0  2  8D BC 10     	sta player0 + PLAYER::spriteAnimDirection
000BE3  2  A9 02        	lda #2
000BE5  2               @set_sprite_on:
000BE5  2  8D BB 10     	sta player0 + PLAYER::spriteAnim	; turn next sprite on
000BE8  2  20 14 0A     	jsr Player::set_bitmap
000BEB  2  20 05 0A     	jsr Player::position_set
000BEE  2               @end:
000BEE  2  60           	rts
000BEF  2               
000BEF  2               ;************************************************
000BEF  2               ; position of the player on the layer1 tilemap
000BEF  2               ;
000BEF  2               get_tilemap_position:
000BEF  2  18           	clc
000BF0  2  AD C3 10     	lda player0 + PLAYER::levely		; sprite screen position
000BF3  2  85 02        	sta r0L
000BF5  2  AD C4 10     	lda player0 + PLAYER::levely + 1
000BF8  2  85 03        	sta r0H							; r0 = sprite absolute position Y in the level
000BFA  2               
000BFA  2  A5 02        	lda r0L
000BFC  2  29 F0        	and #%11110000
000BFE  2  85 02        	sta r0L
000C00  2  A5 03        	lda r0H
000C02  2  85 03        	sta r0H
000C04  2  A5 02        	lda r0L
000C06  2  0A           	asl
000C07  2  26 03        	rol r0H
000C09  2  85 02        	sta r0L 						; r0 = first tile of the tilemap in the row
000C0B  2               									; spriteY / 16 (convert to tile Y) * 32 (number of tiles per row in the tile map)
000C0B  2               
000C0B  2  AD C1 10     	lda player0 + PLAYER::levelx		; sprite screen position
000C0E  2  85 04        	sta r1L
000C10  2  AD C2 10     	lda player0 + PLAYER::levelx + 1
000C13  2  85 05        	sta r1H							; r1 = sprite absolute position X in the level
000C15  2               
000C15  2  18           	clc
000C16  2  A5 04        	lda r1L
000C18  2  69 10        	adc #(LEVEL_TILES_WIDTH / 2)	; helf width of the player
000C1A  2  85 04        	sta r1L
000C1C  2  A5 05        	lda r1H
000C1E  2  69 00        	adc #0
000C20  2  4A           	lsr
000C21  2  66 04        	ror r1L
000C23  2  4A           	lsr
000C24  2  66 04        	ror r1L
000C26  2  4A           	lsr
000C27  2  66 04        	ror r1L
000C29  2  4A           	lsr
000C2A  2  66 04        	ror r1L
000C2C  2  85 05        	sta r1H 					; r1 = tile X in the row
000C2E  2               								; sprite X /16 (convert to tile X)
000C2E  2               
000C2E  2  18           	clc
000C2F  2  A5 02        	lda r0L
000C31  2  65 04        	adc r1L
000C33  2  85 02        	sta r0L
000C35  2  A5 03        	lda r0H
000C37  2  65 05        	adc r1H
000C39  2  85 03        	sta r0H						; r0 = tile position in the tilemap
000C3B  2               
000C3B  2  18           	clc
000C3C  2  A5 03        	lda r0H
000C3E  2  69 A0        	adc #>HIMEM
000C40  2  85 03        	sta r0H						; r0 = tile position in the memory tilemap
000C42  2  60           	rts
000C43  2               
000C43  2               ;************************************************
000C43  2               ; force player status to be idle
000C43  2               ;
000C43  2               set_idle:
000C43  2  AD B5 10     	lda player0 + PLAYER::status
000C46  2  C9 01        	cmp #STATUS_WALKING
000C48  2  F0 06        	beq @set_idle_walking
000C4A  2  C9 02        	cmp #STATUS_CLIMBING
000C4C  2  F0 08        	beq @set_idle_climbing
000C4E  2  60           	rts							; keep the current value
000C4F  2               @set_idle_jump:
000C4F  2  60           	rts
000C50  2               @set_idle_walking:
000C50  2  A9 00 8D B5  	m_status STATUS_WALKING_IDLE
000C54  2  10           
000C55  2  60           	rts
000C56  2               @set_idle_climbing:
000C56  2  A9 03 8D B5  	m_status STATUS_CLIMBING_IDLE
000C5A  2  10           
000C5B  2  60           	rts
000C5C  2               
000C5C  2               ;************************************************
000C5C  2               ; check if the player sits on a solid tile
000C5C  2               ;
000C5C  2               physics:
000C5C  2  20 EF 0B     	jsr get_tilemap_position
000C5F  2  A5 02 8D C6  	SAVE_r0 player0 + PLAYER::tilemap	; cache the tilemap @
000C63  2  10 A5 03 8D  
000C67  2  C7 10        
000C69  2               
000C69  2  AD B5 10     	lda player0 + PLAYER::status
000C6C  2  C9 02        	cmp #STATUS_CLIMBING
000C6E  2  F0 0C        	beq @simple_check
000C70  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000C72  2  F0 08        	beq @simple_check
000C74  2  C9 05        	cmp #STATUS_JUMPING
000C76  2  D0 09        	bne @fall
000C78  2  4C 08 0D     	jmp @jump
000C7B  2               @return1:
000C7B  2  60           	rts
000C7C  2               
000C7C  2               @simple_check:
000C7C  2  20 AC 0D     	jsr check_collision_down
000C7F  2  D0 FA        	bne @return1				; some tile, keep the player there
000C81  2               
000C81  2               	;
000C81  2               	; deal with gravity driven falling
000C81  2               	;
000C81  2               @fall:
000C81  2  AD C3 10     	lda player0 + PLAYER::levely
000C84  2  29 0F        	and #%00001111
000C86  2  D0 05        	bne @no_collision_down			; if player is not on a multiple of 16 (tile size)
000C88  2               
000C88  2  20 AC 0D     	jsr check_collision_down
000C8B  2  D0 6E        	bne @sit_on_solid				; solid tile, keep the player there
000C8D  2               
000C8D  2               @no_collision_down:
000C8D  2               	; if the player is already falling, increase t
000C8D  2  AD B5 10     	lda player0 + PLAYER::status
000C90  2  C9 04        	cmp #STATUS_FALLING
000C92  2  F0 0D        	beq @increase_ticks
000C94  2               
000C94  2               	; let the player fall
000C94  2  A9 04        	lda #STATUS_FALLING
000C96  2  8D B5 10     	sta player0 + PLAYER::status
000C99  2  A9 08        	lda #FALL_LO_TICKS
000C9B  2  8D B6 10     	sta player0 + PLAYER::falling_ticks	; reset t
000C9E  2  9C B7 10     	stz player0 + PLAYER::falling_ticks + 1
000CA1  2               @increase_ticks:
000CA1  2  CE B6 10     	dec player0 + PLAYER::falling_ticks	; increase HI every 10 refresh
000CA4  2  D0 08        	bne @drive_fall
000CA6  2  A9 08        	lda #FALL_LO_TICKS
000CA8  2  8D B6 10     	sta player0 + PLAYER::falling_ticks	; reset t
000CAB  2  EE B7 10     	inc player0 + PLAYER::falling_ticks + 1
000CAE  2               
000CAE  2               @drive_fall:
000CAE  2  AD B7 10     	lda player0 + PLAYER::falling_ticks + 1
000CB1  2  F0 43        	beq @fall_once
000CB3  2  85 14        	sta r9L
000CB5  2               @loop_fall:
000CB5  2  20 D9 0A     	jsr position_y_inc
000CB8  2               
000CB8  2  AD C3 10     	lda player0 + PLAYER::levely
000CBB  2  29 0F        	and #%00001111
000CBD  2  D0 12        	bne @loop_fall_no_collision		; if player is not on a multiple of 16 (tile size)
000CBF  2               
000CBF  2               	; test reached solid ground
000CBF  2  20 EF 0B     	jsr get_tilemap_position
000CC2  2  A5 02 8D C6  	SAVE_r0 player0 + PLAYER::tilemap
000CC6  2  10 A5 03 8D  
000CCA  2  C7 10        
000CCC  2  20 AC 0D     	jsr check_collision_down
000CCF  2  D0 2A        	bne @sit_on_solid
000CD1  2               
000CD1  2               @loop_fall_no_collision:
000CD1  2  C6 14        	dec r9L
000CD3  2  D0 E0        	bne @loop_fall						; take t in count for gravity
000CD5  2               
000CD5  2               @apply_delta_x:
000CD5  2  AD B8 10     	lda player0 + PLAYER::delta_x		; apply delatx
000CD8  2  F0 2D        	beq @return
000CDA  2  30 0D        	bmi @fall_left
000CDC  2               @fall_right:
000CDC  2  20 63 0D     	jsr check_collision_right
000CDF  2  F0 04        	beq @no_fcollision_right
000CE1  2               @fcollision_right:
000CE1  2  9C B8 10     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000CE4  2  60           	rts
000CE5  2               @no_fcollision_right:
000CE5  2  20 2E 0A     	jsr position_x_inc
000CE8  2  60           	rts
000CE9  2               @fall_left:
000CE9  2  20 86 0D     	jsr check_collision_left
000CEC  2  F0 04        	beq @no_fcollision_left
000CEE  2               @fcollision_left:
000CEE  2  9C B8 10     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000CF1  2  60           	rts
000CF2  2               @no_fcollision_left:
000CF2  2  20 85 0A     	jsr position_x_dec
000CF5  2  60           	rts
000CF6  2               
000CF6  2               @fall_once:
000CF6  2  20 D9 0A     	jsr position_y_inc
000CF9  2  80 DA        	bra @apply_delta_x
000CFB  2               
000CFB  2               @sit_on_solid:
000CFB  2               	; change the status if falling
000CFB  2  AD B5 10     	lda player0 + PLAYER::status
000CFE  2  C9 04        	cmp #STATUS_FALLING
000D00  2  D0 05        	bne @return
000D02  2  A9 00        	lda #STATUS_WALKING_IDLE
000D04  2  8D B5 10     	sta player0 + PLAYER::status
000D07  2               @return:
000D07  2  60           	rts
000D08  2               
000D08  2               	;
000D08  2               	; deal with gravity driven jumping
000D08  2               	;
000D08  2               @jump:
000D08  2               @decrease_ticks:
000D08  2  CE B6 10     	dec player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
000D0B  2  D0 0A        	bne @drive_jump
000D0D  2  CE B7 10     	dec player0 + PLAYER::falling_ticks	+ 1
000D10  2  F0 4B        	beq @apex							; reached the apex of the jump
000D12  2               
000D12  2  A9 0A        	lda #JUMP_LO_TICKS
000D14  2  8D B6 10     	sta player0 + PLAYER::falling_ticks	; reset t
000D17  2               
000D17  2               @drive_jump:
000D17  2  AD B7 10     	lda player0 + PLAYER::falling_ticks + 1
000D1A  2  85 14        	sta r9L
000D1C  2               @loop_jump:
000D1C  2  20 4A 0B     	jsr position_y_dec
000D1F  2               
000D1F  2  AD C3 10     	lda player0 + PLAYER::levely
000D22  2  29 0F        	and #%00001111
000D24  2  D0 12        	bne @no_collision_up				; if player is not on a multiple of 16 (tile size)
000D26  2               
000D26  2               	; test hit a ceiling
000D26  2  20 EF 0B     	jsr get_tilemap_position
000D29  2  A5 02 8D C6  	SAVE_r0 player0 + PLAYER::tilemap
000D2D  2  10 A5 03 8D  
000D31  2  C7 10        
000D33  2  20 BB 0D     	jsr check_collision_up
000D36  2  D0 04        	bne @collision_up
000D38  2               @no_collision_up:
000D38  2  C6 14        	dec r9L
000D3A  2  D0 E0        	bne @loop_jump						; loop to take t in count for gravity
000D3C  2               
000D3C  2               @collision_up:
000D3C  2  AD B8 10     	lda player0 + PLAYER::delta_x		; deal with deltax
000D3F  2  F0 C6        	beq @return
000D41  2  30 0D        	bmi @jump_left
000D43  2               @jump_right:
000D43  2  20 63 0D     	jsr check_collision_right
000D46  2  F0 04        	beq @no_collision_right
000D48  2               @collision_right:
000D48  2  9C B8 10     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000D4B  2  60           	rts
000D4C  2               @no_collision_right:
000D4C  2  20 2E 0A     	jsr position_x_inc
000D4F  2  60           	rts
000D50  2               @jump_left:
000D50  2  20 86 0D     	jsr check_collision_left
000D53  2  F0 04        	beq @no_collision_left
000D55  2               @collision_left:
000D55  2  9C B8 10     	stz player0 + PLAYER::delta_x		; cancel deltaX to transform to vertical movement
000D58  2  60           	rts
000D59  2               @no_collision_left:
000D59  2  20 85 0A     	jsr position_x_dec
000D5C  2  60           	rts
000D5D  2               
000D5D  2               @apex:
000D5D  2  A9 06 8D B5  	m_status STATUS_JUMPING_IDLE
000D61  2  10           
000D62  2  60           	rts
000D63  2               
000D63  2               ;************************************************
000D63  2               ; check collision on the right
000D63  2               ;
000D63  2               check_collision_right:
000D63  2  AD C6 10     	lda player0 + PLAYER::tilemap
000D66  2  85 02        	sta r0L
000D68  2  AD C7 10     	lda player0 + PLAYER::tilemap + 1
000D6B  2  85 03        	sta r0H
000D6D  2               
000D6D  2               @test_head:
000D6D  2  A0 01        	ldy #1							; test the tile on the right of the player (head position)
000D6F  2  B1 02        	lda (r0L),y
000D71  2  F0 05        	beq @test_hip
000D73  2               
000D73  2               	; some tiles are not real collision
000D73  2  C9 21        	cmp #TILE_SOLID_LADER
000D75  2  F0 0B        	beq @no_collision				; LADDERS can be traversed
000D77  2  60           	rts
000D78  2               
000D78  2               @test_hip:
000D78  2  A0 21        	ldy #(LEVEL_TILES_WIDTH + 1)	; test the tile on the right of the player (hip position)
000D7A  2  B1 02        	lda (r0L),y
000D7C  2  F0 07        	beq @return
000D7E  2               
000D7E  2               	; some tiles are not real collision
000D7E  2  C9 21        	cmp #TILE_SOLID_LADER
000D80  2  D0 03        	bne @return						; LADDERS can be traversed
000D82  2               
000D82  2               @no_collision:						; force a no collision
000D82  2  A9 00        	lda #0
000D84  2  60           	rts
000D85  2               @return:
000D85  2  60           	rts
000D86  2               
000D86  2               ;************************************************
000D86  2               ; check collision on the left
000D86  2               ;
000D86  2               check_collision_left:
000D86  2  38           	sec
000D87  2  AD C6 10     	lda player0 + PLAYER::tilemap
000D8A  2  E9 01        	sbc #1							; test the tile on the left of the player
000D8C  2  85 02        	sta r0L
000D8E  2  AD C7 10     	lda player0 + PLAYER::tilemap + 1
000D91  2  E9 00        	sbc #0
000D93  2  85 03        	sta r0H
000D95  2               
000D95  2               @test_head:
000D95  2  B2 02        	lda (r0L)
000D97  2  F0 05        	beq @test_hip
000D99  2               
000D99  2               	; some tiles are not real collision
000D99  2  C9 21        	cmp #TILE_SOLID_LADER
000D9B  2  F0 0B        	beq @no_collision				; LADDERS can be traversed
000D9D  2  60           	rts
000D9E  2               
000D9E  2               @test_hip:
000D9E  2  A0 20        	ldy #LEVEL_TILES_WIDTH			; test the tile on the left of the player (hip position)
000DA0  2  B1 02        	lda (r0L),y
000DA2  2  F0 07        	beq @return
000DA4  2               
000DA4  2               	; some tiles are not real collision
000DA4  2  C9 21        	cmp #TILE_SOLID_LADER
000DA6  2  D0 03        	bne @return						; LADDERS can be traversed
000DA8  2               @no_collision:
000DA8  2  A9 00        	lda #0
000DAA  2  60           	rts
000DAB  2               @return:
000DAB  2  60           	rts
000DAC  2               
000DAC  2               
000DAC  2               ;************************************************
000DAC  2               ; check collision down
000DAC  2               ;
000DAC  2               check_collision_down:
000DAC  2  AD C6 10     	lda player0 + PLAYER::tilemap
000DAF  2  85 02        	sta r0L
000DB1  2  AD C7 10     	lda player0 + PLAYER::tilemap + 1
000DB4  2  85 03        	sta r0H
000DB6  2  A0 40        	ldy #(LEVEL_TILES_WIDTH * 2)	; player is 2 tiles high
000DB8  2  B1 02        	lda (r0L),y
000DBA  2  60           	rts
000DBB  2               
000DBB  2               ;************************************************
000DBB  2               ; check collision up
000DBB  2               ;	output : r0 : @ of tile y-1 of levelY
000DBB  2               ;
000DBB  2               check_collision_up:
000DBB  2  38           	sec
000DBC  2  AD C6 10     	lda player0 + PLAYER::tilemap
000DBF  2  E9 20        	sbc #LEVEL_TILES_WIDTH
000DC1  2  85 02        	sta r0L
000DC3  2  AD C7 10     	lda player0 + PLAYER::tilemap + 1
000DC6  2  E9 00        	sbc #0
000DC8  2  85 03        	sta r0H
000DCA  2  A0 00        	ldy #0
000DCC  2  B1 02        	lda (r0L),y
000DCE  2  60           	rts
000DCF  2               
000DCF  2               ;************************************************
000DCF  2               ; Try to move player to the right
000DCF  2               ;
000DCF  2               move_right:
000DCF  2  AD B5 10     	lda player0 + PLAYER::status
000DD2  2  C9 04        	cmp #STATUS_FALLING
000DD4  2  F0 42        	beq @return
000DD6  2  C9 05        	cmp #STATUS_JUMPING
000DD8  2  F0 3E        	beq @return						; cannot move when falling or jumping
000DDA  2  C9 06        	cmp #STATUS_JUMPING_IDLE
000DDC  2  F0 3A        	beq @return						; cannot move when falling or jumping
000DDE  2               
000DDE  2  20 63 0D     	jsr Player::check_collision_right
000DE1  2  D0 35        	bne @return
000DE3  2               
000DE3  2  A9 01        	lda #1
000DE5  2  8D B8 10     	sta player0 + PLAYER::delta_x
000DE8  2               
000DE8  2               @move:
000DE8  2  AD B5 10     	lda player0 + PLAYER::status
000DEB  2  C9 02        	cmp #STATUS_CLIMBING
000DED  2  F0 23        	beq @keep_climbing_sprite
000DEF  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000DF1  2  F0 1F        	beq @keep_climbing_sprite
000DF3  2               
000DF3  2               @set_walking_sprite:
000DF3  2  A9 01        	lda #SPRITE_FLIP_H
000DF5  2  8D C5 10     	sta player0 + PLAYER::flip
000DF8  2  AC B4 10     	ldy player0 + PLAYER::sprite
000DFB  2  20 3B 09     	jsr Sprite::set_flip				; force sprite to look right
000DFE  2               
000DFE  2  A9 01 8D B5  	m_status STATUS_WALKING
000E02  2  10           
000E03  2               
000E03  2               	;change player sprite
000E03  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000E05  2  CD BA 10     	cmp player0 + PLAYER::spriteID
000E08  2  F0 08        	beq @move_x
000E0A  2               
000E0A  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000E0C  2  8D BA 10     	sta player0 + PLAYER::spriteID
000E0F  2  20 14 0A     	jsr set_bitmap
000E12  2               
000E12  2               @keep_climbing_sprite:
000E12  2               @move_x:
000E12  2  20 2E 0A     	jsr Player::position_x_inc		; move the player in the level, and the screen layers and sprite
000E15  2  20 05 0A     	jsr position_set
000E18  2               
000E18  2               @return:
000E18  2  60           	rts
000E19  2               
000E19  2               ;************************************************
000E19  2               ; try to move the player to the left
000E19  2               ;
000E19  2               move_left:
000E19  2  AD B5 10     	lda player0 + PLAYER::status
000E1C  2  C9 04        	cmp #STATUS_FALLING
000E1E  2  F0 42        	beq @return
000E20  2  C9 05        	cmp #STATUS_JUMPING
000E22  2  F0 3E        	beq @return						; cannot move when falling or jumping
000E24  2  C9 06        	cmp #STATUS_JUMPING_IDLE
000E26  2  F0 3A        	beq @return						; cannot move when falling or jumping
000E28  2               
000E28  2  20 86 0D     	jsr Player::check_collision_left
000E2B  2  D0 35        	bne @return
000E2D  2               
000E2D  2  A9 FF        	lda #$ff
000E2F  2  8D B8 10     	sta player0 + PLAYER::delta_x
000E32  2               
000E32  2               @move:
000E32  2  AD B5 10     	lda player0 + PLAYER::status
000E35  2  C9 02        	cmp #STATUS_CLIMBING
000E37  2  F0 23        	beq @keep_climbing_sprite
000E39  2  C9 03        	cmp #STATUS_CLIMBING_IDLE
000E3B  2  F0 1F        	beq @keep_climbing_sprite
000E3D  2               
000E3D  2               @set_walking_sprite:
000E3D  2  A9 00        	lda #SPRITE_FLIP_NONE
000E3F  2  8D C5 10     	sta player0 + PLAYER::flip
000E42  2  AC B4 10     	ldy player0 + PLAYER::sprite
000E45  2  20 3B 09     	jsr Sprite::set_flip				; force sprite to loop right
000E48  2               
000E48  2  A9 01 8D B5  	m_status STATUS_WALKING
000E4C  2  10           
000E4D  2               
000E4D  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000E4F  2  CD BA 10     	cmp player0 + PLAYER::spriteID
000E52  2  F0 08        	beq @move_x
000E54  2               
000E54  2               	;change player sprite
000E54  2  A9 03        	lda #PLAYER_SPRITE_LEFT
000E56  2  8D BA 10     	sta player0 + PLAYER::spriteID
000E59  2  20 14 0A     	jsr set_bitmap
000E5C  2               
000E5C  2               @keep_climbing_sprite:
000E5C  2               @move_x:
000E5C  2  20 85 0A     	jsr Player::position_x_dec
000E5F  2  20 05 0A     	jsr position_set
000E62  2               
000E62  2               @return:
000E62  2  60           	rts
000E63  2               
000E63  2               ;************************************************
000E63  2               ; try to move the player down (crouch, hide, move down a ladder)
000E63  2               ;
000E63  2               move_down:
000E63  2  AD B5 10     	lda player0 + PLAYER::status
000E66  2  C9 04        	cmp #STATUS_FALLING
000E68  2  D0 01        	bne @try_move_down						; cannot move when falling
000E6A  2  60           	rts
000E6B  2               
000E6B  2               @try_move_down:
000E6B  2  20 AC 0D     	jsr Player::check_collision_down
000E6E  2  C9 21        	cmp #TILE_SOLID_LADER
000E70  2  D0 1C        	bne @cannot_move_down					; solid collision below, block move
000E72  2               
000E72  2  20 D9 0A     	jsr Player::position_y_inc		; move down the ladder
000E75  2  20 05 0A     	jsr position_set
000E78  2               
000E78  2  A9 02 8D B5  	m_status STATUS_CLIMBING
000E7C  2  10           
000E7D  2               
000E7D  2  A9 06        	lda #PLAYER_SPRITE_BACK
000E7F  2  CD BA 10     	cmp player0 + PLAYER::spriteID
000E82  2  D0 01        	bne @change_sprite
000E84  2  60           	rts
000E85  2               
000E85  2               @change_sprite:
000E85  2               	;change player sprite
000E85  2  A9 06        	lda #PLAYER_SPRITE_BACK
000E87  2  8D BA 10     	sta player0 + PLAYER::spriteID
000E8A  2  20 14 0A     	jsr set_bitmap
000E8D  2  60           	rts
000E8E  2               
000E8E  2               @cannot_move_down:
000E8E  2  A9 00        	lda #STATUS_WALKING_IDLE
000E90  2  8D B5 10     	sta player0 + PLAYER::status
000E93  2  60           	rts
000E94  2               
000E94  2               ;************************************************
000E94  2               ; try to move the player up (move up a ladder)
000E94  2               ;
000E94  2               move_up:
000E94  2  AD B5 10     	lda player0 + PLAYER::status
000E97  2  C9 04        	cmp #STATUS_FALLING
000E99  2  D0 01        	bne @try_move_up				; cannot move when falling
000E9B  2  60           	rts
000E9C  2               @try_move_up:
000E9C  2  20 BB 0D     	jsr Player::check_collision_up	; test above the head
000E9F  2               
000E9F  2  A0 20        	ldy #LEVEL_TILES_WIDTH
000EA1  2  B1 02        	lda (r0L),y
000EA3  2  C9 21        	cmp #TILE_SOLID_LADER
000EA5  2  F0 17        	beq @climb						; solid ladder at the head
000EA7  2               
000EA7  2  A0 40        	ldy #(LEVEL_TILES_WIDTH*2)
000EA9  2  B1 02        	lda (r0L),y
000EAB  2  C9 21        	cmp #TILE_SOLID_LADER
000EAD  2  F0 0F        	beq @climb						; NO solid ladder at the feet
000EAF  2               
000EAF  2  AD C3 10     	lda player0 + PLAYER::levely
000EB2  2  29 0F        	and #%00001111
000EB4  2  F0 24        	beq @cannot_move_up				; if player is not on a multiple of 16 (tile size)
000EB6  2               
000EB6  2  A0 60        	ldy #(LEVEL_TILES_WIDTH*3)		; player covers 3 tiles
000EB8  2  B1 02        	lda (r0L),y
000EBA  2  C9 21        	cmp #TILE_SOLID_LADER
000EBC  2  D0 1C        	bne @cannot_move_up				; NO solid ladder at the feet
000EBE  2               
000EBE  2               @climb:
000EBE  2  20 4A 0B     	jsr Player::position_y_dec		; move up the ladder
000EC1  2  20 05 0A     	jsr position_set
000EC4  2               
000EC4  2  A9 02 8D B5  	m_status STATUS_CLIMBING
000EC8  2  10           
000EC9  2               
000EC9  2  A9 06        	lda #PLAYER_SPRITE_BACK
000ECB  2  CD BA 10     	cmp player0 + PLAYER::spriteID
000ECE  2  D0 01        	bne @set_sprite
000ED0  2  60           	rts
000ED1  2               @set_sprite:						;change player sprite
000ED1  2  A9 06        	lda #PLAYER_SPRITE_BACK
000ED3  2  8D BA 10     	sta player0 + PLAYER::spriteID
000ED6  2  20 14 0A     	jsr set_bitmap
000ED9  2  60           	rts
000EDA  2               
000EDA  2               @cannot_move_up:
000EDA  2  A9 00        	lda #STATUS_WALKING_IDLE
000EDC  2  8D B5 10     	sta player0 + PLAYER::status
000EDF  2  60           	rts
000EE0  2               
000EE0  2               ;************************************************
000EE0  2               ; jump
000EE0  2               ;	A = delta X value
000EE0  2               ;
000EE0  2               jump:
000EE0  2  AE B5 10         ldx player0 + PLAYER::status
000EE3  2  E0 05        	cpx #STATUS_JUMPING
000EE5  2  F0 1A        	beq @return							; one trigger the first jump
000EE7  2  E0 04        	cpx #STATUS_FALLING
000EE9  2  F0 16        	beq @return							; one trigger the first jump
000EEB  2  E0 06        	cpx #STATUS_JUMPING_IDLE
000EED  2  F0 12        	beq @return						; cannot move when falling or jumping
000EEF  2               
000EEF  2  8D B8 10     	sta player0 + PLAYER::delta_x
000EF2  2               
000EF2  2  A9 0A        	lda #JUMP_LO_TICKS
000EF4  2  8D B6 10     	sta player0 + PLAYER::falling_ticks	; decrease  HI every 10 refresh
000EF7  2  A9 02        	lda #JUMP_HI_TICKS
000EF9  2  8D B7 10     	sta player0 + PLAYER::falling_ticks	+ 1
000EFC  2               
000EFC  2  A9 05 8D B5  	m_status STATUS_JUMPING
000F00  2  10           
000F01  2               @return:
000F01  2  60           	rts
000F02  2               
000F02  2               .endscope
000F02  2               
000F02  1               
000F02  1               ;-----------------------------------------------------------------------------
000F02  1               ;/////////////////////////////////////////////////////////////////////////////
000F02  1               ; main code
000F02  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
000F02  1               ;-----------------------------------------------------------------------------
000F02  1               
000F02  1               start:
000F02  1               	; 320x240
000F02  1  A9 40        	lda #64
000F04  1  8D 2A 9F     	sta veradchscale
000F07  1  8D 2B 9F     	sta veradcvscale
000F0A  1               
000F0A  1               	; activate layer0
000F0A  1  A9 71        	lda #%01110001
000F0C  1               ;	and #(255-VERA_LAYER0)
000F0C  1               ;	ora #(VERA_LAYER1)             ; Read Video Register
000F0C  1  8D 29 9F     	sta veradcvideo             ; Store new value to Video Register
000F0F  1               
000F0F  1               	;---------------------------------
000F0F  1               	; load tiles file into vram
000F0F  1               	;---------------------------------
000F0F  1  A9 01 A2 08  	VLOAD_FILE fstile, (fstileend-fstile), VRAM_tiles
000F13  1  A0 00 20 BA  
000F17  1  FF A9 09 A2  
000F2A  1               
000F2A  1               	;---------------------------------
000F2A  1               	; load tilemaps into vram
000F2A  1               	;---------------------------------
000F2A  1               setlayer0:
000F2A  1  AD 2D 9F 29  	VCONFIG_TILES 0,VERA_CONFIG_32x32
000F2E  1  0F 09 00 8D  
000F32  1  2D 9F        
000F34  1  AD 2D 9F 29  	VCONFIG_DEPTH 0,VERA_CONFIG_8BPP
000F38  1  0F 09 03 8D  
000F3C  1  2D 9F        
000F3E  1  A9 00 8D 2E  	VMAPBASE 0, VRAM_layer0_map
000F42  1  9F           
000F43  1  AD 2F 9F 29  	VTILEBASE 0, VRAM_tiles
000F47  1  03 09 08 8D  
000F4B  1  2F 9F        
000F4D  1  AD 2F 9F 29  	VTILEMODE 0,VERA_TILE_16x16
000F51  1  FC 09 03 8D  
000F55  1  2F 9F        
000F57  1  A9 01 A2 08  	VLOAD_FILE fsbackground, (fsbackground_end-fsbackground), VRAM_layer0_map
000F5B  1  A0 00 20 BA  
000F5F  1  FF A9 0B A2  
000F72  1               
000F72  1               setlayer1:
000F72  1  AD 34 9F 29  	VCONFIG_TILES 1,VERA_CONFIG_32x32
000F76  1  0F 09 00 8D  
000F7A  1  34 9F        
000F7C  1  AD 34 9F 29  	VCONFIG_DEPTH 1,VERA_CONFIG_8BPP
000F80  1  0F 09 03 8D  
000F84  1  34 9F        
000F86  1  A9 04 8D 35  	VMAPBASE 1, VRAM_layer1_map
000F8A  1  9F           
000F8B  1  AD 36 9F 29  	VTILEBASE 1, VRAM_tiles
000F8F  1  03 09 08 8D  
000F93  1  36 9F        
000F95  1  AD 36 9F 29  	VTILEMODE 1,VERA_TILE_16x16
000F99  1  FC 09 03 8D  
000F9D  1  36 9F        
000F9F  1  A9 01 A2 08  	VLOAD_FILE fslevel, (fslevel_end-fslevel), VRAM_layer1_map
000FA3  1  A0 00 20 BA  
000FA7  1  FF A9 09 A2  
000FBA  1               
000FBA  1               	;---------------------------------
000FBA  1               	; load collisionmap into ram
000FBA  1               	;---------------------------------
000FBA  1  A9 00        	lda #0
000FBC  1  85 00        	sta $00
000FBE  1  A9 01 A2 08  	LOAD_FILE fscollision, (fscollision_end-fscollision), HIMEM
000FC2  1  A0 00 20 BA  
000FC6  1  FF A9 0D A2  
000FD9  1               
000FD9  1               	;---------------------------------
000FD9  1               	; load sprite 0,1,2 into vram
000FD9  1               	;---------------------------------
000FD9  1               load_sprites:
000FD9  1               	; prepare VERA sprites
000FD9  1  20 9A 08     	jsr Sprite::init_addr_table
000FDC  1               
000FDC  1  A9 00 85 02  	LOAD_r0 (VRAM_tiles + tiles * tile_size)	; base for the sprites
000FE0  1  A9 38 85 03  
000FE4  1  20 5A 09     	jsr Player::init
000FE7  1               
000FE7  1               setirq:
000FE7  1                  ; backup default RAM IRQ vector
000FE7  1  AD 14 03        lda IRQVec
000FEA  1  8D B1 10        sta default_irq_vector
000FED  1  AD 15 03        lda IRQVec+1
000FF0  1  8D B2 10        sta default_irq_vector+1
000FF3  1               
000FF3  1                  ; overwrite RAM IRQ vector with custom handler address
000FF3  1  78              sei ; disable IRQ while vector is changing
000FF4  1  A9 08           lda #<custom_irq_handler
000FF6  1  8D 14 03        sta IRQVec
000FF9  1  A9 10           lda #>custom_irq_handler
000FFB  1  8D 15 03        sta IRQVec+1
000FFE  1  A9 01           lda #VERA_VSYNC_BIT ; make VERA only generate VSYNC IRQs
001000  1  8D 26 9F        sta veraien
001003  1  58              cli ; enable IRQ now that vector is properly set
001004  1               
001004  1               mainloop:
001004  1  CB           	wai
001005  1               	; do nothing in main loop, just let ISR do everything
001005  1  80 FD        	bra mainloop
001007  1               
001007  1  60           	rts
001008  1               
001008  1               ;-----------------------------------------------------------------------------
001008  1               ;/////////////////////////////////////////////////////////////////////////////
001008  1               ; deal with IRQ"s
001008  1               ;\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
001008  1               ;-----------------------------------------------------------------------------
001008  1               custom_irq_handler:
001008  1  AD 27 9F        lda veraisr
00100B  1  29 01           and #VERA_VSYNC_BIT
00100D  1  F0 25           beq @continue 	; non-VSYNC IRQ, no tick update
00100F  1               
00100F  1               	;---------------------------------
00100F  1               	; animate sprite
00100F  1               	;---------------------------------
00100F  1  20 AD 0B     	jsr Player::animate
001012  1               
001012  1               	;---------------------------------
001012  1               	; player physics
001012  1               	;---------------------------------
001012  1  20 5C 0C     	jsr Player::physics
001015  1               
001015  1               	;---------------------------------
001015  1               	; check keyboard
001015  1               	;---------------------------------
001015  1               @check_keyboard:
001015  1  A9 00        	lda #0
001017  1  20 56 FF     	jsr joystick_get
00101A  1  8D B3 10     	sta joystick
00101D  1               
00101D  1               ;  .A, byte 0:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
00101D  1               ;              NES  | A | B |SEL|STA|UP |DN |LT |RT |
00101D  1               ;              SNES | B | Y |SEL|STA|UP |DN |LT |RT |
00101D  1               ;
00101D  1               ;  .X, byte 1:      | 7 | 6 | 5 | 4 | 3 | 2 | 1 | 0 |
00101D  1               ;              NES  | 0 | 0 | 0 | 0 | 0 | 0 | 0 | X |
00101D  1               ;              SNES | A | X | L | R | 1 | 1 | 1 | 1 |
00101D  1               ;  .Y, byte 2:
00101D  1               ;              $00 = joystick present
00101D  1               ;              $FF = joystick not present
00101D  1  89 01        	bit #JOY_RIGHT
00101F  1  F0 26        	beq @joystick_right
001021  1  89 02        	bit #JOY_LEFT
001023  1  F0 12        	beq @joystick_left
001025  1  89 04        	bit #JOY_DOWN
001027  1  F0 33        	beq @movedown
001029  1  89 08        	bit #JOY_UP
00102B  1  F0 2A        	beq @moveup
00102D  1  89 80        	bit #JOY_B
00102F  1  F0 30        	beq @jump
001031  1               
001031  1  20 43 0C     	jsr Player::set_idle
001034  1               
001034  1               @continue:
001034  1                  ; continue to default IRQ handler
001034  1  6C B1 10        jmp (default_irq_vector)
001037  1                  ; RTI will happen after jump
001037  1               
001037  1               @joystick_left:
001037  1  89 80        	bit #JOY_B
001039  1  D0 07        	bne @moveleft
00103B  1  A9 FF        	lda #$ff					; jump left
00103D  1  20 E0 0E     	jsr Player::jump
001040  1  80 F2        	bra @continue
001042  1               @moveleft:
001042  1  20 19 0E     	jsr Player::move_left
001045  1  80 ED        	bra @continue
001047  1               
001047  1               @joystick_right:
001047  1  89 80        	bit #JOY_B
001049  1  D0 07        	bne @moveright
00104B  1  A9 01        	lda #1						; jump right
00104D  1  20 E0 0E     	jsr Player::jump
001050  1  80 E2        	bra @continue
001052  1               @moveright:
001052  1  20 CF 0D     	jsr Player::move_right
001055  1  80 DD        	bra @continue
001057  1               
001057  1               @moveup:
001057  1  20 94 0E     	jsr Player::move_up
00105A  1  80 D8        	bra @continue
00105C  1               
00105C  1               @movedown:
00105C  1  20 63 0E     	jsr Player::move_down
00105F  1  80 D3        	bra @continue
001061  1               
001061  1               @jump:
001061  1  89 01        	bit #JOY_RIGHT
001063  1  F0 E2        	beq @joystick_right
001065  1  A9 01        	lda #$01
001067  1  80 0A        	bra @jm
001069  1  89 02        	bit #JOY_LEFT
00106B  1  F0 CA        	beq @joystick_left
00106D  1  A9 FF        	lda #$ff
00106F  1  80 02        	bra @jm
001071  1  A9 00        	lda #0				; jump up
001073  1               @jm:
001073  1  20 E0 0E     	jsr Player::jump
001076  1  80 BC        	bra @continue
001078  1               
001078  1               .segment "DATA"
001078  1               .include "tilemap.inc"
001078  2               map:
001078  2  20 20        	.byte 32,32
00107A  2  6C 65 76 65  fslevel: .literal "level.bin"
00107E  2  6C 2E 62 69  
001082  2  6E           
001083  2               fslevel_end:
001083  2  73 63 65 6E  fsbackground: .literal "scenery.bin"
001087  2  65 72 79 2E  
00108B  2  62 69 6E     
00108E  2               fsbackground_end:
00108E  2  63 6F 6C 6C  fscollision: .literal "collision.bin"
001092  2  69 73 69 6F  
001096  2  6E 2E 62 69  
00109B  2               fscollision_end:
00109B  2               tileset:
00109B  2  10 10        	.byte 16,16
00109D  2               tiles = 40
00109D  2               tile_size = 256
00109D  2  74 69 6C 65  fstile: .literal "tiles.bin"
0010A1  2  73 2E 62 69  
0010A5  2  6E           
0010A6  2               fstileend:
0010A6  2               
0010A6  1               .include "sprite.inc"
0010A6  2  73 70 72 69  fssprite:	.literal "sprites.bin"
0010AA  2  74 65 73 2E  
0010AE  2  62 69 6E     
0010B1  2               fsspriteend:
0010B1  2               sprites = 9
0010B1  2               sprite_size = 1024
0010B1  2               
0010B1  1               
0010B1  1  00 00        default_irq_vector: .addr 0
0010B3  1               
0010B3  1               .segment "BSS"
0010B3  1  xx           joystick: .res 1
0010B4  1  xx xx xx xx  player0: .tag PLAYER
0010B8  1  xx xx xx xx  
0010BC  1  xx xx xx xx  
0010DA  1  xx xx xx xx  sprites_table: .res 256		; VERA memory of each of the 256 sprites
0010DE  1  xx xx xx xx  
0010E2  1  xx xx xx xx  
0010DA  1               
